{"version":3,"sources":["data/FullTableData.js","components/cryptX/tables/React/AllHoldingsTable.js","components/cryptX/charts/chart/HoldingsQtyPieDonutChart.js","components/cryptX/charts/chart/HoldingsValPieDonutChart.js","components/cryptX/cards/BitcoinWalletVal.js","components/cryptX/cards/EthereumWalletVal.js","components/cryptX/cards/TotalWalletVal.js","views/cryptX/Portfolio/Holdings/index.js"],"names":["Header","columns","accessor","Cell","value","toUpperCase","Intl","NumberFormat","style","currency","format","toFixed","secretKey","CONFIG","binance","apiKey","require","options","APIKEY","APISECRET","TableFull","data","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","useState","firstPageRows","striped","bordered","hover","responsive","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","className","row","i","getRowProps","cells","cell","getCellProps","useServerTime","recvWindow","verbose","log","console","App","React","useMemo","search","setSearch","holdings","setHoldings","getHoldings","a","prices","ticker","balance","error","balances","holding","symbol","useEffect","interval","setInterval","clearInterval","newData","prop","push","available","onOrder","marketPrice","marketValue","objectParse","filter","toLowerCase","includes","Fragment","Row","Col","Card","Title","as","Body","InputGroup","size","Prepend","Text","id","FormControl","onChange","e","target","aria-label","aria-describedby","HoldingsQtyPieDonutChart","futuresPrices","info","pieData","parseFloat","createPieData","width","height","chartType","loader","title","pieHole","colors","rootProps","HoldingsValPieDonutChart","formatter","BitcoinWalletValCard","bitcoinPrice","setBitcoinPrice","EthereumWalletValCard","EthereumVal","setEthereumVal","TotalWalletValCard","TotalWalletVal","setTotalWalletVal","totalWalletValuation","Holdings","xl","md","BitcoinWalletVal","EthereumWalletVal"],"mappings":"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","file":"static/js/150.ac477acb.chunk.js","sourcesContent":["const Header = [\r\n    {\r\n      Header: 'Security Information',\r\n      columns: [\r\n        {\r\n          Header: '#',\r\n          accessor: 'market_cap_rank',\r\n        },\r\n        {\r\n          Header: 'Name',\r\n          accessor: 'name',\r\n        },\r\n        {\r\n          Header: 'Symbol',\r\n          accessor: 'symbol',\r\n          Cell: ({ value }) => value.toUpperCase(),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      Header: 'Market Pricing Info',\r\n      columns: [\r\n        {\r\n          Header: 'Current Price',\r\n          accessor: 'current_price',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        },\r\n        {\r\n          Header: '24h Price Change',\r\n          accessor: 'price_change_24h',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        },\r\n        {\r\n          Header: '24h Price Change (%)',\r\n          accessor: 'price_change_percentage_24h',\r\n          Cell: ({ value }) => value.toFixed(2) + '%',\r\n        },\r\n        {\r\n          Header: 'All Time High (ATH)',\r\n          accessor: 'ath',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        },\r\n        {\r\n          Header: 'Change From ATH',\r\n          accessor: 'ath_change_percentage',\r\n          Cell: ({ value }) => value.toFixed(2) + '%',\r\n        },\r\n        {\r\n          Header: 'Market Capitalization',\r\n          accessor: 'market_cap',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        }\r\n      ],\r\n    },\r\n  ]\r\n\r\nexport default Header","//IMPORTS\r\n//Module Imports\r\nimport React, {useState, useEffect } from 'react';\r\nimport {Row, Col, Card, Table, Tab, Nav, Form, InputGroup, FormControl } from 'react-bootstrap';\r\nimport BTable from 'react-bootstrap/Table';\r\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\r\nimport axios from 'axios';\r\nimport { CONFIG } from '../../../../config/constant';\r\nimport dataTable from '../../../../data/FullTableData';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n  let newData = [];\r\n  for (const prop in data) {\r\n    newData.push({\r\n      symbol: prop,\r\n      available: data[prop].available,\r\n      onOrder: data[prop].onOrder,\r\n      marketPrice: data[prop].marketPrice,\r\n      marketValue: (data[prop].marketPrice * data[prop].available),\r\n    })\r\n  };\r\n  return newData;\r\n}\r\n\r\n//Table Component\r\nfunction TableFull({ columns, data }) {\r\n    const {\r\n          getTableProps, \r\n          getTableBodyProps, \r\n          headerGroups, \r\n          rows, \r\n          prepareRow, \r\n          setFilter\r\n        } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n      },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n\r\n    const [ filterInput, setFilterInput ] = useState(\"\");\r\n\r\n    const handleFilterChange = e => {\r\n        const value = e.target.value || undefined;\r\n        setFilter(\"name\", value);\r\n        setFilterInput(value);\r\n    };\r\n  \r\n    // We don't want to render all 2000 rows for this example, so cap\r\n    // it at 20 for this use case\r\n    const firstPageRows = rows\r\n\r\n    return (\r\n      <>\r\n        <BTable striped bordered hover responsive {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  // Add the sorting props to control sorting. For this example\r\n                  // we can add them into the header props\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {column.render('Header')}\r\n                    {/* Add a sort direction indicator */}\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? <span className='feather icon-arrow-down text-muted float-right mt-1' />\r\n                          : <span className='feather icon-arrow-up text-muted float-right mt-1' />\r\n                        : ''}\r\n                    </span>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {firstPageRows.map(\r\n              (row, i) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map(cell => {\r\n                      return (\r\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                      )\r\n                    })}\r\n                  </tr>\r\n                )}\r\n            )}\r\n          </tbody>\r\n        </BTable>\r\n      </>\r\n    )\r\n}\r\n  \r\nfunction App() {\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Security Information',\r\n        columns: [\r\n          {\r\n            Header: 'Symbol',\r\n            accessor: 'symbol',\r\n          },\r\n          {\r\n            Header: 'Quantity Held',\r\n            accessor: 'available',\r\n          },\r\n          {\r\n            Header: 'Quantity On Order',\r\n            accessor: 'onOrder',\r\n          },\r\n          {\r\n            Header: 'Market Price',\r\n            accessor: 'marketPrice',\r\n            Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n            {\r\n              style: 'currency',\r\n              currency: 'USD'\r\n            }\r\n            ).format( value ),\r\n          },\r\n          {\r\n            Header: 'Market Value',\r\n            accessor: 'marketValue',\r\n            Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n            {\r\n              style: 'currency',\r\n              currency: 'USD'\r\n            }\r\n            ).format( value ),\r\n          },\r\n        ],\r\n      }, \r\n    ],\r\n    []\r\n  )\r\n\r\n  const [ search, setSearch ] = useState('');\r\n  const [ holdings, setHoldings ] = useState('');\r\n  \r\n\r\n  const getHoldings = async () => {\r\n    //Binance API\r\n    let ticker = await binance.prices();\r\n    // console.log(\"TICKER LIST\", ticker);\r\n    await binance.useServerTime();\r\n    binance.balance((error, balances) => {\r\n      if ( error ) return console.error(error);\r\n      for (const holding in balances) {\r\n        if (balances[holding]['available'] > -10) {\r\n          const symbol = holding + \"BUSD\";\r\n          balances[holding]['marketPrice'] = ticker[symbol];\r\n        }\r\n      };\r\n      setHoldings(balances)\r\n      return ticker;\r\n    });\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n      getHoldings()\r\n\r\n      const interval=setInterval(() => {\r\n          getHoldings()\r\n      }, 10000)\r\n\r\n      return() => clearInterval(\r\n          interval\r\n          )\r\n      }, []\r\n  );\r\n\r\n  const handleChange = e => {\r\n    setSearch(e.target.value)\r\n  }\r\n\r\n  const dataOne = objectParse(holdings);\r\n\r\n  const filteredHoldings = dataOne.filter(holding => \r\n    holding.symbol.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n  const filteredHoldingsTwo = filteredHoldings.filter(holding => \r\n    holding.available > 0);\r\n\r\n  const data = filteredHoldingsTwo;\r\n\r\n  return (\r\n      <React.Fragment>\r\n        <Row>\r\n            <Col>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Card.Title as=\"h5\">Cryptocurrencies</Card.Title>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <InputGroup size=\"sm\" className=\"mb-3\">\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"inputGroup-sizing-sm\">Filter</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl onChange={handleChange} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\r\n                            </InputGroup>\r\n                        <TableFull columns={columns} data={data} />\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n  )\r\n}\r\n  \r\nexport default App\r\n  ","import React, { useState, useEffect } from 'react';\r\nimport { CONFIG } from '../../../../config/constant';\r\nimport Chart from 'react-google-charts';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Create Data for Pie Chart from data set\r\nfunction createPieData(data) {\r\n    const pieData = [\r\n        ['Symbol', 'Quantity']\r\n    ];\r\n\r\n    for (const holding in data) {\r\n        pieData.push([\r\n            data[holding]['symbol'],\r\n            parseFloat(data[holding]['available'])\r\n        ]);\r\n        console.log(pieData);\r\n    };\r\n\r\n    return pieData;\r\n}\r\n\r\nconst HoldingsQtyPieDonutChart = () => {\r\n\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        console.info( await binance.futuresPrices() );\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n            }\r\n          };\r\n          console.log(\"Final Balances\", balances);\r\n    \r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const filteredHoldingsTwo = dataOne.filter(holding => \r\n        holding.available > 0\r\n    );\r\n\r\n    const data = createPieData(filteredHoldingsTwo);\r\n\r\n    return <Chart\r\n        width='100%'\r\n        height='300px'\r\n        chartType=\"PieChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={data}\r\n        // data={[\r\n        //     ['Task', 'Hours per Day'],\r\n        //     ['Work', 11],\r\n        //     ['Eat', 2],\r\n        //     ['Commute', 2],\r\n        //     ['Watch TV', 2],\r\n        //     ['Sleep', 7],\r\n        // ]}\r\n        options={{\r\n            title: 'by Quantity',\r\n            pieHole: 0.4,\r\n            colors: ['#1dc4e9', '#1de9b6', '#3ebfea', '#A389D4', '#899FD4']\r\n        }}\r\n        rootProps={{ 'data-testid': '3' }}\r\n    />;\r\n}\r\n\r\nexport default HoldingsQtyPieDonutChart;","import React, { useState, useEffect } from 'react';\r\nimport { CONFIG } from '../../../../config/constant';\r\nimport Chart from 'react-google-charts';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Create Data for Pie Chart from data set\r\nfunction createPieData(data) {\r\n    const pieData = [\r\n        ['Symbol', 'Valuation']\r\n    ];\r\n\r\n    for (const holding in data) {\r\n        pieData.push([\r\n            data[holding]['symbol'],\r\n            parseFloat(data[holding]['marketValue'])\r\n        ]);\r\n        console.log(pieData);\r\n    };\r\n\r\n    return pieData;\r\n}\r\n\r\nconst HoldingsValPieDonutChart = () => {\r\n\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        console.info( await binance.futuresPrices() );\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n            }\r\n          };\r\n          console.log(\"Final Balances\", balances);\r\n    \r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const filteredHoldingsTwo = dataOne.filter(holding => \r\n        holding.available > 0\r\n    );\r\n\r\n    const data = createPieData(filteredHoldingsTwo);\r\n\r\n    return <Chart\r\n        width='100%'\r\n        height='300px'\r\n        chartType=\"PieChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={data}\r\n        // data={[\r\n        //     ['Task', 'Hours per Day'],\r\n        //     ['Work', 11],\r\n        //     ['Eat', 2],\r\n        //     ['Commute', 2],\r\n        //     ['Watch TV', 2],\r\n        //     ['Sleep', 7],\r\n        // ]}\r\n        options={{\r\n            title: 'by Valuation',\r\n            pieHole: 0.4,\r\n            colors: ['#1dc4e9', '#1de9b6', '#3ebfea', '#A389D4', '#899FD4']\r\n        }}\r\n        rootProps={{ 'data-testid': '3' }}\r\n    />;\r\n}\r\n\r\nexport default HoldingsValPieDonutChart;","import React, { useState, useEffect } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { CONFIG } from '../../../config/constant';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Currency Formatter\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  \r\n    // These options are needed to round to whole numbers if that's what you want.\r\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n});\r\n  \r\n  \r\nconst BitcoinWalletValCard = () => {\r\n    const [ bitcoinPrice, setBitcoinPrice ] = useState('');\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n              if (holding === \"BTC\") {\r\n                  setBitcoinPrice(\r\n                      formatter.format(balances[holding]['marketPrice'] * balances[holding]['available'])\r\n                    )\r\n              };\r\n            };\r\n            \r\n          };\r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const data = dataOne;\r\n\r\n    console.log('Bitcoin Price: ' + bitcoinPrice);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className='theme-bg bitcoin-wallet'>\r\n                <Card.Body>\r\n                    <h5 className=\"text-white mb-2\">Bitcoin Wallet</h5>\r\n                    <h2 className=\"text-white mb-3 f-w-300\">{bitcoinPrice}</h2>\r\n                    <span className=\"text-white d-block\">Pricing by Binance</span>\r\n                    <i className=\"fab fa-bitcoin f-70 text-white\"/>\r\n                </Card.Body>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default BitcoinWalletValCard;","import React, { useState, useEffect } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { CONFIG } from '../../../config/constant';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Currency Formatter\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  \r\n    // These options are needed to round to whole numbers if that's what you want.\r\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n});\r\n  \r\n  \r\nconst EthereumWalletValCard = () => {\r\n    const [ EthereumVal, setEthereumVal ] = useState('');\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n              if (holding === \"ETH\") {\r\n                  setEthereumVal(\r\n                      formatter.format(balances[holding]['marketPrice'] * balances[holding]['available'])\r\n                    )\r\n              };\r\n            };\r\n            \r\n          };\r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const data = dataOne;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className='theme-bg2 bitcoin-wallet'>\r\n                <Card.Body>\r\n                    <h5 className=\"text-white mb-2\">Ethereum Wallet</h5>\r\n                    <h2 className=\"text-white mb-3 f-w-300\">{EthereumVal}</h2>\r\n                    <span className=\"text-white d-block\">Pricing by Binance</span>\r\n                    <i className=\"fab fa-bitcoin f-70 text-white\"/>\r\n                </Card.Body>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default EthereumWalletValCard;","import React, { useState, useEffect } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { CONFIG } from '../../../config/constant';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Currency Formatter\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  \r\n    // These options are needed to round to whole numbers if that's what you want.\r\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n});\r\n  \r\n  \r\nconst TotalWalletValCard = () => {\r\n    const [ TotalWalletVal, setTotalWalletVal ] = useState('');\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          let totalWalletValuation = 0;\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n              if (holding === \"ETH\") {\r\n                  setTotalWalletVal(\r\n                      formatter.format(balances[holding]['marketPrice'] * balances[holding]['available'])\r\n                    )\r\n              };\r\n            };\r\n            if (balances[holding]['available'] > 0) {\r\n                totalWalletValuation += (balances[holding]['marketPrice'] * balances[holding]['available']);\r\n            }\r\n            console.log('Total Wallet Val: ' + totalWalletValuation)\r\n          };\r\n          setTotalWalletVal(\r\n              formatter.format(totalWalletValuation)\r\n            );\r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const data = dataOne;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className='bg-c-blue bitcoin-wallet'>\r\n                <Card.Body>\r\n                    <h5 className=\"text-white mb-2\">Total Wallet</h5>\r\n                    <h2 className=\"text-white mb-3 f-w-300\">{TotalWalletVal}</h2>\r\n                    <span className=\"text-white d-block\">Pricing by Binance</span>\r\n                    <i className=\"fab fa-bitcoin f-70 text-white\"/>\r\n                </Card.Body>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TotalWalletValCard;","import React from 'react';\r\nimport {Row, Col, Card} from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport FullTable from '../../../../components/cryptX/tables/React/AllHoldingsTable.js';\r\nimport HoldingsQtyPieDonutChart from \"../../../../components/cryptX/charts/chart/HoldingsQtyPieDonutChart.js\";\r\nimport HoldingsValPieDonutChart from \"../../../../components/cryptX/charts/chart/HoldingsValPieDonutChart.js\";\r\nimport BitcoinWalletValCard from \"../../../../components/cryptX/cards/BitcoinWalletVal.js\"\r\nimport EthereumWalletValCard from \"../../../../components/cryptX/cards/EthereumWalletVal.js\"\r\nimport TotalWalletValCard from \"../../../../components/cryptX/cards/TotalWalletVal.js\"\r\n\r\nconst Holdings = () => {\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col xl={4} md={6} >\r\n                    <BitcoinWalletValCard></BitcoinWalletValCard>\r\n                </Col>\r\n                <Col md={6} xl={4}>\r\n                    <EthereumWalletValCard></EthereumWalletValCard>\r\n                </Col>\r\n                <Col md={12} xl={4}>\r\n                    <TotalWalletValCard></TotalWalletValCard>\r\n                </Col>\r\n                <Col xl={6} md={10} >\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Portfolio Composition</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <HoldingsQtyPieDonutChart></HoldingsQtyPieDonutChart>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col xl={6} md={10} >\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Portfolio Composition</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <HoldingsValPieDonutChart></HoldingsValPieDonutChart>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col xl={12} md={10} >\r\n                    <FullTable></FullTable>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Holdings;\r\n"],"sourceRoot":""}