{"version":3,"sources":["views/cryptX/Portfolio/Holdings/index.js"],"names":["console","log","secretKey","CONFIG","binance","apiKey","require","options","APIKEY","APISECRET","useServerTime","recvWindow","verbose","Holdings","prices","error","ticker","info","BNBBTC","useState","getHoldings","a","BNBUSDT","BTCUSDT","balance","balances","ETH","available","useEffect","interval","setInterval","clearInterval","Fragment","xl","md","className","Header","Title","as","Body","size","Prepend","Text","id","aria-label","aria-describedby","response","hover"],"mappings":"ySAQAA,QAAQC,IAAI,SAEZ,IAAMC,EAAYC,IAAOC,QAAQF,UAC3BG,EAASF,IAAOC,QAAQC,OAExBD,GAAU,IADAE,EAAQ,QACMC,QAAQ,CAClCC,OAAQH,EACRI,UAAWP,IAGfE,EAAQG,QAAQ,CACZC,OAAQL,IAAOC,QAAQF,UACvBO,UAAWN,IAAOC,QAAQC,OAC1BK,eAAe,EACfC,WAAY,IACZC,SAAS,EACTX,IAAK,SAAAA,GACHD,QAAQC,IAAIA,MA+EHY,UAvEE,WACbT,EAAQU,OAAO,UAAU,SAACC,EAAOC,GAC7BhB,QAAQiB,KAAK,iBAAkBD,EAAOE,WAFvB,MAKaC,mBAAS,IALtB,mBAObC,GAPa,UAOF,uCAAG,4BAAAC,EAAA,sEAGGjB,EAAQU,SAHX,cAGZE,EAHY,OAIhBhB,QAAQiB,KAAR,wBAA8BD,EAAOM,UACrCtB,QAAQC,IAAI,qBAAuBe,EAAOO,SAL1B,SAOVnB,EAAQM,gBAPE,OAQhBN,EAAQoB,SAAQ,SAACT,EAAOU,GACpB,GAAKV,EAAQ,OAAOf,QAAQe,MAAMA,GAClCf,QAAQiB,KAAK,aAAcQ,GAC3BzB,QAAQiB,KAAK,gBAAiBQ,EAASC,IAAIC,cAX/B,2CAAH,sDA2BjB,OAZAC,qBAAU,WACNR,IAEA,IAAMS,EAASC,aAAY,WACvBV,MACD,KAEH,OAAM,kBAAMW,cACRF,MACA,IAIJ,cAAC,IAAMG,SAAP,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACI,eAAC,IAAD,CAAMC,UAAU,aAAhB,UACI,cAAC,IAAKC,OAAN,UACI,cAAC,IAAKC,MAAN,CAAYC,GAAG,KAAf,kCAEJ,eAAC,IAAKC,KAAN,CAAWJ,UAAU,OAArB,UACI,eAAC,IAAD,CAAYK,KAAK,KAAKL,UAAU,OAAhC,UACI,cAAC,IAAWM,QAAZ,UACI,cAAC,IAAWC,KAAZ,CAAiBC,GAAG,uBAApB,sBAEJ,cAAC,IAAD,CAAaC,aAAW,QAAQC,mBAAiB,6BAErD,eAAC,IAAD,CAAOC,UAAQ,EAACC,OAAK,EAArB,UACI,gCACI,+BACI,8CACA,oDAGR,gCACI,+BACI,4CACA","file":"static/js/173.6b44258c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Card, Table, Tab, Nav, Form, InputGroup, FormControl } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { CONFIG } from '../../../../config/constant';\r\n\r\nconsole.log('HELLO');\r\n\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n    APIKEY: apiKey,\r\n    APISECRET: secretKey\r\n});\r\n\r\nbinance.options({\r\n    APIKEY: CONFIG.binance.secretKey,\r\n    APISECRET: CONFIG.binance.apiKey,\r\n    useServerTime: true,\r\n    recvWindow: 60000, // Set a higher recvWindow to increase response timeout\r\n    verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n    log: log => {\r\n      console.log(log); // You can create your own logger here, or disable console output\r\n    }\r\n});\r\n\r\nconst baseURL = \"https://api.binance.com\";\r\nconst query = '/api/v3/time';\r\nconst url = baseURL + query;\r\n\r\nconst Holdings = () => {\r\n    binance.prices('BNBBTC', (error, ticker) => {\r\n        console.info(\"Price of BNB: \", ticker.BNBBTC);\r\n    });\r\n\r\n    const [holdings, setHoldings] = useState([]);\r\n\r\n    const getHoldings = async () => {\r\n        \r\n\r\n        let ticker = await binance.prices();\r\n        console.info(`Price of BNB: ${ticker.BNBUSDT}`);\r\n        console.log('price of Bitcoin: ' + ticker.BTCUSDT);\r\n\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n            if ( error ) return console.error(error);\r\n            console.info(\"balances()\", balances);\r\n            console.info(\"ETH balance: \", balances.ETH.available);\r\n          });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n\r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 1000)\r\n\r\n        return() => clearInterval(\r\n            interval\r\n        )}, []\r\n    );\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col xl={12} md={6}>\r\n                    <Card className='code-table'>\r\n                        <Card.Header>\r\n                            <Card.Title as='h5'>Portfolio Holdings</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body className='pb-0'>\r\n                            <InputGroup size=\"sm\" className=\"mb-3\">\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"inputGroup-sizing-sm\">Filter</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl aria-label=\"Small\" aria-describedby=\"input-Group-sizing-sm\" />\r\n                            </InputGroup>\r\n                            <Table response hover>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>First Column</th>\r\n                                        <th>Second Column</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td>First Data</td>\r\n                                        <td>Second Data</td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </Table>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Holdings;"],"sourceRoot":""}