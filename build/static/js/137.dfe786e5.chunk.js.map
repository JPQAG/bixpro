{"version":3,"sources":["components/Card/MainCard.js","views/ui-elements/advance/AdvanceTour.js","components/Widgets/Statistic/Notification.js"],"names":["MainCard","props","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","isOption","title","children","cardClass","optionClass","useState","fullCard","setFullCard","collapseCard","setCollapseCard","loadCard","setloadCard","cardRemove","setCardRemove","windowSize","useWindowSize","mainCardClass","className","alignRight","Toggle","id","Menu","as","Item","onClick","to","setInterval","Header","Title","position","top","left","right","width","height","join","style","in","Body","Fragment","stepsTour","selector","content","stepsRide","placement","locale","skip","aria-label","target","AdvanceTour","isTourOpen","setIsTourOpen","run","setRun","steps","sm","message","link","isOpen","onRequestClose","callback","data","status","STATUS","FINISHED","SKIPPED","includes","continuous","scrollToFirstStep","showProgress","showSkipButton","styles","options","zIndex","Text","Notification","variant","Link","href"],"mappings":"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","file":"static/js/137.dfe786e5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Dropdown, Card, Collapse } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useWindowSize from \"../../hooks/useWindowSize\";\r\n\r\nconst MainCard = (props) => {\r\n    const { isOption, title, children, cardClass, optionClass } = props;\r\n    \r\n    const [fullCard, setFullCard] = useState(false);\r\n    const [collapseCard, setCollapseCard] = useState(false);\r\n    const [loadCard, setloadCard] = useState(false);\r\n    const [cardRemove, setCardRemove] = useState(false);\r\n\r\n    const windowSize = useWindowSize();\r\n\r\n    const cardReloadHandler = () => {\r\n        setloadCard(true);\r\n        setInterval(() => {\r\n            setloadCard(false);\r\n        }, 3000);\r\n    };\r\n\r\n    const cardRemoveHandler = () => {\r\n        setCardRemove(true);\r\n    };\r\n\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader;\r\n    let card = '';\r\n    let mainCardClass = [];\r\n\r\n    if (isOption) {\r\n        cardHeaderRight = (\r\n            <div className={\"card-header-right \" + optionClass}>\r\n                <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n                        <i className=\"feather icon-more-horizontal\"/>\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu as='ul' className=\"list-unstyled card-option\">\r\n                        <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => setFullCard(!fullCard)}>\r\n                            <i className={fullCard ? 'feather icon-minimize' : 'feather icon-maximize'}/>\r\n                            <Link to='#'> {fullCard ? 'Restore' : 'Maximize'} </Link>\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item as='li' className=\"dropdown-item\" onClick={() => setCollapseCard(!collapseCard)}>\r\n                            <i className={collapseCard ? 'feather icon-plus' : 'feather icon-minus'}/>\r\n                            <Link to='#'> {collapseCard ? 'Expand' : 'Collapse'} </Link>\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item as='li' className=\"dropdown-item\" onClick={cardReloadHandler}>\r\n                            <i className='feather icon-refresh-cw'/>\r\n                            <Link to='#'> Reload </Link>\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item as='li' className=\"dropdown-item\" onClick={cardRemoveHandler}>\r\n                            <i className='feather icon-trash'/>\r\n                            <Link to='#'> Remove </Link>\r\n                        </Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    cardHeader = (\r\n        <Card.Header>\r\n            <Card.Title as='h5'>{title}</Card.Title>\r\n            {cardHeaderRight}\r\n        </Card.Header>\r\n    );\r\n\r\n    if (fullCard) {\r\n        mainCardClass = [...mainCardClass, 'full-card'];\r\n        fullScreenStyle = {position: 'fixed', top: 0, left: 0, right: 0, width: windowSize.width, height: windowSize.height};\r\n    }\r\n\r\n    if (loadCard) {\r\n        mainCardClass = [...mainCardClass, 'card-load'];\r\n        loader = (\r\n            <div className=\"card-loader\">\r\n                <i className=\"pct-loader1 anim-rotate\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (cardRemove) {\r\n        mainCardClass = [...mainCardClass, 'd-none'];\r\n    }\r\n\r\n    if (cardClass) {\r\n        mainCardClass = [...mainCardClass, cardClass];\r\n    }\r\n\r\n    card = (\r\n        <Card className={mainCardClass.join(' ')} style={fullScreenStyle}>\r\n            {cardHeader}\r\n            <Collapse in={!collapseCard}>\r\n                <div>\r\n                    <Card.Body>\r\n                        {children}\r\n                    </Card.Body>\r\n                </div>\r\n            </Collapse>\r\n            {loader}\r\n        </Card>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {card}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default MainCard;","import React, { useState } from 'react';\r\nimport { Row, Col, Card, Button } from 'react-bootstrap';\r\nimport Tour from 'reactour';\r\nimport Joyride, { STATUS } from 'react-joyride';\r\nimport ModuleNotification from '../../../components/Widgets/Statistic/Notification';\r\n\r\nimport MainCard from \"../../../components/Card/MainCard\";\r\n\r\nconst stepsTour = [\r\n    {\r\n        selector: '.tour-1',\r\n        content: 'Click hear customize basic card layout',\r\n    },\r\n    {\r\n        selector: '.card-option',\r\n        content: 'Click hear open card options',\r\n    },\r\n    {\r\n        selector: '.displayChatbox',\r\n        content: 'Click chat open chat conversation',\r\n    },\r\n    {\r\n        selector: '.mobile-menu',\r\n        content: 'Click to see collapse menu layout',\r\n    },\r\n    {\r\n        selector: '.pcoded-menu-caption',\r\n        content: 'Menu caption',\r\n    }\r\n];\r\n\r\nconst stepsRide = [\r\n    {\r\n        content: <h5>Let's begin our journey!</h5>,\r\n        placement: 'center',\r\n        locale: { skip: <strong aria-label=\"skip\">S-K-I-P</strong> },\r\n        target: 'body',\r\n    },\r\n    {\r\n        target: '.tour-1',\r\n        content: 'Click hear customize basic card layout',\r\n        placement: 'top'\r\n    },\r\n    {\r\n        target: '.card-option',\r\n        content: 'Click hear open card options',\r\n    },\r\n    {\r\n        target: '.displayChatbox',\r\n        content: 'Click chat open chat conversation',\r\n    },\r\n    {\r\n        target: '.mobile-menu',\r\n        content: 'Click to see collapse menu layout',\r\n    },\r\n    {\r\n        target: '.pcoded-menu-caption',\r\n        content: 'Menu caption',\r\n    }\r\n];\r\n\r\nconst AdvanceTour = () => {\r\n    const [isTourOpen, setIsTourOpen] = useState(false);\r\n    const [run, setRun] = useState(false);\r\n    const [steps] = useState(stepsRide);\r\n\r\n    const handleJoyrideCallback = data => {\r\n        const { status } = data;\r\n\r\n        if ([STATUS.FINISHED, STATUS.SKIPPED].includes(status)) {\r\n            setRun(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col sm={12}>  \r\n                    <ModuleNotification message=\"For more info please check the components's official documentation\" link='https://www.npmjs.com/package/react-joyride' />\r\n                </Col>\r\n            </Row>\r\n            <Row className='btn-page'>\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Tour</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Button onClick={() => setIsTourOpen(true)}>Start Basic Tour</Button>\r\n                            <Button onClick={() => setRun(true)}>Joy Ride</Button>\r\n                            <Tour\r\n                                steps={stepsTour}\r\n                                isOpen={isTourOpen}\r\n                                onRequestClose={() => setIsTourOpen(false)} />\r\n                            <Joyride\r\n                                callback={handleJoyrideCallback}\r\n                                run={run}\r\n                                continuous\r\n                                scrollToFirstStep\r\n                                showProgress\r\n                                showSkipButton\r\n                                steps={steps}\r\n                                styles={{\r\n                                    options: {\r\n                                        zIndex: 10000,\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <MainCard isOption title=\"Hello tour\" cardClass=\"tour-1 card-test\" optionClass='card-option'>\r\n                        <h1>H1 Gradient Able</h1>\r\n                        <h2>H2 Gradient Able</h2>\r\n                        <h3>H3 Gradient Able</h3>\r\n                        <h4>H4 Gradient Able</h4>\r\n                        <h5>H5 Gradient Able</h5>\r\n                        <h6>H6 Gradient Able</h6>\r\n                        <Card.Text>Paragraph Gradient Able</Card.Text>\r\n                        <Card.Text>Paragraph Gradient Able</Card.Text>\r\n                    </MainCard>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AdvanceTour;","import React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nconst Notification = props => {\r\n    return (\r\n        <React.Fragment>\r\n            <Alert variant='warning'>\r\n                {props.message}\r\n                <Alert.Link href={props.link} target='_blank' className='float-right'>Demo & Documentation</Alert.Link>\r\n            </Alert>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Notification;"],"sourceRoot":""}