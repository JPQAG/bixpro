{"version":3,"sources":["assets/images/light-box/l1.jpg","views/extensions/ImageCropper.js","components/Widgets/Statistic/Notification.js"],"names":["ImageCropper","useState","defaultSrc","image","setImage","cropData","setCropData","cropper","setCropper","show","setShow","handleClose","Fragment","sm","message","link","Header","Body","className","type","onChange","e","files","preventDefault","dataTransfer","target","reader","FileReader","onload","result","readAsDataURL","onClick","style","height","width","initialAspectRatio","preview","src","viewMode","guides","minCropBoxHeight","minCropBoxWidth","background","responsive","autoCropArea","checkOrientation","onInitialized","instance","getCroppedCanvas","toDataURL","onHide","closeButton","Title","alt","Footer","variant","Notification","props","Link","href"],"mappings":"yIAAe,QAA0B,gC,iKCgH1BA,UAxGM,WAAO,IAAD,EACGC,mBAASC,KADZ,mBAChBC,EADgB,KACTC,EADS,OAESH,mBAAS,KAFlB,mBAEhBI,EAFgB,KAENC,EAFM,OAGOL,qBAHP,mBAGhBM,EAHgB,KAGPC,EAHO,OAKCP,oBAAS,GALV,mBAKhBQ,EALgB,KAKVC,EALU,KAOjBC,EAAc,kBAAMD,GAAQ,IAyBlC,OACI,eAAC,IAAME,SAAP,WACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAKC,GAAI,GAAT,SACI,cAAC,IAAD,CAAoBC,QAAQ,qEAAqEC,KAAK,oDAG9G,eAAC,IAAD,WACI,cAAC,IAAD,CAAKF,GAAI,GAAT,SACI,eAAC,IAAD,WACI,cAAC,IAAKG,OAAN,UACI,wDAEJ,eAAC,IAAKC,KAAN,WACI,eAAC,IAAD,CAAKC,UAAU,0BAAf,UACI,cAAC,IAAD,UACI,uBAAOC,KAAK,OAAOC,SArClC,SAACC,GAEd,IAAIC,EADJD,EAAEE,iBAEEF,EAAEG,aACNF,EAAQD,EAAEG,aAAaF,MACZD,EAAEI,SACbH,EAAQD,EAAEI,OAAOH,OAEjB,IAAMI,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WAChBxB,EAASsB,EAAOG,SAEhBH,EAAOI,cAAcR,EAAM,SA2BH,cAAC,IAAD,UACI,qBAAKJ,UAAU,cAAf,SACI,cAAC,IAAD,CAAQa,QAAS,kBAAM3B,EAASF,MAAhC,oCAIZ,cAAC,IAAD,UACI,cAAC,IAAD,CAAKW,GAAI,GAAIK,UAAU,OAAvB,SACI,cAAC,IAAD,CACIc,MAAO,CAAEC,OAAQ,IAAKC,MAAO,QAC7BC,mBAAoB,EACpBC,QAAQ,eACRC,IAAKlC,EACLmC,SAAU,EACVC,QAAQ,EACRC,iBAAkB,GAClBC,gBAAiB,GACjBC,YAAY,EACZC,YAAY,EACZC,aAAc,EACdC,kBAAkB,EAClBC,cAAe,SAACC,GACZvC,EAAWuC,kBAQvC,cAAC,IAAD,CAAKlC,GAAI,GAAT,SACI,cAAC,IAAD,CAAQkB,QAAS,WAtDN,qBAAZxB,GACXD,EAAYC,EAAQyC,mBAAmBC,aApBlBvC,GAAQ,IAyEjB,0BAKJ,eAAC,IAAD,CAAOD,KAAMA,EAAMyC,OAAQvC,EAA3B,UACI,cAAC,IAAMK,OAAP,CAAcmC,aAAW,EAAzB,SACI,cAAC,IAAMC,MAAP,6BAEJ,cAAC,IAAMnC,KAAP,UACI,qBAAKe,MAAO,CAAEE,MAAO,OAAQD,OAAQ,QAAUI,IAAKhC,EAAUgD,IAAI,cAEtE,cAAC,IAAMC,OAAP,UACI,cAAC,IAAD,CAAQC,QAAQ,YAAYxB,QAASpB,EAArC,gC,qECxFT6C,IAXM,SAAAC,GACjB,OACI,cAAC,IAAM7C,SAAP,UACI,eAAC,IAAD,CAAO2C,QAAQ,UAAf,UACKE,EAAM3C,QACP,cAAC,IAAM4C,KAAP,CAAYC,KAAMF,EAAM1C,KAAMU,OAAO,SAASP,UAAU,cAAxD","file":"static/js/143.928aba7f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/l1.b0d3fde5.jpg\";","import React, { useState } from 'react';\r\nimport { Row, Col, Card, Button, Modal } from 'react-bootstrap';\r\nimport Cropper from \"react-cropper\";\r\nimport ModuleNotification from '../../components/Widgets/Statistic/Notification';\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\nimport defaultSrc from \"../../assets/images/light-box/l1.jpg\";\r\n\r\nconst ImageCropper = () => {\r\n    const [image, setImage] = useState(defaultSrc);\r\n    const [cropData, setCropData] = useState(\"#\");\r\n    const [cropper, setCropper] = useState();\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    const onChange = (e) => {\r\n        e.preventDefault();\r\n        let files;\r\n        if (e.dataTransfer) {\r\n        files = e.dataTransfer.files;\r\n        } else if (e.target) {\r\n        files = e.target.files;\r\n        }\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n        setImage(reader.result);\r\n        };\r\n        reader.readAsDataURL(files[0]);\r\n    };\r\n\r\n    const getCropData = () => {\r\n        if (typeof cropper !== \"undefined\") {\r\n        setCropData(cropper.getCroppedCanvas().toDataURL());\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col sm={12}>  \r\n                    <ModuleNotification message=\"For more info please check the components's official documentation\" link='https://www.npmjs.com/package/react-cropper'  />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <h5>Image Cropper Plugin</h5>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row className='justify-content-between'>\r\n                                <Col>\r\n                                    <input type=\"file\" onChange={onChange} />\r\n                                </Col>\r\n                                <Col>\r\n                                    <div className='float-right'>\r\n                                        <Button onClick={() => setImage(defaultSrc)}>Use default img</Button>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col sm={12} className='mt-3'>\r\n                                    <Cropper\r\n                                        style={{ height: 400, width: \"100%\" }}\r\n                                        initialAspectRatio={1}\r\n                                        preview=\".img-preview\"\r\n                                        src={image}\r\n                                        viewMode={1}\r\n                                        guides={true}\r\n                                        minCropBoxHeight={10}\r\n                                        minCropBoxWidth={10}\r\n                                        background={false}\r\n                                        responsive={true}\r\n                                        autoCropArea={1}\r\n                                        checkOrientation={false} // https://github.com/fengyuanchen/cropperjs/issues/671\r\n                                        onInitialized={(instance) => {\r\n                                            setCropper(instance);\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col sm={12}>\r\n                    <Button onClick={() => {\r\n                        getCropData();\r\n                        handleShow();\r\n                    }}>Crop Image</Button>\r\n                </Col>\r\n                <Modal show={show} onHide={handleClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Croped Image</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <img style={{ width: \"100%\", height: \"auto\" }} src={cropData} alt=\"cropped\" />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ImageCropper;","import React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nconst Notification = props => {\r\n    return (\r\n        <React.Fragment>\r\n            <Alert variant='warning'>\r\n                {props.message}\r\n                <Alert.Link href={props.link} target='_blank' className='float-right'>Demo & Documentation</Alert.Link>\r\n            </Alert>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Notification;"],"sourceRoot":""}