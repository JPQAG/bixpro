{"version":3,"sources":["views/forms/form-validation/FieldLevelValidationForm.js","views/forms/form-validation/SyncValidationForm.js","views/forms/form-validation/SubmitValidationForm.js","views/forms/form-validation/AsyncValidationForm.js","views/forms/form-validation/showResults.js","views/forms/form-validation/CombinedValidations.js","views/forms/FormsValidation.js","components/Widgets/Statistic/Notification.js"],"names":["max","min","renderField","input","label","type","meta","touched","error","warning","Row","className","Col","sm","placeholder","reduxForm","form","validate","values","errors","username","length","email","test","age","isNaN","Number","warn","warnings","props","handleSubmit","pristine","reset","submitting","Card","Header","Title","as","Body","onSubmit","Field","name","component","Footer","Button","variant","disabled","onClick","required","value","undefined","maxLength15","minLength2","number","minValue13","minValue","tooYoung","aol","alphaNumeric","phoneNumber","submit","ms","Promise","resolve","setTimeout","then","includes","SubmissionError","_error","password","window","alert","JSON","stringify","Subtitle","asyncValidating","asyncValidate","asyncChangeFields","sleep","a","Schema","Yup","shape","isRequired","message","CombinedValidations","validationSchema","initialValues","render","setFieldValue","setFieldTouched","validateField","validateForm","htmlFor","FormsValidation","Fragment","link","md","showResults","Notification","Link","href","target"],"mappings":"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","file":"static/js/161.695fd45e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, Button, Row, Col } from 'react-bootstrap';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nconst required = value => (value || typeof value === 'number' ? undefined : 'Required')\r\nconst maxLength = max => value =>\r\n  value && value.length > max ? `Must be ${max} characters or less` : undefined\r\nconst maxLength15 = maxLength(15)\r\nexport const minLength = min => value =>\r\n  value && value.length < min ? `Must be ${min} characters or more` : undefined\r\nexport const minLength2 = minLength(2)\r\nconst number = value =>\r\n  value && isNaN(Number(value)) ? 'Must be a number' : undefined\r\nconst minValue = min => value =>\r\n  value && value < min ? `Must be at least ${min}` : undefined\r\nconst minValue13 = minValue(13)\r\nconst email = value =>\r\n  value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)\r\n    ? 'Invalid email address'\r\n    : undefined\r\nconst tooYoung = value =>\r\n  value && value < 13\r\n    ? 'You do not meet the minimum age requirement!'\r\n    : undefined\r\nconst aol = value =>\r\n  value && /.+@aol\\.com/.test(value)\r\n    ? 'Really? You still use AOL for your email?'\r\n    : undefined\r\nconst alphaNumeric = value =>\r\n  value && /[^a-zA-Z0-9 ]/i.test(value)\r\n    ? 'Only alphanumeric characters'\r\n    : undefined\r\nexport const phoneNumber = value =>\r\n  value && !/^(0|[1-9][0-9]{9})$/i.test(value)\r\n    ? 'Invalid phone number, must be 10 digits'\r\n    : undefined\r\n\r\nconst renderField = ({\r\n  input,\r\n  label,\r\n  type,\r\n  meta: { touched, error, warning }\r\n}) => (\r\n    <Row className='my-3'>\r\n    <Col sm={3}>\r\n        <label className='label-control'>{label}</label>\r\n    </Col>\r\n    <Col sm={9}>\r\n    <input {...input} placeholder={label} type={type} className='form-control' />\r\n    {touched &&\r\n        ((error && <span className='text-c-red'>* {error} </span>) ||\r\n        (warning && <span className='text-c-yellow'>{warning}</span>))}\r\n    </Col>\r\n</Row>\r\n)\r\n\r\nconst FieldLevelValidationForm = props => {\r\n  const { handleSubmit, pristine, reset, submitting } = props\r\n  return (\r\n    <Card>\r\n        <Card.Header>\r\n            <Card.Title as='h5'>Field-Level Validation</Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n            <form onSubmit={handleSubmit}>\r\n                <Field\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    component={renderField}\r\n                    label=\"Username\"\r\n                    validate={[required, maxLength15, minLength2]}\r\n                    warn={alphaNumeric}\r\n                />\r\n                <Field\r\n                    name=\"email\"\r\n                    type=\"email\"\r\n                    component={renderField}\r\n                    label=\"Email\"\r\n                    validate={email}\r\n                    warn={aol}\r\n                />\r\n                <Field\r\n                    name=\"age\"\r\n                    type=\"number\"\r\n                    component={renderField}\r\n                    label=\"Age\"\r\n                    validate={[required, number, minValue13]}\r\n                    warn={tooYoung}\r\n                />\r\n                <Field\r\n                    name=\"phone\"\r\n                    type=\"number\"\r\n                    component={renderField}\r\n                    label=\"Phone number\"\r\n                    validate={[required, phoneNumber]}\r\n                />\r\n            </form>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n        <Button variant='danger' type=\"button\" className='float-right' disabled={pristine || submitting} onClick={reset}>Clear Values</Button>\r\n            <Button type=\"submit\" className='mr-1 float-right' disabled={submitting}>Submit</Button>\r\n        </Card.Footer>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'fieldLevelValidation' // a unique identifier for this form\r\n})(FieldLevelValidationForm)","import React from 'react';\r\nimport { Card, Button, Row, Col } from 'react-bootstrap';\r\nimport { Field, reduxForm } from 'redux-form'\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n  if (!values.username) {\r\n    errors.username = 'Required'\r\n  } else if (values.username.length > 15) {\r\n    errors.username = 'Must be 15 characters or less'\r\n  }\r\n  if (!values.email) {\r\n    errors.email = 'Required'\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = 'Invalid email address'\r\n  }\r\n  if (!values.age) {\r\n    errors.age = 'Required'\r\n  } else if (isNaN(Number(values.age))) {\r\n    errors.age = 'Must be a number'\r\n  } else if (Number(values.age) < 18) {\r\n    errors.age = 'Sorry, you must be at least 18 years old'\r\n  }\r\n  return errors\r\n}\r\n\r\nconst warn = values => {\r\n  const warnings = {}\r\n  if (values.age < 19) {\r\n    warnings.age = 'Hmm, you seem a bit young...'\r\n  }\r\n  return warnings\r\n}\r\n\r\nconst renderField = ({\r\n  input,\r\n  label,\r\n  type,\r\n  meta: { touched, error, warning }\r\n}) => (\r\n  <Row className='my-3'>\r\n        <Col sm={3}>\r\n            <label className='label-control'>{label}</label>\r\n        </Col>\r\n        <Col sm={9}>\r\n        <input {...input} placeholder={label} type={type} className='form-control' />\r\n        {touched &&\r\n            ((error && <span className='text-c-red'>* {error} </span>) ||\r\n            (warning && <span className='text-c-yellow'>{warning}</span>))}\r\n        </Col>\r\n  </Row>\r\n)\r\n\r\nconst SyncValidationForm = props => {\r\n  const { handleSubmit, pristine, reset, submitting } = props\r\n  return (\r\n      <Card>\r\n          <Card.Header>\r\n              <Card.Title as='h5'>Synchronous Validation</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <form onSubmit={handleSubmit}>\r\n                <Field\r\n                    name=\"username\"\r\n                    type=\"text\"\r\n                    component={renderField}\r\n                    label=\"Username\"\r\n                />\r\n                <Field className='form-control' name=\"email\" type=\"email\" component={renderField} label=\"Email\" />\r\n                <Field className='form-control' name=\"age\" type=\"number\" component={renderField} label=\"Age\" />\r\n                </form>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n                <Button variant='danger' className='float-right' type=\"button\" disabled={pristine || submitting} onClick={reset}>Clear Values</Button>\r\n                <Button type=\"submit\" disabled={submitting} className='mr-1 float-right'>Submit</Button>\r\n          </Card.Footer>\r\n      </Card>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'syncValidation', // a unique identifier for this form\r\n  validate, // <--- validation function given to redux-form\r\n  warn // <--- warning function given to redux-form\r\n})(SyncValidationForm)","import React from 'react';\r\nimport { Card, Button, Row, Col } from 'react-bootstrap';\r\nimport { SubmissionError, Field, reduxForm } from 'redux-form';\r\n\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nconst submit = (values) => {\r\n  return sleep(1000).then(() => {\r\n    // simulate server latency\r\n    if (!['john', 'paul', 'george', 'ringo'].includes(values.username)) {\r\n      throw new SubmissionError({\r\n        username: 'User does not exist',\r\n        _error: 'Login failed!'\r\n      })\r\n    } else if (values.password !== '123456') {\r\n      throw new SubmissionError({\r\n        password: 'Wrong password',\r\n        _error: 'Login failed!'\r\n      })\r\n    } else {\r\n      window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`)\r\n    }\r\n  })\r\n}\r\n\r\nconst renderField = ({ input, label, type, meta: { touched, error } }) => (\r\n    <Row className='my-3'>\r\n        <Col sm={3}>\r\n            <label className='label-control'>{label}</label>\r\n        </Col>\r\n        <Col sm={9}>\r\n            <input {...input} placeholder={label} type={type} className='form-control' />\r\n            {touched && error && <span className='text-c-red'>* {error} </span>}\r\n        </Col>\r\n    </Row>\r\n);\r\n  \r\n  const SubmitValidationForm = props => {\r\n    const { error, handleSubmit, pristine, reset, submitting } = props\r\n    return (\r\n        <form onSubmit={handleSubmit(submit)}>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title as='h5'>Submit Validation</Card.Title>\r\n                    <Card.Subtitle className=\"mt-2 text-muted\">Usernames: john, paul, george, ringo</Card.Subtitle>\r\n                    <Card.Subtitle className=\"mt-2 text-muted\">Password: 123456</Card.Subtitle>\r\n                </Card.Header>\r\n                <Card.Body>                      \r\n                        <Field name=\"username\" type=\"text\" component={renderField} label=\"Username\" />\r\n                        <Field name=\"password\" type=\"password\" component={renderField} label=\"Password\" />\r\n                        {error && <strong>{error}</strong>}\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <Button type=\"button\" variant='danger' className='float-right' disabled={pristine || submitting} onClick={reset}>Clear Values</Button>\r\n                    <Button type=\"submit\" className='mr-1 float-right' disabled={submitting}>Log In</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n        </form>\r\n    )\r\n  }\r\n  \r\n  export default reduxForm({\r\n    form: 'submitValidation' // a unique identifier for this form\r\n  })(SubmitValidationForm)","import React from 'react'\r\nimport { Card, Button, Row, Col } from 'react-bootstrap';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nconst validate = values => {\r\n    const errors = {}\r\n    if (!values.username) {\r\n      errors.username = 'Required'\r\n    }\r\n    if (!values.password) {\r\n      errors.password = 'Required'\r\n    }\r\n    return errors\r\n  }\r\n\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nconst asyncValidate = (values /*, dispatch */) => {\r\n  return sleep(1000).then(() => {\r\n    // simulate server latency\r\n    if (['john', 'paul', 'george', 'ringo'].includes(values.username)) {\r\n        // eslint-disable-next-line\r\n      throw { username: 'That username is taken' }\r\n    }\r\n  })\r\n}\r\n\r\nconst renderField = ({\r\n    input,\r\n    label,\r\n    type,\r\n    meta: { asyncValidating, touched, error }\r\n  }) => (\r\n    <Row className='my-3'>\r\n        <Col sm={3}>\r\n            <label className='label-control'>{label}</label>\r\n        </Col>\r\n        <Col sm={9} className={asyncValidating ? 'async-validating' : ''}>\r\n            <input {...input} placeholder={label} type={type} className='form-control' />\r\n            {touched && error && <span className='text-c-red'>* {error} </span>}\r\n        </Col>\r\n    </Row>\r\n  );\r\n  \r\n  const AsyncValidationForm = props => {\r\n    const { handleSubmit, pristine, reset, submitting } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title as='h5'>Asynchronous Validation</Card.Title>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Field name=\"username\" type=\"text\" component={renderField} label=\"Username\" />\r\n                    <Field name=\"password\" type=\"password\" component={renderField} label=\"Password\" />\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <Button type=\"button\" variant='danger' className='float-right' disabled={pristine || submitting} onClick={reset}>Clear Values</Button>\r\n                    <Button type=\"submit\" className='mr-1 float-right' disabled={submitting}>Sign Up</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n        </form>\r\n    )\r\n  }\r\n  \r\n  export default reduxForm({\r\n    form: 'asyncValidation', // a unique identifier for this form\r\n    validate,\r\n    asyncValidate,\r\n    asyncChangeFields: ['username']\r\n  })(AsyncValidationForm)","const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nexport default (async function showResults(values) {\r\n  await sleep(500); // simulate server latency\r\n  window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`);\r\n});","import React from 'react';\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst Schema = Yup.object().shape({\r\n  email: Yup.string().required('This field is required'),\r\n});\r\n\r\n// Async Validation\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nconst validate = values =>\r\n  sleep(300).then(() => {\r\n    return false;\r\n  });\r\n\r\nconst isRequired = message => value => (!!value ? undefined : message);\r\n\r\nconst CombinedValidations = () => (\r\n    <Card>\r\n        <Card.Header>\r\n            <Card.Title as='h5'>Formik - Pick a Username</Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n            <Formik\r\n            validationSchema={Schema}\r\n            validate={validate}\r\n            initialValues={{\r\n                username: '',\r\n                email: '',\r\n            }}\r\n            onSubmit={values => {\r\n                sleep(500).then(() => {\r\n                alert(JSON.stringify(values, null, 2));\r\n                });\r\n            }}\r\n            render={({\r\n                errors,\r\n                touched,\r\n                setFieldValue,\r\n                setFieldTouched,\r\n                validateField,\r\n                validateForm,\r\n            }) => (\r\n                <Form>\r\n                    <Row>\r\n                        <Col sm={3}>\r\n                            <label htmlFor=\"username\">Username</label>\r\n                        </Col>\r\n                        <Col sm={9}>\r\n                            <Field className='form-control' name=\"username\" validate={isRequired('This field is required')} type=\"text\" placeholder=\"username\" />\r\n                            <ErrorMessage className='text-c-red' name=\"username\" />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='my-3'>\r\n                        <Col sm={3}>\r\n                            <label htmlFor=\"username\">Email</label>\r\n                        </Col>\r\n                        <Col sm={9}>\r\n                            <Field className='form-control' name=\"email\" validate={isRequired('This field is required')} type=\"text\" placeholder=\"email\" />\r\n                            <ErrorMessage className='text-c-red' name=\"email\" />\r\n                        </Col>\r\n                    </Row>\r\n                    <Button type=\"submit\">Submit</Button>\r\n                </Form>\r\n            )}\r\n            />\r\n        </Card.Body>\r\n    </Card>\r\n);\r\n\r\nexport default CombinedValidations;","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport SyncValidationForm from './form-validation/SyncValidationForm';\r\nimport FieldLevelValidationForm from './form-validation/FieldLevelValidationForm';\r\nimport SubmitValidationForm from './form-validation/SubmitValidationForm';\r\nimport AsyncValidationForm from './form-validation/AsyncValidationForm';\r\nimport showResults from './form-validation/showResults';\r\nimport CombinedValidations from './form-validation/CombinedValidations';\r\n\r\nimport ModuleNotification from '../../components/Widgets/Statistic/Notification';\r\n\r\nconst FormsValidation = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col sm={12}>  \r\n                    <ModuleNotification message=\"For more info please check the components's official documentation\" link='https://redux-form.com/8.2.2/docs/gettingstarted.md/' />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col sm={12} md={6}>\r\n                    <SyncValidationForm />\r\n                </Col>\r\n                <Col sm={12} md={6}>\r\n                    <AsyncValidationForm onSubmit={showResults} />\r\n                </Col>\r\n                <Col sm={12} md={6}>\r\n                    <FieldLevelValidationForm />\r\n                </Col>\r\n                <Col sm={12} md={6}>\r\n                    <SubmitValidationForm />\r\n                </Col>\r\n                <Col sm={12}>  \r\n                    <ModuleNotification message=\"For more info please check the components's official documentation\" link='https://formik.org/docs/overview' />\r\n                </Col>\r\n                <Col sm={12}>\r\n                    <CombinedValidations />\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default FormsValidation;","import React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nconst Notification = props => {\r\n    return (\r\n        <React.Fragment>\r\n            <Alert variant='warning'>\r\n                {props.message}\r\n                <Alert.Link href={props.link} target='_blank' className='float-right'>Demo & Documentation</Alert.Link>\r\n            </Alert>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Notification;"],"sourceRoot":""}