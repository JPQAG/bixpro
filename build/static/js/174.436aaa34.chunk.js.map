{"version":3,"sources":["components/Notifications/BasicNotifications.js","views/ui-elements/advance/AdvanceNotification.js","components/Widgets/Statistic/Notification.js"],"names":["AlertMessage","appearance","children","onDismiss","Alert","variant","dismissible","onClose","BasicNotifications","props","Fragment","components","Toast","placement","notification","add","onClick","message","autoDismiss","colourOptions","value","label","color","potionOption","dot","alignItems","display","backgroundColor","borderRadius","content","marginRight","height","width","colourStyles","control","styles","option","data","isDisabled","isFocused","isSelected","chroma","alpha","css","contrast","cursor","input","placeholder","singleValue","AdvanceNotification","useState","setVariant","setPlacement","setAutoDismiss","setMessage","Row","Col","sm","link","Card","Header","Title","as","Body","className","md","Form","Group","controlId","Label","defaultValue","options","onChange","type","id","checked","prevState","htmlFor","Control","rows","event","target","Button","Notification","Link","href"],"mappings":"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","file":"static/js/174.436aaa34.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\nimport { ToastProvider, ToastConsumer } from 'react-toast-notifications';\r\n\r\nconst AlertMessage = ({appearance, children, onDismiss}) => {\r\n    return (\r\n        <Alert variant={appearance} dismissible onClose={onDismiss}>\r\n            {children}\r\n        </Alert>\r\n    );\r\n};\r\n\r\nconst BasicNotifications = props => {\r\n    return (\r\n        <React.Fragment>\r\n            <ToastProvider components={{Toast: AlertMessage}} placement={props.notification.placement}>\r\n                <ToastConsumer>\r\n                    {({add}) => {\r\n                        return (\r\n                            <span onClick={() => add(props.notification.message, {\r\n                                appearance: props.notification.variant,\r\n                                autoDismiss: props.notification.autoDismiss\r\n                            })}>\r\n                                {props.children}\r\n                            </span>\r\n                        );\r\n                    }}\r\n                </ToastConsumer>\r\n            </ToastProvider>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default BasicNotifications;","import React, { useState } from 'react';\r\nimport { Row, Col, Card, Button, Form } from 'react-bootstrap';\r\nimport chroma from 'chroma-js';\r\nimport Select from 'react-select';\r\n\r\nimport Notifications from '../../../components/Notifications/BasicNotifications';\r\nimport ModuleNotification from '../../../components/Widgets/Statistic/Notification';\r\n\r\nconst colourOptions = [\r\n    { value: 'inverse', label: 'Inverse', color: '#333' },\r\n    { value: 'primary', label: 'Primary', color: '#04a9f5' },\r\n    { value: 'info', label: 'Info', color: '#3ebfea' },\r\n    { value: 'success', label: 'Success', color: '#1de9b6' },\r\n    { value: 'warning', label: 'Warning', color: '#f4c22b' },\r\n    { value: 'danger', label: 'Danger', color: '#f44236' },\r\n    { value: 'dark', label: 'Dark', color: '#c7cbce' },\r\n    { value: 'light', label: 'Light', color: '#f2f2f2' }\r\n];\r\n\r\nconst potionOption = [\r\n    { value: 'top-left', label: 'Top Left' },\r\n    { value: 'top-right', label: 'Top Right' },\r\n    { value: 'top-center', label: 'Top Center' },\r\n    { value: 'bottom-left', label: 'Bottom Left' },\r\n    { value: 'bottom-right', label: 'Bottom Right' },\r\n    { value: 'bottom-center', label: 'Bottom Center' }\r\n];\r\n\r\nconst dot = (color = '#ccc') => ({\r\n    alignItems: 'center',\r\n    display: 'flex',\r\n\r\n    ':before': {\r\n        backgroundColor: color,\r\n        borderRadius: 10,\r\n        content: '\" \"',\r\n        display: 'block',\r\n        marginRight: 8,\r\n        height: 10,\r\n        width: 10,\r\n    },\r\n});\r\n\r\nconst colourStyles = {\r\n    control: styles => ({ ...styles, backgroundColor: 'white' }),\r\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n        const color = chroma(data.color);\r\n        return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n                ? null\r\n                : isSelected ? data.color : isFocused ? color.alpha(0.1).css() : null,\r\n            color: isDisabled\r\n                ? '#ccc'\r\n                : isSelected\r\n                    ? chroma.contrast(color, 'white') > 2 ? 'white' : 'black'\r\n                    : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n        };\r\n    },\r\n    input: styles => ({ ...styles, ...dot() }),\r\n    placeholder: styles => ({ ...styles, ...dot() }),\r\n    singleValue: (styles, { data }) => ({ ...styles, ...dot(data.color) }),\r\n};\r\n\r\nconst AdvanceNotification = () => {\r\n    const [variant, setVariant] = useState('inverse');\r\n    const [placement, setPlacement] = useState('top-right');\r\n    const [autoDismiss, setAutoDismiss] = useState(true);\r\n    const [message, setMessage] = useState('Bootstrap Growl Turning standard Bootstrap alerts into awesome notification');\r\n\r\n    const handleChange = (event) => {\r\n        setMessage(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col sm={12}>  \r\n                    <ModuleNotification message=\"For more info please check the components's official documentation\" link='https://www.npmjs.com/package/react-toast-notifications' />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Growl Notification</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row className=\"justify-content-md-center\">\r\n                                <Col sm={12} md={7}>\r\n                                    <Form.Group controlId=\"formPosition\">\r\n                                        <Form.Label>Position Variant</Form.Label>\r\n                                        <Select\r\n                                            defaultValue={potionOption[1]}\r\n                                            label=\"Select Position\"\r\n                                            options={potionOption}\r\n                                            onChange={({value}) => setPlacement(value)}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"formColor\">\r\n                                        <Form.Label>Color Variant</Form.Label>\r\n                                        <Select\r\n                                            defaultValue={colourOptions[0]}\r\n                                            label=\"Select Variant\"\r\n                                            options={colourOptions}\r\n                                            styles={colourStyles}\r\n                                            onChange={({value}) => setVariant(value)}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"formBasicEmail\">\r\n                                        <div className=\"switch switch-primary d-inline m-r-10\">\r\n                                            <input type=\"checkbox\" id=\"icon-colored\" checked={autoDismiss} onChange={() => setAutoDismiss(prevState => !prevState)} />\r\n                                            <label htmlFor=\"icon-colored\" className=\"cr\" />\r\n                                        </div>\r\n                                        <Form.Label>Auto Dismiss</Form.Label>\r\n                                    </Form.Group>\r\n                                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                        <Form.Label>Message</Form.Label>\r\n                                        <Form.Control as=\"textarea\" rows=\"3\" value={message} onChange={handleChange}/>\r\n                                    </Form.Group>\r\n                                    <Notifications notification={{\r\n                                        variant: variant,\r\n                                        placement: placement,\r\n                                        autoDismiss: autoDismiss,\r\n                                        message: message\r\n                                    }}><Button>Add Notification</Button></Notifications>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default AdvanceNotification;","import React from \"react\";\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nconst Notification = props => {\r\n    return (\r\n        <React.Fragment>\r\n            <Alert variant='warning'>\r\n                {props.message}\r\n                <Alert.Link href={props.link} target='_blank' className='float-right'>Demo & Documentation</Alert.Link>\r\n            </Alert>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Notification;"],"sourceRoot":""}