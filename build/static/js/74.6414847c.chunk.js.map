{"version":3,"sources":["data/FullTableData.js","components/cryptX/cards/BitcoinWalletVal.js","components/cryptX/cards/EthereumWalletVal.js","components/cryptX/cards/TotalWalletVal.js","components/cryptX/charts/chart/HoldingsQtyPieDonutChart.js","components/cryptX/charts/chart/HoldingsValPieDonutChart.js","components/cryptX/tables/React/AllHoldingsTable.js","views/cryptX/Portfolio/Holdings/index.js"],"names":["Header","columns","accessor","Cell","value","toUpperCase","Intl","NumberFormat","style","currency","format","toFixed","secretKey","CONFIG","binance","apiKey","require","options","APIKEY","APISECRET","useServerTime","recvWindow","verbose","log","console","formatter","BitcoinWalletValCard","useState","bitcoinPrice","setBitcoinPrice","holdings","setHoldings","getHoldings","a","prices","ticker","balance","error","balances","holding","symbol","useEffect","interval","setInterval","clearInterval","data","newData","prop","push","available","onOrder","marketPrice","marketValue","objectParse","Fragment","className","Body","EthereumWalletValCard","EthereumVal","setEthereumVal","TotalWalletValCard","TotalWalletVal","setTotalWalletVal","totalWalletValuation","HoldingsQtyPieDonutChart","futuresPrices","info","pieData","parseFloat","createPieData","filter","width","height","chartType","loader","title","pieHole","colors","rootProps","HoldingsValPieDonutChart","TableFull","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","firstPageRows","striped","bordered","hover","responsive","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","App","React","useMemo","search","setSearch","toLowerCase","includes","Title","as","size","Prepend","Text","id","onChange","e","target","aria-label","aria-describedby","Holdings","xl","md"],"mappings":"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","file":"static/js/74.6414847c.chunk.js","sourcesContent":["const Header = [\r\n    {\r\n      Header: 'Security Information',\r\n      columns: [\r\n        {\r\n          Header: '#',\r\n          accessor: 'market_cap_rank',\r\n        },\r\n        {\r\n          Header: 'Name',\r\n          accessor: 'name',\r\n        },\r\n        {\r\n          Header: 'Symbol',\r\n          accessor: 'symbol',\r\n          Cell: ({ value }) => value.toUpperCase(),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      Header: 'Market Pricing Info',\r\n      columns: [\r\n        {\r\n          Header: 'Current Price',\r\n          accessor: 'current_price',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        },\r\n        {\r\n          Header: '24h Price Change',\r\n          accessor: 'price_change_24h',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        },\r\n        {\r\n          Header: '24h Price Change (%)',\r\n          accessor: 'price_change_percentage_24h',\r\n          Cell: ({ value }) => value.toFixed(2) + '%',\r\n        },\r\n        {\r\n          Header: 'All Time High (ATH)',\r\n          accessor: 'ath',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        },\r\n        {\r\n          Header: 'Change From ATH',\r\n          accessor: 'ath_change_percentage',\r\n          Cell: ({ value }) => value.toFixed(2) + '%',\r\n        },\r\n        {\r\n          Header: 'Market Capitalization',\r\n          accessor: 'market_cap',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        }\r\n      ],\r\n    },\r\n  ]\r\n\r\nexport default Header","import React, { useState, useEffect } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { CONFIG } from '../../../config/constant';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Currency Formatter\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  \r\n    // These options are needed to round to whole numbers if that's what you want.\r\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n});\r\n  \r\n  \r\nconst BitcoinWalletValCard = () => {\r\n    const [ bitcoinPrice, setBitcoinPrice ] = useState('');\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n              if (holding === \"BTC\") {\r\n                  setBitcoinPrice(\r\n                      formatter.format(balances[holding]['marketPrice'] * balances[holding]['available'])\r\n                    )\r\n              };\r\n            };\r\n            \r\n          };\r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const data = dataOne;\r\n\r\n    console.log('Bitcoin Price: ' + bitcoinPrice);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className='theme-bg bitcoin-wallet'>\r\n                <Card.Body>\r\n                    <h5 className=\"text-white mb-2\">Bitcoin Wallet</h5>\r\n                    <h2 className=\"text-white mb-3 f-w-300\">{bitcoinPrice}</h2>\r\n                    <span className=\"text-white d-block\">Pricing by Binance</span>\r\n                    <i className=\"fab fa-bitcoin f-70 text-white\"/>\r\n                </Card.Body>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default BitcoinWalletValCard;","import React, { useState, useEffect } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { CONFIG } from '../../../config/constant';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Currency Formatter\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  \r\n    // These options are needed to round to whole numbers if that's what you want.\r\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n});\r\n  \r\n  \r\nconst EthereumWalletValCard = () => {\r\n    const [ EthereumVal, setEthereumVal ] = useState('');\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n              if (holding === \"ETH\") {\r\n                  setEthereumVal(\r\n                      formatter.format(balances[holding]['marketPrice'] * balances[holding]['available'])\r\n                    )\r\n              };\r\n            };\r\n            \r\n          };\r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const data = dataOne;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className='theme-bg2 bitcoin-wallet'>\r\n                <Card.Body>\r\n                    <h5 className=\"text-white mb-2\">Ethereum Wallet</h5>\r\n                    <h2 className=\"text-white mb-3 f-w-300\">{EthereumVal}</h2>\r\n                    <span className=\"text-white d-block\">Pricing by Binance</span>\r\n                    <i className=\"fab fa-bitcoin f-70 text-white\"/>\r\n                </Card.Body>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default EthereumWalletValCard;","import React, { useState, useEffect } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { CONFIG } from '../../../config/constant';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Currency Formatter\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  \r\n    // These options are needed to round to whole numbers if that's what you want.\r\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n});\r\n  \r\n  \r\nconst TotalWalletValCard = () => {\r\n    const [ TotalWalletVal, setTotalWalletVal ] = useState('');\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          let totalWalletValuation = 0;\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n              if (holding === \"ETH\") {\r\n                  setTotalWalletVal(\r\n                      formatter.format(balances[holding]['marketPrice'] * balances[holding]['available'])\r\n                    )\r\n              };\r\n            };\r\n            if (balances[holding]['available'] > 0) {\r\n                totalWalletValuation += (balances[holding]['marketPrice'] * balances[holding]['available']);\r\n            }\r\n            console.log('Total Wallet Val: ' + totalWalletValuation)\r\n          };\r\n          setTotalWalletVal(\r\n              formatter.format(totalWalletValuation)\r\n            );\r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const data = dataOne;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className='bg-c-blue bitcoin-wallet'>\r\n                <Card.Body>\r\n                    <h5 className=\"text-white mb-2\">Total Wallet</h5>\r\n                    <h2 className=\"text-white mb-3 f-w-300\">{TotalWalletVal}</h2>\r\n                    <span className=\"text-white d-block\">Pricing by Binance</span>\r\n                    <i className=\"fab fa-bitcoin f-70 text-white\"/>\r\n                </Card.Body>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TotalWalletValCard;","import React, { useState, useEffect } from 'react';\r\nimport { CONFIG } from '../../../../config/constant';\r\nimport Chart from 'react-google-charts';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Create Data for Pie Chart from data set\r\nfunction createPieData(data) {\r\n    const pieData = [\r\n        ['Symbol', 'Quantity']\r\n    ];\r\n\r\n    for (const holding in data) {\r\n        pieData.push([\r\n            data[holding]['symbol'],\r\n            parseFloat(data[holding]['available'])\r\n        ]);\r\n        console.log(pieData);\r\n    };\r\n\r\n    return pieData;\r\n}\r\n\r\nconst HoldingsQtyPieDonutChart = () => {\r\n\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        console.info( await binance.futuresPrices() );\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n            }\r\n          };\r\n          console.log(\"Final Balances\", balances);\r\n    \r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const filteredHoldingsTwo = dataOne.filter(holding => \r\n        holding.available > 0\r\n    );\r\n\r\n    const data = createPieData(filteredHoldingsTwo);\r\n\r\n    return <Chart\r\n        width='100%'\r\n        height='300px'\r\n        chartType=\"PieChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={data}\r\n        // data={[\r\n        //     ['Task', 'Hours per Day'],\r\n        //     ['Work', 11],\r\n        //     ['Eat', 2],\r\n        //     ['Commute', 2],\r\n        //     ['Watch TV', 2],\r\n        //     ['Sleep', 7],\r\n        // ]}\r\n        options={{\r\n            title: 'by Quantity',\r\n            pieHole: 0.4,\r\n            colors: ['#1dc4e9', '#1de9b6', '#3ebfea', '#A389D4', '#899FD4']\r\n        }}\r\n        rootProps={{ 'data-testid': '3' }}\r\n    />;\r\n}\r\n\r\nexport default HoldingsQtyPieDonutChart;","import React, { useState, useEffect } from 'react';\r\nimport { CONFIG } from '../../../../config/constant';\r\nimport Chart from 'react-google-charts';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Create Data for Pie Chart from data set\r\nfunction createPieData(data) {\r\n    const pieData = [\r\n        ['Symbol', 'Valuation']\r\n    ];\r\n\r\n    for (const holding in data) {\r\n        pieData.push([\r\n            data[holding]['symbol'],\r\n            parseFloat(data[holding]['marketValue'])\r\n        ]);\r\n        console.log(pieData);\r\n    };\r\n\r\n    return pieData;\r\n}\r\n\r\nconst HoldingsValPieDonutChart = () => {\r\n\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        console.info( await binance.futuresPrices() );\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n            }\r\n          };\r\n          console.log(\"Final Balances\", balances);\r\n    \r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const filteredHoldingsTwo = dataOne.filter(holding => \r\n        holding.available > 0\r\n    );\r\n\r\n    const data = createPieData(filteredHoldingsTwo);\r\n\r\n    return <Chart\r\n        width='100%'\r\n        height='300px'\r\n        chartType=\"PieChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={data}\r\n        // data={[\r\n        //     ['Task', 'Hours per Day'],\r\n        //     ['Work', 11],\r\n        //     ['Eat', 2],\r\n        //     ['Commute', 2],\r\n        //     ['Watch TV', 2],\r\n        //     ['Sleep', 7],\r\n        // ]}\r\n        options={{\r\n            title: 'by Valuation',\r\n            pieHole: 0.4,\r\n            colors: ['#1dc4e9', '#1de9b6', '#3ebfea', '#A389D4', '#899FD4']\r\n        }}\r\n        rootProps={{ 'data-testid': '3' }}\r\n    />;\r\n}\r\n\r\nexport default HoldingsValPieDonutChart;","//IMPORTS\r\n//Module Imports\r\nimport React, {useState, useEffect } from 'react';\r\nimport {Row, Col, Card, Table, Tab, Nav, Form, InputGroup, FormControl } from 'react-bootstrap';\r\nimport BTable from 'react-bootstrap/Table';\r\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\r\nimport axios from 'axios';\r\nimport { CONFIG } from '../../../../config/constant';\r\nimport dataTable from '../../../../data/FullTableData';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n  let newData = [];\r\n  for (const prop in data) {\r\n    newData.push({\r\n      symbol: prop,\r\n      available: data[prop].available,\r\n      onOrder: data[prop].onOrder,\r\n      marketPrice: data[prop].marketPrice,\r\n      marketValue: (data[prop].marketPrice * data[prop].available),\r\n    })\r\n  };\r\n  return newData;\r\n}\r\n\r\n//Table Component\r\nfunction TableFull({ columns, data }) {\r\n    const {\r\n          getTableProps, \r\n          getTableBodyProps, \r\n          headerGroups, \r\n          rows, \r\n          prepareRow, \r\n          setFilter\r\n        } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n      },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n\r\n    const [ filterInput, setFilterInput ] = useState(\"\");\r\n\r\n    const handleFilterChange = e => {\r\n        const value = e.target.value || undefined;\r\n        setFilter(\"name\", value);\r\n        setFilterInput(value);\r\n    };\r\n  \r\n    // We don't want to render all 2000 rows for this example, so cap\r\n    // it at 20 for this use case\r\n    const firstPageRows = rows\r\n\r\n    return (\r\n      <>\r\n        <BTable striped bordered hover responsive {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  // Add the sorting props to control sorting. For this example\r\n                  // we can add them into the header props\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {column.render('Header')}\r\n                    {/* Add a sort direction indicator */}\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? <span className='feather icon-arrow-down text-muted float-right mt-1' />\r\n                          : <span className='feather icon-arrow-up text-muted float-right mt-1' />\r\n                        : ''}\r\n                    </span>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {firstPageRows.map(\r\n              (row, i) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map(cell => {\r\n                      return (\r\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                      )\r\n                    })}\r\n                  </tr>\r\n                )}\r\n            )}\r\n          </tbody>\r\n        </BTable>\r\n      </>\r\n    )\r\n}\r\n  \r\nfunction App() {\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Security Information',\r\n        columns: [\r\n          {\r\n            Header: 'Symbol',\r\n            accessor: 'symbol',\r\n          },\r\n          {\r\n            Header: 'Quantity Held',\r\n            accessor: 'available',\r\n          },\r\n          {\r\n            Header: 'Quantity On Order',\r\n            accessor: 'onOrder',\r\n          },\r\n          {\r\n            Header: 'Market Price',\r\n            accessor: 'marketPrice',\r\n            Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n            {\r\n              style: 'currency',\r\n              currency: 'USD'\r\n            }\r\n            ).format( value ),\r\n          },\r\n          {\r\n            Header: 'Market Value',\r\n            accessor: 'marketValue',\r\n            Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n            {\r\n              style: 'currency',\r\n              currency: 'USD'\r\n            }\r\n            ).format( value ),\r\n          },\r\n        ],\r\n      }, \r\n    ],\r\n    []\r\n  )\r\n\r\n  const [ search, setSearch ] = useState('');\r\n  const [ holdings, setHoldings ] = useState('');\r\n  \r\n\r\n  const getHoldings = async () => {\r\n    //Binance API\r\n    let ticker = await binance.prices();\r\n    // console.log(\"TICKER LIST\", ticker);\r\n    await binance.useServerTime();\r\n    binance.balance((error, balances) => {\r\n      if ( error ) return console.error(error);\r\n      for (const holding in balances) {\r\n        if (balances[holding]['available'] > -10) {\r\n          const symbol = holding + \"BUSD\";\r\n          balances[holding]['marketPrice'] = ticker[symbol];\r\n        }\r\n      };\r\n      setHoldings(balances)\r\n      return ticker;\r\n    });\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n      getHoldings()\r\n\r\n      const interval=setInterval(() => {\r\n          getHoldings()\r\n      }, 10000)\r\n\r\n      return() => clearInterval(\r\n          interval\r\n          )\r\n      }, []\r\n  );\r\n\r\n  const handleChange = e => {\r\n    setSearch(e.target.value)\r\n  }\r\n\r\n  const dataOne = objectParse(holdings);\r\n\r\n  const filteredHoldings = dataOne.filter(holding => \r\n    holding.symbol.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n  const filteredHoldingsTwo = filteredHoldings.filter(holding => \r\n    holding.available > 0);\r\n\r\n  const data = filteredHoldingsTwo;\r\n\r\n  return (\r\n      <React.Fragment>\r\n        <Row>\r\n            <Col>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Card.Title as=\"h5\">Cryptocurrencies</Card.Title>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <InputGroup size=\"sm\" className=\"mb-3\">\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"inputGroup-sizing-sm\">Filter</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl onChange={handleChange} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\r\n                            </InputGroup>\r\n                        <TableFull columns={columns} data={data} />\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n  )\r\n}\r\n  \r\nexport default App\r\n  ","import React from 'react';\r\nimport {Row, Col, Card} from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport FullTable from '../../../../components/cryptX/tables/React/AllHoldingsTable.js';\r\nimport HoldingsQtyPieDonutChart from \"../../../../components/cryptX/charts/chart/HoldingsQtyPieDonutChart.js\";\r\nimport HoldingsValPieDonutChart from \"../../../../components/cryptX/charts/chart/HoldingsValPieDonutChart.js\";\r\nimport BitcoinWalletValCard from \"../../../../components/cryptX/cards/BitcoinWalletVal.js\"\r\nimport EthereumWalletValCard from \"../../../../components/cryptX/cards/EthereumWalletVal.js\"\r\nimport TotalWalletValCard from \"../../../../components/cryptX/cards/TotalWalletVal.js\"\r\n\r\nconst Holdings = () => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col xl={4} md={6} >\r\n                    <BitcoinWalletValCard></BitcoinWalletValCard>\r\n                </Col>\r\n                <Col md={6} xl={4}>\r\n                    <EthereumWalletValCard></EthereumWalletValCard>\r\n                </Col>\r\n                <Col md={12} xl={4}>\r\n                    <TotalWalletValCard></TotalWalletValCard>\r\n                </Col>\r\n                <Col xl={6} md={10} >\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Portfolio Composition</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <HoldingsQtyPieDonutChart></HoldingsQtyPieDonutChart>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col xl={6} md={10} >\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Portfolio Composition</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <HoldingsValPieDonutChart></HoldingsValPieDonutChart>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n                <Col xl={12} md={10} >\r\n                    <FullTable></FullTable>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Holdings;\r\n"],"sourceRoot":""}