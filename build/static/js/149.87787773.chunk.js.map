{"version":3,"sources":["data/FullTableData.js","components/cryptX/tables/React/AllTradesTable.js","views/cryptX/Portfolio/HistoricalTrades/index.js"],"names":["Header","columns","accessor","Cell","value","toUpperCase","Intl","NumberFormat","style","currency","format","toFixed","secretKey","CONFIG","binance","apiKey","require","options","APIKEY","APISECRET","TableFull","data","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","useState","firstPageRows","striped","bordered","hover","responsive","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","className","row","i","getRowProps","cells","cell","getCellProps","useServerTime","recvWindow","verbose","log","console","App","React","useMemo","search","setSearch","holdings","setHoldings","setTrades","getHoldings","a","futuresPrices","info","balance","error","balances","trades","symbol","useEffect","interval","setInterval","clearInterval","newData","prop","push","available","onOrder","objectParse","filter","holding","toLowerCase","includes","Fragment","Row","Col","Card","Title","as","Body","InputGroup","size","Prepend","Text","id","FormControl","onChange","e","target","aria-label","aria-describedby","Markets"],"mappings":"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","file":"static/js/149.87787773.chunk.js","sourcesContent":["const Header = [\r\n    {\r\n      Header: 'Security Information',\r\n      columns: [\r\n        {\r\n          Header: '#',\r\n          accessor: 'market_cap_rank',\r\n        },\r\n        {\r\n          Header: 'Name',\r\n          accessor: 'name',\r\n        },\r\n        {\r\n          Header: 'Symbol',\r\n          accessor: 'symbol',\r\n          Cell: ({ value }) => value.toUpperCase(),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      Header: 'Market Pricing Info',\r\n      columns: [\r\n        {\r\n          Header: 'Current Price',\r\n          accessor: 'current_price',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        },\r\n        {\r\n          Header: '24h Price Change',\r\n          accessor: 'price_change_24h',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        },\r\n        {\r\n          Header: '24h Price Change (%)',\r\n          accessor: 'price_change_percentage_24h',\r\n          Cell: ({ value }) => value.toFixed(2) + '%',\r\n        },\r\n        {\r\n          Header: 'All Time High (ATH)',\r\n          accessor: 'ath',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        },\r\n        {\r\n          Header: 'Change From ATH',\r\n          accessor: 'ath_change_percentage',\r\n          Cell: ({ value }) => value.toFixed(2) + '%',\r\n        },\r\n        {\r\n          Header: 'Market Capitalization',\r\n          accessor: 'market_cap',\r\n          Cell: ({ value }) => new Intl.NumberFormat('en-US',\r\n          {\r\n            style: 'currency',\r\n            currency: 'USD'\r\n          }\r\n          ).format( value ),\r\n        }\r\n      ],\r\n    },\r\n  ]\r\n\r\nexport default Header","//IMPORTS\r\n//Module Imports\r\nimport React, {useState, useEffect } from 'react';\r\nimport {Row, Col, Card, Table, Tab, Nav, Form, InputGroup, FormControl } from 'react-bootstrap';\r\nimport BTable from 'react-bootstrap/Table';\r\nimport { useTable, useSortBy, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\r\nimport axios from 'axios';\r\nimport { CONFIG } from '../../../../config/constant';\r\nimport dataTable from '../../../../data/FullTableData';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n  let newData = [];\r\n  for (const prop in data) {\r\n    newData.push({\r\n      symbol: prop,\r\n      available: data[prop].available,\r\n      onOrder: data[prop].onOrder,\r\n    })\r\n  }\r\n  return newData;\r\n}\r\n\r\n//Table Component\r\nfunction TableFull({ columns, data }) {\r\n    const {\r\n          getTableProps, \r\n          getTableBodyProps, \r\n          headerGroups, \r\n          rows, \r\n          prepareRow, \r\n          setFilter\r\n        } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n      },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n\r\n    const [ filterInput, setFilterInput ] = useState(\"\");\r\n\r\n    const handleFilterChange = e => {\r\n        const value = e.target.value || undefined;\r\n        setFilter(\"name\", value);\r\n        setFilterInput(value);\r\n    };\r\n  \r\n    // We don't want to render all 2000 rows for this example, so cap\r\n    // it at 20 for this use case\r\n    const firstPageRows = rows\r\n\r\n    return (\r\n      <>\r\n        <BTable striped bordered hover responsive {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  // Add the sorting props to control sorting. For this example\r\n                  // we can add them into the header props\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {column.render('Header')}\r\n                    {/* Add a sort direction indicator */}\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? <span className='feather icon-arrow-down text-muted float-right mt-1' />\r\n                          : <span className='feather icon-arrow-up text-muted float-right mt-1' />\r\n                        : ''}\r\n                    </span>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {firstPageRows.map(\r\n              (row, i) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map(cell => {\r\n                      return (\r\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                      )\r\n                    })}\r\n                  </tr>\r\n                )}\r\n            )}\r\n          </tbody>\r\n        </BTable>\r\n      </>\r\n    )\r\n}\r\n  \r\nfunction App() {\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Trade Information',\r\n        columns: [\r\n          {\r\n            Header: 'Trade ID',\r\n            accessor: 'symbol',\r\n          },\r\n          {\r\n            Header: 'Quantity Held',\r\n            accessor: 'available',\r\n          },\r\n          {\r\n            Header: 'Quantity On Order',\r\n            accessor: 'onOrder',\r\n          },\r\n        ],\r\n      }, \r\n    ],\r\n    []\r\n  )\r\n\r\n  const [ search, setSearch ] = useState('');\r\n  const [ holdings, setHoldings ] = useState('');\r\n  const [ trades, setTrades ] = useState('');\r\n  \r\n\r\n  const getHoldings = async () => {\r\n    //Binance API\r\n    console.info( await binance.futuresPrices() );\r\n    await binance.useServerTime();\r\n    binance.balance((error, balances) => {\r\n      if ( error ) return console.error(error);\r\n      setHoldings(balances)\r\n      return balances;\r\n    })\r\n    setTrades(binance.trades(\"ETHAUD\", (error, trades, symbol) => {\r\n      console.info(symbol+\" trade history\", trades);\r\n    }));\r\n  }\r\n\r\n  useEffect(() => {\r\n      getHoldings()\r\n\r\n      const interval=setInterval(() => {\r\n          getHoldings()\r\n      }, 10000)\r\n\r\n      return() => clearInterval(\r\n          interval\r\n          )\r\n      }, []\r\n  );\r\n\r\n  const handleChange = e => {\r\n    setSearch(e.target.value)\r\n  }\r\n\r\n  const dataOne = objectParse(holdings);\r\n\r\n  const filteredHoldings = dataOne.filter(holding => \r\n    holding.symbol.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n  const data = filteredHoldings;\r\n\r\n  return (\r\n      <React.Fragment>\r\n        <Row>\r\n            <Col>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Card.Title as=\"h5\">Cryptocurrencies</Card.Title>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <InputGroup size=\"sm\" className=\"mb-3\">\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"inputGroup-sizing-sm\">Filter</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl onChange={handleChange} aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\r\n                            </InputGroup>\r\n                        <TableFull columns={columns} data={data} />\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n  )\r\n}\r\n  \r\nexport default App\r\n  ","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport FullTable from '../../../../components/cryptX/tables/React/AllTradesTable.js';\r\n\r\n\r\nconst Markets = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <FullTable></FullTable>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Markets;\r\n"],"sourceRoot":""}