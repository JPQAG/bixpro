{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  InvalidOrder,\n  AuthenticationError,\n  InsufficientFunds,\n  BadSymbol,\n  OrderNotFound,\n  InvalidAddress,\n  BadRequest\n} = require('./base/errors');\n\nconst {\n  TRUNCATE\n} = require('./base/functions/number');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class gopax extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'gopax',\n      'name': 'GOPAX',\n      'countries': ['KR'],\n      // South Korea\n      'version': 'v1',\n      'rateLimit': 50,\n      'hostname': 'gopax.co.kr',\n      // or 'gopax.com'\n      'certified': true,\n      'pro': true,\n      'has': {\n        'cancelOrder': true,\n        'createMarketOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': 'emulated',\n        'fetchDepositAddresses': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTransactions': true\n      },\n      'timeframes': {\n        '1m': '1',\n        '5m': '5',\n        '30m': '30',\n        '1d': '1440'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/102897212-ae8a5e00-4478-11eb-9bab-91507c643900.jpg',\n        'api': {\n          'public': 'https://api.{hostname}',\n          // or 'https://api.gopax.co.kr'\n          'private': 'https://api.{hostname}'\n        },\n        'www': 'https://www.gopax.co.kr',\n        'doc': 'https://gopax.github.io/API/index.en.html',\n        'fees': 'https://www.gopax.com/feeinfo'\n      },\n      'api': {\n        'public': {\n          'get': ['notices', 'assets', 'price-tick-size', 'trading-pairs', 'trading-pairs/{tradingPair}/ticker', 'trading-pairs/{tradingPair}/book', 'trading-pairs/{tradingPair}/trades', 'trading-pairs/{tradingPair}/stats', 'trading-pairs/{tradingPair}/price-tick-size', 'trading-pairs/stats', 'trading-pairs/{tradingPair}/candles', 'time']\n        },\n        'private': {\n          'get': ['balances', 'balances/{assetName}', 'orders', 'orders/{orderId}', 'orders/clientOrderId/{clientOrderId}', 'trades', 'deposit-withdrawal-status', 'crypto-deposit-addresses', 'crypto-withdrawal-addresses'],\n          'post': ['orders'],\n          'delete': ['orders/{orderId}', 'orders/clientOrderId/{clientOrderId}']\n        }\n      },\n      'fees': {\n        'trading': {\n          'percentage': true,\n          'tierBased': false,\n          'maker': 0.04 / 100,\n          'taker': 0.04 / 100\n        }\n      },\n      'exceptions': {\n        'broad': {\n          'ERROR_INVALID_ORDER_TYPE': InvalidOrder,\n          'ERROR_INVALID_AMOUNT': InvalidOrder,\n          'ERROR_INVALID_TRADING_PAIR': BadSymbol,\n          // Unlikely to be triggered, due to ccxt.gopax.js implementation\n          'No such order ID': OrderNotFound,\n          // {\"errorMessage\":\"No such order ID\",\"errorCode\":202,\"errorData\":\"Order server error: 202\"}\n          // 'Not enough amount': InsufficientFunds, // {\"errorMessage\":\"Not enough amount, try increasing your order amount\",\"errorCode\":10212,\"errorData\":{}}\n          'Forbidden order type': InvalidOrder,\n          'the client order ID will be reusable which order has already been completed or canceled': InvalidOrder,\n          'ERROR_NO_SUCH_TRADING_PAIR': BadSymbol,\n          // Unlikely to be triggered, due to ccxt.gopax.js implementation\n          'ERROR_INVALID_ORDER_SIDE': InvalidOrder,\n          'ERROR_NOT_HEDGE_TOKEN_USER': InvalidOrder,\n          'ORDER_EVENT_ERROR_NOT_ALLOWED_BID_ORDER': InvalidOrder,\n          // Triggered only when the exchange is locked\n          'ORDER_EVENT_ERROR_INSUFFICIENT_BALANCE': InsufficientFunds,\n          'Invalid option combination': InvalidOrder,\n          'No such client order ID': OrderNotFound\n        },\n        'exact': {\n          '100': BadSymbol,\n          // Invalid asset name\n          '101': BadSymbol,\n          // Invalid trading pair\n          '103': InvalidOrder,\n          // Invalid order type\n          '104': BadSymbol,\n          // Invalid trading pair\n          '105': BadSymbol,\n          // Trading pair temporarily disabled\n          '106': BadSymbol,\n          // Invalid asset name\n          '107': InvalidOrder,\n          // Invalid order amount\n          '108': InvalidOrder,\n          // Invalid order price\n          '111': InvalidOrder,\n          // Invalid event type\n          '201': InsufficientFunds,\n          // Not enough balance\n          '202': InvalidOrder,\n          // Invalid order ID\n          '203': InvalidOrder,\n          // Order amount X order price too large\n          '204': InvalidOrder,\n          // Bid order temporarily unavailable\n          '205': InvalidOrder,\n          // Invalid side\n          '206': InvalidOrder,\n          // Invalid order option combination\n          '10004': AuthenticationError,\n          // Not authorized\n          // '10004': ExchangeError, // API key not exist\n          // '10004': ExchangeError, // User KYC not approved\n          // '10004': ExchangeError, // User account is frozen\n          // '10004': ExchangeError, // User is under deactivation process\n          // '10004': ExchangeError, // 2FA is not enabled\n          // '10004': ExchangeError, // Invalid signature\n          '10041': BadRequest,\n          // Invalid exchange\n          '10056': BadRequest,\n          // No registered asset\n          '10057': BadSymbol,\n          // No registered trading pair\n          '10059': BadSymbol,\n          // Invalid trading pair\n          '10062': BadRequest,\n          // Invalid chart interval\n          '10069': OrderNotFound,\n          // {\"errorMessage\":\"No such order ID: 73152094\",\"errorCode\":10069,\"errorData\":\"73152094\"}\n          '10155': AuthenticationError,\n          // {\"errorMessage\":\"Invalid API key\",\"errorCode\":10155}\n          '10166': BadRequest,\n          // Invalid chart range\n          '10212': InvalidOrder,\n          // {\"errorMessage\":\"Not enough amount, try increasing your order amount\",\"errorCode\":10212,\"errorData\":{}}\n          '10221': OrderNotFound,\n          // No such client order ID\n          '10222': InvalidOrder,\n          // Client order ID being used\n          '10223': InvalidOrder,\n          // Soon the client order ID will be reusable which order has already been completed or canceled\n          '10227': InvalidOrder,\n          // Invalid client order ID format\n          '10319': BadRequest,\n          // Pagination is required as you have too many orders\n          '10358': InvalidOrder,\n          // Invalid order type\n          '10359': InvalidOrder,\n          // Invalid order side\n          '10360': InvalidOrder,\n          // Invalid order status\n          '10361': InvalidOrder,\n          // Invalid order time in force\n          '10362': InvalidOrder,\n          // Invalid order protection\n          '10363': InvalidOrder // Invalid forced completion reason\n\n        }\n      },\n      'options': {\n        'createMarketBuyOrderRequiresPrice': true\n      }\n    });\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTime(params); //\n    //     {\"serverTime\":1608327726656}\n    //\n\n    return this.safeInteger(response, 'serverTime');\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetTradingPairs(params); //\n    //     [\n    //         {\n    //             \"id\":1,\n    //             \"name\":\"ETH-KRW\",\n    //             \"baseAsset\":\"ETH\",\n    //             \"quoteAsset\":\"KRW\",\n    //             \"baseAssetScale\":8,\n    //             \"quoteAssetScale\":0,\n    //             \"priceMin\":1,\n    //             \"restApiOrderAmountMin\":{\n    //                 \"limitAsk\":{\"amount\":10000,\"unit\":\"KRW\"},\n    //                 \"limitBid\":{\"amount\":10000,\"unit\":\"KRW\"},\n    //                 \"marketAsk\":{\"amount\":0.001,\"unit\":\"ETH\"},\n    //                 \"marketBid\":{\"amount\":10000,\"unit\":\"KRW\"},\n    //             },\n    //             \"makerFeePercent\":0.2,\n    //             \"takerFeePercent\":0.2,\n    //         },\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'name');\n      const numericId = this.safeInteger(market, 'id');\n      const baseId = this.safeString(market, 'baseAsset');\n      const quoteId = this.safeString(market, 'quoteAsset');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'price': this.safeInteger(market, 'quoteAssetScale'),\n        'amount': this.safeInteger(market, 'baseAssetScale')\n      };\n      const minimums = this.safeValue(market, 'restApiOrderAmountMin', {});\n      const marketAsk = this.safeValue(minimums, 'marketAsk', {});\n      const marketBid = this.safeValue(minimums, 'marketBid', {});\n      const takerFeePercentString = this.safeString(market, 'takerFeePercent');\n      const makerFeePercentString = this.safeString(market, 'makerFeePercent');\n      const taker = this.parseNumber(Precise.stringDiv(takerFeePercentString, '100'));\n      const maker = this.parseNumber(Precise.stringDiv(makerFeePercentString, '100'));\n      result.push({\n        'id': id,\n        'info': market,\n        'numericId': numericId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': this.safeString(market, 'baseAsset'),\n        'quoteId': this.safeString(market, 'quoteAsset'),\n        'active': true,\n        'taker': taker,\n        'maker': maker,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(marketAsk, 'amount'),\n            'max': undefined\n          },\n          'price': {\n            'min': this.safeNumber(market, 'priceMin'),\n            'max': undefined\n          },\n          'cost': {\n            'min': this.safeNumber(marketBid, 'amount'),\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetAssets(params); //\n    //     [\n    //         {\n    //             \"id\":\"KRW\",\n    //             \"name\":\"대한민국 원\",\n    //             \"scale\":0,\n    //             \"withdrawalFee\":1000,\n    //             \"withdrawalAmountMin\":5000\n    //         },\n    //         {\n    //             \"id\":\"ETH\",\n    //             \"name\":\"이더리움\",\n    //             \"scale\":8,\n    //             \"withdrawalFee\":0.03,\n    //             \"withdrawalAmountMin\":0.015\n    //         },\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'id');\n      const code = this.safeCurrencyCode(id);\n      const name = this.safeString(currency, 'name');\n      const fee = this.safeNumber(currency, 'withdrawalFee');\n      const precision = this.safeNumber(currency, 'scale');\n      result[code] = {\n        'id': id,\n        'info': currency,\n        'code': code,\n        'name': name,\n        'active': true,\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeNumber(currency, 'withdrawalAmountMin'),\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'tradingPair': market['id'] // 'level': 3, // 1 best bidask, 2 top 50 bidasks, 3 all bidasks\n\n    };\n    const response = await this.publicGetTradingPairsTradingPairBook(this.extend(request, params)); //\n    //     {\n    //         \"sequence\":17691957,\n    //         \"bid\":[\n    //             [\"17690499\",25019000,0.00008904,\"1608326468921\"],\n    //             [\"17691894\",25010000,0.4295,\"1608326499940\"],\n    //             [\"17691895\",25009000,0.2359,\"1608326499953\"],\n    //         ],\n    //         \"ask\":[\n    //             [\"17689176\",25024000,0.000098,\"1608326442006\"],\n    //             [\"17691351\",25031000,0.206,\"1608326490418\"],\n    //             [\"17691571\",25035000,0.3996,\"1608326493742\"],\n    //         ]\n    //     }\n    //\n\n    const nonce = this.safeInteger(response, 'sequence');\n    const result = this.parseOrderBook(response, symbol, undefined, 'bid', 'ask', 1, 2);\n    result['nonce'] = nonce;\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         \"price\":25087000,\n    //         \"ask\":25107000,\n    //         \"askVolume\":0.05837704,\n    //         \"bid\":25087000,\n    //         \"bidVolume\":0.00398628,\n    //         \"volume\":350.09171591,\n    //         \"quoteVolume\":8721016926.06529,\n    //         \"time\":\"2020-12-18T21:42:13.774Z\",\n    //     }\n    //\n    // fetchTickers\n    //\n    //     {\n    //         \"name\":\"ETH-KRW\",\n    //         \"open\":690500,\n    //         \"high\":719500,\n    //         \"low\":681500,\n    //         \"close\":709500,\n    //         \"volume\":2784.6081544,\n    //         \"time\":\"2020-12-18T21:54:50.795Z\"\n    //     }\n    //\n    const marketId = this.safeString(ticker, 'name');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const timestamp = this.parse8601(this.safeString(ticker, 'time'));\n    const open = this.safeNumber(ticker, 'open');\n    const last = this.safeNumber2(ticker, 'price', 'close');\n    let change = undefined;\n    let percentage = undefined;\n    let average = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      average = this.sum(last, open) / 2;\n      change = last - open;\n\n      if (open > 0) {\n        percentage = change / open * 100;\n      }\n    }\n\n    const baseVolume = this.safeNumber(ticker, 'volume');\n    const quoteVolume = this.safeNumber(ticker, 'quoteVolume');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'info': ticker,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': this.safeNumber(ticker, 'bidVolume'),\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': this.safeNumber(ticker, 'askVolume'),\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'tradingPair': market['id']\n    };\n    const response = await this.publicGetTradingPairsTradingPairTicker(this.extend(request, params)); //\n    //     {\n    //         \"price\":25087000,\n    //         \"ask\":25107000,\n    //         \"askVolume\":0.05837704,\n    //         \"bid\":25087000,\n    //         \"bidVolume\":0.00398628,\n    //         \"volume\":350.09171591,\n    //         \"quoteVolume\":8721016926.06529,\n    //         \"time\":\"2020-12-18T21:42:13.774Z\",\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTradingPairsStats(params); //\n    //     [\n    //         {\n    //             \"name\":\"ETH-KRW\",\n    //             \"open\":690500,\n    //             \"high\":719500,\n    //             \"low\":681500,\n    //             \"close\":709500,\n    //             \"volume\":2784.6081544,\n    //             \"time\":\"2020-12-18T21:54:50.795Z\"\n    //         }\n    //     ]\n    //\n\n    return this.parseTickers(response, symbols);\n  }\n\n  parsePublicTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(trade, 'time'));\n    const price = this.safeNumber(trade, 'price');\n    const amount = this.safeNumber(trade, 'amount');\n    let symbol = undefined;\n\n    if ('symbol' in market) {\n      symbol = this.safeString(market, 'symbol');\n    }\n\n    return {\n      'info': trade,\n      'id': this.safeString(trade, 'id'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': undefined,\n      // Not mandatory to specify\n      'type': undefined,\n      // Not mandatory to specify\n      'side': this.safeString(trade, 'side'),\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': price * amount,\n      'fee': undefined\n    };\n  }\n\n  parsePrivateTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(trade, 'timestamp'));\n    const symbol = this.safeString(trade, 'tradingPairName').replace('-', '/');\n    const side = this.safeString(trade, 'side');\n    const price = this.safeNumber(trade, 'price');\n    const amount = this.safeNumber(trade, 'baseAmount');\n    let feeCurrency = symbol.slice(0, 3);\n\n    if (side === 'sell') {\n      feeCurrency = symbol.slice(4);\n    }\n\n    const fee = {\n      'cost': this.safeNumber(trade, 'fee'),\n      'currency': feeCurrency,\n      'rate': undefined\n    };\n    return {\n      'info': trade,\n      'id': this.safeString(trade, 'id'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': this.safeInteger(trade, 'orderId'),\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': this.safeString(trade, 'position'),\n      'price': price,\n      'amount': amount,\n      'cost': price * amount,\n      'fee': fee\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // public fetchTrades\n    //\n    //     {\n    //         \"time\":\"2020-12-19T12:17:43.000Z\",\n    //         \"date\":1608380263,\n    //         \"id\":23903608,\n    //         \"price\":25155000,\n    //         \"amount\":0.0505,\n    //         \"side\":\"sell\",\n    //     }\n    //\n    // private fetchMyTrades\n    //\n    //     {\n    //         \"id\": 73953,                             // trading event ID\n    //         \"orderId\": 453324,                       // order ID\n    //         \"baseAmount\": 3,                         // traded base asset amount\n    //         \"quoteAmount\": 3000000,                  // traded quote asset amount\n    //         \"fee\": 0.0012,                           // fee\n    //         \"price\": 1000000,                        // price\n    //         \"timestamp\": \"2020-09-25T04:06:30.000Z\", // trading time\n    //         \"side\": \"buy\",                           // buy, sell\n    //         \"tradingPairName\": \"ZEC-KRW\",            // order book\n    //         \"position\": \"maker\"                      // maker, taker\n    //     }\n    //\n    //     {\n    //         \"tradeId\": 74072,            // trade ID\n    //         \"orderId\": 453529,           // order ID\n    //         \"side\": 2,                   // 1(bid), 2(ask)\n    //         \"type\": 1,                   // 1(limit), 2(market)\n    //         \"baseAmount\": 0.01,          // filled base asset amount (in ZEC for this case)\n    //         \"quoteAmount\": 1,            // filled quote asset amount (in KRW for this case)\n    //         \"fee\": 0.0004,               // fee\n    //         \"price\": 100,                // price\n    //         \"isSelfTrade\": false,        // whether both of matching orders are yours\n    //         \"occurredAt\": 1603932107,    // trade occurrence time\n    //         \"tradingPairName\": \"ZEC-KRW\" // order book\n    //     }\n    //\n    const id = this.safeString2(trade, 'id', 'tradeId');\n    const orderId = this.safeInteger(trade, 'orderId');\n    let timestamp = this.parse8601(this.safeString2(trade, 'time', 'timestamp'));\n    timestamp = this.safeTimestamp(trade, 'occuredAt', timestamp);\n    const marketId = this.safeString(trade, 'tradingPairName');\n    market = this.safeMarket(marketId, market, '-');\n    const symbol = market['symbol'];\n    let side = this.safeString(trade, 'side');\n\n    if (side === '1') {\n      side = 'buy';\n    } else if (side === '2') {\n      side = 'sell';\n    }\n\n    let type = this.safeString(trade, 'type');\n\n    if (type === '1') {\n      type = 'limit';\n    } else if (type === '2') {\n      type = 'market';\n    }\n\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString2(trade, 'amount', 'baseAmount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    let cost = this.safeNumber(trade, 'quoteAmount');\n\n    if (cost === undefined) {\n      cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    }\n\n    const feeCost = this.safeNumber(trade, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': market['base']\n      };\n    }\n\n    const takerOrMaker = this.safeString(trade, 'position');\n    return {\n      'info': trade,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'tradingPair': market['id'] // 'limit': limit,\n      // 'pastmax': id, // read data older than this ID\n      // 'latestmin': id, // read data newer than this ID\n      // 'after': parseInt (since / 1000),\n      // 'before': this.seconds (),\n\n    };\n\n    if (since !== undefined) {\n      request['after'] = parseInt(since / 1000);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetTradingPairsTradingPairTrades(this.extend(request, params)); //\n    //     [\n    //         {\"time\":\"2020-12-19T12:17:43.000Z\",\"date\":1608380263,\"id\":23903608,\"price\":25155000,\"amount\":0.0505,\"side\":\"sell\"},\n    //         {\"time\":\"2020-12-19T12:17:13.000Z\",\"date\":1608380233,\"id\":23903604,\"price\":25140000,\"amount\":0.019,\"side\":\"sell\"},\n    //         {\"time\":\"2020-12-19T12:16:49.000Z\",\"date\":1608380209,\"id\":23903599,\"price\":25140000,\"amount\":0.0072,\"side\":\"sell\"},\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1606780800000, // timestamp\n    //         21293000,      // low\n    //         21300000,      // high\n    //         21294000,      // open\n    //         21300000,      // close\n    //         1.019126,      // volume\n    //     ]\n    //\n    return [this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    limit = limit === undefined ? 1024 : limit; // default 1024\n\n    const request = {\n      'tradingPair': market['id'],\n      // 'start': since,\n      // 'end': this.milliseconds (),\n      'interval': this.timeframes[timeframe]\n    };\n    const duration = this.parseTimeframe(timeframe);\n\n    if (since === undefined) {\n      const end = this.milliseconds();\n      request['end'] = end;\n      request['start'] = end - limit * duration * 1000;\n    } else {\n      request['start'] = since;\n      request['end'] = this.sum(since, limit * duration * 1000);\n    }\n\n    const response = await this.publicGetTradingPairsTradingPairCandles(this.extend(request, params)); //\n    //     [\n    //         [1606780800000,21293000,21300000,21294000,21300000,1.019126],\n    //         [1606780860000,21237000,21293000,21293000,21263000,0.96800057],\n    //         [1606780920000,21240000,21240000,21240000,21240000,0.11068715],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseBalanceResponse(response) {\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString2(balance, 'asset', 'isoAlpha3');\n      const code = this.safeCurrencyCode(currencyId);\n      const hold = this.safeString(balance, 'hold');\n      const pendingWithdrawal = this.safeString(balance, 'pendingWithdrawal');\n      const account = this.account();\n      account['free'] = this.safeString(balance, 'avail');\n      account['used'] = Precise.stringAdd(hold, pendingWithdrawal);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalances(params); //\n    //     [\n    //         {\n    //             \"asset\": \"KRW\",                   // asset name\n    //             \"avail\": 1759466.76,              // available amount to place order\n    //             \"hold\": 16500,                    // outstanding amount on order books\n    //             \"pendingWithdrawal\": 0,           // amount being withdrawn\n    //             \"lastUpdatedAt\": \"1600684352032\", // balance last update time\n    //         },\n    //     ]\n    //\n\n    return this.parseBalanceResponse(response);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'placed': 'open',\n      'cancelled': 'canceled',\n      'completed': 'closed',\n      'updated': 'open',\n      'reserved': 'open'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // cancelOrder\n    //\n    //     {} // empty object\n    //\n    // fetchOrder, fetchOrders, fetchOpenOrders, createOrder\n    //\n    //     {\n    //         \"id\": \"453324\",                          // order ID\n    //         \"clientOrderId\": \"zeckrw23456\",          // client order ID (showed only when it exists)\n    //         \"status\": \"updated\",                     // placed, cancelled, completed, updated, reserved\n    //         \"forcedCompletionReason\": undefined,     // the reason in case it was canceled in the middle (protection or timeInForce)\n    //         \"tradingPairName\": \"ZEC-KRW\",            // order book\n    //         \"side\": \"buy\",                           // buy, sell\n    //         \"type\": \"limit\",                         // limit, market\n    //         \"price\": 1000000,                        // price\n    //         \"stopPrice\": undefined,                  // stop price (showed only for stop orders)\n    //         \"amount\": 4,                             // initial amount\n    //         \"remaining\": 1,                          // outstanding amount\n    //         \"protection\": \"yes\",                     // whether protection is activated (yes or no)\n    //         \"timeInForce\": \"gtc\",                    // limit order's time in force (gtc/po/ioc/fok)\n    //         \"createdAt\": \"2020-09-25T04:06:20.000Z\", // order placement time\n    //         \"updatedAt\": \"2020-09-25T04:06:29.000Z\", // order last update time\n    //         \"balanceChange\": {\n    //             \"baseGross\": 3,                      // base asset balance's gross change (in ZEC for this case)\n    //             \"baseFee\": {\n    //                 \"taking\": 0,                     // base asset fee imposed as taker\n    //                 \"making\": -0.0012                // base asset fee imposed as maker\n    //             },\n    //             \"baseNet\": 2.9988,                   // base asset balance's net change (in ZEC for this case)\n    //             \"quoteGross\": -3000000,              // quote asset balance's gross change (in KRW for\n    //             \"quoteFee\": {\n    //                 \"taking\": 0,                     // quote asset fee imposed as taker\n    //                 \"making\": 0                      // quote asset fee imposed as maker\n    //             },\n    //             \"quoteNet\": -3000000                 // quote asset balance's net change (in KRW for this case)\n    //         }\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const clientOrderId = this.safeString(order, 'clientOrderId');\n    const timestamp = this.parse8601(this.safeString(order, 'createdAt'));\n    const type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'side');\n    const timeInForce = this.safeStringUpper(order, 'timeInForce');\n    const price = this.safeNumber(order, 'price');\n    const amount = this.safeNumber(order, 'amount');\n    const stopPrice = this.safeNumber(order, 'stopPrice');\n    const remaining = this.safeNumber(order, 'remaining');\n    const marketId = this.safeString(order, 'tradingPairName');\n    market = this.safeMarket(marketId, market, '-');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const balanceChange = this.safeValue(order, 'balanceChange', {});\n    const filled = this.safeNumber(balanceChange, 'baseNet');\n    let cost = this.safeNumber(balanceChange, 'quoteNet');\n\n    if (cost !== undefined) {\n      cost = Math.abs(cost);\n    }\n\n    let updated = undefined;\n\n    if (filled !== undefined && filled > 0) {\n      updated = this.parse8601(this.safeString(order, 'updatedAt'));\n    }\n\n    let fee = undefined;\n\n    if (side === 'buy') {\n      const baseFee = this.safeValue(balanceChange, 'baseFee', {});\n      const taking = this.safeNumber(baseFee, 'taking');\n      const making = this.safeNumber(baseFee, 'making');\n      fee = {\n        'currency': market['base'],\n        'cost': this.sum(taking, making)\n      };\n    } else {\n      const quoteFee = this.safeValue(balanceChange, 'quoteFee', {});\n      const taking = this.safeNumber(quoteFee, 'taking');\n      const making = this.safeNumber(quoteFee, 'making');\n      fee = {\n        'currency': market['quote'],\n        'cost': this.sum(taking, making)\n      };\n    }\n\n    let postOnly = undefined;\n\n    if (timeInForce !== undefined) {\n      postOnly = timeInForce === 'PO';\n    }\n\n    return this.safeOrder({\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': updated,\n      'status': status,\n      'symbol': market['symbol'],\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'average': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'cost': cost,\n      'trades': undefined,\n      'fee': fee,\n      'info': order\n    });\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    let method = undefined;\n    const clientOrderId = this.safeString(params, 'clientOrderId');\n    params = this.omit(params, 'clientOrderId');\n    const request = {};\n\n    if (clientOrderId === undefined) {\n      method = 'privateGetOrdersOrderId';\n      request['orderId'] = id;\n    } else {\n      method = 'privateGetOrdersClientOrderIdClientOrderId';\n      request['clientOrderId'] = clientOrderId;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"id\": \"453324\",                          // order ID\n    //         \"clientOrderId\": \"zeckrw23456\",          // client order ID (showed only when it exists)\n    //         \"status\": \"updated\",                     // placed, cancelled, completed, updated, reserved\n    //         \"forcedCompletionReason\": undefined,     // the reason in case it was canceled in the middle (protection or timeInForce)\n    //         \"tradingPairName\": \"ZEC-KRW\",            // order book\n    //         \"side\": \"buy\",                           // buy, sell\n    //         \"type\": \"limit\",                         // limit, market\n    //         \"price\": 1000000,                        // price\n    //         \"stopPrice\": undefined,                  // stop price (showed only for stop orders)\n    //         \"amount\": 4,                             // initial amount\n    //         \"remaining\": 1,                          // outstanding amount\n    //         \"protection\": \"yes\",                     // whether protection is activated (yes or no)\n    //         \"timeInForce\": \"gtc\",                    // limit order's time in force (gtc/po/ioc/fok)\n    //         \"createdAt\": \"2020-09-25T04:06:20.000Z\", // order placement time\n    //         \"updatedAt\": \"2020-09-25T04:06:29.000Z\", // order last update time\n    //         \"balanceChange\": {\n    //             \"baseGross\": 3,                      // base asset balance's gross change (in ZEC for this case)\n    //             \"baseFee\": {\n    //                 \"taking\": 0,                     // base asset fee imposed as taker\n    //                 \"making\": -0.0012                // base asset fee imposed as maker\n    //             },\n    //             \"baseNet\": 2.9988,                   // base asset balance's net change (in ZEC for this case)\n    //             \"quoteGross\": -3000000,              // quote asset balance's gross change (in KRW for\n    //             \"quoteFee\": {\n    //                 \"taking\": 0,                     // quote asset fee imposed as taker\n    //                 \"making\": 0                      // quote asset fee imposed as maker\n    //             },\n    //             \"quoteNet\": -3000000                 // quote asset balance's net change (in KRW for this case)\n    //         }\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'includePast': 'true' // if true, completed and canceled orders are included as the result, they are accessible for one hour only from its completion or cancellation time\n      // 'pagination': 'false', // if the result is more than 3,000 orders, set this value as true to access 1000 orders at max per each page\n\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\": \"453324\",                          // order ID\n    //             \"clientOrderId\": \"zeckrw23456\",          // client order ID (showed only when it exists)\n    //             \"status\": \"updated\",                     // placed, cancelled, completed, updated, reserved\n    //             \"forcedCompletionReason\": undefined,     // the reason in case it was canceled in the middle (protection or timeInForce)\n    //             \"tradingPairName\": \"ZEC-KRW\",            // order book\n    //             \"side\": \"buy\",                           // buy, sell\n    //             \"type\": \"limit\",                         // limit, market\n    //             \"price\": 1000000,                        // price\n    //             \"stopPrice\": undefined,                  // stop price (showed only for stop orders)\n    //             \"amount\": 4,                             // initial amount\n    //             \"remaining\": 1,                          // outstanding amount\n    //             \"protection\": \"yes\",                     // whether protection is activated (yes or no)\n    //             \"timeInForce\": \"gtc\",                    // limit order's time in force (gtc/po/ioc/fok)\n    //             \"createdAt\": \"2020-09-25T04:06:20.000Z\", // order placement time\n    //             \"updatedAt\": \"2020-09-25T04:06:29.000Z\", // order last update time\n    //             \"balanceChange\": {\n    //                 \"baseGross\": 3,                      // base asset balance's gross change (in ZEC for this case)\n    //                 \"baseFee\": {\n    //                     \"taking\": 0,                     // base asset fee imposed as taker\n    //                     \"making\": -0.0012                // base asset fee imposed as maker\n    //                 },\n    //                 \"baseNet\": 2.9988,                   // base asset balance's net change (in ZEC for this case)\n    //                 \"quoteGross\": -3000000,              // quote asset balance's gross change (in KRW for\n    //                 \"quoteFee\": {\n    //                     \"taking\": 0,                     // quote asset fee imposed as taker\n    //                     \"making\": 0                      // quote asset fee imposed as maker\n    //                 },\n    //                 \"quoteNet\": -3000000                 // quote asset balance's net change (in KRW for this case)\n    //             }\n    //         },\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'includePast': 'false'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      // 'clientOrderId': 'test4321', // max 20 characters of [a-zA-Z0-9_-]\n      'tradingPairName': market['id'],\n      'side': side,\n      // buy, sell\n      'type': type // limit, market\n      // 'price': this.priceToPrecision (symbol, price),\n      // 'stopPrice': this.priceToPrecision (symbol, stopPrice), // optional, becomes a stop order if set\n      // 'amount': this.amountToPrecision (symbol, amount),\n      // 'protection': 'no', // whether protection is activated\n      // 'timeInForce': 'gtc', // gtc, po, ioc, fok\n\n    };\n\n    if (type === 'limit') {\n      request['price'] = this.priceToPrecision(symbol, price);\n      request['amount'] = this.amountToPrecision(symbol, amount);\n    } else if (type === 'market') {\n      // for market buy it requires the amount of quote currency to spend\n      if (side === 'buy') {\n        let total = amount;\n        const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);\n\n        if (createMarketBuyOrderRequiresPrice) {\n          if (price === undefined) {\n            throw new InvalidOrder(this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument\");\n          }\n\n          total = price * amount;\n        }\n\n        const precision = market['precision']['price'];\n        request['amount'] = this.decimalToPrecision(total, TRUNCATE, precision, this.precisionMode);\n      } else {\n        request['amount'] = this.amountToPrecision(symbol, amount);\n      }\n    }\n\n    const clientOrderId = this.safeString(params, 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['clientOrderId'] = clientOrderId;\n      params = this.omit(params, 'clientOrderId');\n    }\n\n    const stopPrice = this.safeNumber(params, 'stopPrice');\n\n    if (stopPrice !== undefined) {\n      request['stopPrice'] = this.priceToPrecision(symbol, stopPrice);\n      params = this.omit(params, 'stopPrice');\n    }\n\n    const timeInForce = this.safeStringLower(params, 'timeInForce');\n\n    if (timeInForce !== undefined) {\n      request['timeInForce'] = timeInForce;\n      params = this.omit(params, 'timeInForce');\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //     {\n    //         \"id\": \"453327\",                          // order ID\n    //         \"clientOrderId\": \"test4321\",             // client order ID (showed only when it exists)\n    //         \"status\": \"reserved\",                    // placed, cancelled, completed, updated, reserved\n    //         \"forcedCompletionReason\": undefined,     // the reason in case it was canceled in the middle (protection or timeInForce)\n    //         \"tradingPairName\": \"BCH-KRW\",            // order book\n    //         \"side\": \"sell\",                          // buy, sell\n    //         \"type\": \"limit\",                         // limit, market\n    //         \"price\": 11000000,                       // price\n    //         \"stopPrice\": 12000000,                   // stop price (showed only for stop orders)\n    //         \"amount\": 0.5,                           // initial amount\n    //         \"remaining\": 0.5,                        // outstanding amount\n    //         \"protection\": \"no\",                      // whether protection is activated (yes or no)\n    //         \"timeInForce\": \"gtc\",                    // limit order's time in force (gtc/po/ioc/fok)\n    //         \"createdAt\": \"2020-09-25T04:51:31.000Z\", // order placement time\n    //         \"balanceChange\": {\n    //             \"baseGross\": 0,                      // base asset balance's gross change (in BCH for this case)\n    //             \"baseFee\": {\n    //                 \"taking\": 0,                     // base asset fee imposed as taker\n    //                 \"making\": 0                      // base asset fee imposed as maker\n    //             },\n    //             \"baseNet\": 0,                        // base asset balance's net change (in BCH for this case)\n    //             \"quoteGross\": 0,                     // quote asset balance's gross change (in KRW for\n    //             \"quoteFee\": {\n    //                 \"taking\": 0,                     // quote asset fee imposed as taker\n    //                 \"making\": 0                      // quote asset fee imposed as maker\n    //             },\n    //             \"quoteNet\": 0                        // quote asset balance's net change (in KRW for this case)\n    //         }\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const clientOrderId = this.safeString(params, 'clientOrderId');\n    let method = undefined;\n\n    if (clientOrderId === undefined) {\n      method = 'privateDeleteOrdersOrderId';\n      request['orderId'] = id;\n    } else {\n      method = 'privateDeleteOrdersClientOrderIdClientOrderId';\n      request['clientOrderId'] = clientOrderId;\n      params = this.omit(params, 'clientOrderId');\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {}\n    //\n\n    const order = this.parseOrder(response);\n    return this.extend(order, {\n      'id': id\n    });\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      // 'limit': limit, // max 100\n      // 'pastmax': id, // read data older than this id\n      // 'latestmin': id, // read data newer than this id\n      // 'after': parseInt (since / 1000), // Read data after this timestamp in seconds\n      // 'before': this.seconds (), // Read data before this timestamp in seconds\n      'deepSearch': 'true' // read data older than one month ago are inclusively looked up only when it is \"true\"\n\n    };\n\n    if (since !== undefined) {\n      request['after'] = parseInt(since / 1000);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetTrades(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\": 73953,                             // trading event ID\n    //             \"orderId\": 453324,                       // order ID\n    //             \"baseAmount\": 3,                         // traded base asset amount\n    //             \"quoteAmount\": 3000000,                  // traded quote asset amount\n    //             \"fee\": 0.0012,                           // fee\n    //             \"price\": 1000000,                        // price\n    //             \"timestamp\": \"2020-09-25T04:06:30.000Z\", // trading time\n    //             \"side\": \"buy\",                           // buy, sell\n    //             \"tradingPairName\": \"ZEC-KRW\",            // order book\n    //             \"position\": \"maker\"                      // maker, taker\n    //         },\n    //     ]\n    //\n\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    //\n    //     {\n    //         \"asset\": \"BTC\",                                  // asset name\n    //         \"address\": \"1CwC2cMFu1jRQUBtw925cENbT1kctJBMdm\", // deposit address\n    //         \"memoId\": null,                                  // memo ID (showed only for assets using memo ID)\n    //         \"createdAt\": 1594802312                          // deposit address creation time\n    //     }\n    //\n    const address = this.safeString(depositAddress, 'address');\n    const tag = this.safeString(depositAddress, 'memoId');\n    const currencyId = this.safeString(depositAddress, 'asset');\n    const code = this.safeCurrencyCode(currencyId);\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': depositAddress\n    };\n  }\n\n  async fetchDepositAddresses(codes = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetCryptoDepositAddresses(params); //\n    //     [\n    //         {\n    //             \"asset\": \"BTC\",                                  // asset name\n    //             \"address\": \"1CwC2cMFu1jRQUBtw925cENbT1kctJBMdm\", // deposit address\n    //             \"memoId\": null,                                  // memo ID (showed only for assets using memo ID)\n    //             \"createdAt\": 1594802312                          // deposit address creation time\n    //         },\n    //     ]\n    //\n\n    return this.parseDepositAddresses(response, codes);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const response = await this.fetchDepositAddresses(undefined, params);\n    const address = this.safeValue(response, code);\n\n    if (address === undefined) {\n      throw new InvalidAddress(this.id + ' fetchDepositAddress() ' + code + ' address not found');\n    }\n\n    return address;\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'reviewing': 'pending',\n      'rejected': 'rejected',\n      'processing': 'pending',\n      'failed': 'failed',\n      'completed': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //     {\n    //         \"id\": 640,                     // deposit/withdrawal event ID\n    //         \"asset\": \"BTC\",                // asset name\n    //         \"type\": \"crypto_withdrawal\",   // fiat_withdrawal, fiat_deposit, crypto_withdrawal, crypto_deposit\n    //         \"netAmount\": 0.0001,           // amount\n    //         \"feeAmount\": 0.0005,           // fee (null if there is no imposed fee)\n    //         \"status\": \"completed\",         // reviewing, rejected, processing, failed, completed\n    //         \"reviewStartedAt\": 1595556218, // request time\n    //         \"completedAt\": 1595556902,     // completion time (showed only in case of completed)\n    //         \"txId\": \"eaca5ad3...\",         // tx ID\n    //         \"sourceAddress\": null,         // sender address (showed only in case of crypto_deposit)\n    //         \"destinationAddress: \"3H8...\", // recipient address (showed only in case of crypto_withdrawal)\n    //         \"destinationMemoId\": null      // recipient address's memo ID\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const txid = this.safeString(transaction, 'txId');\n    const currencyId = this.safeString(transaction, 'asset');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    let type = this.safeString(transaction, 'type');\n\n    if (type === 'crypto_withdrawal' || type === 'fiat_withdrawal') {\n      type = 'withdrawal';\n    } else if (type === 'crypto_deposit' || type === 'fiat_deposit') {\n      type = 'deposit';\n    }\n\n    const amount = this.safeNumber(transaction, 'netAmount');\n    const feeCost = this.safeNumber(transaction, 'feeAmount');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': code\n      };\n    }\n\n    const timestamp = this.safeTimestamp(transaction, 'reviewStartedAt');\n    const updated = this.safeTimestamp(transaction, 'completedAt');\n    const addressFrom = this.safeString(transaction, 'sourceAddress');\n    const addressTo = this.safeString(transaction, 'destinationAddress');\n    const tagFrom = this.safeString(transaction, 'sourceMemoId');\n    const tagTo = this.safeString(transaction, 'destinationMemoId');\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': addressFrom,\n      'address': addressTo,\n      'addressTo': addressTo,\n      'tagFrom': tagFrom,\n      'tag': tagTo,\n      'tagTo': tagTo,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'comment': undefined,\n      'fee': fee\n    };\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'limit': limit, // max 20\n      // 'latestmin': limit, // read data older than this id\n      // 'after': this.milliseconds (),\n      // 'before': since,\n      // 'completedOnly': 'no',\n    };\n\n    if (since !== undefined) {\n      request['before'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetDepositWithdrawalStatus(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\": 640,                     // deposit/withdrawal event ID\n    //             \"asset\": \"BTC\",                // asset name\n    //             \"type\": \"crypto_withdrawal\",   // fiat_withdrawal, fiat_deposit, crypto_withdrawal, crypto_deposit\n    //             \"netAmount\": 0.0001,           // amount\n    //             \"feeAmount\": 0.0005,           // fee (null if there is no imposed fee)\n    //             \"status\": \"completed\",         // reviewing, rejected, processing, failed, completed\n    //             \"reviewStartedAt\": 1595556218, // request time\n    //             \"completedAt\": 1595556902,     // completion time (showed only in case of completed)\n    //             \"txId\": \"eaca5ad3...\",         // tx ID\n    //             \"sourceAddress\": null,         // sender address (showed only in case of crypto_deposit)\n    //             \"destinationAddress: \"3H8...\", // recipient address (showed only in case of crypto_withdrawal)\n    //             \"destinationMemoId\": null      // recipient address's memo ID\n    //         },\n    //     ]\n    //\n\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    return this.parseTransactions(response, currency, since, limit, params);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    // for authentication in private API calls\n    const endpoint = '/' + this.implodeParams(path, params);\n    let url = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    }) + endpoint;\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'private') {\n      this.checkRequiredCredentials();\n      const timestamp = this.nonce().toString();\n      let auth = 't' + timestamp + method + endpoint;\n      headers = {\n        'api-key': this.apiKey,\n        'timestamp': timestamp\n      };\n\n      if (method === 'POST') {\n        headers['Content-Type'] = 'application/json';\n        body = this.json(params);\n        auth += body;\n      } else if (endpoint === '/orders') {\n        if (Object.keys(query).length) {\n          const urlQuery = '?' + this.urlencode(query);\n          auth += urlQuery;\n          url += urlQuery;\n        }\n      } else if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      }\n\n      const rawSecret = this.base64ToBinary(this.secret);\n      const signature = this.hmac(this.encode(auth), rawSecret, 'sha512', 'base64');\n      headers['signature'] = signature;\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    //     {\"errorMessage\":\"Invalid API key\",\"errorCode\":10155}\n    //\n\n\n    if (!Array.isArray(response)) {\n      const errorCode = this.safeString(response, 'errorCode');\n      const errorMessage = this.safeString(response, 'errorMessage');\n      const feedback = this.id + ' ' + body;\n\n      if (errorMessage !== undefined) {\n        this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);\n      }\n\n      if (errorCode !== undefined) {\n        this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      }\n\n      if (errorCode !== undefined || errorMessage !== undefined) {\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/gopax.js"],"names":["Exchange","require","ExchangeError","InvalidOrder","AuthenticationError","InsufficientFunds","BadSymbol","OrderNotFound","InvalidAddress","BadRequest","TRUNCATE","Precise","module","exports","gopax","describe","deepExtend","fetchTime","params","response","publicGetTime","safeInteger","fetchMarkets","publicGetTradingPairs","result","i","length","market","id","safeString","numericId","baseId","quoteId","base","safeCurrencyCode","quote","symbol","precision","minimums","safeValue","marketAsk","marketBid","takerFeePercentString","makerFeePercentString","taker","parseNumber","stringDiv","maker","push","safeNumber","undefined","fetchCurrencies","publicGetAssets","currency","code","name","fee","fetchOrderBook","limit","loadMarkets","request","publicGetTradingPairsTradingPairBook","extend","nonce","parseOrderBook","parseTicker","ticker","marketId","safeSymbol","timestamp","parse8601","open","last","safeNumber2","change","percentage","average","sum","baseVolume","quoteVolume","vwap","iso8601","fetchTicker","publicGetTradingPairsTradingPairTicker","fetchTickers","symbols","publicGetTradingPairsStats","parseTickers","parsePublicTrade","trade","price","amount","parsePrivateTrade","replace","side","feeCurrency","slice","parseTrade","safeString2","orderId","safeTimestamp","safeMarket","type","priceString","amountString","cost","stringMul","feeCost","takerOrMaker","fetchTrades","since","parseInt","publicGetTradingPairsTradingPairTrades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","duration","parseTimeframe","end","milliseconds","publicGetTradingPairsTradingPairCandles","parseOHLCVs","parseBalanceResponse","balance","currencyId","hold","pendingWithdrawal","account","stringAdd","parseBalance","fetchBalance","privateGetBalances","parseOrderStatus","status","statuses","parseOrder","order","clientOrderId","timeInForce","safeStringUpper","stopPrice","remaining","balanceChange","filled","Math","abs","updated","baseFee","taking","making","quoteFee","postOnly","safeOrder","fetchOrder","method","omit","fetchOrders","privateGetOrders","parseOrders","fetchOpenOrders","createOrder","priceToPrecision","amountToPrecision","total","createMarketBuyOrderRequiresPrice","options","decimalToPrecision","precisionMode","safeStringLower","privatePostOrders","cancelOrder","fetchMyTrades","privateGetTrades","parseDepositAddress","depositAddress","address","tag","checkAddress","fetchDepositAddresses","codes","privateGetCryptoDepositAddresses","parseDepositAddresses","fetchDepositAddress","parseTransactionStatus","parseTransaction","transaction","txid","addressFrom","addressTo","tagFrom","tagTo","fetchTransactions","privateGetDepositWithdrawalStatus","parseTransactions","sign","path","api","headers","body","endpoint","implodeParams","url","urls","hostname","query","extractParams","Object","keys","urlencode","checkRequiredCredentials","toString","auth","apiKey","json","urlQuery","rawSecret","base64ToBinary","secret","signature","hmac","encode","handleErrors","reason","requestHeaders","requestBody","Array","isArray","errorCode","errorMessage","feedback","throwBroadlyMatchedException","exceptions","throwExactlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, InvalidOrder, AuthenticationError, InsufficientFunds, BadSymbol, OrderNotFound, InvalidAddress, BadRequest } = require ('./base/errors');\nconst { TRUNCATE } = require ('./base/functions/number');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class gopax extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'gopax',\n            'name': 'GOPAX',\n            'countries': [ 'KR' ], // South Korea\n            'version': 'v1',\n            'rateLimit': 50,\n            'hostname': 'gopax.co.kr', // or 'gopax.com'\n            'certified': true,\n            'pro': true,\n            'has': {\n                'cancelOrder': true,\n                'createMarketOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': 'emulated',\n                'fetchDepositAddresses': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTransactions': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '30m': '30',\n                '1d': '1440',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/102897212-ae8a5e00-4478-11eb-9bab-91507c643900.jpg',\n                'api': {\n                    'public': 'https://api.{hostname}', // or 'https://api.gopax.co.kr'\n                    'private': 'https://api.{hostname}',\n                },\n                'www': 'https://www.gopax.co.kr',\n                'doc': 'https://gopax.github.io/API/index.en.html',\n                'fees': 'https://www.gopax.com/feeinfo',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'notices',\n                        'assets',\n                        'price-tick-size',\n                        'trading-pairs',\n                        'trading-pairs/{tradingPair}/ticker',\n                        'trading-pairs/{tradingPair}/book',\n                        'trading-pairs/{tradingPair}/trades',\n                        'trading-pairs/{tradingPair}/stats',\n                        'trading-pairs/{tradingPair}/price-tick-size',\n                        'trading-pairs/stats',\n                        'trading-pairs/{tradingPair}/candles',\n                        'time',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'balances',\n                        'balances/{assetName}',\n                        'orders',\n                        'orders/{orderId}',\n                        'orders/clientOrderId/{clientOrderId}',\n                        'trades',\n                        'deposit-withdrawal-status',\n                        'crypto-deposit-addresses',\n                        'crypto-withdrawal-addresses',\n                    ],\n                    'post': [\n                        'orders',\n                    ],\n                    'delete': [\n                        'orders/{orderId}',\n                        'orders/clientOrderId/{clientOrderId}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'percentage': true,\n                    'tierBased': false,\n                    'maker': 0.04 / 100,\n                    'taker': 0.04 / 100,\n                },\n            },\n            'exceptions': {\n                'broad': {\n                    'ERROR_INVALID_ORDER_TYPE': InvalidOrder,\n                    'ERROR_INVALID_AMOUNT': InvalidOrder,\n                    'ERROR_INVALID_TRADING_PAIR': BadSymbol, // Unlikely to be triggered, due to ccxt.gopax.js implementation\n                    'No such order ID': OrderNotFound, // {\"errorMessage\":\"No such order ID\",\"errorCode\":202,\"errorData\":\"Order server error: 202\"}\n                    // 'Not enough amount': InsufficientFunds, // {\"errorMessage\":\"Not enough amount, try increasing your order amount\",\"errorCode\":10212,\"errorData\":{}}\n                    'Forbidden order type': InvalidOrder,\n                    'the client order ID will be reusable which order has already been completed or canceled': InvalidOrder,\n                    'ERROR_NO_SUCH_TRADING_PAIR': BadSymbol, // Unlikely to be triggered, due to ccxt.gopax.js implementation\n                    'ERROR_INVALID_ORDER_SIDE': InvalidOrder,\n                    'ERROR_NOT_HEDGE_TOKEN_USER': InvalidOrder,\n                    'ORDER_EVENT_ERROR_NOT_ALLOWED_BID_ORDER': InvalidOrder, // Triggered only when the exchange is locked\n                    'ORDER_EVENT_ERROR_INSUFFICIENT_BALANCE': InsufficientFunds,\n                    'Invalid option combination': InvalidOrder,\n                    'No such client order ID': OrderNotFound,\n                },\n                'exact': {\n                    '100': BadSymbol, // Invalid asset name\n                    '101': BadSymbol, // Invalid trading pair\n                    '103': InvalidOrder, // Invalid order type\n                    '104': BadSymbol, // Invalid trading pair\n                    '105': BadSymbol, // Trading pair temporarily disabled\n                    '106': BadSymbol, // Invalid asset name\n                    '107': InvalidOrder, // Invalid order amount\n                    '108': InvalidOrder, // Invalid order price\n                    '111': InvalidOrder, // Invalid event type\n                    '201': InsufficientFunds, // Not enough balance\n                    '202': InvalidOrder, // Invalid order ID\n                    '203': InvalidOrder, // Order amount X order price too large\n                    '204': InvalidOrder, // Bid order temporarily unavailable\n                    '205': InvalidOrder, // Invalid side\n                    '206': InvalidOrder, // Invalid order option combination\n                    '10004': AuthenticationError, // Not authorized\n                    // '10004': ExchangeError, // API key not exist\n                    // '10004': ExchangeError, // User KYC not approved\n                    // '10004': ExchangeError, // User account is frozen\n                    // '10004': ExchangeError, // User is under deactivation process\n                    // '10004': ExchangeError, // 2FA is not enabled\n                    // '10004': ExchangeError, // Invalid signature\n                    '10041': BadRequest, // Invalid exchange\n                    '10056': BadRequest, // No registered asset\n                    '10057': BadSymbol, // No registered trading pair\n                    '10059': BadSymbol, // Invalid trading pair\n                    '10062': BadRequest, // Invalid chart interval\n                    '10069': OrderNotFound, // {\"errorMessage\":\"No such order ID: 73152094\",\"errorCode\":10069,\"errorData\":\"73152094\"}\n                    '10155': AuthenticationError, // {\"errorMessage\":\"Invalid API key\",\"errorCode\":10155}\n                    '10166': BadRequest, // Invalid chart range\n                    '10212': InvalidOrder, // {\"errorMessage\":\"Not enough amount, try increasing your order amount\",\"errorCode\":10212,\"errorData\":{}}\n                    '10221': OrderNotFound, // No such client order ID\n                    '10222': InvalidOrder, // Client order ID being used\n                    '10223': InvalidOrder, // Soon the client order ID will be reusable which order has already been completed or canceled\n                    '10227': InvalidOrder, // Invalid client order ID format\n                    '10319': BadRequest, // Pagination is required as you have too many orders\n                    '10358': InvalidOrder, // Invalid order type\n                    '10359': InvalidOrder, // Invalid order side\n                    '10360': InvalidOrder, // Invalid order status\n                    '10361': InvalidOrder, // Invalid order time in force\n                    '10362': InvalidOrder, // Invalid order protection\n                    '10363': InvalidOrder, // Invalid forced completion reason\n                },\n            },\n            'options': {\n                'createMarketBuyOrderRequiresPrice': true,\n            },\n        });\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTime (params);\n        //\n        //     {\"serverTime\":1608327726656}\n        //\n        return this.safeInteger (response, 'serverTime');\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetTradingPairs (params);\n        //\n        //     [\n        //         {\n        //             \"id\":1,\n        //             \"name\":\"ETH-KRW\",\n        //             \"baseAsset\":\"ETH\",\n        //             \"quoteAsset\":\"KRW\",\n        //             \"baseAssetScale\":8,\n        //             \"quoteAssetScale\":0,\n        //             \"priceMin\":1,\n        //             \"restApiOrderAmountMin\":{\n        //                 \"limitAsk\":{\"amount\":10000,\"unit\":\"KRW\"},\n        //                 \"limitBid\":{\"amount\":10000,\"unit\":\"KRW\"},\n        //                 \"marketAsk\":{\"amount\":0.001,\"unit\":\"ETH\"},\n        //                 \"marketBid\":{\"amount\":10000,\"unit\":\"KRW\"},\n        //             },\n        //             \"makerFeePercent\":0.2,\n        //             \"takerFeePercent\":0.2,\n        //         },\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'name');\n            const numericId = this.safeInteger (market, 'id');\n            const baseId = this.safeString (market, 'baseAsset');\n            const quoteId = this.safeString (market, 'quoteAsset');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'price': this.safeInteger (market, 'quoteAssetScale'),\n                'amount': this.safeInteger (market, 'baseAssetScale'),\n            };\n            const minimums = this.safeValue (market, 'restApiOrderAmountMin', {});\n            const marketAsk = this.safeValue (minimums, 'marketAsk', {});\n            const marketBid = this.safeValue (minimums, 'marketBid', {});\n            const takerFeePercentString = this.safeString (market, 'takerFeePercent');\n            const makerFeePercentString = this.safeString (market, 'makerFeePercent');\n            const taker = this.parseNumber (Precise.stringDiv (takerFeePercentString, '100'));\n            const maker = this.parseNumber (Precise.stringDiv (makerFeePercentString, '100'));\n            result.push ({\n                'id': id,\n                'info': market,\n                'numericId': numericId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': this.safeString (market, 'baseAsset'),\n                'quoteId': this.safeString (market, 'quoteAsset'),\n                'active': true,\n                'taker': taker,\n                'maker': maker,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (marketAsk, 'amount'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': this.safeNumber (market, 'priceMin'),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': this.safeNumber (marketBid, 'amount'),\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetAssets (params);\n        //\n        //     [\n        //         {\n        //             \"id\":\"KRW\",\n        //             \"name\":\"대한민국 원\",\n        //             \"scale\":0,\n        //             \"withdrawalFee\":1000,\n        //             \"withdrawalAmountMin\":5000\n        //         },\n        //         {\n        //             \"id\":\"ETH\",\n        //             \"name\":\"이더리움\",\n        //             \"scale\":8,\n        //             \"withdrawalFee\":0.03,\n        //             \"withdrawalAmountMin\":0.015\n        //         },\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'id');\n            const code = this.safeCurrencyCode (id);\n            const name = this.safeString (currency, 'name');\n            const fee = this.safeNumber (currency, 'withdrawalFee');\n            const precision = this.safeNumber (currency, 'scale');\n            result[code] = {\n                'id': id,\n                'info': currency,\n                'code': code,\n                'name': name,\n                'active': true,\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeNumber (currency, 'withdrawalAmountMin'),\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'tradingPair': market['id'],\n            // 'level': 3, // 1 best bidask, 2 top 50 bidasks, 3 all bidasks\n        };\n        const response = await this.publicGetTradingPairsTradingPairBook (this.extend (request, params));\n        //\n        //     {\n        //         \"sequence\":17691957,\n        //         \"bid\":[\n        //             [\"17690499\",25019000,0.00008904,\"1608326468921\"],\n        //             [\"17691894\",25010000,0.4295,\"1608326499940\"],\n        //             [\"17691895\",25009000,0.2359,\"1608326499953\"],\n        //         ],\n        //         \"ask\":[\n        //             [\"17689176\",25024000,0.000098,\"1608326442006\"],\n        //             [\"17691351\",25031000,0.206,\"1608326490418\"],\n        //             [\"17691571\",25035000,0.3996,\"1608326493742\"],\n        //         ]\n        //     }\n        //\n        const nonce = this.safeInteger (response, 'sequence');\n        const result = this.parseOrderBook (response, symbol, undefined, 'bid', 'ask', 1, 2);\n        result['nonce'] = nonce;\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         \"price\":25087000,\n        //         \"ask\":25107000,\n        //         \"askVolume\":0.05837704,\n        //         \"bid\":25087000,\n        //         \"bidVolume\":0.00398628,\n        //         \"volume\":350.09171591,\n        //         \"quoteVolume\":8721016926.06529,\n        //         \"time\":\"2020-12-18T21:42:13.774Z\",\n        //     }\n        //\n        // fetchTickers\n        //\n        //     {\n        //         \"name\":\"ETH-KRW\",\n        //         \"open\":690500,\n        //         \"high\":719500,\n        //         \"low\":681500,\n        //         \"close\":709500,\n        //         \"volume\":2784.6081544,\n        //         \"time\":\"2020-12-18T21:54:50.795Z\"\n        //     }\n        //\n        const marketId = this.safeString (ticker, 'name');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const timestamp = this.parse8601 (this.safeString (ticker, 'time'));\n        const open = this.safeNumber (ticker, 'open');\n        const last = this.safeNumber2 (ticker, 'price', 'close');\n        let change = undefined;\n        let percentage = undefined;\n        let average = undefined;\n        if ((last !== undefined) && (open !== undefined)) {\n            average = this.sum (last, open) / 2;\n            change = last - open;\n            if (open > 0) {\n                percentage = change / open * 100;\n            }\n        }\n        const baseVolume = this.safeNumber (ticker, 'volume');\n        const quoteVolume = this.safeNumber (ticker, 'quoteVolume');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'info': ticker,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': this.safeNumber (ticker, 'bidVolume'),\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': this.safeNumber (ticker, 'askVolume'),\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'tradingPair': market['id'],\n        };\n        const response = await this.publicGetTradingPairsTradingPairTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"price\":25087000,\n        //         \"ask\":25107000,\n        //         \"askVolume\":0.05837704,\n        //         \"bid\":25087000,\n        //         \"bidVolume\":0.00398628,\n        //         \"volume\":350.09171591,\n        //         \"quoteVolume\":8721016926.06529,\n        //         \"time\":\"2020-12-18T21:42:13.774Z\",\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTradingPairsStats (params);\n        //\n        //     [\n        //         {\n        //             \"name\":\"ETH-KRW\",\n        //             \"open\":690500,\n        //             \"high\":719500,\n        //             \"low\":681500,\n        //             \"close\":709500,\n        //             \"volume\":2784.6081544,\n        //             \"time\":\"2020-12-18T21:54:50.795Z\"\n        //         }\n        //     ]\n        //\n        return this.parseTickers (response, symbols);\n    }\n\n    parsePublicTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (trade, 'time'));\n        const price = this.safeNumber (trade, 'price');\n        const amount = this.safeNumber (trade, 'amount');\n        let symbol = undefined;\n        if ('symbol' in market) {\n            symbol = this.safeString (market, 'symbol');\n        }\n        return {\n            'info': trade,\n            'id': this.safeString (trade, 'id'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined, // Not mandatory to specify\n            'type': undefined, // Not mandatory to specify\n            'side': this.safeString (trade, 'side'),\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': price * amount,\n            'fee': undefined,\n        };\n    }\n\n    parsePrivateTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (trade, 'timestamp'));\n        const symbol = this.safeString (trade, 'tradingPairName').replace ('-', '/');\n        const side = this.safeString (trade, 'side');\n        const price = this.safeNumber (trade, 'price');\n        const amount = this.safeNumber (trade, 'baseAmount');\n        let feeCurrency = symbol.slice (0, 3);\n        if (side === 'sell') {\n            feeCurrency = symbol.slice (4);\n        }\n        const fee = {\n            'cost': this.safeNumber (trade, 'fee'),\n            'currency': feeCurrency,\n            'rate': undefined,\n        };\n        return {\n            'info': trade,\n            'id': this.safeString (trade, 'id'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': this.safeInteger (trade, 'orderId'),\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': this.safeString (trade, 'position'),\n            'price': price,\n            'amount': amount,\n            'cost': price * amount,\n            'fee': fee,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // public fetchTrades\n        //\n        //     {\n        //         \"time\":\"2020-12-19T12:17:43.000Z\",\n        //         \"date\":1608380263,\n        //         \"id\":23903608,\n        //         \"price\":25155000,\n        //         \"amount\":0.0505,\n        //         \"side\":\"sell\",\n        //     }\n        //\n        // private fetchMyTrades\n        //\n        //     {\n        //         \"id\": 73953,                             // trading event ID\n        //         \"orderId\": 453324,                       // order ID\n        //         \"baseAmount\": 3,                         // traded base asset amount\n        //         \"quoteAmount\": 3000000,                  // traded quote asset amount\n        //         \"fee\": 0.0012,                           // fee\n        //         \"price\": 1000000,                        // price\n        //         \"timestamp\": \"2020-09-25T04:06:30.000Z\", // trading time\n        //         \"side\": \"buy\",                           // buy, sell\n        //         \"tradingPairName\": \"ZEC-KRW\",            // order book\n        //         \"position\": \"maker\"                      // maker, taker\n        //     }\n        //\n        //     {\n        //         \"tradeId\": 74072,            // trade ID\n        //         \"orderId\": 453529,           // order ID\n        //         \"side\": 2,                   // 1(bid), 2(ask)\n        //         \"type\": 1,                   // 1(limit), 2(market)\n        //         \"baseAmount\": 0.01,          // filled base asset amount (in ZEC for this case)\n        //         \"quoteAmount\": 1,            // filled quote asset amount (in KRW for this case)\n        //         \"fee\": 0.0004,               // fee\n        //         \"price\": 100,                // price\n        //         \"isSelfTrade\": false,        // whether both of matching orders are yours\n        //         \"occurredAt\": 1603932107,    // trade occurrence time\n        //         \"tradingPairName\": \"ZEC-KRW\" // order book\n        //     }\n        //\n        const id = this.safeString2 (trade, 'id', 'tradeId');\n        const orderId = this.safeInteger (trade, 'orderId');\n        let timestamp = this.parse8601 (this.safeString2 (trade, 'time', 'timestamp'));\n        timestamp = this.safeTimestamp (trade, 'occuredAt', timestamp);\n        const marketId = this.safeString (trade, 'tradingPairName');\n        market = this.safeMarket (marketId, market, '-');\n        const symbol = market['symbol'];\n        let side = this.safeString (trade, 'side');\n        if (side === '1') {\n            side = 'buy';\n        } else if (side === '2') {\n            side = 'sell';\n        }\n        let type = this.safeString (trade, 'type');\n        if (type === '1') {\n            type = 'limit';\n        } else if (type === '2') {\n            type = 'market';\n        }\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString2 (trade, 'amount', 'baseAmount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        let cost = this.safeNumber (trade, 'quoteAmount');\n        if (cost === undefined) {\n            cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        }\n        const feeCost = this.safeNumber (trade, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': market['base'],\n            };\n        }\n        const takerOrMaker = this.safeString (trade, 'position');\n        return {\n            'info': trade,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'tradingPair': market['id'],\n            // 'limit': limit,\n            // 'pastmax': id, // read data older than this ID\n            // 'latestmin': id, // read data newer than this ID\n            // 'after': parseInt (since / 1000),\n            // 'before': this.seconds (),\n        };\n        if (since !== undefined) {\n            request['after'] = parseInt (since / 1000);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetTradingPairsTradingPairTrades (this.extend (request, params));\n        //\n        //     [\n        //         {\"time\":\"2020-12-19T12:17:43.000Z\",\"date\":1608380263,\"id\":23903608,\"price\":25155000,\"amount\":0.0505,\"side\":\"sell\"},\n        //         {\"time\":\"2020-12-19T12:17:13.000Z\",\"date\":1608380233,\"id\":23903604,\"price\":25140000,\"amount\":0.019,\"side\":\"sell\"},\n        //         {\"time\":\"2020-12-19T12:16:49.000Z\",\"date\":1608380209,\"id\":23903599,\"price\":25140000,\"amount\":0.0072,\"side\":\"sell\"},\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1606780800000, // timestamp\n        //         21293000,      // low\n        //         21300000,      // high\n        //         21294000,      // open\n        //         21300000,      // close\n        //         1.019126,      // volume\n        //     ]\n        //\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeNumber (ohlcv, 3),\n            this.safeNumber (ohlcv, 2),\n            this.safeNumber (ohlcv, 1),\n            this.safeNumber (ohlcv, 4),\n            this.safeNumber (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        limit = (limit === undefined) ? 1024 : limit; // default 1024\n        const request = {\n            'tradingPair': market['id'],\n            // 'start': since,\n            // 'end': this.milliseconds (),\n            'interval': this.timeframes[timeframe],\n        };\n        const duration = this.parseTimeframe (timeframe);\n        if (since === undefined) {\n            const end = this.milliseconds ();\n            request['end'] = end;\n            request['start'] = end - limit * duration * 1000;\n        } else {\n            request['start'] = since;\n            request['end'] = this.sum (since, limit * duration * 1000);\n        }\n        const response = await this.publicGetTradingPairsTradingPairCandles (this.extend (request, params));\n        //\n        //     [\n        //         [1606780800000,21293000,21300000,21294000,21300000,1.019126],\n        //         [1606780860000,21237000,21293000,21293000,21263000,0.96800057],\n        //         [1606780920000,21240000,21240000,21240000,21240000,0.11068715],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseBalanceResponse (response) {\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString2 (balance, 'asset', 'isoAlpha3');\n            const code = this.safeCurrencyCode (currencyId);\n            const hold = this.safeString (balance, 'hold');\n            const pendingWithdrawal = this.safeString (balance, 'pendingWithdrawal');\n            const account = this.account ();\n            account['free'] = this.safeString (balance, 'avail');\n            account['used'] = Precise.stringAdd (hold, pendingWithdrawal);\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalances (params);\n        //\n        //     [\n        //         {\n        //             \"asset\": \"KRW\",                   // asset name\n        //             \"avail\": 1759466.76,              // available amount to place order\n        //             \"hold\": 16500,                    // outstanding amount on order books\n        //             \"pendingWithdrawal\": 0,           // amount being withdrawn\n        //             \"lastUpdatedAt\": \"1600684352032\", // balance last update time\n        //         },\n        //     ]\n        //\n        return this.parseBalanceResponse (response);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'placed': 'open',\n            'cancelled': 'canceled',\n            'completed': 'closed',\n            'updated': 'open',\n            'reserved': 'open',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // cancelOrder\n        //\n        //     {} // empty object\n        //\n        // fetchOrder, fetchOrders, fetchOpenOrders, createOrder\n        //\n        //     {\n        //         \"id\": \"453324\",                          // order ID\n        //         \"clientOrderId\": \"zeckrw23456\",          // client order ID (showed only when it exists)\n        //         \"status\": \"updated\",                     // placed, cancelled, completed, updated, reserved\n        //         \"forcedCompletionReason\": undefined,     // the reason in case it was canceled in the middle (protection or timeInForce)\n        //         \"tradingPairName\": \"ZEC-KRW\",            // order book\n        //         \"side\": \"buy\",                           // buy, sell\n        //         \"type\": \"limit\",                         // limit, market\n        //         \"price\": 1000000,                        // price\n        //         \"stopPrice\": undefined,                  // stop price (showed only for stop orders)\n        //         \"amount\": 4,                             // initial amount\n        //         \"remaining\": 1,                          // outstanding amount\n        //         \"protection\": \"yes\",                     // whether protection is activated (yes or no)\n        //         \"timeInForce\": \"gtc\",                    // limit order's time in force (gtc/po/ioc/fok)\n        //         \"createdAt\": \"2020-09-25T04:06:20.000Z\", // order placement time\n        //         \"updatedAt\": \"2020-09-25T04:06:29.000Z\", // order last update time\n        //         \"balanceChange\": {\n        //             \"baseGross\": 3,                      // base asset balance's gross change (in ZEC for this case)\n        //             \"baseFee\": {\n        //                 \"taking\": 0,                     // base asset fee imposed as taker\n        //                 \"making\": -0.0012                // base asset fee imposed as maker\n        //             },\n        //             \"baseNet\": 2.9988,                   // base asset balance's net change (in ZEC for this case)\n        //             \"quoteGross\": -3000000,              // quote asset balance's gross change (in KRW for\n        //             \"quoteFee\": {\n        //                 \"taking\": 0,                     // quote asset fee imposed as taker\n        //                 \"making\": 0                      // quote asset fee imposed as maker\n        //             },\n        //             \"quoteNet\": -3000000                 // quote asset balance's net change (in KRW for this case)\n        //         }\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const clientOrderId = this.safeString (order, 'clientOrderId');\n        const timestamp = this.parse8601 (this.safeString (order, 'createdAt'));\n        const type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'side');\n        const timeInForce = this.safeStringUpper (order, 'timeInForce');\n        const price = this.safeNumber (order, 'price');\n        const amount = this.safeNumber (order, 'amount');\n        const stopPrice = this.safeNumber (order, 'stopPrice');\n        const remaining = this.safeNumber (order, 'remaining');\n        const marketId = this.safeString (order, 'tradingPairName');\n        market = this.safeMarket (marketId, market, '-');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const balanceChange = this.safeValue (order, 'balanceChange', {});\n        const filled = this.safeNumber (balanceChange, 'baseNet');\n        let cost = this.safeNumber (balanceChange, 'quoteNet');\n        if (cost !== undefined) {\n            cost = Math.abs (cost);\n        }\n        let updated = undefined;\n        if ((filled !== undefined) && (filled > 0)) {\n            updated = this.parse8601 (this.safeString (order, 'updatedAt'));\n        }\n        let fee = undefined;\n        if (side === 'buy') {\n            const baseFee = this.safeValue (balanceChange, 'baseFee', {});\n            const taking = this.safeNumber (baseFee, 'taking');\n            const making = this.safeNumber (baseFee, 'making');\n            fee = {\n                'currency': market['base'],\n                'cost': this.sum (taking, making),\n            };\n        } else {\n            const quoteFee = this.safeValue (balanceChange, 'quoteFee', {});\n            const taking = this.safeNumber (quoteFee, 'taking');\n            const making = this.safeNumber (quoteFee, 'making');\n            fee = {\n                'currency': market['quote'],\n                'cost': this.sum (taking, making),\n            };\n        }\n        let postOnly = undefined;\n        if (timeInForce !== undefined) {\n            postOnly = (timeInForce === 'PO');\n        }\n        return this.safeOrder ({\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': updated,\n            'status': status,\n            'symbol': market['symbol'],\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'average': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'cost': cost,\n            'trades': undefined,\n            'fee': fee,\n            'info': order,\n        });\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = undefined;\n        const clientOrderId = this.safeString (params, 'clientOrderId');\n        params = this.omit (params, 'clientOrderId');\n        const request = {};\n        if (clientOrderId === undefined) {\n            method = 'privateGetOrdersOrderId';\n            request['orderId'] = id;\n        } else {\n            method = 'privateGetOrdersClientOrderIdClientOrderId';\n            request['clientOrderId'] = clientOrderId;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": \"453324\",                          // order ID\n        //         \"clientOrderId\": \"zeckrw23456\",          // client order ID (showed only when it exists)\n        //         \"status\": \"updated\",                     // placed, cancelled, completed, updated, reserved\n        //         \"forcedCompletionReason\": undefined,     // the reason in case it was canceled in the middle (protection or timeInForce)\n        //         \"tradingPairName\": \"ZEC-KRW\",            // order book\n        //         \"side\": \"buy\",                           // buy, sell\n        //         \"type\": \"limit\",                         // limit, market\n        //         \"price\": 1000000,                        // price\n        //         \"stopPrice\": undefined,                  // stop price (showed only for stop orders)\n        //         \"amount\": 4,                             // initial amount\n        //         \"remaining\": 1,                          // outstanding amount\n        //         \"protection\": \"yes\",                     // whether protection is activated (yes or no)\n        //         \"timeInForce\": \"gtc\",                    // limit order's time in force (gtc/po/ioc/fok)\n        //         \"createdAt\": \"2020-09-25T04:06:20.000Z\", // order placement time\n        //         \"updatedAt\": \"2020-09-25T04:06:29.000Z\", // order last update time\n        //         \"balanceChange\": {\n        //             \"baseGross\": 3,                      // base asset balance's gross change (in ZEC for this case)\n        //             \"baseFee\": {\n        //                 \"taking\": 0,                     // base asset fee imposed as taker\n        //                 \"making\": -0.0012                // base asset fee imposed as maker\n        //             },\n        //             \"baseNet\": 2.9988,                   // base asset balance's net change (in ZEC for this case)\n        //             \"quoteGross\": -3000000,              // quote asset balance's gross change (in KRW for\n        //             \"quoteFee\": {\n        //                 \"taking\": 0,                     // quote asset fee imposed as taker\n        //                 \"making\": 0                      // quote asset fee imposed as maker\n        //             },\n        //             \"quoteNet\": -3000000                 // quote asset balance's net change (in KRW for this case)\n        //         }\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'includePast': 'true', // if true, completed and canceled orders are included as the result, they are accessible for one hour only from its completion or cancellation time\n            // 'pagination': 'false', // if the result is more than 3,000 orders, set this value as true to access 1000 orders at max per each page\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\": \"453324\",                          // order ID\n        //             \"clientOrderId\": \"zeckrw23456\",          // client order ID (showed only when it exists)\n        //             \"status\": \"updated\",                     // placed, cancelled, completed, updated, reserved\n        //             \"forcedCompletionReason\": undefined,     // the reason in case it was canceled in the middle (protection or timeInForce)\n        //             \"tradingPairName\": \"ZEC-KRW\",            // order book\n        //             \"side\": \"buy\",                           // buy, sell\n        //             \"type\": \"limit\",                         // limit, market\n        //             \"price\": 1000000,                        // price\n        //             \"stopPrice\": undefined,                  // stop price (showed only for stop orders)\n        //             \"amount\": 4,                             // initial amount\n        //             \"remaining\": 1,                          // outstanding amount\n        //             \"protection\": \"yes\",                     // whether protection is activated (yes or no)\n        //             \"timeInForce\": \"gtc\",                    // limit order's time in force (gtc/po/ioc/fok)\n        //             \"createdAt\": \"2020-09-25T04:06:20.000Z\", // order placement time\n        //             \"updatedAt\": \"2020-09-25T04:06:29.000Z\", // order last update time\n        //             \"balanceChange\": {\n        //                 \"baseGross\": 3,                      // base asset balance's gross change (in ZEC for this case)\n        //                 \"baseFee\": {\n        //                     \"taking\": 0,                     // base asset fee imposed as taker\n        //                     \"making\": -0.0012                // base asset fee imposed as maker\n        //                 },\n        //                 \"baseNet\": 2.9988,                   // base asset balance's net change (in ZEC for this case)\n        //                 \"quoteGross\": -3000000,              // quote asset balance's gross change (in KRW for\n        //                 \"quoteFee\": {\n        //                     \"taking\": 0,                     // quote asset fee imposed as taker\n        //                     \"making\": 0                      // quote asset fee imposed as maker\n        //                 },\n        //                 \"quoteNet\": -3000000                 // quote asset balance's net change (in KRW for this case)\n        //             }\n        //         },\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'includePast': 'false',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            // 'clientOrderId': 'test4321', // max 20 characters of [a-zA-Z0-9_-]\n            'tradingPairName': market['id'],\n            'side': side, // buy, sell\n            'type': type, // limit, market\n            // 'price': this.priceToPrecision (symbol, price),\n            // 'stopPrice': this.priceToPrecision (symbol, stopPrice), // optional, becomes a stop order if set\n            // 'amount': this.amountToPrecision (symbol, amount),\n            // 'protection': 'no', // whether protection is activated\n            // 'timeInForce': 'gtc', // gtc, po, ioc, fok\n        };\n        if (type === 'limit') {\n            request['price'] = this.priceToPrecision (symbol, price);\n            request['amount'] = this.amountToPrecision (symbol, amount);\n        } else if (type === 'market') {\n            // for market buy it requires the amount of quote currency to spend\n            if (side === 'buy') {\n                let total = amount;\n                const createMarketBuyOrderRequiresPrice = this.safeValue (this.options, 'createMarketBuyOrderRequiresPrice', true);\n                if (createMarketBuyOrderRequiresPrice) {\n                    if (price === undefined) {\n                        throw new InvalidOrder (this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument\");\n                    }\n                    total = price * amount;\n                }\n                const precision = market['precision']['price'];\n                request['amount'] = this.decimalToPrecision (total, TRUNCATE, precision, this.precisionMode);\n            } else {\n                request['amount'] = this.amountToPrecision (symbol, amount);\n            }\n        }\n        const clientOrderId = this.safeString (params, 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            request['clientOrderId'] = clientOrderId;\n            params = this.omit (params, 'clientOrderId');\n        }\n        const stopPrice = this.safeNumber (params, 'stopPrice');\n        if (stopPrice !== undefined) {\n            request['stopPrice'] = this.priceToPrecision (symbol, stopPrice);\n            params = this.omit (params, 'stopPrice');\n        }\n        const timeInForce = this.safeStringLower (params, 'timeInForce');\n        if (timeInForce !== undefined) {\n            request['timeInForce'] = timeInForce;\n            params = this.omit (params, 'timeInForce');\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": \"453327\",                          // order ID\n        //         \"clientOrderId\": \"test4321\",             // client order ID (showed only when it exists)\n        //         \"status\": \"reserved\",                    // placed, cancelled, completed, updated, reserved\n        //         \"forcedCompletionReason\": undefined,     // the reason in case it was canceled in the middle (protection or timeInForce)\n        //         \"tradingPairName\": \"BCH-KRW\",            // order book\n        //         \"side\": \"sell\",                          // buy, sell\n        //         \"type\": \"limit\",                         // limit, market\n        //         \"price\": 11000000,                       // price\n        //         \"stopPrice\": 12000000,                   // stop price (showed only for stop orders)\n        //         \"amount\": 0.5,                           // initial amount\n        //         \"remaining\": 0.5,                        // outstanding amount\n        //         \"protection\": \"no\",                      // whether protection is activated (yes or no)\n        //         \"timeInForce\": \"gtc\",                    // limit order's time in force (gtc/po/ioc/fok)\n        //         \"createdAt\": \"2020-09-25T04:51:31.000Z\", // order placement time\n        //         \"balanceChange\": {\n        //             \"baseGross\": 0,                      // base asset balance's gross change (in BCH for this case)\n        //             \"baseFee\": {\n        //                 \"taking\": 0,                     // base asset fee imposed as taker\n        //                 \"making\": 0                      // base asset fee imposed as maker\n        //             },\n        //             \"baseNet\": 0,                        // base asset balance's net change (in BCH for this case)\n        //             \"quoteGross\": 0,                     // quote asset balance's gross change (in KRW for\n        //             \"quoteFee\": {\n        //                 \"taking\": 0,                     // quote asset fee imposed as taker\n        //                 \"making\": 0                      // quote asset fee imposed as maker\n        //             },\n        //             \"quoteNet\": 0                        // quote asset balance's net change (in KRW for this case)\n        //         }\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const clientOrderId = this.safeString (params, 'clientOrderId');\n        let method = undefined;\n        if (clientOrderId === undefined) {\n            method = 'privateDeleteOrdersOrderId';\n            request['orderId'] = id;\n        } else {\n            method = 'privateDeleteOrdersClientOrderIdClientOrderId';\n            request['clientOrderId'] = clientOrderId;\n            params = this.omit (params, 'clientOrderId');\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {}\n        //\n        const order = this.parseOrder (response);\n        return this.extend (order, { 'id': id });\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'limit': limit, // max 100\n            // 'pastmax': id, // read data older than this id\n            // 'latestmin': id, // read data newer than this id\n            // 'after': parseInt (since / 1000), // Read data after this timestamp in seconds\n            // 'before': this.seconds (), // Read data before this timestamp in seconds\n            'deepSearch': 'true', // read data older than one month ago are inclusively looked up only when it is \"true\"\n        };\n        if (since !== undefined) {\n            request['after'] = parseInt (since / 1000);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetTrades (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\": 73953,                             // trading event ID\n        //             \"orderId\": 453324,                       // order ID\n        //             \"baseAmount\": 3,                         // traded base asset amount\n        //             \"quoteAmount\": 3000000,                  // traded quote asset amount\n        //             \"fee\": 0.0012,                           // fee\n        //             \"price\": 1000000,                        // price\n        //             \"timestamp\": \"2020-09-25T04:06:30.000Z\", // trading time\n        //             \"side\": \"buy\",                           // buy, sell\n        //             \"tradingPairName\": \"ZEC-KRW\",            // order book\n        //             \"position\": \"maker\"                      // maker, taker\n        //         },\n        //     ]\n        //\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        //\n        //     {\n        //         \"asset\": \"BTC\",                                  // asset name\n        //         \"address\": \"1CwC2cMFu1jRQUBtw925cENbT1kctJBMdm\", // deposit address\n        //         \"memoId\": null,                                  // memo ID (showed only for assets using memo ID)\n        //         \"createdAt\": 1594802312                          // deposit address creation time\n        //     }\n        //\n        const address = this.safeString (depositAddress, 'address');\n        const tag = this.safeString (depositAddress, 'memoId');\n        const currencyId = this.safeString (depositAddress, 'asset');\n        const code = this.safeCurrencyCode (currencyId);\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': depositAddress,\n        };\n    }\n\n    async fetchDepositAddresses (codes = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetCryptoDepositAddresses (params);\n        //\n        //     [\n        //         {\n        //             \"asset\": \"BTC\",                                  // asset name\n        //             \"address\": \"1CwC2cMFu1jRQUBtw925cENbT1kctJBMdm\", // deposit address\n        //             \"memoId\": null,                                  // memo ID (showed only for assets using memo ID)\n        //             \"createdAt\": 1594802312                          // deposit address creation time\n        //         },\n        //     ]\n        //\n        return this.parseDepositAddresses (response, codes);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.fetchDepositAddresses (undefined, params);\n        const address = this.safeValue (response, code);\n        if (address === undefined) {\n            throw new InvalidAddress (this.id + ' fetchDepositAddress() ' + code + ' address not found');\n        }\n        return address;\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'reviewing': 'pending',\n            'rejected': 'rejected',\n            'processing': 'pending',\n            'failed': 'failed',\n            'completed': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //     {\n        //         \"id\": 640,                     // deposit/withdrawal event ID\n        //         \"asset\": \"BTC\",                // asset name\n        //         \"type\": \"crypto_withdrawal\",   // fiat_withdrawal, fiat_deposit, crypto_withdrawal, crypto_deposit\n        //         \"netAmount\": 0.0001,           // amount\n        //         \"feeAmount\": 0.0005,           // fee (null if there is no imposed fee)\n        //         \"status\": \"completed\",         // reviewing, rejected, processing, failed, completed\n        //         \"reviewStartedAt\": 1595556218, // request time\n        //         \"completedAt\": 1595556902,     // completion time (showed only in case of completed)\n        //         \"txId\": \"eaca5ad3...\",         // tx ID\n        //         \"sourceAddress\": null,         // sender address (showed only in case of crypto_deposit)\n        //         \"destinationAddress: \"3H8...\", // recipient address (showed only in case of crypto_withdrawal)\n        //         \"destinationMemoId\": null      // recipient address's memo ID\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const txid = this.safeString (transaction, 'txId');\n        const currencyId = this.safeString (transaction, 'asset');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        let type = this.safeString (transaction, 'type');\n        if ((type === 'crypto_withdrawal') || (type === 'fiat_withdrawal')) {\n            type = 'withdrawal';\n        } else if ((type === 'crypto_deposit' || type === 'fiat_deposit')) {\n            type = 'deposit';\n        }\n        const amount = this.safeNumber (transaction, 'netAmount');\n        const feeCost = this.safeNumber (transaction, 'feeAmount');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': code,\n            };\n        }\n        const timestamp = this.safeTimestamp (transaction, 'reviewStartedAt');\n        const updated = this.safeTimestamp (transaction, 'completedAt');\n        const addressFrom = this.safeString (transaction, 'sourceAddress');\n        const addressTo = this.safeString (transaction, 'destinationAddress');\n        const tagFrom = this.safeString (transaction, 'sourceMemoId');\n        const tagTo = this.safeString (transaction, 'destinationMemoId');\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': addressFrom,\n            'address': addressTo,\n            'addressTo': addressTo,\n            'tagFrom': tagFrom,\n            'tag': tagTo,\n            'tagTo': tagTo,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'comment': undefined,\n            'fee': fee,\n        };\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'limit': limit, // max 20\n            // 'latestmin': limit, // read data older than this id\n            // 'after': this.milliseconds (),\n            // 'before': since,\n            // 'completedOnly': 'no',\n        };\n        if (since !== undefined) {\n            request['before'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetDepositWithdrawalStatus (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\": 640,                     // deposit/withdrawal event ID\n        //             \"asset\": \"BTC\",                // asset name\n        //             \"type\": \"crypto_withdrawal\",   // fiat_withdrawal, fiat_deposit, crypto_withdrawal, crypto_deposit\n        //             \"netAmount\": 0.0001,           // amount\n        //             \"feeAmount\": 0.0005,           // fee (null if there is no imposed fee)\n        //             \"status\": \"completed\",         // reviewing, rejected, processing, failed, completed\n        //             \"reviewStartedAt\": 1595556218, // request time\n        //             \"completedAt\": 1595556902,     // completion time (showed only in case of completed)\n        //             \"txId\": \"eaca5ad3...\",         // tx ID\n        //             \"sourceAddress\": null,         // sender address (showed only in case of crypto_deposit)\n        //             \"destinationAddress: \"3H8...\", // recipient address (showed only in case of crypto_withdrawal)\n        //             \"destinationMemoId\": null      // recipient address's memo ID\n        //         },\n        //     ]\n        //\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        return this.parseTransactions (response, currency, since, limit, params);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) { // for authentication in private API calls\n        const endpoint = '/' + this.implodeParams (path, params);\n        let url = this.implodeParams (this.urls['api'][api], { 'hostname': this.hostname }) + endpoint;\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const timestamp = this.nonce ().toString ();\n            let auth = 't' + timestamp + method + endpoint;\n            headers = {\n                'api-key': this.apiKey,\n                'timestamp': timestamp,\n            };\n            if (method === 'POST') {\n                headers['Content-Type'] = 'application/json';\n                body = this.json (params);\n                auth += body;\n            } else if (endpoint === '/orders') {\n                if (Object.keys (query).length) {\n                    const urlQuery = '?' + this.urlencode (query);\n                    auth += urlQuery;\n                    url += urlQuery;\n                }\n            } else if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            }\n            const rawSecret = this.base64ToBinary (this.secret);\n            const signature = this.hmac (this.encode (auth), rawSecret, 'sha512', 'base64');\n            headers['signature'] = signature;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        //     {\"errorMessage\":\"Invalid API key\",\"errorCode\":10155}\n        //\n        if (!Array.isArray (response)) {\n            const errorCode = this.safeString (response, 'errorCode');\n            const errorMessage = this.safeString (response, 'errorMessage');\n            const feedback = this.id + ' ' + body;\n            if (errorMessage !== undefined) {\n                this.throwBroadlyMatchedException (this.exceptions['broad'], body, feedback);\n            }\n            if (errorCode !== undefined) {\n                this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            }\n            if ((errorCode !== undefined) || (errorMessage !== undefined)) {\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}