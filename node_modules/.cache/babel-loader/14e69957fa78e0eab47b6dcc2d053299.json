{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Price\\\\Documents\\\\VS Code\\\\bixpro\\\\src\\\\components\\\\cryptX\\\\charts\\\\chart\\\\MarketsPriceLineAreaChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Chart from 'react-google-charts';\nimport { CONFIG } from '../../../../config/constant';\nimport { Row, Col, Card, Table, Tab, Nav, Form, InputGroup, FormControl } from 'react-bootstrap';\nimport BTable from 'react-bootstrap/Table';\nimport axios from 'axios'; //API Configuration\n///Import for API Keys from Config\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst secretKey = CONFIG.binance.secretKey;\nconst apiKey = CONFIG.binance.apiKey; //Binance API\n\nconst Binance = require('node-binance-api');\n\nconst binance = new Binance().options({\n  APIKEY: apiKey,\n  APISECRET: secretKey\n});\nbinance.options({\n  APIKEY: apiKey,\n  APISECRET: secretKey,\n  useServerTime: true,\n  recvWindow: 5000,\n  // Set a higher recvWindow to increase response timeout\n  verbose: true,\n  // Add extra output when subscribing to WebSockets, etc\n  log: log => {\n    console.log(log); // You can create your own logger here, or disable console output\n  }\n}); //Create data for line chart\n\nfunction createBarData(data) {\n  const lineData = [['Date', 'Price']];\n  let prices = data['prices'];\n\n  for (const day in prices) {\n    // console.log('Daily Data', prices[day])\n    lineData.push(prices[day]);\n  }\n\n  ;\n  console.log('DAILY PRICES', lineData);\n  return lineData;\n}\n\nconst MarketsPriceLineAreaChart = () => {\n  _s();\n\n  const [priceData, setPriceData] = useState([]);\n  const url = 'https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=365&interval=daily';\n\n  const getPriceData = async () => {\n    axios.get(url).then(res => {\n      setPriceData(res.data);\n    }).catch(error => console.log(error));\n  };\n\n  useEffect(() => {\n    getPriceData();\n    const interval = setInterval(() => {\n      getPriceData();\n    }, 60000); // console.log('PRICEDATA',priceData)\n\n    return () => clearInterval(interval);\n  }, []);\n  const data = createBarData(priceData);\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    width: \"100%\",\n    height: \"300px\",\n    chartType: \"AreaChart\",\n    loader: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this) // data={[\n    //     ['Year', 'Sales', 'Expenses'],\n    //     ['2013', 1000, 400],\n    //     ['2014', 1170, 460],\n    //     ['2015', 660, 1120],\n    //     ['2016', 1030, 540],\n    // ]}\n    ,\n    data: data,\n    options: {\n      title: 'Company Performance',\n      hAxis: {\n        title: 'Year',\n        titleTextStyle: {\n          color: '#333'\n        }\n      },\n      vAxis: {\n        minValue: 0\n      },\n      colors: ['#1de9b6', '#1dc4e9']\n    },\n    rootProps: {\n      'data-testid': '1'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 12\n  }, this);\n};\n\n_s(MarketsPriceLineAreaChart, \"evnTVV+ojccWro9vmrVPhQHmNmw=\");\n\n_c = MarketsPriceLineAreaChart;\nexport default MarketsPriceLineAreaChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketsPriceLineAreaChart\");","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/src/components/cryptX/charts/chart/MarketsPriceLineAreaChart.js"],"names":["React","useState","useEffect","Chart","CONFIG","Row","Col","Card","Table","Tab","Nav","Form","InputGroup","FormControl","BTable","axios","secretKey","binance","apiKey","Binance","require","options","APIKEY","APISECRET","useServerTime","recvWindow","verbose","log","console","createBarData","data","lineData","prices","day","push","MarketsPriceLineAreaChart","priceData","setPriceData","url","getPriceData","get","then","res","catch","error","interval","setInterval","clearInterval","title","hAxis","titleTextStyle","color","vAxis","minValue","colors"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\r\nimport Chart from 'react-google-charts';\r\nimport { CONFIG } from '../../../../config/constant';\r\nimport {Row, Col, Card, Table, Tab, Nav, Form, InputGroup, FormControl } from 'react-bootstrap';\r\nimport BTable from 'react-bootstrap/Table';\r\nimport axios from 'axios';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Create data for line chart\r\nfunction createBarData(data) {\r\n    const lineData = [\r\n        ['Date', 'Price']\r\n    ];\r\n\r\n    let prices = data['prices'];\r\n\r\n    for (const day in prices) {\r\n        // console.log('Daily Data', prices[day])\r\n        lineData.push(prices[day]);\r\n    };\r\n\r\n    console.log('DAILY PRICES', lineData);\r\n\r\n    return lineData;\r\n}\r\n\r\nconst MarketsPriceLineAreaChart = () => {\r\n\r\n    const [ priceData, setPriceData ] = useState([]);\r\n\r\n    const url = 'https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=365&interval=daily';\r\n\r\n    const getPriceData = async () => {\r\n        axios\r\n            .get(\r\n                url\r\n            )\r\n            .then(res => {\r\n                setPriceData(res.data);\r\n            })\r\n            .catch(error => console.log(error));\r\n        }\r\n    \r\n    useEffect(() => {\r\n        getPriceData()\r\n\r\n        const interval=setInterval(() => {\r\n            getPriceData()\r\n        }, 60000)\r\n\r\n        // console.log('PRICEDATA',priceData)\r\n\r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const data = createBarData(priceData);\r\n\r\n    return <Chart\r\n        width='100%'\r\n        height='300px'\r\n        chartType=\"AreaChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        // data={[\r\n        //     ['Year', 'Sales', 'Expenses'],\r\n        //     ['2013', 1000, 400],\r\n        //     ['2014', 1170, 460],\r\n        //     ['2015', 660, 1120],\r\n        //     ['2016', 1030, 540],\r\n        // ]}\r\n        data={ data }\r\n        options={{\r\n            title: 'Company Performance',\r\n            hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\r\n            vAxis: { minValue: 0 },\r\n            colors: ['#1de9b6', '#1dc4e9']\r\n        }}\r\n        rootProps={{ 'data-testid': '1' }}\r\n    />;\r\n}\r\n\r\nexport default MarketsPriceLineAreaChart;"]},"metadata":{},"sourceType":"module"}