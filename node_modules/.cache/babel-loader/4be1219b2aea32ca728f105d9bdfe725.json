{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport services from '../utils/services';\nimport { CONFIG } from '../config/constant';\nconst JWT_SECRET = CONFIG.jwt.secret;\nconst JWT_EXPIRES_TIME = CONFIG.jwt.timeout;\n\nconst delay = timeout => {\n  return new Promise(res => setTimeout(res, timeout));\n};\n\nconst users = [{\n  id: '5e86809283e28b96d2d38537',\n  email: 'demo@gmail.com',\n  password: '123456'\n}];\nservices.onPost('/api/account/login').reply(async config => {\n  try {\n    await delay(500);\n    const {\n      email,\n      password\n    } = JSON.parse(config.data);\n    const user = users.find(_user => _user.email === email);\n\n    if (!user) {\n      return [400, {\n        message: 'Verify Your Email & Password'\n      }];\n    }\n\n    if (user.password !== password) {\n      return [400, {\n        message: 'Invalid Password'\n      }];\n    }\n\n    const serviceToken = jwt.sign({\n      userId: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_EXPIRES_TIME\n    });\n    return [200, {\n      serviceToken,\n      user: {\n        id: user.id,\n        email: user.email\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Server Error'\n    }];\n  }\n});\nservices.onGet('/api/account/me').reply(config => {\n  try {\n    const {\n      Authorization\n    } = config.headers;\n\n    if (!Authorization) {\n      return [401, {\n        message: 'Token Missing'\n      }];\n    }\n\n    const serviceToken = Authorization.split(' ')[1];\n    const {\n      userId\n    } = jwt.verify(serviceToken, JWT_SECRET);\n    const user = users.find(_user => _user.id === userId);\n\n    if (!user) {\n      return [401, {\n        message: 'Invalid Token'\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        email: user.email\n      }\n    }];\n  } catch (err) {\n    return [500, {\n      message: 'Server Error'\n    }];\n  }\n});","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/src/services/auth.js"],"names":["jwt","services","CONFIG","JWT_SECRET","secret","JWT_EXPIRES_TIME","timeout","delay","Promise","res","setTimeout","users","id","email","password","onPost","reply","config","JSON","parse","data","user","find","_user","message","serviceToken","sign","userId","expiresIn","err","console","error","onGet","Authorization","headers","split","verify"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport services from '../utils/services';\r\nimport { CONFIG } from '../config/constant';\r\n\r\nconst JWT_SECRET = CONFIG.jwt.secret;\r\nconst JWT_EXPIRES_TIME = CONFIG.jwt.timeout;\r\n\r\nconst delay = (timeout) => {\r\n    return new Promise((res) => setTimeout(res, timeout));\r\n};\r\n\r\nconst users = [{\r\n    id: '5e86809283e28b96d2d38537',\r\n    email: 'demo@gmail.com',\r\n    password: '123456'\r\n}];\r\n\r\nservices.onPost('/api/account/login').reply(async (config) => {\r\n    try {\r\n        await delay(500);\r\n\r\n        const { email, password } = JSON.parse(config.data);\r\n        const user = users.find((_user) => _user.email === email);\r\n\r\n        if (!user) {\r\n            return [400, { message: 'Verify Your Email & Password' }];\r\n        }\r\n\r\n        if (user.password !== password) {\r\n            return [400, { message: 'Invalid Password' }];\r\n        }\r\n\r\n        const serviceToken = jwt.sign(\r\n            { userId: user.id },\r\n            JWT_SECRET,\r\n            { expiresIn: JWT_EXPIRES_TIME }\r\n        );\r\n\r\n        return [200, {\r\n            serviceToken,\r\n            user: {\r\n                id: user.id,\r\n                email: user.email\r\n            }\r\n        }];\r\n    } catch (err) {\r\n        console.error(err);\r\n        return [500, { message: 'Server Error' }];\r\n    }\r\n});\r\n\r\nservices.onGet('/api/account/me').reply((config) => {\r\n    try {\r\n        const { Authorization } = config.headers;\r\n\r\n        if (!Authorization) {\r\n            return [401, { message: 'Token Missing' }];\r\n        }\r\n\r\n        const serviceToken = Authorization.split(' ')[1];\r\n        const { userId } = jwt.verify(serviceToken, JWT_SECRET);\r\n        const user = users.find((_user) => _user.id === userId);\r\n\r\n        if (!user) {\r\n            return [401, { message: 'Invalid Token' }];\r\n        }\r\n\r\n        return [200, {\r\n            user: {\r\n                id: user.id,\r\n                email: user.email\r\n            }\r\n        }];\r\n    } catch (err) {\r\n        return [500, { message: 'Server Error' }];\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}