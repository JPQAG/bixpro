{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  InsufficientFunds,\n  OrderNotFound,\n  BadRequest,\n  BadSymbol\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitbns extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitbns',\n      'name': 'Bitbns',\n      'countries': ['IN'],\n      // India\n      'rateLimit': 1000,\n      'certified': false,\n      'pro': false,\n      // new metainfo interface\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': false,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchStatus': true,\n        'fetchTicker': 'emulated',\n        'fetchTickers': true,\n        'fetchTrades': false,\n        'fetchWithdrawals': true\n      },\n      'timeframes': {},\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/117201933-e7a6e780-adf5-11eb-9d80-98fc2a21c3d6.jpg',\n        'api': {\n          'ccxt': 'https://bitbns.com/order',\n          'v1': 'https://api.bitbns.com/api/trade/v1',\n          'v2': 'https://api.bitbns.com/api/trade/v2'\n        },\n        'www': 'https://bitbns.com',\n        'referral': 'https://ref.bitbns.com/1090961',\n        'doc': ['https://bitbns.com/trade/#/api-trading/'],\n        'fees': 'https://bitbns.com/fees'\n      },\n      'api': {\n        'ccxt': {\n          'get': ['fetchMarkets', 'fetchTickers', 'fetchOrderbook']\n        },\n        'v1': {\n          'get': ['platform/status', 'tickers', 'orderbook/sell/{symbol}', 'orderbook/buy/{symbol}'],\n          'post': ['currentCoinBalance/EVERYTHING', 'getApiUsageStatus/USAGE', 'getOrderSocketToken/USAGE', 'currentCoinBalance/{symbol}', 'orderStatus/{symbol}', 'depositHistory/{symbol}', 'withdrawHistory/{symbol}', 'listOpenOrders/{symbol}', 'listOpenStopOrders/{symbol}', 'getCoinAddress/{symbol}', 'placeSellOrder/{symbol}', 'placeBuyOrder/{symbol}', 'buyStopLoss/{symbol}', 'placeSellOrder/{symbol}', 'cancelOrder/{symbol}', 'cancelStopLossOrder/{symbol}', 'listExecutedOrders/{symbol}']\n        },\n        'v2': {\n          'post': ['orders', 'cancel', 'getordersnew', 'marginOrders']\n        }\n      },\n      'fees': {\n        'trading': {\n          'feeSide': 'quote',\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.0025,\n          'maker': 0.0025\n        }\n      },\n      'exceptions': {\n        'exact': {\n          '400': BadRequest,\n          // {\"msg\":\"Invalid Request\",\"status\":-1,\"code\":400}\n          '409': BadSymbol,\n          // {\"data\":\"\",\"status\":0,\"error\":\"coin name not supplied or not yet supported\",\"code\":409}\n          '416': InsufficientFunds,\n          // {\"data\":\"Oops ! Not sufficient currency to sell\",\"status\":0,\"error\":null,\"code\":416}\n          '417': OrderNotFound // {\"data\":[],\"status\":0,\"error\":\"Nothing to show\",\"code\":417}\n\n        },\n        'broad': {}\n      }\n    });\n  }\n\n  async fetchStatus(params = {}) {\n    const response = await this.v1GetPlatformStatus(params); //\n    //     {\n    //         \"data\":{\n    //             \"BTC\":{\"status\":1},\n    //             \"ETH\":{\"status\":1},\n    //             \"XRP\":{\"status\":1},\n    //         },\n    //         \"status\":1,\n    //         \"error\":null,\n    //         \"code\":200\n    //     }\n    //\n\n    let status = this.safeString(response, 'status');\n\n    if (status !== undefined) {\n      status = status === '1' ? 'ok' : 'maintenance';\n      this.status = this.extend(this.status, {\n        'status': status,\n        'updated': this.milliseconds()\n      });\n    }\n\n    return this.status;\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.ccxtGetFetchMarkets(params); //\n    //     [\n    //         {\n    //             \"id\":\"BTC\",\n    //             \"symbol\":\"BTC/INR\",\n    //             \"base\":\"BTC\",\n    //             \"quote\":\"INR\",\n    //             \"baseId\":\"BTC\",\n    //             \"quoteId\":\"\",\n    //             \"active\":true,\n    //             \"limits\":{\n    //                 \"amount\":{\"min\":\"0.00017376\",\"max\":20},\n    //                 \"price\":{\"min\":2762353.2359999996,\"max\":6445490.883999999},\n    //                 \"cost\":{\"min\":800,\"max\":128909817.67999998}\n    //             },\n    //             \"precision\":{\n    //                 \"amount\":8,\n    //                 \"price\":2\n    //             },\n    //             \"info\":{}\n    //         },\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'id');\n      const baseId = this.safeString(market, 'base');\n      const quoteId = this.safeString(market, 'quote');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const marketPrecision = this.safeValue(market, 'precision', {});\n      const precision = {\n        'amount': this.safeInteger(marketPrecision, 'amount'),\n        'price': this.safeInteger(marketPrecision, 'price')\n      };\n      const marketLimits = this.safeValue(market, 'limits', {});\n      const amountLimits = this.safeValue(marketLimits, 'amount', {});\n      const priceLimits = this.safeValue(marketLimits, 'price', {});\n      const costLimits = this.safeValue(marketLimits, 'cost', {});\n      const usdt = quoteId === 'USDT';\n      const uppercaseId = usdt ? baseId + '_' + quoteId : baseId;\n      result.push({\n        'id': id,\n        'uppercaseId': uppercaseId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'active': undefined,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(amountLimits, 'min'),\n            'max': this.safeNumber(amountLimits, 'max')\n          },\n          'price': {\n            'min': this.safeNumber(priceLimits, 'min'),\n            'max': this.safeNumber(priceLimits, 'max')\n          },\n          'cost': {\n            'min': this.safeNumber(costLimits, 'min'),\n            'max': this.safeNumber(costLimits, 'max')\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100, max 5000, see https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book\n    }\n\n    const response = await this.ccxtGetFetchOrderbook(this.extend(request, params)); //\n    //     {\n    //         \"bids\":[\n    //             [49352.04,0.843948],\n    //             [49352.03,0.742048],\n    //             [49349.78,0.686239],\n    //         ],\n    //         \"asks\":[\n    //             [49443.59,0.065137],\n    //             [49444.63,0.098211],\n    //             [49449.01,0.066309],\n    //         ],\n    //         \"timestamp\":1619172786577,\n    //         \"datetime\":\"2021-04-23T10:13:06.577Z\",\n    //         \"nonce\":\"\"\n    //     }\n    //\n\n    const timestamp = this.safeInteger(response, 'timestamp');\n    return this.parseOrderBook(response, timestamp);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         \"symbol\":\"BTC/INR\",\n    //         \"info\":{\n    //             \"highest_buy_bid\":4368494.31,\n    //             \"lowest_sell_bid\":4374835.09,\n    //             \"last_traded_price\":4374835.09,\n    //             \"yes_price\":4531016.27,\n    //             \"volume\":{\"max\":\"4569119.23\",\"min\":\"4254552.13\",\"volume\":62.17722344}\n    //         },\n    //         \"timestamp\":1619100020845,\n    //         \"datetime\":1619100020845,\n    //         \"high\":\"4569119.23\",\n    //         \"low\":\"4254552.13\",\n    //         \"bid\":4368494.31,\n    //         \"bidVolume\":\"\",\n    //         \"ask\":4374835.09,\n    //         \"askVolume\":\"\",\n    //         \"vwap\":\"\",\n    //         \"open\":4531016.27,\n    //         \"close\":4374835.09,\n    //         \"last\":4374835.09,\n    //         \"baseVolume\":62.17722344,\n    //         \"quoteVolume\":\"\",\n    //         \"previousClose\":\"\",\n    //         \"change\":-156181.1799999997,\n    //         \"percentage\":-3.446934874943623,\n    //         \"average\":4452925.68\n    //     }\n    //\n    const timestamp = this.safeInteger(ticker, 'timestamp');\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const last = this.safeNumber(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': this.safeNumber(ticker, 'bidVolume'),\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': this.safeNumber(ticker, 'askVolume'),\n      'vwap': this.safeNumber(ticker, 'vwap'),\n      'open': this.safeNumber(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': this.safeNumber(ticker, 'previousClose'),\n      // previous day close\n      'change': this.safeNumber(ticker, 'change'),\n      'percentage': this.safeNumber(ticker, 'percentage'),\n      'average': this.safeNumber(ticker, 'average'),\n      'baseVolume': this.safeNumber(ticker, 'baseVolume'),\n      'quoteVolume': this.safeNumber(ticker, 'quoteVolume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.ccxtGetFetchTickers(params); //\n    //     {\n    //         \"BTC/INR\":{\n    //             \"symbol\":\"BTC/INR\",\n    //             \"info\":{\n    //                 \"highest_buy_bid\":4368494.31,\n    //                 \"lowest_sell_bid\":4374835.09,\n    //                 \"last_traded_price\":4374835.09,\n    //                 \"yes_price\":4531016.27,\n    //                 \"volume\":{\"max\":\"4569119.23\",\"min\":\"4254552.13\",\"volume\":62.17722344}\n    //             },\n    //             \"timestamp\":1619100020845,\n    //             \"datetime\":1619100020845,\n    //             \"high\":\"4569119.23\",\n    //             \"low\":\"4254552.13\",\n    //             \"bid\":4368494.31,\n    //             \"bidVolume\":\"\",\n    //             \"ask\":4374835.09,\n    //             \"askVolume\":\"\",\n    //             \"vwap\":\"\",\n    //             \"open\":4531016.27,\n    //             \"close\":4374835.09,\n    //             \"last\":4374835.09,\n    //             \"baseVolume\":62.17722344,\n    //             \"quoteVolume\":\"\",\n    //             \"previousClose\":\"\",\n    //             \"change\":-156181.1799999997,\n    //             \"percentage\":-3.446934874943623,\n    //             \"average\":4452925.68\n    //         }\n    //     }\n    //\n\n    return this.parseTickers(response, symbols);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.v1PostCurrentCoinBalanceEVERYTHING(params); //\n    //     {\n    //         \"data\":{\n    //             \"availableorderMoney\":0,\n    //             \"availableorderBTC\":0,\n    //             \"availableorderXRP\":0,\n    //             \"inorderMoney\":0,\n    //             \"inorderBTC\":0,\n    //             \"inorderXRP\":0,\n    //             \"inorderNEO\":0,\n    //         },\n    //         \"status\":1,\n    //         \"error\":null,\n    //         \"code\":200\n    //     }\n    //\n\n    const timestamp = undefined;\n    const result = {\n      'info': response,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp)\n    };\n    const data = this.safeValue(response, 'data', {});\n    const keys = Object.keys(data);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const parts = key.split('availableorder');\n      const numParts = parts.length;\n\n      if (numParts > 1) {\n        const currencyId = this.safeString(parts, 1);\n\n        if (currencyId !== 'Money') {\n          const code = this.safeCurrencyCode(currencyId);\n          const account = this.account();\n          account['free'] = this.safeString(data, key);\n          account['used'] = this.safeString(data, 'inorder' + currencyId);\n          result[code] = account;\n        }\n      }\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '0': 'open' // 'PARTIALLY_FILLED': 'open',\n      // 'FILLED': 'closed',\n      // 'CANCELED': 'canceled',\n      // 'PENDING_CANCEL': 'canceling', // currently unused\n      // 'REJECTED': 'rejected',\n      // 'EXPIRED': 'expired',\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"data\":\"Successfully placed bid to purchase currency\",\n    //         \"status\":1,\n    //         \"error\":null,\n    //         \"id\":5424475,\n    //         \"code\":200\n    //     }\n    //\n    // fetchOrder\n    //\n    //     {\n    //         \"entry_id\":5424475,\n    //         \"btc\":0.01,\n    //         \"rate\":2000,\n    //         \"time\":\"2021-04-25T17:05:42.000Z\",\n    //         \"type\":0,\n    //         \"status\":0,\n    //         \"total\":0.01,\n    //         \"avg_cost\":null,\n    //         \"side\":\"BUY\",\n    //         \"amount\":0.01,\n    //         \"remaining\":0.01,\n    //         \"filled\":0,\n    //         \"cost\":null,\n    //         \"fee\":0.05\n    //     }\n    //\n    // fetchOpenOrders\n    //\n    //     {\n    //         \"entry_id\":5424475,\n    //         \"btc\":0.01,\n    //         \"rate\":2000,\n    //         \"time\":\"2021-04-25T17:05:42.000Z\",\n    //         \"type\":0,\n    //         \"status\":0\n    //     }\n    //\n    const id = this.safeString2(order, 'id', 'entry_id');\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.parse8601(this.safeString(order, 'time'));\n    const price = this.safeNumber(order, 'rate');\n    const amount = this.safeNumber2(order, 'amount', 'btc');\n    const filled = this.safeNumber(order, 'filled');\n    const remaining = this.safeNumber(order, 'remaining');\n    const average = this.safeNumber(order, 'avg_cost');\n    const cost = this.safeNumber(order, 'cost');\n    let type = this.safeStringLower(order, 'type');\n\n    if (type === '0') {\n      type = 'limit';\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const side = this.safeStringLower(order, 'side');\n    const feeCost = this.safeNumber(order, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyCode = undefined;\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return this.safeOrder({\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    });\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type !== 'limit') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'side': side.toUpperCase(),\n      'symbol': market['baseId'] + '_' + market['quoteId'],\n      'quantity': this.amountToPrecision(symbol, amount),\n      'rate': this.priceToPrecision(symbol, price) // 'target_rate': this.priceToPrecision (symbol, targetRate),\n      // 't_rate': this.priceToPrecision (symbol, stopPrice),\n      // 'trail_rate': this.priceToPrecision (symbol, trailRate),\n      // To Place Simple Buy or Sell Order use rate\n      // To Place Stoploss Buy or Sell Order use rate & t_rate\n      // To Place Bracket Buy or Sell Order use rate , t_rate, target_rate & trail_rate\n\n    };\n    const response = await this.v2PostOrders(this.extend(request, params)); //\n    //     {\n    //         \"data\":\"Successfully placed bid to purchase currency\",\n    //         \"status\":1,\n    //         \"error\":null,\n    //         \"id\":5424475,\n    //         \"code\":200\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const quoteSide = market['quoteId'] === 'USDT' ? 'usdtcancelOrder' : 'cancelOrder';\n    const request = {\n      'entry_id': id,\n      'symbol': market['uppercaseId'],\n      'side': quoteSide\n    };\n    const response = await this.v2PostCancel(this.extend(request, params));\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'entry_id': id\n    };\n    const response = await this.v1PostOrderStatusSymbol(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"entry_id\":5424475,\n    //                 \"btc\":0.01,\n    //                 \"rate\":2000,\n    //                 \"time\":\"2021-04-25T17:05:42.000Z\",\n    //                 \"type\":0,\n    //                 \"status\":0,\n    //                 \"total\":0.01,\n    //                 \"avg_cost\":null,\n    //                 \"side\":\"BUY\",\n    //                 \"amount\":0.01,\n    //                 \"remaining\":0.01,\n    //                 \"filled\":0,\n    //                 \"cost\":null,\n    //                 \"fee\":0.05\n    //             }\n    //         ],\n    //         \"status\":1,\n    //         \"error\":null,\n    //         \"code\":200\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const first = this.safeValue(data, 0);\n    return this.parseOrder(first, market);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const quoteSide = market['quoteId'] === 'USDT' ? 'usdtListOpenOrders' : 'listOpenOrders';\n    const request = {\n      'symbol': market['uppercaseId'],\n      'side': quoteSide,\n      'page': 0\n    };\n    const response = await this.v2PostGetordersnew(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"entry_id\":5424475,\n    //                 \"btc\":0.01,\n    //                 \"rate\":2000,\n    //                 \"time\":\"2021-04-25T17:05:42.000Z\",\n    //                 \"type\":0,\n    //                 \"status\":0\n    //             }\n    //         ],\n    //         \"status\":1,\n    //         \"error\":null,\n    //         \"code\":200\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchMyTrades\n    //\n    //     {\n    //         \"type\": \"BTC Sell order executed\",\n    //         \"typeI\": 6,\n    //         \"crypto\": 5000,\n    //         \"amount\": 35.4,\n    //         \"rate\": 709800,\n    //         \"date\": \"2020-05-22T15:05:34.000Z\",\n    //         \"unit\": \"INR\",\n    //         \"factor\": 100000000,\n    //         \"fee\": 0.09,\n    //         \"delh_btc\": -5000,\n    //         \"delh_inr\": 0,\n    //         \"del_btc\": 0,\n    //         \"del_inr\": 35.4,\n    //         \"id\": \"2938823\"\n    //     }\n    //\n    market = this.safeMarket(undefined, market);\n    const orderId = this.safeString(trade, 'id');\n    const timestamp = this.parse8601(this.safeString(trade, 'date'));\n    const amountString = this.safeString(trade, 'amount');\n    const priceString = this.safeString(trade, 'rate');\n    const price = this.parseNumber(priceString);\n    const factor = this.safeString(trade, 'factor');\n    const amountScaled = Precise.stringDiv(amountString, factor);\n    const amount = this.parseNumber(amountScaled);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountScaled));\n    const symbol = market['symbol'];\n    let side = this.safeStringLower(trade, 'type');\n\n    if (side.indexOf('sell') >= 0) {\n      side = 'sell';\n    } else if (side.indexOf('buy') >= 0) {\n      side = 'buy';\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeNumber(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyCode = market['quote'];\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': undefined,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'page': 0\n    };\n\n    if (since !== undefined) {\n      request['since'] = this.iso8601(since);\n    }\n\n    const response = await this.v1PostListExecutedOrdersSymbol(this.extend(request, params)); //\n    //     {\n    //         \"data\": [\n    //             {\n    //                 \"type\": \"BTC Sell order executed\",\n    //                 \"typeI\": 6,\n    //                 \"crypto\": 5000,\n    //                 \"amount\": 35.4,\n    //                 \"rate\": 709800,\n    //                 \"date\": \"2020-05-22T15:05:34.000Z\",\n    //                 \"unit\": \"INR\",\n    //                 \"factor\": 100000000,\n    //                 \"fee\": 0.09,\n    //                 \"delh_btc\": -5000,\n    //                 \"delh_inr\": 0,\n    //                 \"del_btc\": 0,\n    //                 \"del_inr\": 35.4,\n    //                 \"id\": \"2938823\"\n    //             },\n    //             {\n    //                 \"type\": \"BTC Sell order executed\",\n    //                 \"typeI\": 6,\n    //                 \"crypto\": 195000,\n    //                 \"amount\": 1380.58,\n    //                 \"rate\": 709765.5,\n    //                 \"date\": \"2020-05-22T15:05:34.000Z\",\n    //                 \"unit\": \"INR\",\n    //                 \"factor\": 100000000,\n    //                 \"fee\": 3.47,\n    //                 \"delh_btc\": -195000,\n    //                 \"delh_inr\": 0,\n    //                 \"del_btc\": 0,\n    //                 \"del_inr\": 1380.58,\n    //                 \"id\": \"2938823\"\n    //             }\n    //         ],\n    //         \"status\": 1,\n    //         \"error\": null,\n    //         \"code\": 200\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchDeposits() requires a currency code argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'symbol': currency['id'],\n      'page': 0\n    };\n    const response = await this.v1PostDepositHistorySymbol(this.extend(request, params)); //\n    //     {\n    //         \"data\":[\n    //             {\n    //                 \"type\":\"USDT deposited\",\n    //                 \"typeI\":1,\n    //                 \"amount\":100,\n    //                 \"date\":\"2021-04-24T14:56:04.000Z\",\n    //                 \"unit\":\"USDT\",\n    //                 \"factor\":100,\n    //                 \"fee\":0,\n    //                 \"delh_btc\":0,\n    //                 \"delh_inr\":0,\n    //                 \"rate\":0,\n    //                 \"del_btc\":10000,\n    //                 \"del_inr\":0\n    //             }\n    //         ],\n    //         \"status\":1,\n    //         \"error\":null,\n    //         \"code\":200\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchWithdrawals() requires a currency code argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'symbol': currency['id'],\n      'page': 0\n    };\n    const response = await this.v1PostWithdrawHistorySymbol(this.extend(request, params)); //\n    //     ...\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  parseTransactionStatusByType(status, type = undefined) {\n    const statusesByType = {\n      'deposit': {\n        '0': 'pending',\n        '1': 'ok'\n      },\n      'withdrawal': {\n        '0': 'pending',\n        // Email Sent\n        '1': 'canceled',\n        // Cancelled (different from 1 = ok in deposits)\n        '2': 'pending',\n        // Awaiting Approval\n        '3': 'failed',\n        // Rejected\n        '4': 'pending',\n        // Processing\n        '5': 'failed',\n        // Failure\n        '6': 'ok' // Completed\n\n      }\n    };\n    const statuses = this.safeValue(statusesByType, type, {});\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"type\":\"USDT deposited\",\n    //         \"typeI\":1,\n    //         \"amount\":100,\n    //         \"date\":\"2021-04-24T14:56:04.000Z\",\n    //         \"unit\":\"USDT\",\n    //         \"factor\":100,\n    //         \"fee\":0,\n    //         \"delh_btc\":0,\n    //         \"delh_inr\":0,\n    //         \"rate\":0,\n    //         \"del_btc\":10000,\n    //         \"del_inr\":0\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     ...\n    //\n    const currencyId = this.safeString(transaction, 'unit');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const timestamp = this.parse8601(this.safeString(transaction, 'date'));\n    let type = this.safeString(transaction, 'type');\n    let status = undefined;\n\n    if (type !== undefined) {\n      if (type.indexOf('deposit') >= 0) {\n        type = 'deposit';\n        status = 'ok';\n      } else if (type.indexOf('withdraw') >= 0) {\n        type = 'withdrawal';\n      }\n    } // const status = this.parseTransactionStatusByType (this.safeString (transaction, 'status'), type);\n\n\n    const amount = this.safeNumber(transaction, 'amount');\n    const feeCost = this.safeNumber(transaction, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': code,\n        'cost': feeCost\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': undefined,\n      'txid': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': undefined,\n      'addressTo': undefined,\n      'addressFrom': undefined,\n      'tag': undefined,\n      'tagTo': undefined,\n      'tagFrom': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'internal': undefined,\n      'fee': fee\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'symbol': currency['id']\n    };\n    const response = await this.v1PostGetCoinAddressSymbol(this.extend(request, params)); //\n    //     {\n    //         \"data\":{\n    //             \"token\":\"0x680dee9edfff0c397736e10b017cf6a0aee4ba31\",\n    //             \"expiry\":\"2022-04-24 22:30:11\"\n    //         },\n    //         \"status\":1,\n    //         \"error\":null\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const address = this.safeString(data, 'token');\n    const tag = this.safeString(data, 'tag');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coin': currency['id'],\n      'address': address,\n      'amount': amount // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi\n      // issue sapiGetCapitalConfigGetall () to get networks for withdrawing USDT ERC20 vs USDT Omni\n      // 'network': 'ETH', // 'BTC', 'TRX', etc, optional\n\n    };\n\n    if (tag !== undefined) {\n      request['addressTag'] = tag;\n    }\n\n    const response = await this.sapiPostCapitalWithdrawApply(this.extend(request, params)); //     { id: '9a67628b16ba4988ae20d329333f16bc' }\n\n    return {\n      'info': response,\n      'id': this.safeString(response, 'id')\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'v1', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    this.checkRequiredCredentials();\n    const baseUrl = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    });\n    let url = baseUrl + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n    const nonce = this.nonce().toString();\n    headers = {\n      'X-BITBNS-APIKEY': this.apiKey\n    };\n\n    if (method === 'GET') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (method === 'POST') {\n      if (Object.keys(query).length) {\n        body = this.json(query);\n      } else {\n        body = '{}';\n      }\n\n      const auth = {\n        'timeStamp_nonce': nonce,\n        'body': body\n      };\n      const payload = this.stringToBase64(this.json(auth));\n      const signature = this.hmac(payload, this.encode(this.secret), 'sha512');\n      headers['X-BITBNS-PAYLOAD'] = this.decode(payload);\n      headers['X-BITBNS-SIGNATURE'] = signature;\n      headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //     {\"msg\":\"Invalid Request\",\"status\":-1,\"code\":400}\n    //     {\"data\":[],\"status\":0,\"error\":\"Nothing to show\",\"code\":417}\n    //\n\n\n    const code = this.safeString(response, 'code');\n    const message = this.safeString(response, 'msg');\n    const error = code !== undefined && code !== '200';\n\n    if (error || message !== undefined) {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/bitbns.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","InsufficientFunds","OrderNotFound","BadRequest","BadSymbol","Precise","module","exports","bitbns","describe","deepExtend","fetchStatus","params","response","v1GetPlatformStatus","status","safeString","undefined","extend","milliseconds","fetchMarkets","ccxtGetFetchMarkets","result","i","length","market","id","baseId","quoteId","base","safeCurrencyCode","quote","symbol","marketPrecision","safeValue","precision","safeInteger","marketLimits","amountLimits","priceLimits","costLimits","usdt","uppercaseId","push","safeNumber","fetchOrderBook","limit","loadMarkets","request","ccxtGetFetchOrderbook","timestamp","parseOrderBook","parseTicker","ticker","marketId","safeSymbol","last","iso8601","fetchTickers","symbols","ccxtGetFetchTickers","parseTickers","fetchBalance","v1PostCurrentCoinBalanceEVERYTHING","data","keys","Object","key","parts","split","numParts","currencyId","code","account","parseBalance","parseOrderStatus","statuses","parseOrder","order","safeString2","parse8601","price","amount","safeNumber2","filled","remaining","average","cost","type","safeStringLower","side","feeCost","fee","feeCurrencyCode","safeOrder","createOrder","toUpperCase","amountToPrecision","priceToPrecision","v2PostOrders","cancelOrder","quoteSide","v2PostCancel","fetchOrder","v1PostOrderStatusSymbol","first","fetchOpenOrders","since","v2PostGetordersnew","parseOrders","parseTrade","trade","safeMarket","orderId","amountString","priceString","parseNumber","factor","amountScaled","stringDiv","stringMul","indexOf","fetchMyTrades","v1PostListExecutedOrdersSymbol","parseTrades","fetchDeposits","currency","v1PostDepositHistorySymbol","parseTransactions","fetchWithdrawals","v1PostWithdrawHistorySymbol","parseTransactionStatusByType","statusesByType","parseTransaction","transaction","fetchDepositAddress","v1PostGetCoinAddressSymbol","address","tag","checkAddress","withdraw","sapiPostCapitalWithdrawApply","nonce","sign","path","api","method","headers","body","checkRequiredCredentials","baseUrl","implodeParams","urls","hostname","url","query","omit","extractParams","toString","apiKey","urlencode","json","auth","payload","stringToBase64","signature","hmac","encode","secret","decode","handleErrors","httpCode","reason","requestHeaders","requestBody","message","error","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAE,iBAAF,CAAxB;;AACA,MAAM;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,iBAAjB;AAAoCC,EAAAA,iBAApC;AAAuDC,EAAAA,aAAvD;AAAsEC,EAAAA,UAAtE;AAAkFC,EAAAA;AAAlF,IAAgGN,OAAO,CAAE,eAAF,CAA7G;;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAE,gBAAF,CAAvB,C,CAEA;;;AAEAQ,MAAM,CAACC,OAAP,GAAiB,MAAMC,MAAN,SAAqBX,QAArB,CAA8B;AAC3CY,EAAAA,QAAQ,GAAI;AACR,WAAO,KAAKC,UAAL,CAAiB,MAAMD,QAAN,EAAjB,EAAoC;AACvC,YAAM,QADiC;AAEvC,cAAQ,QAF+B;AAGvC,mBAAa,CAAE,IAAF,CAH0B;AAGhB;AACvB,mBAAa,IAJ0B;AAKvC,mBAAa,KAL0B;AAMvC,aAAO,KANgC;AAOvC;AACA,aAAO;AACH,uBAAe,IADZ;AAEH,uBAAe,IAFZ;AAGH,wBAAgB,IAHb;AAIH,+BAAuB,IAJpB;AAKH,yBAAiB,IALd;AAMH,wBAAgB,IANb;AAOH,yBAAiB,IAPd;AAQH,sBAAc,KARX;AASH,2BAAmB,IAThB;AAUH,sBAAc,IAVX;AAWH,0BAAkB,IAXf;AAYH,uBAAe,IAZZ;AAaH,uBAAe,UAbZ;AAcH,wBAAgB,IAdb;AAeH,uBAAe,KAfZ;AAgBH,4BAAoB;AAhBjB,OARgC;AA0BvC,oBAAc,EA1ByB;AA4BvC,cAAQ;AACJ,gBAAQ,sGADJ;AAEJ,eAAO;AACH,kBAAQ,0BADL;AAEH,gBAAM,qCAFH;AAGH,gBAAM;AAHH,SAFH;AAOJ,eAAO,oBAPH;AAQJ,oBAAY,gCARR;AASJ,eAAO,CACH,yCADG,CATH;AAYJ,gBAAQ;AAZJ,OA5B+B;AA0CvC,aAAO;AACH,gBAAQ;AACJ,iBAAO,CACH,cADG,EAEH,cAFG,EAGH,gBAHG;AADH,SADL;AAQH,cAAM;AACF,iBAAO,CACH,iBADG,EAEH,SAFG,EAGH,yBAHG,EAIH,wBAJG,CADL;AAOF,kBAAQ,CACJ,+BADI,EAEJ,yBAFI,EAGJ,2BAHI,EAIJ,6BAJI,EAKJ,sBALI,EAMJ,yBANI,EAOJ,0BAPI,EAQJ,yBARI,EASJ,6BATI,EAUJ,yBAVI,EAWJ,yBAXI,EAYJ,wBAZI,EAaJ,sBAbI,EAcJ,yBAdI,EAeJ,sBAfI,EAgBJ,8BAhBI,EAiBJ,6BAjBI;AAPN,SARH;AAmCH,cAAM;AACF,kBAAQ,CACJ,QADI,EAEJ,QAFI,EAGJ,cAHI,EAIJ,cAJI;AADN;AAnCH,OA1CgC;AAsFvC,cAAQ;AACJ,mBAAW;AACP,qBAAW,OADJ;AAEP,uBAAa,KAFN;AAGP,wBAAc,IAHP;AAIP,mBAAS,MAJF;AAKP,mBAAS;AALF;AADP,OAtF+B;AA+FvC,oBAAc;AACV,iBAAS;AACL,iBAAON,UADF;AACc;AACnB,iBAAOC,SAFF;AAEa;AAClB,iBAAOH,iBAHF;AAGqB;AAC1B,iBAAOC,aAJF,CAIiB;;AAJjB,SADC;AAOV,iBAAS;AAPC;AA/FyB,KAApC,CAAP;AAyGH;;AAED,QAAMS,WAAN,CAAmBC,MAAM,GAAG,EAA5B,EAAgC;AAC5B,UAAMC,QAAQ,GAAG,MAAM,KAAKC,mBAAL,CAA0BF,MAA1B,CAAvB,CAD4B,CAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIG,MAAM,GAAG,KAAKC,UAAL,CAAiBH,QAAjB,EAA2B,QAA3B,CAAb;;AACA,QAAIE,MAAM,KAAKE,SAAf,EAA0B;AACtBF,MAAAA,MAAM,GAAIA,MAAM,KAAK,GAAZ,GAAmB,IAAnB,GAA0B,aAAnC;AACA,WAAKA,MAAL,GAAc,KAAKG,MAAL,CAAa,KAAKH,MAAlB,EAA0B;AACpC,kBAAUA,MAD0B;AAEpC,mBAAW,KAAKI,YAAL;AAFyB,OAA1B,CAAd;AAIH;;AACD,WAAO,KAAKJ,MAAZ;AACH;;AAED,QAAMK,YAAN,CAAoBR,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAMC,QAAQ,GAAG,MAAM,KAAKQ,mBAAL,CAA0BT,MAA1B,CAAvB,CAD6B,CAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMU,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,QAAQ,CAACW,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,YAAME,MAAM,GAAGZ,QAAQ,CAACU,CAAD,CAAvB;AACA,YAAMG,EAAE,GAAG,KAAKV,UAAL,CAAiBS,MAAjB,EAAyB,IAAzB,CAAX;AACA,YAAME,MAAM,GAAG,KAAKX,UAAL,CAAiBS,MAAjB,EAAyB,MAAzB,CAAf;AACA,YAAMG,OAAO,GAAG,KAAKZ,UAAL,CAAiBS,MAAjB,EAAyB,OAAzB,CAAhB;AACA,YAAMI,IAAI,GAAG,KAAKC,gBAAL,CAAuBH,MAAvB,CAAb;AACA,YAAMI,KAAK,GAAG,KAAKD,gBAAL,CAAuBF,OAAvB,CAAd;AACA,YAAMI,MAAM,GAAGH,IAAI,GAAG,GAAP,GAAaE,KAA5B;AACA,YAAME,eAAe,GAAG,KAAKC,SAAL,CAAgBT,MAAhB,EAAwB,WAAxB,EAAqC,EAArC,CAAxB;AACA,YAAMU,SAAS,GAAG;AACd,kBAAU,KAAKC,WAAL,CAAkBH,eAAlB,EAAmC,QAAnC,CADI;AAEd,iBAAS,KAAKG,WAAL,CAAkBH,eAAlB,EAAmC,OAAnC;AAFK,OAAlB;AAIA,YAAMI,YAAY,GAAG,KAAKH,SAAL,CAAgBT,MAAhB,EAAwB,QAAxB,EAAkC,EAAlC,CAArB;AACA,YAAMa,YAAY,GAAG,KAAKJ,SAAL,CAAgBG,YAAhB,EAA8B,QAA9B,EAAwC,EAAxC,CAArB;AACA,YAAME,WAAW,GAAG,KAAKL,SAAL,CAAgBG,YAAhB,EAA8B,OAA9B,EAAuC,EAAvC,CAApB;AACA,YAAMG,UAAU,GAAG,KAAKN,SAAL,CAAgBG,YAAhB,EAA8B,MAA9B,EAAsC,EAAtC,CAAnB;AACA,YAAMI,IAAI,GAAIb,OAAO,KAAK,MAA1B;AACA,YAAMc,WAAW,GAAGD,IAAI,GAAId,MAAM,GAAG,GAAT,GAAeC,OAAnB,GAA8BD,MAAtD;AACAL,MAAAA,MAAM,CAACqB,IAAP,CAAa;AACT,cAAMjB,EADG;AAET,uBAAegB,WAFN;AAGT,kBAAUV,MAHD;AAIT,gBAAQH,IAJC;AAKT,iBAASE,KALA;AAMT,kBAAUJ,MAND;AAOT,mBAAWC,OAPF;AAQT,gBAAQH,MARC;AAST,kBAAUR,SATD;AAUT,qBAAakB,SAVJ;AAWT,kBAAU;AACN,oBAAU;AACN,mBAAO,KAAKS,UAAL,CAAiBN,YAAjB,EAA+B,KAA/B,CADD;AAEN,mBAAO,KAAKM,UAAL,CAAiBN,YAAjB,EAA+B,KAA/B;AAFD,WADJ;AAKN,mBAAS;AACL,mBAAO,KAAKM,UAAL,CAAiBL,WAAjB,EAA8B,KAA9B,CADF;AAEL,mBAAO,KAAKK,UAAL,CAAiBL,WAAjB,EAA8B,KAA9B;AAFF,WALH;AASN,kBAAQ;AACJ,mBAAO,KAAKK,UAAL,CAAiBJ,UAAjB,EAA6B,KAA7B,CADH;AAEJ,mBAAO,KAAKI,UAAL,CAAiBJ,UAAjB,EAA6B,KAA7B;AAFH;AATF;AAXD,OAAb;AA0BH;;AACD,WAAOlB,MAAP;AACH;;AAED,QAAMuB,cAAN,CAAsBb,MAAtB,EAA8Bc,KAAK,GAAG7B,SAAtC,EAAiDL,MAAM,GAAG,EAA1D,EAA8D;AAC1D,UAAM,KAAKmC,WAAL,EAAN;AACA,UAAMtB,MAAM,GAAG,KAAKA,MAAL,CAAaO,MAAb,CAAf;AACA,UAAMgB,OAAO,GAAG;AACZ,gBAAUvB,MAAM,CAAC,IAAD;AADJ,KAAhB;;AAGA,QAAIqB,KAAK,KAAK7B,SAAd,EAAyB;AACrB+B,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBF,KAAnB,CADqB,CACK;AAC7B;;AACD,UAAMjC,QAAQ,GAAG,MAAM,KAAKoC,qBAAL,CAA4B,KAAK/B,MAAL,CAAa8B,OAAb,EAAsBpC,MAAtB,CAA5B,CAAvB,CAT0D,CAU1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMsC,SAAS,GAAG,KAAKd,WAAL,CAAkBvB,QAAlB,EAA4B,WAA5B,CAAlB;AACA,WAAO,KAAKsC,cAAL,CAAqBtC,QAArB,EAA+BqC,SAA/B,CAAP;AACH;;AAEDE,EAAAA,WAAW,CAAEC,MAAF,EAAU5B,MAAM,GAAGR,SAAnB,EAA8B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMiC,SAAS,GAAG,KAAKd,WAAL,CAAkBiB,MAAlB,EAA0B,WAA1B,CAAlB;AACA,UAAMC,QAAQ,GAAG,KAAKtC,UAAL,CAAiBqC,MAAjB,EAAyB,QAAzB,CAAjB;AACA,UAAMrB,MAAM,GAAG,KAAKuB,UAAL,CAAiBD,QAAjB,EAA2B7B,MAA3B,CAAf;AACA,UAAM+B,IAAI,GAAG,KAAKZ,UAAL,CAAiBS,MAAjB,EAAyB,MAAzB,CAAb;AACA,WAAO;AACH,gBAAUrB,MADP;AAEH,mBAAakB,SAFV;AAGH,kBAAY,KAAKO,OAAL,CAAcP,SAAd,CAHT;AAIH,cAAQ,KAAKN,UAAL,CAAiBS,MAAjB,EAAyB,MAAzB,CAJL;AAKH,aAAO,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,KAAzB,CALJ;AAMH,aAAO,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,KAAzB,CANJ;AAOH,mBAAa,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,WAAzB,CAPV;AAQH,aAAO,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,KAAzB,CARJ;AASH,mBAAa,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,WAAzB,CATV;AAUH,cAAQ,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,MAAzB,CAVL;AAWH,cAAQ,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,MAAzB,CAXL;AAYH,eAASG,IAZN;AAaH,cAAQA,IAbL;AAcH,uBAAiB,KAAKZ,UAAL,CAAiBS,MAAjB,EAAyB,eAAzB,CAdd;AAcyD;AAC5D,gBAAU,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,QAAzB,CAfP;AAgBH,oBAAc,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,YAAzB,CAhBX;AAiBH,iBAAW,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,SAAzB,CAjBR;AAkBH,oBAAc,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,YAAzB,CAlBX;AAmBH,qBAAe,KAAKT,UAAL,CAAiBS,MAAjB,EAAyB,aAAzB,CAnBZ;AAoBH,cAAQA;AApBL,KAAP;AAsBH;;AAED,QAAMK,YAAN,CAAoBC,OAAO,GAAG1C,SAA9B,EAAyCL,MAAM,GAAG,EAAlD,EAAsD;AAClD,UAAM,KAAKmC,WAAL,EAAN;AACA,UAAMlC,QAAQ,GAAG,MAAM,KAAK+C,mBAAL,CAA0BhD,MAA1B,CAAvB,CAFkD,CAGlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,KAAKiD,YAAL,CAAmBhD,QAAnB,EAA6B8C,OAA7B,CAAP;AACH;;AAED,QAAMG,YAAN,CAAoBlD,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAM,KAAKmC,WAAL,EAAN;AACA,UAAMlC,QAAQ,GAAG,MAAM,KAAKkD,kCAAL,CAAyCnD,MAAzC,CAAvB,CAF6B,CAG7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMsC,SAAS,GAAGjC,SAAlB;AACA,UAAMK,MAAM,GAAG;AACX,cAAQT,QADG;AAEX,mBAAaqC,SAFF;AAGX,kBAAY,KAAKO,OAAL,CAAcP,SAAd;AAHD,KAAf;AAKA,UAAMc,IAAI,GAAG,KAAK9B,SAAL,CAAgBrB,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,UAAMoD,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAaD,IAAb,CAAb;;AACA,SAAK,IAAIzC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0C,IAAI,CAACzC,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAM4C,GAAG,GAAGF,IAAI,CAAC1C,CAAD,CAAhB;AACA,YAAM6C,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAW,gBAAX,CAAd;AACA,YAAMC,QAAQ,GAAGF,KAAK,CAAC5C,MAAvB;;AACA,UAAI8C,QAAQ,GAAG,CAAf,EAAkB;AACd,cAAMC,UAAU,GAAG,KAAKvD,UAAL,CAAiBoD,KAAjB,EAAwB,CAAxB,CAAnB;;AACA,YAAIG,UAAU,KAAK,OAAnB,EAA4B;AACxB,gBAAMC,IAAI,GAAG,KAAK1C,gBAAL,CAAuByC,UAAvB,CAAb;AACA,gBAAME,OAAO,GAAG,KAAKA,OAAL,EAAhB;AACAA,UAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAKzD,UAAL,CAAiBgD,IAAjB,EAAuBG,GAAvB,CAAlB;AACAM,UAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAKzD,UAAL,CAAiBgD,IAAjB,EAAuB,YAAYO,UAAnC,CAAlB;AACAjD,UAAAA,MAAM,CAACkD,IAAD,CAAN,GAAeC,OAAf;AACH;AACJ;AACJ;;AACD,WAAO,KAAKC,YAAL,CAAmBpD,MAAnB,EAA2B,KAA3B,CAAP;AACH;;AAEDqD,EAAAA,gBAAgB,CAAE5D,MAAF,EAAU;AACtB,UAAM6D,QAAQ,GAAG;AACb,WAAK,MADQ,CAEb;AACA;AACA;AACA;AACA;AACA;;AAPa,KAAjB;AASA,WAAO,KAAK5D,UAAL,CAAiB4D,QAAjB,EAA2B7D,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAED8D,EAAAA,UAAU,CAAEC,KAAF,EAASrD,MAAM,GAAGR,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMS,EAAE,GAAG,KAAKqD,WAAL,CAAkBD,KAAlB,EAAyB,IAAzB,EAA+B,UAA/B,CAAX;AACA,UAAMxB,QAAQ,GAAG,KAAKtC,UAAL,CAAiB8D,KAAjB,EAAwB,QAAxB,CAAjB;AACA,UAAM9C,MAAM,GAAG,KAAKuB,UAAL,CAAiBD,QAAjB,EAA2B7B,MAA3B,CAAf;AACA,UAAMyB,SAAS,GAAG,KAAK8B,SAAL,CAAgB,KAAKhE,UAAL,CAAiB8D,KAAjB,EAAwB,MAAxB,CAAhB,CAAlB;AACA,UAAMG,KAAK,GAAG,KAAKrC,UAAL,CAAiBkC,KAAjB,EAAwB,MAAxB,CAAd;AACA,UAAMI,MAAM,GAAG,KAAKC,WAAL,CAAkBL,KAAlB,EAAyB,QAAzB,EAAmC,KAAnC,CAAf;AACA,UAAMM,MAAM,GAAG,KAAKxC,UAAL,CAAiBkC,KAAjB,EAAwB,QAAxB,CAAf;AACA,UAAMO,SAAS,GAAG,KAAKzC,UAAL,CAAiBkC,KAAjB,EAAwB,WAAxB,CAAlB;AACA,UAAMQ,OAAO,GAAG,KAAK1C,UAAL,CAAiBkC,KAAjB,EAAwB,UAAxB,CAAhB;AACA,UAAMS,IAAI,GAAG,KAAK3C,UAAL,CAAiBkC,KAAjB,EAAwB,MAAxB,CAAb;AACA,QAAIU,IAAI,GAAG,KAAKC,eAAL,CAAsBX,KAAtB,EAA6B,MAA7B,CAAX;;AACA,QAAIU,IAAI,KAAK,GAAb,EAAkB;AACdA,MAAAA,IAAI,GAAG,OAAP;AACH;;AACD,UAAMzE,MAAM,GAAG,KAAK4D,gBAAL,CAAuB,KAAK3D,UAAL,CAAiB8D,KAAjB,EAAwB,QAAxB,CAAvB,CAAf;AACA,UAAMY,IAAI,GAAG,KAAKD,eAAL,CAAsBX,KAAtB,EAA6B,MAA7B,CAAb;AACA,UAAMa,OAAO,GAAG,KAAK/C,UAAL,CAAiBkC,KAAjB,EAAwB,KAAxB,CAAhB;AACA,QAAIc,GAAG,GAAG3E,SAAV;;AACA,QAAI0E,OAAO,KAAK1E,SAAhB,EAA2B;AACvB,YAAM4E,eAAe,GAAG5E,SAAxB;AACA2E,MAAAA,GAAG,GAAG;AACF,gBAAQD,OADN;AAEF,oBAAYE;AAFV,OAAN;AAIH;;AACD,WAAO,KAAKC,SAAL,CAAgB;AACnB,cAAQhB,KADW;AAEnB,YAAMpD,EAFa;AAGnB,uBAAiBT,SAHE;AAInB,mBAAaiC,SAJM;AAKnB,kBAAY,KAAKO,OAAL,CAAcP,SAAd,CALO;AAMnB,4BAAsBjC,SANH;AAOnB,gBAAUe,MAPS;AAQnB,cAAQwD,IARW;AASnB,qBAAevE,SATI;AAUnB,kBAAYA,SAVO;AAWnB,cAAQyE,IAXW;AAYnB,eAAST,KAZU;AAanB,mBAAahE,SAbM;AAcnB,gBAAUiE,MAdS;AAenB,cAAQK,IAfW;AAgBnB,iBAAWD,OAhBQ;AAiBnB,gBAAUF,MAjBS;AAkBnB,mBAAaC,SAlBM;AAmBnB,gBAAUtE,MAnBS;AAoBnB,aAAO6E,GApBY;AAqBnB,gBAAU3E;AArBS,KAAhB,CAAP;AAuBH;;AAED,QAAM8E,WAAN,CAAmB/D,MAAnB,EAA2BwD,IAA3B,EAAiCE,IAAjC,EAAuCR,MAAvC,EAA+CD,KAAK,GAAGhE,SAAvD,EAAkEL,MAAM,GAAG,EAA3E,EAA+E;AAC3E,QAAI4E,IAAI,KAAK,OAAb,EAAsB;AAClB,YAAM,IAAIzF,aAAJ,CAAmB,KAAK2B,EAAL,GAAU,2BAA7B,CAAN;AACH;;AACD,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMtB,MAAM,GAAG,KAAKA,MAAL,CAAaO,MAAb,CAAf;AACA,UAAMgB,OAAO,GAAG;AACZ,cAAQ0C,IAAI,CAACM,WAAL,EADI;AAEZ,gBAAUvE,MAAM,CAAC,QAAD,CAAN,GAAmB,GAAnB,GAAyBA,MAAM,CAAC,SAAD,CAF7B;AAGZ,kBAAY,KAAKwE,iBAAL,CAAwBjE,MAAxB,EAAgCkD,MAAhC,CAHA;AAIZ,cAAQ,KAAKgB,gBAAL,CAAuBlE,MAAvB,EAA+BiD,KAA/B,CAJI,CAKZ;AACA;AACA;AACA;AACA;AACA;;AAVY,KAAhB;AAYA,UAAMpE,QAAQ,GAAG,MAAM,KAAKsF,YAAL,CAAmB,KAAKjF,MAAL,CAAa8B,OAAb,EAAsBpC,MAAtB,CAAnB,CAAvB,CAlB2E,CAmB3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,KAAKiE,UAAL,CAAiBhE,QAAjB,EAA2BY,MAA3B,CAAP;AACH;;AAED,QAAM2E,WAAN,CAAmB1E,EAAnB,EAAuBM,MAAM,GAAGf,SAAhC,EAA2CL,MAAM,GAAG,EAApD,EAAwD;AACpD,QAAIoB,MAAM,KAAKf,SAAf,EAA0B;AACtB,YAAM,IAAIjB,iBAAJ,CAAuB,KAAK0B,EAAL,GAAU,2CAAjC,CAAN;AACH;;AACD,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMtB,MAAM,GAAG,KAAKA,MAAL,CAAaO,MAAb,CAAf;AACA,UAAMqE,SAAS,GAAI5E,MAAM,CAAC,SAAD,CAAN,KAAsB,MAAvB,GAAiC,iBAAjC,GAAqD,aAAvE;AACA,UAAMuB,OAAO,GAAG;AACZ,kBAAYtB,EADA;AAEZ,gBAAUD,MAAM,CAAC,aAAD,CAFJ;AAGZ,cAAQ4E;AAHI,KAAhB;AAKA,UAAMxF,QAAQ,GAAG,MAAM,KAAKyF,YAAL,CAAmB,KAAKpF,MAAL,CAAa8B,OAAb,EAAsBpC,MAAtB,CAAnB,CAAvB;AACA,WAAO,KAAKiE,UAAL,CAAiBhE,QAAjB,EAA2BY,MAA3B,CAAP;AACH;;AAED,QAAM8E,UAAN,CAAkB7E,EAAlB,EAAsBM,MAAM,GAAGf,SAA/B,EAA0CL,MAAM,GAAG,EAAnD,EAAuD;AACnD,QAAIoB,MAAM,KAAKf,SAAf,EAA0B;AACtB,YAAM,IAAIjB,iBAAJ,CAAuB,KAAK0B,EAAL,GAAU,0CAAjC,CAAN;AACH;;AACD,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMtB,MAAM,GAAG,KAAKA,MAAL,CAAaO,MAAb,CAAf;AACA,UAAMgB,OAAO,GAAG;AACZ,gBAAUvB,MAAM,CAAC,IAAD,CADJ;AAEZ,kBAAYC;AAFA,KAAhB;AAIA,UAAMb,QAAQ,GAAG,MAAM,KAAK2F,uBAAL,CAA8B,KAAKtF,MAAL,CAAa8B,OAAb,EAAsBpC,MAAtB,CAA9B,CAAvB,CAVmD,CAWnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMoD,IAAI,GAAG,KAAK9B,SAAL,CAAgBrB,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,UAAM4F,KAAK,GAAG,KAAKvE,SAAL,CAAgB8B,IAAhB,EAAsB,CAAtB,CAAd;AACA,WAAO,KAAKa,UAAL,CAAiB4B,KAAjB,EAAwBhF,MAAxB,CAAP;AACH;;AAED,QAAMiF,eAAN,CAAuB1E,MAAM,GAAGf,SAAhC,EAA2C0F,KAAK,GAAG1F,SAAnD,EAA8D6B,KAAK,GAAG7B,SAAtE,EAAiFL,MAAM,GAAG,EAA1F,EAA8F;AAC1F,QAAIoB,MAAM,KAAKf,SAAf,EAA0B;AACtB,YAAM,IAAIjB,iBAAJ,CAAuB,KAAK0B,EAAL,GAAU,2CAAjC,CAAN;AACH;;AACD,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMtB,MAAM,GAAG,KAAKA,MAAL,CAAaO,MAAb,CAAf;AACA,UAAMqE,SAAS,GAAI5E,MAAM,CAAC,SAAD,CAAN,KAAsB,MAAvB,GAAiC,oBAAjC,GAAwD,gBAA1E;AACA,UAAMuB,OAAO,GAAG;AACZ,gBAAUvB,MAAM,CAAC,aAAD,CADJ;AAEZ,cAAQ4E,SAFI;AAGZ,cAAQ;AAHI,KAAhB;AAKA,UAAMxF,QAAQ,GAAG,MAAM,KAAK+F,kBAAL,CAAyB,KAAK1F,MAAL,CAAa8B,OAAb,EAAsBpC,MAAtB,CAAzB,CAAvB,CAZ0F,CAa1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMoD,IAAI,GAAG,KAAK9B,SAAL,CAAgBrB,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAKgG,WAAL,CAAkB7C,IAAlB,EAAwBvC,MAAxB,EAAgCkF,KAAhC,EAAuC7D,KAAvC,CAAP;AACH;;AAEDgE,EAAAA,UAAU,CAAEC,KAAF,EAAStF,MAAM,GAAGR,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAQ,IAAAA,MAAM,GAAG,KAAKuF,UAAL,CAAiB/F,SAAjB,EAA4BQ,MAA5B,CAAT;AACA,UAAMwF,OAAO,GAAG,KAAKjG,UAAL,CAAiB+F,KAAjB,EAAwB,IAAxB,CAAhB;AACA,UAAM7D,SAAS,GAAG,KAAK8B,SAAL,CAAgB,KAAKhE,UAAL,CAAiB+F,KAAjB,EAAwB,MAAxB,CAAhB,CAAlB;AACA,UAAMG,YAAY,GAAG,KAAKlG,UAAL,CAAiB+F,KAAjB,EAAwB,QAAxB,CAArB;AACA,UAAMI,WAAW,GAAG,KAAKnG,UAAL,CAAiB+F,KAAjB,EAAwB,MAAxB,CAApB;AACA,UAAM9B,KAAK,GAAG,KAAKmC,WAAL,CAAkBD,WAAlB,CAAd;AACA,UAAME,MAAM,GAAG,KAAKrG,UAAL,CAAiB+F,KAAjB,EAAwB,QAAxB,CAAf;AACA,UAAMO,YAAY,GAAGjH,OAAO,CAACkH,SAAR,CAAmBL,YAAnB,EAAiCG,MAAjC,CAArB;AACA,UAAMnC,MAAM,GAAG,KAAKkC,WAAL,CAAkBE,YAAlB,CAAf;AACA,UAAM/B,IAAI,GAAG,KAAK6B,WAAL,CAAkB/G,OAAO,CAACmH,SAAR,CAAmBL,WAAnB,EAAgCG,YAAhC,CAAlB,CAAb;AACA,UAAMtF,MAAM,GAAGP,MAAM,CAAC,QAAD,CAArB;AACA,QAAIiE,IAAI,GAAG,KAAKD,eAAL,CAAsBsB,KAAtB,EAA6B,MAA7B,CAAX;;AACA,QAAIrB,IAAI,CAAC+B,OAAL,CAAc,MAAd,KAAyB,CAA7B,EAAgC;AAC5B/B,MAAAA,IAAI,GAAG,MAAP;AACH,KAFD,MAEO,IAAIA,IAAI,CAAC+B,OAAL,CAAc,KAAd,KAAwB,CAA5B,EAA+B;AAClC/B,MAAAA,IAAI,GAAG,KAAP;AACH;;AACD,QAAIE,GAAG,GAAG3E,SAAV;AACA,UAAM0E,OAAO,GAAG,KAAK/C,UAAL,CAAiBmE,KAAjB,EAAwB,KAAxB,CAAhB;;AACA,QAAIpB,OAAO,KAAK1E,SAAhB,EAA2B;AACvB,YAAM4E,eAAe,GAAGpE,MAAM,CAAC,OAAD,CAA9B;AACAmE,MAAAA,GAAG,GAAG;AACF,gBAAQD,OADN;AAEF,oBAAYE;AAFV,OAAN;AAIH;;AACD,WAAO;AACH,cAAQkB,KADL;AAEH,mBAAa7D,SAFV;AAGH,kBAAY,KAAKO,OAAL,CAAcP,SAAd,CAHT;AAIH,gBAAUlB,MAJP;AAKH,YAAMf,SALH;AAMH,eAASgG,OANN;AAOH,cAAQhG,SAPL;AAQH,cAAQyE,IARL;AASH,sBAAgBzE,SATb;AAUH,eAASgE,KAVN;AAWH,gBAAUC,MAXP;AAYH,cAAQK,IAZL;AAaH,aAAOK;AAbJ,KAAP;AAeH;;AAED,QAAM8B,aAAN,CAAqB1F,MAAM,GAAGf,SAA9B,EAAyC0F,KAAK,GAAG1F,SAAjD,EAA4D6B,KAAK,GAAG7B,SAApE,EAA+EL,MAAM,GAAG,EAAxF,EAA4F;AACxF,QAAIoB,MAAM,KAAKf,SAAf,EAA0B;AACtB,YAAM,IAAIjB,iBAAJ,CAAuB,KAAK0B,EAAL,GAAU,2CAAjC,CAAN;AACH;;AACD,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAMtB,MAAM,GAAG,KAAKA,MAAL,CAAaO,MAAb,CAAf;AACA,UAAMgB,OAAO,GAAG;AACZ,gBAAUvB,MAAM,CAAC,IAAD,CADJ;AAEZ,cAAQ;AAFI,KAAhB;;AAIA,QAAIkF,KAAK,KAAK1F,SAAd,EAAyB;AACrB+B,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAKS,OAAL,CAAckD,KAAd,CAAnB;AACH;;AACD,UAAM9F,QAAQ,GAAG,MAAM,KAAK8G,8BAAL,CAAqC,KAAKzG,MAAL,CAAa8B,OAAb,EAAsBpC,MAAtB,CAArC,CAAvB,CAbwF,CAcxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMoD,IAAI,GAAG,KAAK9B,SAAL,CAAgBrB,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAK+G,WAAL,CAAkB5D,IAAlB,EAAwBvC,MAAxB,EAAgCkF,KAAhC,EAAuC7D,KAAvC,CAAP;AACH;;AAED,QAAM+E,aAAN,CAAqBrD,IAAI,GAAGvD,SAA5B,EAAuC0F,KAAK,GAAG1F,SAA/C,EAA0D6B,KAAK,GAAG7B,SAAlE,EAA6EL,MAAM,GAAG,EAAtF,EAA0F;AACtF,QAAI4D,IAAI,KAAKvD,SAAb,EAAwB;AACpB,YAAM,IAAIjB,iBAAJ,CAAuB,KAAK0B,EAAL,GAAU,oDAAjC,CAAN;AACH;;AACD,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAM+E,QAAQ,GAAG,KAAKA,QAAL,CAAetD,IAAf,CAAjB;AACA,UAAMxB,OAAO,GAAG;AACZ,gBAAU8E,QAAQ,CAAC,IAAD,CADN;AAEZ,cAAQ;AAFI,KAAhB;AAIA,UAAMjH,QAAQ,GAAG,MAAM,KAAKkH,0BAAL,CAAiC,KAAK7G,MAAL,CAAa8B,OAAb,EAAsBpC,MAAtB,CAAjC,CAAvB,CAVsF,CAWtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMoD,IAAI,GAAG,KAAK9B,SAAL,CAAgBrB,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAKmH,iBAAL,CAAwBhE,IAAxB,EAA8B8D,QAA9B,EAAwCnB,KAAxC,EAA+C7D,KAA/C,CAAP;AACH;;AAED,QAAMmF,gBAAN,CAAwBzD,IAAI,GAAGvD,SAA/B,EAA0C0F,KAAK,GAAG1F,SAAlD,EAA6D6B,KAAK,GAAG7B,SAArE,EAAgFL,MAAM,GAAG,EAAzF,EAA6F;AACzF,QAAI4D,IAAI,KAAKvD,SAAb,EAAwB;AACpB,YAAM,IAAIjB,iBAAJ,CAAuB,KAAK0B,EAAL,GAAU,uDAAjC,CAAN;AACH;;AACD,UAAM,KAAKqB,WAAL,EAAN;AACA,UAAM+E,QAAQ,GAAG,KAAKA,QAAL,CAAetD,IAAf,CAAjB;AACA,UAAMxB,OAAO,GAAG;AACZ,gBAAU8E,QAAQ,CAAC,IAAD,CADN;AAEZ,cAAQ;AAFI,KAAhB;AAIA,UAAMjH,QAAQ,GAAG,MAAM,KAAKqH,2BAAL,CAAkC,KAAKhH,MAAL,CAAa8B,OAAb,EAAsBpC,MAAtB,CAAlC,CAAvB,CAVyF,CAWzF;AACA;AACA;;AACA,UAAMoD,IAAI,GAAG,KAAK9B,SAAL,CAAgBrB,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAKmH,iBAAL,CAAwBhE,IAAxB,EAA8B8D,QAA9B,EAAwCnB,KAAxC,EAA+C7D,KAA/C,CAAP;AACH;;AAEDqF,EAAAA,4BAA4B,CAAEpH,MAAF,EAAUyE,IAAI,GAAGvE,SAAjB,EAA4B;AACpD,UAAMmH,cAAc,GAAG;AACnB,iBAAW;AACP,aAAK,SADE;AAEP,aAAK;AAFE,OADQ;AAKnB,oBAAc;AACV,aAAK,SADK;AACM;AAChB,aAAK,UAFK;AAEO;AACjB,aAAK,SAHK;AAGM;AAChB,aAAK,QAJK;AAIK;AACf,aAAK,SALK;AAKM;AAChB,aAAK,QANK;AAMK;AACf,aAAK,IAPK,CAOC;;AAPD;AALK,KAAvB;AAeA,UAAMxD,QAAQ,GAAG,KAAK1C,SAAL,CAAgBkG,cAAhB,EAAgC5C,IAAhC,EAAsC,EAAtC,CAAjB;AACA,WAAO,KAAKxE,UAAL,CAAiB4D,QAAjB,EAA2B7D,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAEDsH,EAAAA,gBAAgB,CAAEC,WAAF,EAAeR,QAAQ,GAAG7G,SAA1B,EAAqC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMsD,UAAU,GAAG,KAAKvD,UAAL,CAAiBsH,WAAjB,EAA8B,MAA9B,CAAnB;AACA,UAAM9D,IAAI,GAAG,KAAK1C,gBAAL,CAAuByC,UAAvB,EAAmCuD,QAAnC,CAAb;AACA,UAAM5E,SAAS,GAAG,KAAK8B,SAAL,CAAgB,KAAKhE,UAAL,CAAiBsH,WAAjB,EAA8B,MAA9B,CAAhB,CAAlB;AACA,QAAI9C,IAAI,GAAG,KAAKxE,UAAL,CAAiBsH,WAAjB,EAA8B,MAA9B,CAAX;AACA,QAAIvH,MAAM,GAAGE,SAAb;;AACA,QAAIuE,IAAI,KAAKvE,SAAb,EAAwB;AACpB,UAAIuE,IAAI,CAACiC,OAAL,CAAc,SAAd,KAA4B,CAAhC,EAAmC;AAC/BjC,QAAAA,IAAI,GAAG,SAAP;AACAzE,QAAAA,MAAM,GAAG,IAAT;AACH,OAHD,MAGO,IAAIyE,IAAI,CAACiC,OAAL,CAAc,UAAd,KAA6B,CAAjC,EAAoC;AACvCjC,QAAAA,IAAI,GAAG,YAAP;AACH;AACJ,KAnCgD,CAoCjD;;;AACA,UAAMN,MAAM,GAAG,KAAKtC,UAAL,CAAiB0F,WAAjB,EAA8B,QAA9B,CAAf;AACA,UAAM3C,OAAO,GAAG,KAAK/C,UAAL,CAAiB0F,WAAjB,EAA8B,KAA9B,CAAhB;AACA,QAAI1C,GAAG,GAAG3E,SAAV;;AACA,QAAI0E,OAAO,KAAK1E,SAAhB,EAA2B;AACvB2E,MAAAA,GAAG,GAAG;AAAE,oBAAYpB,IAAd;AAAoB,gBAAQmB;AAA5B,OAAN;AACH;;AACD,WAAO;AACH,cAAQ2C,WADL;AAEH,YAAMrH,SAFH;AAGH,cAAQA,SAHL;AAIH,mBAAaiC,SAJV;AAKH,kBAAY,KAAKO,OAAL,CAAcP,SAAd,CALT;AAMH,iBAAWjC,SANR;AAOH,mBAAaA,SAPV;AAQH,qBAAeA,SARZ;AASH,aAAOA,SATJ;AAUH,eAASA,SAVN;AAWH,iBAAWA,SAXR;AAYH,cAAQuE,IAZL;AAaH,gBAAUN,MAbP;AAcH,kBAAYV,IAdT;AAeH,gBAAUzD,MAfP;AAgBH,iBAAWE,SAhBR;AAiBH,kBAAYA,SAjBT;AAkBH,aAAO2E;AAlBJ,KAAP;AAoBH;;AAED,QAAM2C,mBAAN,CAA2B/D,IAA3B,EAAiC5D,MAAM,GAAG,EAA1C,EAA8C;AAC1C,UAAM,KAAKmC,WAAL,EAAN;AACA,UAAM+E,QAAQ,GAAG,KAAKA,QAAL,CAAetD,IAAf,CAAjB;AACA,UAAMxB,OAAO,GAAG;AACZ,gBAAU8E,QAAQ,CAAC,IAAD;AADN,KAAhB;AAGA,UAAMjH,QAAQ,GAAG,MAAM,KAAK2H,0BAAL,CAAiC,KAAKtH,MAAL,CAAa8B,OAAb,EAAsBpC,MAAtB,CAAjC,CAAvB,CAN0C,CAO1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMoD,IAAI,GAAG,KAAK9B,SAAL,CAAgBrB,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,UAAM4H,OAAO,GAAG,KAAKzH,UAAL,CAAiBgD,IAAjB,EAAuB,OAAvB,CAAhB;AACA,UAAM0E,GAAG,GAAG,KAAK1H,UAAL,CAAiBgD,IAAjB,EAAuB,KAAvB,CAAZ;AACA,SAAK2E,YAAL,CAAmBF,OAAnB;AACA,WAAO;AACH,kBAAYjE,IADT;AAEH,iBAAWiE,OAFR;AAGH,aAAOC,GAHJ;AAIH,cAAQ7H;AAJL,KAAP;AAMH;;AAED,QAAM+H,QAAN,CAAgBpE,IAAhB,EAAsBU,MAAtB,EAA8BuD,OAA9B,EAAuCC,GAAG,GAAGzH,SAA7C,EAAwDL,MAAM,GAAG,EAAjE,EAAqE;AACjE,SAAK+H,YAAL,CAAmBF,OAAnB;AACA,UAAM,KAAK1F,WAAL,EAAN;AACA,UAAM+E,QAAQ,GAAG,KAAKA,QAAL,CAAetD,IAAf,CAAjB;AACA,UAAMxB,OAAO,GAAG;AACZ,cAAQ8E,QAAQ,CAAC,IAAD,CADJ;AAEZ,iBAAWW,OAFC;AAGZ,gBAAUvD,MAHE,CAIZ;AACA;AACA;;AANY,KAAhB;;AAQA,QAAIwD,GAAG,KAAKzH,SAAZ,EAAuB;AACnB+B,MAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB0F,GAAxB;AACH;;AACD,UAAM7H,QAAQ,GAAG,MAAM,KAAKgI,4BAAL,CAAmC,KAAK3H,MAAL,CAAa8B,OAAb,EAAsBpC,MAAtB,CAAnC,CAAvB,CAfiE,CAgBjE;;AACA,WAAO;AACH,cAAQC,QADL;AAEH,YAAM,KAAKG,UAAL,CAAiBH,QAAjB,EAA2B,IAA3B;AAFH,KAAP;AAIH;;AAEDiI,EAAAA,KAAK,GAAI;AACL,WAAO,KAAK3H,YAAL,EAAP;AACH;;AAED4H,EAAAA,IAAI,CAAEC,IAAF,EAAQC,GAAG,GAAG,IAAd,EAAoBC,MAAM,GAAG,KAA7B,EAAoCtI,MAAM,GAAG,EAA7C,EAAiDuI,OAAO,GAAGlI,SAA3D,EAAsEmI,IAAI,GAAGnI,SAA7E,EAAwF;AACxF,SAAKoI,wBAAL;AACA,UAAMC,OAAO,GAAG,KAAKC,aAAL,CAAoB,KAAKC,IAAL,CAAU,KAAV,EAAiBP,GAAjB,CAApB,EAA2C;AAAE,kBAAY,KAAKQ;AAAnB,KAA3C,CAAhB;AACA,QAAIC,GAAG,GAAGJ,OAAO,GAAG,GAAV,GAAgB,KAAKC,aAAL,CAAoBP,IAApB,EAA0BpI,MAA1B,CAA1B;AACA,UAAM+I,KAAK,GAAG,KAAKC,IAAL,CAAWhJ,MAAX,EAAmB,KAAKiJ,aAAL,CAAoBb,IAApB,CAAnB,CAAd;AACA,UAAMF,KAAK,GAAG,KAAKA,KAAL,GAAcgB,QAAd,EAAd;AACAX,IAAAA,OAAO,GAAG;AACN,yBAAmB,KAAKY;AADlB,KAAV;;AAGA,QAAIb,MAAM,KAAK,KAAf,EAAsB;AAClB,UAAIhF,MAAM,CAACD,IAAP,CAAa0F,KAAb,EAAoBnI,MAAxB,EAAgC;AAC5BkI,QAAAA,GAAG,IAAI,MAAM,KAAKM,SAAL,CAAgBL,KAAhB,CAAb;AACH;AACJ,KAJD,MAIO,IAAIT,MAAM,KAAK,MAAf,EAAuB;AAC1B,UAAIhF,MAAM,CAACD,IAAP,CAAa0F,KAAb,EAAoBnI,MAAxB,EAAgC;AAC5B4H,QAAAA,IAAI,GAAG,KAAKa,IAAL,CAAWN,KAAX,CAAP;AACH,OAFD,MAEO;AACHP,QAAAA,IAAI,GAAG,IAAP;AACH;;AACD,YAAMc,IAAI,GAAG;AACT,2BAAmBpB,KADV;AAET,gBAAQM;AAFC,OAAb;AAIA,YAAMe,OAAO,GAAG,KAAKC,cAAL,CAAqB,KAAKH,IAAL,CAAWC,IAAX,CAArB,CAAhB;AACA,YAAMG,SAAS,GAAG,KAAKC,IAAL,CAAWH,OAAX,EAAoB,KAAKI,MAAL,CAAa,KAAKC,MAAlB,CAApB,EAA+C,QAA/C,CAAlB;AACArB,MAAAA,OAAO,CAAC,kBAAD,CAAP,GAA8B,KAAKsB,MAAL,CAAaN,OAAb,CAA9B;AACAhB,MAAAA,OAAO,CAAC,oBAAD,CAAP,GAAgCkB,SAAhC;AACAlB,MAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,mCAA1B;AACH;;AACD,WAAO;AAAE,aAAOO,GAAT;AAAc,gBAAUR,MAAxB;AAAgC,cAAQE,IAAxC;AAA8C,iBAAWD;AAAzD,KAAP;AACH;;AAEDuB,EAAAA,YAAY,CAAEC,QAAF,EAAYC,MAAZ,EAAoBlB,GAApB,EAAyBR,MAAzB,EAAiCC,OAAjC,EAA0CC,IAA1C,EAAgDvI,QAAhD,EAA0DgK,cAA1D,EAA0EC,WAA1E,EAAuF;AAC/F,QAAIjK,QAAQ,KAAKI,SAAjB,EAA4B;AACxB,aADwB,CAChB;AACX,KAH8F,CAI/F;AACA;AACA;AACA;;;AACA,UAAMuD,IAAI,GAAG,KAAKxD,UAAL,CAAiBH,QAAjB,EAA2B,MAA3B,CAAb;AACA,UAAMkK,OAAO,GAAG,KAAK/J,UAAL,CAAiBH,QAAjB,EAA2B,KAA3B,CAAhB;AACA,UAAMmK,KAAK,GAAIxG,IAAI,KAAKvD,SAAV,IAAyBuD,IAAI,KAAK,KAAhD;;AACA,QAAIwG,KAAK,IAAKD,OAAO,KAAK9J,SAA1B,EAAsC;AAClC,YAAMgK,QAAQ,GAAG,KAAKvJ,EAAL,GAAU,GAAV,GAAgB0H,IAAjC;AACA,WAAK8B,4BAAL,CAAmC,KAAKC,UAAL,CAAgB,OAAhB,CAAnC,EAA6D3G,IAA7D,EAAmEyG,QAAnE;AACA,WAAKC,4BAAL,CAAmC,KAAKC,UAAL,CAAgB,OAAhB,CAAnC,EAA6DJ,OAA7D,EAAsEE,QAAtE;AACA,WAAKG,4BAAL,CAAmC,KAAKD,UAAL,CAAgB,OAAhB,CAAnC,EAA6DJ,OAA7D,EAAsEE,QAAtE;AACA,YAAM,IAAIlL,aAAJ,CAAmBkL,QAAnB,CAAN,CALkC,CAKE;AACvC;AACJ;;AAn9B0C,CAA/C","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, InsufficientFunds, OrderNotFound, BadRequest, BadSymbol } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitbns extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitbns',\n            'name': 'Bitbns',\n            'countries': [ 'IN' ], // India\n            'rateLimit': 1000,\n            'certified': false,\n            'pro': false,\n            // new metainfo interface\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': false,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchStatus': true,\n                'fetchTicker': 'emulated',\n                'fetchTickers': true,\n                'fetchTrades': false,\n                'fetchWithdrawals': true,\n            },\n            'timeframes': {\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/117201933-e7a6e780-adf5-11eb-9d80-98fc2a21c3d6.jpg',\n                'api': {\n                    'ccxt': 'https://bitbns.com/order',\n                    'v1': 'https://api.bitbns.com/api/trade/v1',\n                    'v2': 'https://api.bitbns.com/api/trade/v2',\n                },\n                'www': 'https://bitbns.com',\n                'referral': 'https://ref.bitbns.com/1090961',\n                'doc': [\n                    'https://bitbns.com/trade/#/api-trading/',\n                ],\n                'fees': 'https://bitbns.com/fees',\n            },\n            'api': {\n                'ccxt': {\n                    'get': [\n                        'fetchMarkets',\n                        'fetchTickers',\n                        'fetchOrderbook',\n                    ],\n                },\n                'v1': {\n                    'get': [\n                        'platform/status',\n                        'tickers',\n                        'orderbook/sell/{symbol}',\n                        'orderbook/buy/{symbol}',\n                    ],\n                    'post': [\n                        'currentCoinBalance/EVERYTHING',\n                        'getApiUsageStatus/USAGE',\n                        'getOrderSocketToken/USAGE',\n                        'currentCoinBalance/{symbol}',\n                        'orderStatus/{symbol}',\n                        'depositHistory/{symbol}',\n                        'withdrawHistory/{symbol}',\n                        'listOpenOrders/{symbol}',\n                        'listOpenStopOrders/{symbol}',\n                        'getCoinAddress/{symbol}',\n                        'placeSellOrder/{symbol}',\n                        'placeBuyOrder/{symbol}',\n                        'buyStopLoss/{symbol}',\n                        'placeSellOrder/{symbol}',\n                        'cancelOrder/{symbol}',\n                        'cancelStopLossOrder/{symbol}',\n                        'listExecutedOrders/{symbol}',\n                    ],\n                },\n                'v2': {\n                    'post': [\n                        'orders',\n                        'cancel',\n                        'getordersnew',\n                        'marginOrders',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'feeSide': 'quote',\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.0025,\n                    'maker': 0.0025,\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    '400': BadRequest, // {\"msg\":\"Invalid Request\",\"status\":-1,\"code\":400}\n                    '409': BadSymbol, // {\"data\":\"\",\"status\":0,\"error\":\"coin name not supplied or not yet supported\",\"code\":409}\n                    '416': InsufficientFunds, // {\"data\":\"Oops ! Not sufficient currency to sell\",\"status\":0,\"error\":null,\"code\":416}\n                    '417': OrderNotFound, // {\"data\":[],\"status\":0,\"error\":\"Nothing to show\",\"code\":417}\n                },\n                'broad': {},\n            },\n        });\n    }\n\n    async fetchStatus (params = {}) {\n        const response = await this.v1GetPlatformStatus (params);\n        //\n        //     {\n        //         \"data\":{\n        //             \"BTC\":{\"status\":1},\n        //             \"ETH\":{\"status\":1},\n        //             \"XRP\":{\"status\":1},\n        //         },\n        //         \"status\":1,\n        //         \"error\":null,\n        //         \"code\":200\n        //     }\n        //\n        let status = this.safeString (response, 'status');\n        if (status !== undefined) {\n            status = (status === '1') ? 'ok' : 'maintenance';\n            this.status = this.extend (this.status, {\n                'status': status,\n                'updated': this.milliseconds (),\n            });\n        }\n        return this.status;\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.ccxtGetFetchMarkets (params);\n        //\n        //     [\n        //         {\n        //             \"id\":\"BTC\",\n        //             \"symbol\":\"BTC/INR\",\n        //             \"base\":\"BTC\",\n        //             \"quote\":\"INR\",\n        //             \"baseId\":\"BTC\",\n        //             \"quoteId\":\"\",\n        //             \"active\":true,\n        //             \"limits\":{\n        //                 \"amount\":{\"min\":\"0.00017376\",\"max\":20},\n        //                 \"price\":{\"min\":2762353.2359999996,\"max\":6445490.883999999},\n        //                 \"cost\":{\"min\":800,\"max\":128909817.67999998}\n        //             },\n        //             \"precision\":{\n        //                 \"amount\":8,\n        //                 \"price\":2\n        //             },\n        //             \"info\":{}\n        //         },\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'id');\n            const baseId = this.safeString (market, 'base');\n            const quoteId = this.safeString (market, 'quote');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const marketPrecision = this.safeValue (market, 'precision', {});\n            const precision = {\n                'amount': this.safeInteger (marketPrecision, 'amount'),\n                'price': this.safeInteger (marketPrecision, 'price'),\n            };\n            const marketLimits = this.safeValue (market, 'limits', {});\n            const amountLimits = this.safeValue (marketLimits, 'amount', {});\n            const priceLimits = this.safeValue (marketLimits, 'price', {});\n            const costLimits = this.safeValue (marketLimits, 'cost', {});\n            const usdt = (quoteId === 'USDT');\n            const uppercaseId = usdt ? (baseId + '_' + quoteId) : baseId;\n            result.push ({\n                'id': id,\n                'uppercaseId': uppercaseId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'active': undefined,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (amountLimits, 'min'),\n                        'max': this.safeNumber (amountLimits, 'max'),\n                    },\n                    'price': {\n                        'min': this.safeNumber (priceLimits, 'min'),\n                        'max': this.safeNumber (priceLimits, 'max'),\n                    },\n                    'cost': {\n                        'min': this.safeNumber (costLimits, 'min'),\n                        'max': this.safeNumber (costLimits, 'max'),\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100, max 5000, see https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book\n        }\n        const response = await this.ccxtGetFetchOrderbook (this.extend (request, params));\n        //\n        //     {\n        //         \"bids\":[\n        //             [49352.04,0.843948],\n        //             [49352.03,0.742048],\n        //             [49349.78,0.686239],\n        //         ],\n        //         \"asks\":[\n        //             [49443.59,0.065137],\n        //             [49444.63,0.098211],\n        //             [49449.01,0.066309],\n        //         ],\n        //         \"timestamp\":1619172786577,\n        //         \"datetime\":\"2021-04-23T10:13:06.577Z\",\n        //         \"nonce\":\"\"\n        //     }\n        //\n        const timestamp = this.safeInteger (response, 'timestamp');\n        return this.parseOrderBook (response, timestamp);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         \"symbol\":\"BTC/INR\",\n        //         \"info\":{\n        //             \"highest_buy_bid\":4368494.31,\n        //             \"lowest_sell_bid\":4374835.09,\n        //             \"last_traded_price\":4374835.09,\n        //             \"yes_price\":4531016.27,\n        //             \"volume\":{\"max\":\"4569119.23\",\"min\":\"4254552.13\",\"volume\":62.17722344}\n        //         },\n        //         \"timestamp\":1619100020845,\n        //         \"datetime\":1619100020845,\n        //         \"high\":\"4569119.23\",\n        //         \"low\":\"4254552.13\",\n        //         \"bid\":4368494.31,\n        //         \"bidVolume\":\"\",\n        //         \"ask\":4374835.09,\n        //         \"askVolume\":\"\",\n        //         \"vwap\":\"\",\n        //         \"open\":4531016.27,\n        //         \"close\":4374835.09,\n        //         \"last\":4374835.09,\n        //         \"baseVolume\":62.17722344,\n        //         \"quoteVolume\":\"\",\n        //         \"previousClose\":\"\",\n        //         \"change\":-156181.1799999997,\n        //         \"percentage\":-3.446934874943623,\n        //         \"average\":4452925.68\n        //     }\n        //\n        const timestamp = this.safeInteger (ticker, 'timestamp');\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const last = this.safeNumber (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': this.safeNumber (ticker, 'bidVolume'),\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': this.safeNumber (ticker, 'askVolume'),\n            'vwap': this.safeNumber (ticker, 'vwap'),\n            'open': this.safeNumber (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': this.safeNumber (ticker, 'previousClose'), // previous day close\n            'change': this.safeNumber (ticker, 'change'),\n            'percentage': this.safeNumber (ticker, 'percentage'),\n            'average': this.safeNumber (ticker, 'average'),\n            'baseVolume': this.safeNumber (ticker, 'baseVolume'),\n            'quoteVolume': this.safeNumber (ticker, 'quoteVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.ccxtGetFetchTickers (params);\n        //\n        //     {\n        //         \"BTC/INR\":{\n        //             \"symbol\":\"BTC/INR\",\n        //             \"info\":{\n        //                 \"highest_buy_bid\":4368494.31,\n        //                 \"lowest_sell_bid\":4374835.09,\n        //                 \"last_traded_price\":4374835.09,\n        //                 \"yes_price\":4531016.27,\n        //                 \"volume\":{\"max\":\"4569119.23\",\"min\":\"4254552.13\",\"volume\":62.17722344}\n        //             },\n        //             \"timestamp\":1619100020845,\n        //             \"datetime\":1619100020845,\n        //             \"high\":\"4569119.23\",\n        //             \"low\":\"4254552.13\",\n        //             \"bid\":4368494.31,\n        //             \"bidVolume\":\"\",\n        //             \"ask\":4374835.09,\n        //             \"askVolume\":\"\",\n        //             \"vwap\":\"\",\n        //             \"open\":4531016.27,\n        //             \"close\":4374835.09,\n        //             \"last\":4374835.09,\n        //             \"baseVolume\":62.17722344,\n        //             \"quoteVolume\":\"\",\n        //             \"previousClose\":\"\",\n        //             \"change\":-156181.1799999997,\n        //             \"percentage\":-3.446934874943623,\n        //             \"average\":4452925.68\n        //         }\n        //     }\n        //\n        return this.parseTickers (response, symbols);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.v1PostCurrentCoinBalanceEVERYTHING (params);\n        //\n        //     {\n        //         \"data\":{\n        //             \"availableorderMoney\":0,\n        //             \"availableorderBTC\":0,\n        //             \"availableorderXRP\":0,\n        //             \"inorderMoney\":0,\n        //             \"inorderBTC\":0,\n        //             \"inorderXRP\":0,\n        //             \"inorderNEO\":0,\n        //         },\n        //         \"status\":1,\n        //         \"error\":null,\n        //         \"code\":200\n        //     }\n        //\n        const timestamp = undefined;\n        const result = {\n            'info': response,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n        };\n        const data = this.safeValue (response, 'data', {});\n        const keys = Object.keys (data);\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const parts = key.split ('availableorder');\n            const numParts = parts.length;\n            if (numParts > 1) {\n                const currencyId = this.safeString (parts, 1);\n                if (currencyId !== 'Money') {\n                    const code = this.safeCurrencyCode (currencyId);\n                    const account = this.account ();\n                    account['free'] = this.safeString (data, key);\n                    account['used'] = this.safeString (data, 'inorder' + currencyId);\n                    result[code] = account;\n                }\n            }\n        }\n        return this.parseBalance (result, false);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '0': 'open',\n            // 'PARTIALLY_FILLED': 'open',\n            // 'FILLED': 'closed',\n            // 'CANCELED': 'canceled',\n            // 'PENDING_CANCEL': 'canceling', // currently unused\n            // 'REJECTED': 'rejected',\n            // 'EXPIRED': 'expired',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"data\":\"Successfully placed bid to purchase currency\",\n        //         \"status\":1,\n        //         \"error\":null,\n        //         \"id\":5424475,\n        //         \"code\":200\n        //     }\n        //\n        // fetchOrder\n        //\n        //     {\n        //         \"entry_id\":5424475,\n        //         \"btc\":0.01,\n        //         \"rate\":2000,\n        //         \"time\":\"2021-04-25T17:05:42.000Z\",\n        //         \"type\":0,\n        //         \"status\":0,\n        //         \"total\":0.01,\n        //         \"avg_cost\":null,\n        //         \"side\":\"BUY\",\n        //         \"amount\":0.01,\n        //         \"remaining\":0.01,\n        //         \"filled\":0,\n        //         \"cost\":null,\n        //         \"fee\":0.05\n        //     }\n        //\n        // fetchOpenOrders\n        //\n        //     {\n        //         \"entry_id\":5424475,\n        //         \"btc\":0.01,\n        //         \"rate\":2000,\n        //         \"time\":\"2021-04-25T17:05:42.000Z\",\n        //         \"type\":0,\n        //         \"status\":0\n        //     }\n        //\n        const id = this.safeString2 (order, 'id', 'entry_id');\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.parse8601 (this.safeString (order, 'time'));\n        const price = this.safeNumber (order, 'rate');\n        const amount = this.safeNumber2 (order, 'amount', 'btc');\n        const filled = this.safeNumber (order, 'filled');\n        const remaining = this.safeNumber (order, 'remaining');\n        const average = this.safeNumber (order, 'avg_cost');\n        const cost = this.safeNumber (order, 'cost');\n        let type = this.safeStringLower (order, 'type');\n        if (type === '0') {\n            type = 'limit';\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const side = this.safeStringLower (order, 'side');\n        const feeCost = this.safeNumber (order, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyCode = undefined;\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return this.safeOrder ({\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type !== 'limit') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'side': side.toUpperCase (),\n            'symbol': market['baseId'] + '_' + market['quoteId'],\n            'quantity': this.amountToPrecision (symbol, amount),\n            'rate': this.priceToPrecision (symbol, price),\n            // 'target_rate': this.priceToPrecision (symbol, targetRate),\n            // 't_rate': this.priceToPrecision (symbol, stopPrice),\n            // 'trail_rate': this.priceToPrecision (symbol, trailRate),\n            // To Place Simple Buy or Sell Order use rate\n            // To Place Stoploss Buy or Sell Order use rate & t_rate\n            // To Place Bracket Buy or Sell Order use rate , t_rate, target_rate & trail_rate\n        };\n        const response = await this.v2PostOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":\"Successfully placed bid to purchase currency\",\n        //         \"status\":1,\n        //         \"error\":null,\n        //         \"id\":5424475,\n        //         \"code\":200\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const quoteSide = (market['quoteId'] === 'USDT') ? 'usdtcancelOrder' : 'cancelOrder';\n        const request = {\n            'entry_id': id,\n            'symbol': market['uppercaseId'],\n            'side': quoteSide,\n        };\n        const response = await this.v2PostCancel (this.extend (request, params));\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'entry_id': id,\n        };\n        const response = await this.v1PostOrderStatusSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"entry_id\":5424475,\n        //                 \"btc\":0.01,\n        //                 \"rate\":2000,\n        //                 \"time\":\"2021-04-25T17:05:42.000Z\",\n        //                 \"type\":0,\n        //                 \"status\":0,\n        //                 \"total\":0.01,\n        //                 \"avg_cost\":null,\n        //                 \"side\":\"BUY\",\n        //                 \"amount\":0.01,\n        //                 \"remaining\":0.01,\n        //                 \"filled\":0,\n        //                 \"cost\":null,\n        //                 \"fee\":0.05\n        //             }\n        //         ],\n        //         \"status\":1,\n        //         \"error\":null,\n        //         \"code\":200\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const first = this.safeValue (data, 0);\n        return this.parseOrder (first, market);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const quoteSide = (market['quoteId'] === 'USDT') ? 'usdtListOpenOrders' : 'listOpenOrders';\n        const request = {\n            'symbol': market['uppercaseId'],\n            'side': quoteSide,\n            'page': 0,\n        };\n        const response = await this.v2PostGetordersnew (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"entry_id\":5424475,\n        //                 \"btc\":0.01,\n        //                 \"rate\":2000,\n        //                 \"time\":\"2021-04-25T17:05:42.000Z\",\n        //                 \"type\":0,\n        //                 \"status\":0\n        //             }\n        //         ],\n        //         \"status\":1,\n        //         \"error\":null,\n        //         \"code\":200\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchMyTrades\n        //\n        //     {\n        //         \"type\": \"BTC Sell order executed\",\n        //         \"typeI\": 6,\n        //         \"crypto\": 5000,\n        //         \"amount\": 35.4,\n        //         \"rate\": 709800,\n        //         \"date\": \"2020-05-22T15:05:34.000Z\",\n        //         \"unit\": \"INR\",\n        //         \"factor\": 100000000,\n        //         \"fee\": 0.09,\n        //         \"delh_btc\": -5000,\n        //         \"delh_inr\": 0,\n        //         \"del_btc\": 0,\n        //         \"del_inr\": 35.4,\n        //         \"id\": \"2938823\"\n        //     }\n        //\n        market = this.safeMarket (undefined, market);\n        const orderId = this.safeString (trade, 'id');\n        const timestamp = this.parse8601 (this.safeString (trade, 'date'));\n        const amountString = this.safeString (trade, 'amount');\n        const priceString = this.safeString (trade, 'rate');\n        const price = this.parseNumber (priceString);\n        const factor = this.safeString (trade, 'factor');\n        const amountScaled = Precise.stringDiv (amountString, factor);\n        const amount = this.parseNumber (amountScaled);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountScaled));\n        const symbol = market['symbol'];\n        let side = this.safeStringLower (trade, 'type');\n        if (side.indexOf ('sell') >= 0) {\n            side = 'sell';\n        } else if (side.indexOf ('buy') >= 0) {\n            side = 'buy';\n        }\n        let fee = undefined;\n        const feeCost = this.safeNumber (trade, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyCode = market['quote'];\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': undefined,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'page': 0,\n        };\n        if (since !== undefined) {\n            request['since'] = this.iso8601 (since);\n        }\n        const response = await this.v1PostListExecutedOrdersSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"data\": [\n        //             {\n        //                 \"type\": \"BTC Sell order executed\",\n        //                 \"typeI\": 6,\n        //                 \"crypto\": 5000,\n        //                 \"amount\": 35.4,\n        //                 \"rate\": 709800,\n        //                 \"date\": \"2020-05-22T15:05:34.000Z\",\n        //                 \"unit\": \"INR\",\n        //                 \"factor\": 100000000,\n        //                 \"fee\": 0.09,\n        //                 \"delh_btc\": -5000,\n        //                 \"delh_inr\": 0,\n        //                 \"del_btc\": 0,\n        //                 \"del_inr\": 35.4,\n        //                 \"id\": \"2938823\"\n        //             },\n        //             {\n        //                 \"type\": \"BTC Sell order executed\",\n        //                 \"typeI\": 6,\n        //                 \"crypto\": 195000,\n        //                 \"amount\": 1380.58,\n        //                 \"rate\": 709765.5,\n        //                 \"date\": \"2020-05-22T15:05:34.000Z\",\n        //                 \"unit\": \"INR\",\n        //                 \"factor\": 100000000,\n        //                 \"fee\": 3.47,\n        //                 \"delh_btc\": -195000,\n        //                 \"delh_inr\": 0,\n        //                 \"del_btc\": 0,\n        //                 \"del_inr\": 1380.58,\n        //                 \"id\": \"2938823\"\n        //             }\n        //         ],\n        //         \"status\": 1,\n        //         \"error\": null,\n        //         \"code\": 200\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchDeposits() requires a currency code argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'symbol': currency['id'],\n            'page': 0,\n        };\n        const response = await this.v1PostDepositHistorySymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":[\n        //             {\n        //                 \"type\":\"USDT deposited\",\n        //                 \"typeI\":1,\n        //                 \"amount\":100,\n        //                 \"date\":\"2021-04-24T14:56:04.000Z\",\n        //                 \"unit\":\"USDT\",\n        //                 \"factor\":100,\n        //                 \"fee\":0,\n        //                 \"delh_btc\":0,\n        //                 \"delh_inr\":0,\n        //                 \"rate\":0,\n        //                 \"del_btc\":10000,\n        //                 \"del_inr\":0\n        //             }\n        //         ],\n        //         \"status\":1,\n        //         \"error\":null,\n        //         \"code\":200\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchWithdrawals() requires a currency code argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'symbol': currency['id'],\n            'page': 0,\n        };\n        const response = await this.v1PostWithdrawHistorySymbol (this.extend (request, params));\n        //\n        //     ...\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    parseTransactionStatusByType (status, type = undefined) {\n        const statusesByType = {\n            'deposit': {\n                '0': 'pending',\n                '1': 'ok',\n            },\n            'withdrawal': {\n                '0': 'pending', // Email Sent\n                '1': 'canceled', // Cancelled (different from 1 = ok in deposits)\n                '2': 'pending', // Awaiting Approval\n                '3': 'failed', // Rejected\n                '4': 'pending', // Processing\n                '5': 'failed', // Failure\n                '6': 'ok', // Completed\n            },\n        };\n        const statuses = this.safeValue (statusesByType, type, {});\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"type\":\"USDT deposited\",\n        //         \"typeI\":1,\n        //         \"amount\":100,\n        //         \"date\":\"2021-04-24T14:56:04.000Z\",\n        //         \"unit\":\"USDT\",\n        //         \"factor\":100,\n        //         \"fee\":0,\n        //         \"delh_btc\":0,\n        //         \"delh_inr\":0,\n        //         \"rate\":0,\n        //         \"del_btc\":10000,\n        //         \"del_inr\":0\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     ...\n        //\n        const currencyId = this.safeString (transaction, 'unit');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const timestamp = this.parse8601 (this.safeString (transaction, 'date'));\n        let type = this.safeString (transaction, 'type');\n        let status = undefined;\n        if (type !== undefined) {\n            if (type.indexOf ('deposit') >= 0) {\n                type = 'deposit';\n                status = 'ok';\n            } else if (type.indexOf ('withdraw') >= 0) {\n                type = 'withdrawal';\n            }\n        }\n        // const status = this.parseTransactionStatusByType (this.safeString (transaction, 'status'), type);\n        const amount = this.safeNumber (transaction, 'amount');\n        const feeCost = this.safeNumber (transaction, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = { 'currency': code, 'cost': feeCost };\n        }\n        return {\n            'info': transaction,\n            'id': undefined,\n            'txid': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': undefined,\n            'addressTo': undefined,\n            'addressFrom': undefined,\n            'tag': undefined,\n            'tagTo': undefined,\n            'tagFrom': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'internal': undefined,\n            'fee': fee,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'symbol': currency['id'],\n        };\n        const response = await this.v1PostGetCoinAddressSymbol (this.extend (request, params));\n        //\n        //     {\n        //         \"data\":{\n        //             \"token\":\"0x680dee9edfff0c397736e10b017cf6a0aee4ba31\",\n        //             \"expiry\":\"2022-04-24 22:30:11\"\n        //         },\n        //         \"status\":1,\n        //         \"error\":null\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const address = this.safeString (data, 'token');\n        const tag = this.safeString (data, 'tag');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coin': currency['id'],\n            'address': address,\n            'amount': amount,\n            // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi\n            // issue sapiGetCapitalConfigGetall () to get networks for withdrawing USDT ERC20 vs USDT Omni\n            // 'network': 'ETH', // 'BTC', 'TRX', etc, optional\n        };\n        if (tag !== undefined) {\n            request['addressTag'] = tag;\n        }\n        const response = await this.sapiPostCapitalWithdrawApply (this.extend (request, params));\n        //     { id: '9a67628b16ba4988ae20d329333f16bc' }\n        return {\n            'info': response,\n            'id': this.safeString (response, 'id'),\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'v1', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        this.checkRequiredCredentials ();\n        const baseUrl = this.implodeParams (this.urls['api'][api], { 'hostname': this.hostname });\n        let url = baseUrl + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        const nonce = this.nonce ().toString ();\n        headers = {\n            'X-BITBNS-APIKEY': this.apiKey,\n        };\n        if (method === 'GET') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (method === 'POST') {\n            if (Object.keys (query).length) {\n                body = this.json (query);\n            } else {\n                body = '{}';\n            }\n            const auth = {\n                'timeStamp_nonce': nonce,\n                'body': body,\n            };\n            const payload = this.stringToBase64 (this.json (auth));\n            const signature = this.hmac (payload, this.encode (this.secret), 'sha512');\n            headers['X-BITBNS-PAYLOAD'] = this.decode (payload);\n            headers['X-BITBNS-SIGNATURE'] = signature;\n            headers['Content-Type'] = 'application/x-www-form-urlencoded';\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //     {\"msg\":\"Invalid Request\",\"status\":-1,\"code\":400}\n        //     {\"data\":[],\"status\":0,\"error\":\"Nothing to show\",\"code\":417}\n        //\n        const code = this.safeString (response, 'code');\n        const message = this.safeString (response, 'msg');\n        const error = (code !== undefined) && (code !== '200');\n        if (error || (message !== undefined)) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}