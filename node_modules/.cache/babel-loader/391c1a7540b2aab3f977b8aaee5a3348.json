{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  ArgumentsRequired\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class itbit extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'itbit',\n      'name': 'itBit',\n      'countries': ['US'],\n      'rateLimit': 2000,\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'fetchTransactions': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg',\n        'api': 'https://api.itbit.com',\n        'www': 'https://www.itbit.com',\n        'doc': ['https://api.itbit.com/docs', 'https://www.itbit.com/api']\n      },\n      'api': {\n        'public': {\n          'get': ['markets/{symbol}/ticker', 'markets/{symbol}/order_book', 'markets/{symbol}/trades']\n        },\n        'private': {\n          'get': ['wallets', 'wallets/{walletId}', 'wallets/{walletId}/balances/{currencyCode}', 'wallets/{walletId}/funding_history', 'wallets/{walletId}/trades', 'wallets/{walletId}/orders', 'wallets/{walletId}/orders/{id}'],\n          'post': ['wallet_transfers', 'wallets', 'wallets/{walletId}/cryptocurrency_deposits', 'wallets/{walletId}/cryptocurrency_withdrawals', 'wallets/{walletId}/orders', 'wire_withdrawal'],\n          'delete': ['wallets/{walletId}/orders/{id}']\n        }\n      },\n      'markets': {\n        'BTC/USD': {\n          'id': 'XBTUSD',\n          'symbol': 'BTC/USD',\n          'base': 'BTC',\n          'quote': 'USD',\n          'baseId': 'XBT',\n          'quoteId': 'USD'\n        },\n        'BTC/SGD': {\n          'id': 'XBTSGD',\n          'symbol': 'BTC/SGD',\n          'base': 'BTC',\n          'quote': 'SGD',\n          'baseId': 'XBT',\n          'quoteId': 'SGD'\n        },\n        'BTC/EUR': {\n          'id': 'XBTEUR',\n          'symbol': 'BTC/EUR',\n          'base': 'BTC',\n          'quote': 'EUR',\n          'baseId': 'XBT',\n          'quoteId': 'EUR'\n        },\n        'ETH/USD': {\n          'id': 'ETHUSD',\n          'symbol': 'ETH/USD',\n          'base': 'ETH',\n          'quote': 'USD',\n          'baseId': 'ETH',\n          'quoteId': 'USD'\n        },\n        'ETH/EUR': {\n          'id': 'ETHEUR',\n          'symbol': 'ETH/EUR',\n          'base': 'ETH',\n          'quote': 'EUR',\n          'baseId': 'ETH',\n          'quoteId': 'EUR'\n        },\n        'ETH/SGD': {\n          'id': 'ETHSGD',\n          'symbol': 'ETH/SGD',\n          'base': 'ETH',\n          'quote': 'SGD',\n          'baseId': 'ETH',\n          'quoteId': 'SGD'\n        },\n        'PAXGUSD': {\n          'id': 'PAXGUSD',\n          'symbol': 'PAXG/USD',\n          'base': 'PAXG',\n          'quote': 'USD',\n          'baseId': 'PAXG',\n          'quoteId': 'USD'\n        },\n        'BCHUSD': {\n          'id': 'BCHUSD',\n          'symbol': 'BCH/USD',\n          'base': 'BCH',\n          'quote': 'USD',\n          'baseId': 'BCH',\n          'quoteId': 'USD'\n        },\n        'LTCUSD': {\n          'id': 'LTCUSD',\n          'symbol': 'LTC/USD',\n          'base': 'LTC',\n          'quote': 'USD',\n          'baseId': 'LTC',\n          'quoteId': 'USD'\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': -0.03 / 100,\n          'taker': 0.35 / 100\n        }\n      },\n      'commonCurrencies': {\n        'XBT': 'BTC'\n      }\n    });\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n    const orderbook = await this.publicGetMarketsSymbolOrderBook(this.extend(request, params));\n    return this.parseOrderBook(orderbook, symbol);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n    const ticker = await this.publicGetMarketsSymbolTicker(this.extend(request, params));\n    const serverTimeUTC = this.safeString(ticker, 'serverTimeUTC');\n\n    if (!serverTimeUTC) {\n      throw new ExchangeError(this.id + ' fetchTicker returned a bad response: ' + this.json(ticker));\n    }\n\n    const timestamp = this.parse8601(serverTimeUTC);\n    const vwap = this.safeNumber(ticker, 'vwap24h');\n    const baseVolume = this.safeNumber(ticker, 'volume24h');\n    let quoteVolume = undefined;\n\n    if (baseVolume !== undefined && vwap !== undefined) {\n      quoteVolume = baseVolume * vwap;\n    }\n\n    const last = this.safeNumber(ticker, 'lastPrice');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high24h'),\n      'low': this.safeNumber(ticker, 'low24h'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': this.safeNumber(ticker, 'openToday'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         timestamp: \"2015-05-22T17:45:34.7570000Z\",\n    //         matchNumber: \"5CR1JEUBBM8J\",\n    //         price: \"351.45000000\",\n    //         amount: \"0.00010000\"\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"orderId\": \"248ffda4-83a0-4033-a5bb-8929d523f59f\",\n    //         \"timestamp\": \"2015-05-11T14:48:01.9870000Z\",\n    //         \"instrument\": \"XBTUSD\",\n    //         \"direction\": \"buy\",                      // buy or sell\n    //         \"currency1\": \"XBT\",                      // base currency\n    //         \"currency1Amount\": \"0.00010000\",         // order amount in base currency\n    //         \"currency2\": \"USD\",                      // quote currency\n    //         \"currency2Amount\": \"0.0250530000000000\", // order cost in quote currency\n    //         \"rate\": \"250.53000000\",\n    //         \"commissionPaid\": \"0.00000000\",   // net trade fee paid after using any available rebate balance\n    //         \"commissionCurrency\": \"USD\",\n    //         \"rebatesApplied\": \"-0.000125265\", // negative values represent amount of rebate balance used for trades removing liquidity from order book; positive values represent amount of rebate balance earned from trades adding liquidity to order book\n    //         \"rebateCurrency\": \"USD\",\n    //         \"executionId\": \"23132\"\n    //     }\n    //\n    const id = this.safeString2(trade, 'executionId', 'matchNumber');\n    const timestamp = this.parse8601(this.safeString(trade, 'timestamp'));\n    const side = this.safeString(trade, 'direction');\n    const orderId = this.safeString(trade, 'orderId');\n    let feeCost = this.safeNumber(trade, 'commissionPaid');\n    const feeCurrencyId = this.safeString(trade, 'commissionCurrency');\n    const feeCurrency = this.safeCurrencyCode(feeCurrencyId);\n    let rebatesApplied = this.safeNumber(trade, 'rebatesApplied');\n\n    if (rebatesApplied !== undefined) {\n      rebatesApplied = -rebatesApplied;\n    }\n\n    const rebateCurrencyId = this.safeString(trade, 'rebateCurrency');\n    const rebateCurrency = this.safeCurrencyCode(rebateCurrencyId);\n    const priceString = this.safeString2(trade, 'price', 'rate');\n    const amountString = this.safeString2(trade, 'currency1Amount', 'amount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    let symbol = undefined;\n    const marketId = this.safeString(trade, 'instrument');\n\n    if (marketId !== undefined) {\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n      } else {\n        const baseId = this.safeString(trade, 'currency1');\n        const quoteId = this.safeString(trade, 'currency2');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        symbol = base + '/' + quote;\n      }\n    }\n\n    if (symbol === undefined) {\n      if (market !== undefined) {\n        symbol = market['symbol'];\n      }\n    }\n\n    const result = {\n      'info': trade,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n\n    if (feeCost !== undefined) {\n      if (rebatesApplied !== undefined) {\n        if (feeCurrency === rebateCurrency) {\n          feeCost = this.sum(feeCost, rebatesApplied);\n          result['fee'] = {\n            'cost': feeCost,\n            'currency': feeCurrency\n          };\n        } else {\n          result['fees'] = [{\n            'cost': feeCost,\n            'currency': feeCurrency\n          }, {\n            'cost': rebatesApplied,\n            'currency': rebateCurrency\n          }];\n        }\n      } else {\n        result['fee'] = {\n          'cost': feeCost,\n          'currency': feeCurrency\n        };\n      }\n    }\n\n    if (!('fee' in result)) {\n      if (!('fees' in result)) {\n        result['fee'] = undefined;\n      }\n    }\n\n    return result;\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const walletId = this.safeString(params, 'walletId');\n\n    if (walletId === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a walletId parameter');\n    }\n\n    const request = {\n      'walletId': walletId\n    };\n\n    if (limit !== undefined) {\n      request['perPage'] = limit; // default 50, max 50\n    }\n\n    const response = await this.privateGetWalletsWalletIdFundingHistory(this.extend(request, params)); //     { bankName: 'USBC (usd)',\n    //         withdrawalId: 94740,\n    //         holdingPeriodCompletionDate: '2018-04-16T07:57:05.9606869',\n    //         time: '2018-04-16T07:57:05.9600000',\n    //         currency: 'USD',\n    //         transactionType: 'Withdrawal',\n    //         amount: '2186.72000000',\n    //         walletName: 'Wallet',\n    //         status: 'completed' },\n    //\n    //     { \"time\": \"2018-01-02T19:52:22.4176503\",\n    //     \"amount\": \"0.50000000\",\n    //     \"status\": \"completed\",\n    //     \"txnHash\": \"1b6fff67ed83cb9e9a38ca4976981fc047322bc088430508fe764a127d3ace95\",\n    //     \"currency\": \"XBT\",\n    //     \"walletName\": \"Wallet\",\n    //     \"transactionType\": \"Deposit\",\n    //     \"destinationAddress\": \"3AAWTH9et4e8o51YKp9qPpmujrNXKwHWNX\"}\n\n    const items = response['fundingHistory'];\n    const result = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      const time = this.safeString(item, 'time');\n      const timestamp = this.parse8601(time);\n      const currency = this.safeString(item, 'currency');\n      const destinationAddress = this.safeString(item, 'destinationAddress');\n      const txnHash = this.safeString(item, 'txnHash');\n      const transactionType = this.safeStringLower(item, 'transactionType');\n      const transactionStatus = this.safeString(item, 'status');\n      const status = this.parseTransferStatus(transactionStatus);\n      result.push({\n        'id': this.safeString(item, 'withdrawalId'),\n        'timestamp': timestamp,\n        'datetime': this.iso8601(timestamp),\n        'currency': this.safeCurrencyCode(currency),\n        'address': destinationAddress,\n        'tag': undefined,\n        'txid': txnHash,\n        'type': transactionType,\n        'status': status,\n        'amount': this.safeNumber(item, 'amount'),\n        'fee': undefined,\n        'info': item\n      });\n    }\n\n    return result;\n  }\n\n  parseTransferStatus(status) {\n    const options = {\n      'cancelled': 'canceled',\n      'completed': 'ok'\n    };\n    return this.safeString(options, status, 'pending');\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const walletId = this.safeString(params, 'walletId');\n\n    if (walletId === undefined) {\n      throw new ExchangeError(this.id + ' fetchMyTrades() requires a walletId parameter');\n    }\n\n    const request = {\n      'walletId': walletId\n    };\n\n    if (since !== undefined) {\n      request['rangeStart'] = this.ymdhms(since, 'T');\n    }\n\n    if (limit !== undefined) {\n      request['perPage'] = limit; // default 50, max 50\n    }\n\n    const response = await this.privateGetWalletsWalletIdTrades(this.extend(request, params)); //\n    //     {\n    //         \"totalNumberOfRecords\": \"2\",\n    //         \"currentPageNumber\": \"1\",\n    //         \"latestExecutionId\": \"332\", // most recent execution at time of response\n    //         \"recordsPerPage\": \"50\",\n    //         \"tradingHistory\": [\n    //             {\n    //                 \"orderId\": \"248ffda4-83a0-4033-a5bb-8929d523f59f\",\n    //                 \"timestamp\": \"2015-05-11T14:48:01.9870000Z\",\n    //                 \"instrument\": \"XBTUSD\",\n    //                 \"direction\": \"buy\",                      // buy or sell\n    //                 \"currency1\": \"XBT\",                      // base currency\n    //                 \"currency1Amount\": \"0.00010000\",         // order amount in base currency\n    //                 \"currency2\": \"USD\",                      // quote currency\n    //                 \"currency2Amount\": \"0.0250530000000000\", // order cost in quote currency\n    //                 \"rate\": \"250.53000000\",\n    //                 \"commissionPaid\": \"0.00000000\",   // net trade fee paid after using any available rebate balance\n    //                 \"commissionCurrency\": \"USD\",\n    //                 \"rebatesApplied\": \"-0.000125265\", // negative values represent amount of rebate balance used for trades removing liquidity from order book; positive values represent amount of rebate balance earned from trades adding liquidity to order book\n    //                 \"rebateCurrency\": \"USD\",\n    //                 \"executionId\": \"23132\"\n    //             },\n    //         ],\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'tradingHistory', []);\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetMarketsSymbolTrades(this.extend(request, params)); //\n    //     {\n    //         count: 3,\n    //         recentTrades: [\n    //             {\n    //                 timestamp: \"2015-05-22T17:45:34.7570000Z\",\n    //                 matchNumber: \"5CR1JEUBBM8J\",\n    //                 price: \"351.45000000\",\n    //                 amount: \"0.00010000\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'recentTrades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.fetchWallets(params);\n    const balances = response[0]['balances'];\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeString(balance, 'availableBalance');\n      account['total'] = this.safeString(balance, 'totalBalance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchWallets(params = {}) {\n    await this.loadMarkets();\n\n    if (!this.uid) {\n      throw new AuthenticationError(this.id + ' fetchWallets() requires uid API credential');\n    }\n\n    const request = {\n      'userId': this.uid\n    };\n    return await this.privateGetWallets(this.extend(request, params));\n  }\n\n  async fetchWallet(walletId, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'walletId': walletId\n    };\n    return await this.privateGetWalletsWalletId(this.extend(request, params));\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'open'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'filled'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const walletIdInParams = ('walletId' in params);\n\n    if (!walletIdInParams) {\n      throw new ExchangeError(this.id + ' fetchOrders() requires a walletId parameter');\n    }\n\n    const walletId = params['walletId'];\n    const request = {\n      'walletId': walletId\n    };\n    const response = await this.privateGetWalletsWalletIdOrders(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'submitted': 'open',\n      // order pending book entry\n      'open': 'open',\n      'filled': 'closed',\n      'cancelled': 'canceled',\n      'rejected': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"id\": \"13d6af57-8b0b-41e5-af30-becf0bcc574d\",\n    //         \"walletId\": \"7e037345-1288-4c39-12fe-d0f99a475a98\",\n    //         \"side\": \"buy\",\n    //         \"instrument\": \"XBTUSD\",\n    //         \"type\": \"limit\",\n    //         \"currency\": \"XBT\",\n    //         \"amount\": \"2.50000000\",\n    //         \"displayAmount\": \"2.50000000\",\n    //         \"price\": \"650.00000000\",\n    //         \"volumeWeightedAveragePrice\": \"0.00000000\",\n    //         \"amountFilled\": \"0.00000000\",\n    //         \"createdTime\": \"2014-02-11T17:05:15Z\",\n    //         \"status\": \"submitted\",\n    //         \"funds\": null,\n    //         \"metadata\": {},\n    //         \"clientOrderIdentifier\": null,\n    //         \"postOnly\": \"False\"\n    //     }\n    //\n    const side = this.safeString(order, 'side');\n    const type = this.safeString(order, 'type');\n    const symbol = this.markets_by_id[order['instrument']]['symbol'];\n    const timestamp = this.parse8601(order['createdTime']);\n    const amount = this.safeNumber(order, 'amount');\n    const filled = this.safeNumber(order, 'amountFilled');\n    const fee = undefined;\n    const price = this.safeNumber(order, 'price');\n    const average = this.safeNumber(order, 'volumeWeightedAveragePrice');\n    const clientOrderId = this.safeString(order, 'clientOrderIdentifier');\n    const id = this.safeString(order, 'id');\n    const postOnlyString = this.safeString(order, 'postOnly');\n    const postOnly = postOnlyString === 'True';\n    return this.safeOrder({\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': this.parseOrderStatus(this.safeString(order, 'status')),\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': undefined,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': undefined,\n      'fee': fee,\n      // 'trades': this.parseTrades (order['trades'], market),\n      'trades': undefined\n    });\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (type === 'market') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    const walletIdInParams = ('walletId' in params);\n\n    if (!walletIdInParams) {\n      throw new ExchangeError(this.id + ' createOrder() requires a walletId parameter');\n    }\n\n    amount = amount.toString();\n    price = price.toString();\n    const market = this.market(symbol);\n    const request = {\n      'side': side,\n      'type': type,\n      'currency': market['id'].replace(market['quote'], ''),\n      'amount': amount,\n      'display': amount,\n      'price': price,\n      'instrument': market['id']\n    };\n    const response = await this.privatePostWalletsWalletIdOrders(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['id']\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const walletIdInParams = ('walletId' in params);\n\n    if (!walletIdInParams) {\n      throw new ExchangeError(this.id + ' fetchOrder() requires a walletId parameter');\n    }\n\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetWalletsWalletIdOrdersId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const walletIdInParams = ('walletId' in params);\n\n    if (!walletIdInParams) {\n      throw new ExchangeError(this.id + ' cancelOrder() requires a walletId parameter');\n    }\n\n    const request = {\n      'id': id\n    };\n    return await this.privateDeleteWalletsWalletIdOrdersId(this.extend(request, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (method === 'GET' && Object.keys(query).length) {\n      url += '?' + this.urlencode(query);\n    }\n\n    if (method === 'POST' && Object.keys(query).length) {\n      body = this.json(query);\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const timestamp = nonce;\n      const authBody = method === 'POST' ? body : '';\n      const auth = [method, url, authBody, nonce, timestamp];\n      const message = nonce + this.json(auth).replace('\\\\/', '/');\n      const hash = this.hash(this.encode(message), 'sha256', 'binary');\n      const binaryUrl = this.stringToBinary(this.encode(url));\n      const binhash = this.binaryConcat(binaryUrl, hash);\n      const signature = this.hmac(binhash, this.encode(this.secret), 'sha512', 'base64');\n      headers = {\n        'Authorization': this.apiKey + ':' + signature,\n        'Content-Type': 'application/json',\n        'X-Auth-Timestamp': timestamp,\n        'X-Auth-Nonce': nonce\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('code' in response) {\n      throw new ExchangeError(this.id + ' ' + this.json(response));\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/itbit.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","ArgumentsRequired","Precise","module","exports","itbit","describe","deepExtend","fetchOrderBook","symbol","limit","undefined","params","loadMarkets","request","marketId","orderbook","publicGetMarketsSymbolOrderBook","extend","parseOrderBook","fetchTicker","ticker","publicGetMarketsSymbolTicker","serverTimeUTC","safeString","id","json","timestamp","parse8601","vwap","safeNumber","baseVolume","quoteVolume","last","iso8601","parseTrade","trade","market","safeString2","side","orderId","feeCost","feeCurrencyId","feeCurrency","safeCurrencyCode","rebatesApplied","rebateCurrencyId","rebateCurrency","priceString","amountString","price","parseNumber","amount","cost","stringMul","markets_by_id","baseId","quoteId","base","quote","result","sum","fetchTransactions","code","since","walletId","response","privateGetWalletsWalletIdFundingHistory","items","i","length","item","time","currency","destinationAddress","txnHash","transactionType","safeStringLower","transactionStatus","status","parseTransferStatus","push","options","fetchMyTrades","ymdhms","privateGetWalletsWalletIdTrades","trades","safeValue","parseTrades","fetchTrades","publicGetMarketsSymbolTrades","fetchBalance","fetchWallets","balances","balance","currencyId","account","parseBalance","uid","privateGetWallets","fetchWallet","privateGetWalletsWalletId","fetchOpenOrders","fetchOrders","fetchClosedOrders","walletIdInParams","privateGetWalletsWalletIdOrders","parseOrders","parseOrderStatus","statuses","parseOrder","order","type","filled","fee","average","clientOrderId","postOnlyString","postOnly","safeOrder","nonce","milliseconds","createOrder","toString","replace","privatePostWalletsWalletIdOrders","fetchOrder","privateGetWalletsWalletIdOrdersId","cancelOrder","privateDeleteWalletsWalletIdOrdersId","sign","path","api","method","headers","body","url","urls","version","implodeParams","query","omit","extractParams","Object","keys","urlencode","checkRequiredCredentials","authBody","auth","message","hash","encode","binaryUrl","stringToBinary","binhash","binaryConcat","signature","hmac","secret","apiKey","fetch2"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, ArgumentsRequired } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class itbit extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'itbit',\n            'name': 'itBit',\n            'countries': [ 'US' ],\n            'rateLimit': 2000,\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'fetchTransactions': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg',\n                'api': 'https://api.itbit.com',\n                'www': 'https://www.itbit.com',\n                'doc': [\n                    'https://api.itbit.com/docs',\n                    'https://www.itbit.com/api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets/{symbol}/ticker',\n                        'markets/{symbol}/order_book',\n                        'markets/{symbol}/trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'wallets',\n                        'wallets/{walletId}',\n                        'wallets/{walletId}/balances/{currencyCode}',\n                        'wallets/{walletId}/funding_history',\n                        'wallets/{walletId}/trades',\n                        'wallets/{walletId}/orders',\n                        'wallets/{walletId}/orders/{id}',\n                    ],\n                    'post': [\n                        'wallet_transfers',\n                        'wallets',\n                        'wallets/{walletId}/cryptocurrency_deposits',\n                        'wallets/{walletId}/cryptocurrency_withdrawals',\n                        'wallets/{walletId}/orders',\n                        'wire_withdrawal',\n                    ],\n                    'delete': [\n                        'wallets/{walletId}/orders/{id}',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/USD': { 'id': 'XBTUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'baseId': 'XBT', 'quoteId': 'USD' },\n                'BTC/SGD': { 'id': 'XBTSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD', 'baseId': 'XBT', 'quoteId': 'SGD' },\n                'BTC/EUR': { 'id': 'XBTEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'XBT', 'quoteId': 'EUR' },\n                'ETH/USD': { 'id': 'ETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD', 'baseId': 'ETH', 'quoteId': 'USD' },\n                'ETH/EUR': { 'id': 'ETHEUR', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR', 'baseId': 'ETH', 'quoteId': 'EUR' },\n                'ETH/SGD': { 'id': 'ETHSGD', 'symbol': 'ETH/SGD', 'base': 'ETH', 'quote': 'SGD', 'baseId': 'ETH', 'quoteId': 'SGD' },\n                'PAXGUSD': { 'id': 'PAXGUSD', 'symbol': 'PAXG/USD', 'base': 'PAXG', 'quote': 'USD', 'baseId': 'PAXG', 'quoteId': 'USD' },\n                'BCHUSD': { 'id': 'BCHUSD', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD', 'baseId': 'BCH', 'quoteId': 'USD' },\n                'LTCUSD': { 'id': 'LTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD', 'baseId': 'LTC', 'quoteId': 'USD' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': -0.03 / 100,\n                    'taker': 0.35 / 100,\n                },\n            },\n            'commonCurrencies': {\n                'XBT': 'BTC',\n            },\n        });\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        const orderbook = await this.publicGetMarketsSymbolOrderBook (this.extend (request, params));\n        return this.parseOrderBook (orderbook, symbol);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        const ticker = await this.publicGetMarketsSymbolTicker (this.extend (request, params));\n        const serverTimeUTC = this.safeString (ticker, 'serverTimeUTC');\n        if (!serverTimeUTC) {\n            throw new ExchangeError (this.id + ' fetchTicker returned a bad response: ' + this.json (ticker));\n        }\n        const timestamp = this.parse8601 (serverTimeUTC);\n        const vwap = this.safeNumber (ticker, 'vwap24h');\n        const baseVolume = this.safeNumber (ticker, 'volume24h');\n        let quoteVolume = undefined;\n        if (baseVolume !== undefined && vwap !== undefined) {\n            quoteVolume = baseVolume * vwap;\n        }\n        const last = this.safeNumber (ticker, 'lastPrice');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high24h'),\n            'low': this.safeNumber (ticker, 'low24h'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': this.safeNumber (ticker, 'openToday'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         timestamp: \"2015-05-22T17:45:34.7570000Z\",\n        //         matchNumber: \"5CR1JEUBBM8J\",\n        //         price: \"351.45000000\",\n        //         amount: \"0.00010000\"\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"orderId\": \"248ffda4-83a0-4033-a5bb-8929d523f59f\",\n        //         \"timestamp\": \"2015-05-11T14:48:01.9870000Z\",\n        //         \"instrument\": \"XBTUSD\",\n        //         \"direction\": \"buy\",                      // buy or sell\n        //         \"currency1\": \"XBT\",                      // base currency\n        //         \"currency1Amount\": \"0.00010000\",         // order amount in base currency\n        //         \"currency2\": \"USD\",                      // quote currency\n        //         \"currency2Amount\": \"0.0250530000000000\", // order cost in quote currency\n        //         \"rate\": \"250.53000000\",\n        //         \"commissionPaid\": \"0.00000000\",   // net trade fee paid after using any available rebate balance\n        //         \"commissionCurrency\": \"USD\",\n        //         \"rebatesApplied\": \"-0.000125265\", // negative values represent amount of rebate balance used for trades removing liquidity from order book; positive values represent amount of rebate balance earned from trades adding liquidity to order book\n        //         \"rebateCurrency\": \"USD\",\n        //         \"executionId\": \"23132\"\n        //     }\n        //\n        const id = this.safeString2 (trade, 'executionId', 'matchNumber');\n        const timestamp = this.parse8601 (this.safeString (trade, 'timestamp'));\n        const side = this.safeString (trade, 'direction');\n        const orderId = this.safeString (trade, 'orderId');\n        let feeCost = this.safeNumber (trade, 'commissionPaid');\n        const feeCurrencyId = this.safeString (trade, 'commissionCurrency');\n        const feeCurrency = this.safeCurrencyCode (feeCurrencyId);\n        let rebatesApplied = this.safeNumber (trade, 'rebatesApplied');\n        if (rebatesApplied !== undefined) {\n            rebatesApplied = -rebatesApplied;\n        }\n        const rebateCurrencyId = this.safeString (trade, 'rebateCurrency');\n        const rebateCurrency = this.safeCurrencyCode (rebateCurrencyId);\n        const priceString = this.safeString2 (trade, 'price', 'rate');\n        const amountString = this.safeString2 (trade, 'currency1Amount', 'amount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        let symbol = undefined;\n        const marketId = this.safeString (trade, 'instrument');\n        if (marketId !== undefined) {\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n            } else {\n                const baseId = this.safeString (trade, 'currency1');\n                const quoteId = this.safeString (trade, 'currency2');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                symbol = base + '/' + quote;\n            }\n        }\n        if (symbol === undefined) {\n            if (market !== undefined) {\n                symbol = market['symbol'];\n            }\n        }\n        const result = {\n            'info': trade,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n        if (feeCost !== undefined) {\n            if (rebatesApplied !== undefined) {\n                if (feeCurrency === rebateCurrency) {\n                    feeCost = this.sum (feeCost, rebatesApplied);\n                    result['fee'] = {\n                        'cost': feeCost,\n                        'currency': feeCurrency,\n                    };\n                } else {\n                    result['fees'] = [\n                        {\n                            'cost': feeCost,\n                            'currency': feeCurrency,\n                        },\n                        {\n                            'cost': rebatesApplied,\n                            'currency': rebateCurrency,\n                        },\n                    ];\n                }\n            } else {\n                result['fee'] = {\n                    'cost': feeCost,\n                    'currency': feeCurrency,\n                };\n            }\n        }\n        if (!('fee' in result)) {\n            if (!('fees' in result)) {\n                result['fee'] = undefined;\n            }\n        }\n        return result;\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const walletId = this.safeString (params, 'walletId');\n        if (walletId === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades() requires a walletId parameter');\n        }\n        const request = {\n            'walletId': walletId,\n        };\n        if (limit !== undefined) {\n            request['perPage'] = limit; // default 50, max 50\n        }\n        const response = await this.privateGetWalletsWalletIdFundingHistory (this.extend (request, params));\n        //     { bankName: 'USBC (usd)',\n        //         withdrawalId: 94740,\n        //         holdingPeriodCompletionDate: '2018-04-16T07:57:05.9606869',\n        //         time: '2018-04-16T07:57:05.9600000',\n        //         currency: 'USD',\n        //         transactionType: 'Withdrawal',\n        //         amount: '2186.72000000',\n        //         walletName: 'Wallet',\n        //         status: 'completed' },\n        //\n        //     { \"time\": \"2018-01-02T19:52:22.4176503\",\n        //     \"amount\": \"0.50000000\",\n        //     \"status\": \"completed\",\n        //     \"txnHash\": \"1b6fff67ed83cb9e9a38ca4976981fc047322bc088430508fe764a127d3ace95\",\n        //     \"currency\": \"XBT\",\n        //     \"walletName\": \"Wallet\",\n        //     \"transactionType\": \"Deposit\",\n        //     \"destinationAddress\": \"3AAWTH9et4e8o51YKp9qPpmujrNXKwHWNX\"}\n        const items = response['fundingHistory'];\n        const result = [];\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            const time = this.safeString (item, 'time');\n            const timestamp = this.parse8601 (time);\n            const currency = this.safeString (item, 'currency');\n            const destinationAddress = this.safeString (item, 'destinationAddress');\n            const txnHash = this.safeString (item, 'txnHash');\n            const transactionType = this.safeStringLower (item, 'transactionType');\n            const transactionStatus = this.safeString (item, 'status');\n            const status = this.parseTransferStatus (transactionStatus);\n            result.push ({\n                'id': this.safeString (item, 'withdrawalId'),\n                'timestamp': timestamp,\n                'datetime': this.iso8601 (timestamp),\n                'currency': this.safeCurrencyCode (currency),\n                'address': destinationAddress,\n                'tag': undefined,\n                'txid': txnHash,\n                'type': transactionType,\n                'status': status,\n                'amount': this.safeNumber (item, 'amount'),\n                'fee': undefined,\n                'info': item,\n            });\n        }\n        return result;\n    }\n\n    parseTransferStatus (status) {\n        const options = {\n            'cancelled': 'canceled',\n            'completed': 'ok',\n        };\n        return this.safeString (options, status, 'pending');\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const walletId = this.safeString (params, 'walletId');\n        if (walletId === undefined) {\n            throw new ExchangeError (this.id + ' fetchMyTrades() requires a walletId parameter');\n        }\n        const request = {\n            'walletId': walletId,\n        };\n        if (since !== undefined) {\n            request['rangeStart'] = this.ymdhms (since, 'T');\n        }\n        if (limit !== undefined) {\n            request['perPage'] = limit; // default 50, max 50\n        }\n        const response = await this.privateGetWalletsWalletIdTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"totalNumberOfRecords\": \"2\",\n        //         \"currentPageNumber\": \"1\",\n        //         \"latestExecutionId\": \"332\", // most recent execution at time of response\n        //         \"recordsPerPage\": \"50\",\n        //         \"tradingHistory\": [\n        //             {\n        //                 \"orderId\": \"248ffda4-83a0-4033-a5bb-8929d523f59f\",\n        //                 \"timestamp\": \"2015-05-11T14:48:01.9870000Z\",\n        //                 \"instrument\": \"XBTUSD\",\n        //                 \"direction\": \"buy\",                      // buy or sell\n        //                 \"currency1\": \"XBT\",                      // base currency\n        //                 \"currency1Amount\": \"0.00010000\",         // order amount in base currency\n        //                 \"currency2\": \"USD\",                      // quote currency\n        //                 \"currency2Amount\": \"0.0250530000000000\", // order cost in quote currency\n        //                 \"rate\": \"250.53000000\",\n        //                 \"commissionPaid\": \"0.00000000\",   // net trade fee paid after using any available rebate balance\n        //                 \"commissionCurrency\": \"USD\",\n        //                 \"rebatesApplied\": \"-0.000125265\", // negative values represent amount of rebate balance used for trades removing liquidity from order book; positive values represent amount of rebate balance earned from trades adding liquidity to order book\n        //                 \"rebateCurrency\": \"USD\",\n        //                 \"executionId\": \"23132\"\n        //             },\n        //         ],\n        //     }\n        //\n        const trades = this.safeValue (response, 'tradingHistory', []);\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetMarketsSymbolTrades (this.extend (request, params));\n        //\n        //     {\n        //         count: 3,\n        //         recentTrades: [\n        //             {\n        //                 timestamp: \"2015-05-22T17:45:34.7570000Z\",\n        //                 matchNumber: \"5CR1JEUBBM8J\",\n        //                 price: \"351.45000000\",\n        //                 amount: \"0.00010000\"\n        //             },\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, 'recentTrades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.fetchWallets (params);\n        const balances = response[0]['balances'];\n        const result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeString (balance, 'availableBalance');\n            account['total'] = this.safeString (balance, 'totalBalance');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchWallets (params = {}) {\n        await this.loadMarkets ();\n        if (!this.uid) {\n            throw new AuthenticationError (this.id + ' fetchWallets() requires uid API credential');\n        }\n        const request = {\n            'userId': this.uid,\n        };\n        return await this.privateGetWallets (this.extend (request, params));\n    }\n\n    async fetchWallet (walletId, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'walletId': walletId,\n        };\n        return await this.privateGetWalletsWalletId (this.extend (request, params));\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'open',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'filled',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const walletIdInParams = ('walletId' in params);\n        if (!walletIdInParams) {\n            throw new ExchangeError (this.id + ' fetchOrders() requires a walletId parameter');\n        }\n        const walletId = params['walletId'];\n        const request = {\n            'walletId': walletId,\n        };\n        const response = await this.privateGetWalletsWalletIdOrders (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'submitted': 'open', // order pending book entry\n            'open': 'open',\n            'filled': 'closed',\n            'cancelled': 'canceled',\n            'rejected': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"id\": \"13d6af57-8b0b-41e5-af30-becf0bcc574d\",\n        //         \"walletId\": \"7e037345-1288-4c39-12fe-d0f99a475a98\",\n        //         \"side\": \"buy\",\n        //         \"instrument\": \"XBTUSD\",\n        //         \"type\": \"limit\",\n        //         \"currency\": \"XBT\",\n        //         \"amount\": \"2.50000000\",\n        //         \"displayAmount\": \"2.50000000\",\n        //         \"price\": \"650.00000000\",\n        //         \"volumeWeightedAveragePrice\": \"0.00000000\",\n        //         \"amountFilled\": \"0.00000000\",\n        //         \"createdTime\": \"2014-02-11T17:05:15Z\",\n        //         \"status\": \"submitted\",\n        //         \"funds\": null,\n        //         \"metadata\": {},\n        //         \"clientOrderIdentifier\": null,\n        //         \"postOnly\": \"False\"\n        //     }\n        //\n        const side = this.safeString (order, 'side');\n        const type = this.safeString (order, 'type');\n        const symbol = this.markets_by_id[order['instrument']]['symbol'];\n        const timestamp = this.parse8601 (order['createdTime']);\n        const amount = this.safeNumber (order, 'amount');\n        const filled = this.safeNumber (order, 'amountFilled');\n        const fee = undefined;\n        const price = this.safeNumber (order, 'price');\n        const average = this.safeNumber (order, 'volumeWeightedAveragePrice');\n        const clientOrderId = this.safeString (order, 'clientOrderIdentifier');\n        const id = this.safeString (order, 'id');\n        const postOnlyString = this.safeString (order, 'postOnly');\n        const postOnly = (postOnlyString === 'True');\n        return this.safeOrder ({\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': this.parseOrderStatus (this.safeString (order, 'status')),\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': undefined,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': undefined,\n            'fee': fee,\n            // 'trades': this.parseTrades (order['trades'], market),\n            'trades': undefined,\n        });\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type === 'market') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        const walletIdInParams = ('walletId' in params);\n        if (!walletIdInParams) {\n            throw new ExchangeError (this.id + ' createOrder() requires a walletId parameter');\n        }\n        amount = amount.toString ();\n        price = price.toString ();\n        const market = this.market (symbol);\n        const request = {\n            'side': side,\n            'type': type,\n            'currency': market['id'].replace (market['quote'], ''),\n            'amount': amount,\n            'display': amount,\n            'price': price,\n            'instrument': market['id'],\n        };\n        const response = await this.privatePostWalletsWalletIdOrders (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const walletIdInParams = ('walletId' in params);\n        if (!walletIdInParams) {\n            throw new ExchangeError (this.id + ' fetchOrder() requires a walletId parameter');\n        }\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetWalletsWalletIdOrdersId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const walletIdInParams = ('walletId' in params);\n        if (!walletIdInParams) {\n            throw new ExchangeError (this.id + ' cancelOrder() requires a walletId parameter');\n        }\n        const request = {\n            'id': id,\n        };\n        return await this.privateDeleteWalletsWalletIdOrdersId (this.extend (request, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (method === 'GET' && Object.keys (query).length) {\n            url += '?' + this.urlencode (query);\n        }\n        if (method === 'POST' && Object.keys (query).length) {\n            body = this.json (query);\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const timestamp = nonce;\n            const authBody = (method === 'POST') ? body : '';\n            const auth = [ method, url, authBody, nonce, timestamp ];\n            const message = nonce + this.json (auth).replace ('\\\\/', '/');\n            const hash = this.hash (this.encode (message), 'sha256', 'binary');\n            const binaryUrl = this.stringToBinary (this.encode (url));\n            const binhash = this.binaryConcat (binaryUrl, hash);\n            const signature = this.hmac (binhash, this.encode (this.secret), 'sha512', 'base64');\n            headers = {\n                'Authorization': this.apiKey + ':' + signature,\n                'Content-Type': 'application/json',\n                'X-Auth-Timestamp': timestamp,\n                'X-Auth-Nonce': nonce,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('code' in response) {\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}