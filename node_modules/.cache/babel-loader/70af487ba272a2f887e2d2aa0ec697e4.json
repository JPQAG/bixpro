{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Price\\\\Documents\\\\VS Code\\\\bixpro\\\\src\\\\components\\\\cryptX\\\\charts\\\\chart\\\\PieDonutChart.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CONFIG } from '../../../../config/constant';\nimport Chart from 'react-google-charts'; //API Configuration\n///Import for API Keys from Config\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst secretKey = CONFIG.binance.secretKey;\nconst apiKey = CONFIG.binance.apiKey; //Binance API\n\nconst Binance = require('node-binance-api');\n\nconst binance = new Binance().options({\n  APIKEY: apiKey,\n  APISECRET: secretKey\n});\nbinance.options({\n  APIKEY: apiKey,\n  APISECRET: secretKey,\n  useServerTime: true,\n  recvWindow: 5000,\n  // Set a higher recvWindow to increase response timeout\n  verbose: true,\n  // Add extra output when subscribing to WebSockets, etc\n  log: log => {\n    console.log(log); // You can create your own logger here, or disable console output\n  }\n}); //Refactor Data Function\n\nfunction objectParse(data) {\n  let newData = [];\n\n  for (const prop in data) {\n    newData.push({\n      symbol: prop,\n      available: data[prop].available,\n      onOrder: data[prop].onOrder,\n      marketPrice: data[prop].marketPrice,\n      marketValue: data[prop].marketPrice * data[prop].available\n    });\n  }\n\n  ;\n  return newData;\n}\n\n; //Create Data for Pie Chart from data set\n\nfunction createPieData(data) {\n  const pieData = [['Symbol', 'Quantity']];\n\n  for (const holding in data) {\n    pieData.push([holding['symbol'], holding['available']]);\n  }\n\n  ;\n  return pieData;\n}\n\nconst PieDonutChart = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [holdings, setHoldings] = useState('');\n\n  const getHoldings = async () => {\n    _s();\n\n    //Binance API\n    console.info(await binance.futuresPrices());\n    let ticker = await binance.prices(); // console.log(\"TICKER LIST\", ticker);\n\n    await binance.useServerTime();\n    binance.balance((error, balances) => {\n      if (error) return console.error(error);\n\n      for (const holding in balances) {\n        if (balances[holding]['available'] > -10) {\n          const symbol = holding + \"BUSD\";\n          balances[holding]['marketPrice'] = ticker[symbol];\n        }\n      }\n\n      ;\n      console.log(\"Final Balances\", balances);\n      setHoldings(balances);\n      return ticker;\n    });\n  };\n\n  _s(getHoldings, \"ryztZvy2ym7HSTFils++uZK2CyY=\", false, function () {\n    return [binance.useServerTime];\n  });\n\n  useEffect(() => {\n    getHoldings();\n    const interval = setInterval(() => {\n      getHoldings();\n    }, 10000);\n    return () => clearInterval(interval);\n  }, []);\n  const dataOne = objectParse(holdings);\n  const filteredHoldingsTwo = dataOne.filter(holding => holding.available > 0);\n  const data = createPieData(filteredHoldingsTwo);\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    width: \"100%\",\n    height: \"300px\",\n    chartType: \"PieChart\",\n    loader: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this),\n    data: data // data={[\n    //     ['Task', 'Hours per Day'],\n    //     ['Work', 11],\n    //     ['Eat', 2],\n    //     ['Commute', 2],\n    //     ['Watch TV', 2],\n    //     ['Sleep', 7],\n    // ]}\n    ,\n    options: {\n      title: 'My Daily Activities',\n      pieHole: 0.4,\n      colors: ['#1dc4e9', '#1de9b6', '#3ebfea', '#A389D4', '#899FD4']\n    },\n    rootProps: {\n      'data-testid': '3'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(PieDonutChart, \"2DCqUw7X+nEZRViZZOIomMwKrHo=\");\n\n_c = PieDonutChart;\nexport default PieDonutChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PieDonutChart\");","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/src/components/cryptX/charts/chart/PieDonutChart.js"],"names":["React","useState","useEffect","CONFIG","Chart","secretKey","binance","apiKey","Binance","require","options","APIKEY","APISECRET","useServerTime","recvWindow","verbose","log","console","objectParse","data","newData","prop","push","symbol","available","onOrder","marketPrice","marketValue","createPieData","pieData","holding","PieDonutChart","holdings","setHoldings","getHoldings","info","futuresPrices","ticker","prices","balance","error","balances","interval","setInterval","clearInterval","dataOne","filteredHoldingsTwo","filter","title","pieHole","colors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CONFIG } from '../../../../config/constant';\r\nimport Chart from 'react-google-charts';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Create Data for Pie Chart from data set\r\nfunction createPieData(data) {\r\n    const pieData = [\r\n        ['Symbol', 'Quantity']\r\n    ];\r\n\r\n    for (const holding in data) {\r\n        pieData.push([\r\n            holding['symbol'],\r\n            holding['available']\r\n        ])\r\n    };\r\n\r\n    return pieData;\r\n}\r\n\r\nconst PieDonutChart = () => {\r\n\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        console.info( await binance.futuresPrices() );\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n            }\r\n          };\r\n          console.log(\"Final Balances\", balances);\r\n    \r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const filteredHoldingsTwo = dataOne.filter(holding => \r\n        holding.available > 0\r\n    );\r\n\r\n    const data = createPieData(filteredHoldingsTwo);\r\n\r\n    return <Chart\r\n        width='100%'\r\n        height='300px'\r\n        chartType=\"PieChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={data}\r\n        // data={[\r\n        //     ['Task', 'Hours per Day'],\r\n        //     ['Work', 11],\r\n        //     ['Eat', 2],\r\n        //     ['Commute', 2],\r\n        //     ['Watch TV', 2],\r\n        //     ['Sleep', 7],\r\n        // ]}\r\n        options={{\r\n            title: 'My Daily Activities',\r\n            pieHole: 0.4,\r\n            colors: ['#1dc4e9', '#1de9b6', '#3ebfea', '#A389D4', '#899FD4']\r\n        }}\r\n        rootProps={{ 'data-testid': '3' }}\r\n    />;\r\n}\r\n\r\nexport default PieDonutChart;"]},"metadata":{},"sourceType":"module"}