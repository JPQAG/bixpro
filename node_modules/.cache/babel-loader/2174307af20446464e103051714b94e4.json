{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  AuthenticationError,\n  ExchangeError,\n  OrderNotFound,\n  ArgumentsRequired,\n  BadSymbol,\n  BadRequest,\n  NullResponse,\n  InvalidOrder,\n  BadResponse,\n  NotSupported,\n  ExchangeNotAvailable,\n  RequestTimeout,\n  RateLimitExceeded,\n  PermissionDenied,\n  InsufficientFunds,\n  InvalidAddress\n} = require('./base/errors');\n\nconst {\n  TICK_SIZE,\n  TRUNCATE\n} = require('./base/functions/number');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class hbtc extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'hbtc',\n      'name': 'HBTC',\n      'countries': ['CN'],\n      'rateLimit': 2000,\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchAccounts': true,\n        'fetchBalance': true,\n        'fetchBidAsk': true,\n        'fetchBidsAsks': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': false,\n        'fetchDepositAddress': false,\n        'fetchDeposits': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTradingLimits': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '3m': '3m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '2h': '2h',\n        '4h': '4h',\n        '6h': '6h',\n        '8h': '8h',\n        '12h': '12h',\n        '1d': '1d',\n        '3d': '3d',\n        '1w': '1w',\n        '1M': '1M'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/80134449-70663300-85a7-11ea-8942-e204cdeaab5d.jpg',\n        // 交易所LOGO\n        'api': {\n          'quote': 'https://api.hbtc.com/openapi/quote',\n          // 市场API数据端点\n          'contract': 'https://api.hbtc.com/openapi/contract',\n          // 合约API数据端点\n          'option': 'https://api.hbtc.com/openapi/option',\n          // 合约API数据端点\n          'public': 'https://api.hbtc.com/openapi',\n          // 公共API数据端点\n          'private': 'https://api.hbtc.com/openapi',\n          // 私有API数据端点\n          'zendesk': 'https://hbtc.zendesk.com/hc/en-us'\n        },\n        'www': 'https://www.hbtc.com',\n        // 公司主页\n        'referral': 'https://www.hbtc.com/register/O2S8NS',\n        // 邀请链接\n        'doc': 'https://github.com/bhexopen/BHEX-OpenApi/tree/master/doc',\n        // openapi文档地址\n        'fees': 'https://hbtc.zendesk.com/hc/zh-cn/articles/360009274694' // 费率介绍\n\n      },\n      'api': {\n        'public': {\n          'get': ['ping', 'time', 'brokerInfo', // 查询当前broker交易规则和symbol信息\n          'getOptions']\n        },\n        'quote': {\n          'get': ['depth', // 获取深度\n          'depth/merged', 'trades', // 获取当前最新成交\n          'klines', // 获取K线数据\n          'ticker/24hr', // 获取24小时价格变化数据\n          'ticker/price', 'ticker/bookTicker', 'contract/index', // 获取合约标的指数价格\n          'contract/depth', // 获取合约深度\n          'contract/depth/merged', 'contract/trades', // 获取合约最近成交,\n          'contract/klines', // 获取合约的K线数据\n          'contract/ticker/24hr', 'option/index', 'option/depth', 'option/depth/merged', 'option/trades', 'option/klines', 'option/ticker/24hr']\n        },\n        'contract': {\n          'get': [// public\n          'insurance', 'fundingRate', // 获取资金费率信息\n          // private\n          'openOrders', // 查询合约当前委托\n          'historyOrders', // 查询合约历史委托\n          'getOrder', // 查询合约订单详情\n          'myTrades', // 查询合约历史成交\n          'positions', // 查询合约当前持仓\n          'account' // 查询合约账户信息\n          ],\n          'post': ['order', // 创建合约订单\n          'modifyMargin' // 修改保证金\n          ],\n          'delete': ['order/cancel', // 取消合约订单\n          'order/batchCancel']\n        },\n        'option': {\n          'get': ['openOrders', 'positions', 'historyOrders', // 'getOrder',\n          'myTrades', 'settlements', 'account'],\n          'post': ['order'],\n          'delete': ['order/cancel']\n        },\n        'private': {\n          'get': ['order', // 查询订单\n          'openOrders', // 查询当前委托\n          'historyOrders', // 查询历史委托\n          'account', // 获取当前账户信息\n          'myTrades', // 查询历史成交\n          'depositOrders', 'withdrawalOrders', 'withdraw/detail', 'balance_flow'],\n          'post': ['order', // 创建新订单\n          'order/test', 'userDataStream', 'subAccount/query', 'transfer', 'user/transfer', 'withdraw'],\n          'put': ['userDataStream'],\n          'delete': ['order', // 取消订单\n          'userDataStream']\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.001,\n          'taker': 0.001\n        }\n      },\n      'exceptions': {\n        'exact': {\n          // general server or network errors\n          '-1000': ExchangeError,\n          // An unknown error occured while processing the request\n          '-1001': ExchangeError,\n          // Internal error, unable to process your request. Please try again\n          '-1002': AuthenticationError,\n          // You are not authorized to execute this request. Request need API Key included in. We suggest that API Key be included in any request\n          '-1003': RateLimitExceeded,\n          // Too many requests, please use the websocket for live updates\n          '-1004': BadRequest,\n          '-1005': PermissionDenied,\n          '-1006': BadResponse,\n          // An unexpected response was received from the message bus. Execution status unknown. OPEN API server find some exception in execute request.Please report to Customer service\n          '-1007': RequestTimeout,\n          // Timeout waiting for response from backend server. Send status unknown, execution status unknown\n          '-1014': InvalidOrder,\n          // Unsupported order combination\n          '-1015': RateLimitExceeded,\n          // Reach the rate limit.Please slow down your request speed\n          '-1016': ExchangeNotAvailable,\n          // This service is no longer available\n          '-1020': NotSupported,\n          // This operation is not supported\n          '-1021': BadRequest,\n          // Timestamp for this request is outside of the recvWindow\n          '-1022': AuthenticationError,\n          // Signature for this request is not valid\n          // request issues\n          '-1100': BadRequest,\n          // Illegal characters found in a parameter\n          '-1101': BadRequest,\n          // Too many parameters sent for this endpoint\n          '-1102': BadRequest,\n          // A mandatory parameter was not sent, was empty/null, or malformed\n          '-1103': BadRequest,\n          // An unknown parameter was sent\n          '-1104': BadRequest,\n          // Not all sent parameters were read\n          '-1105': BadRequest,\n          // A parameter was empty\n          '-1106': BadRequest,\n          // A parameter was sent when not required\n          '-1111': BadRequest,\n          // Precision is over the maximum defined for this asset\n          '-1112': NullResponse,\n          // No orders on book for symbol\n          '-1114': InvalidOrder,\n          // TimeInForce parameter sent when not required\n          '-1115': InvalidOrder,\n          // Invalid timeInForce\n          '-1116': InvalidOrder,\n          // Invalid orderType\n          '-1117': InvalidOrder,\n          // Invalid side\n          '-1118': InvalidOrder,\n          // New client order ID was empty\n          '-1119': InvalidOrder,\n          // Original client order ID was empty\n          '-1120': BadRequest,\n          // Invalid interval\n          '-1121': BadSymbol,\n          // Invalid symbol\n          '-1125': AuthenticationError,\n          // This listenKey does not exist\n          '-1127': BadRequest,\n          // Lookup interval is too big\n          '-1128': BadRequest,\n          // Combination of optional parameters invalid\n          '-1130': BadRequest,\n          // Invalid data sent for a parameter\n          '-1131': InsufficientFunds,\n          '-1132': InvalidOrder,\n          // Order price too high\n          '-1133': InvalidOrder,\n          // Order price lower than the minimum,please check general broker info\n          '-1134': InvalidOrder,\n          // Order price decimal too long,please check general broker info\n          '-1135': InvalidOrder,\n          // Order quantity too large\n          '-1136': InvalidOrder,\n          // Order quantity lower than the minimum\n          '-1137': InvalidOrder,\n          // Order quantity decimal too long\n          '-1138': InvalidOrder,\n          // Order price exceeds permissible range\n          '-1139': InvalidOrder,\n          // Order has been filled\n          '-1140': InvalidOrder,\n          // Transaction amount lower than the minimum\n          '-1141': InvalidOrder,\n          // Duplicate clientOrderId\n          '-1142': InvalidOrder,\n          // Order has been canceled\n          '-1143': OrderNotFound,\n          // Cannot be found on order book\n          '-1144': InvalidOrder,\n          // Order has been locked\n          '-1145': InvalidOrder,\n          // This order type does not support cancellation\n          '-1146': RequestTimeout,\n          // Order creation timeout\n          '-1147': RequestTimeout,\n          // Order cancellation timeout\n          '-1149': InvalidOrder,\n          // Create order failed\n          '-1187': InvalidAddress,\n          // Withdrawal address not in whitelist\n          '-2010': InvalidOrder,\n          // NEW_ORDER_REJECTED\n          '-2011': InvalidOrder,\n          // CANCEL_REJECTED\n          '-2013': OrderNotFound,\n          // Order does not exist\n          '-2014': AuthenticationError,\n          // API-key format invalid\n          '-2015': AuthenticationError,\n          // Invalid API-key, IP, or permissions for action\n          '-2016': ExchangeError // No trading window could be found for the symbol. Try ticker/24hrs instead\n\n        }\n      },\n      // exchange-specific options\n      'options': {\n        'fetchTickers': {\n          'method': 'quoteGetTicker24hr'\n        }\n      },\n      'commonCurrencies': {\n        'MIS': 'Themis Protocol'\n      }\n    });\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTime(params); //\n    //     {\n    //         \"serverTime\": 1527777538000\n    //     }\n    //\n\n    return this.safeInteger(response, 'serverTime');\n  }\n\n  parseMarket(market, type = 'spot') {\n    const filters = this.safeValue(market, 'filters', []);\n    const id = this.safeString(market, 'symbol');\n    let baseId = this.safeString(market, 'baseAsset');\n    const quoteId = this.safeString(market, 'quoteAsset');\n    let base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    let symbol = base + '/' + quote;\n    let spot = true;\n    let future = false;\n    let option = false;\n    let inverse = false;\n\n    if (type === 'future') {\n      symbol = id;\n      spot = false;\n      future = true;\n      inverse = this.safeValue(market, 'inverse', false);\n      baseId = this.safeString(market, 'underlying');\n      base = this.safeCurrencyCode(baseId);\n    } else if (type === 'option') {\n      symbol = id;\n      spot = false;\n      option = true;\n    }\n\n    const margin = this.safeValue(market, 'allowMargin', undefined);\n    const isAggregate = this.safeValue(market, 'isAggregate', undefined);\n    let active = true;\n\n    if (isAggregate === true) {\n      active = false;\n    }\n\n    let amountMin = undefined;\n    let priceMin = undefined;\n    let priceMax = undefined;\n    let costMin = undefined;\n    let pricePrecision = undefined;\n    let amountPrecision = undefined;\n\n    for (let j = 0; j < filters.length; j++) {\n      const filter = filters[j];\n      const filterType = this.safeString(filter, 'filterType');\n\n      if (filterType === 'LOT_SIZE') {\n        amountMin = this.safeNumber(filter, 'minQty');\n        amountPrecision = this.safeNumber(filter, 'stepSize');\n      }\n\n      if (filterType === 'PRICE_FILTER') {\n        priceMin = this.safeNumber(filter, 'minPrice');\n        priceMax = this.safeNumber(filter, 'maxPrice');\n        pricePrecision = this.safeNumber(filter, 'tickSize');\n      }\n    }\n\n    if (amountMin !== undefined && priceMin !== undefined) {\n      costMin = amountMin * priceMin;\n    }\n\n    const precision = {\n      'price': pricePrecision,\n      'amount': amountPrecision,\n      'base': this.safeNumber(market, 'baseAssetPrecision'),\n      'quote': this.safeNumber2(market, 'quotePrecision', 'quoteAssetPrecision')\n    };\n    const limits = {\n      'amount': {\n        'min': amountMin,\n        'max': undefined\n      },\n      'price': {\n        'min': priceMin,\n        'max': priceMax\n      },\n      'cost': {\n        'min': costMin,\n        'max': undefined\n      }\n    };\n    return {\n      'id': id,\n      'symbol': symbol,\n      'base': base,\n      'quote': quote,\n      'baseId': baseId,\n      'quoteId': quoteId,\n      'active': active,\n      'type': type,\n      'spot': spot,\n      'future': future,\n      'option': option,\n      'margin': margin,\n      'inverse': inverse,\n      'precision': precision,\n      'limits': limits,\n      'info': market\n    };\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetBrokerInfo(params); //\n    //     {\n    //         \"timezone\":\"UTC\",\n    //         \"serverTime\":\"1588015885118\",\n    //         \"brokerFilters\":[],\n    //         \"symbols\":[\n    //             {\n    //                 \"filters\":[\n    //                     {\"minPrice\":\"0.01\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.01\",\"filterType\":\"PRICE_FILTER\"},\n    //                     {\"minQty\":\"0.0005\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"0.000001\",\"filterType\":\"LOT_SIZE\"},\n    //                     {\"minNotional\":\"0.01\",\"filterType\":\"MIN_NOTIONAL\"}\n    //                 ],\n    //                 \"exchangeId\":\"301\",\n    //                 \"symbol\":\"BTCUSDT\",\n    //                 \"symbolName\":\"BTCUSDT\",\n    //                 \"status\":\"TRADING\",\n    //                 \"baseAsset\":\"BTC\",\n    //                 \"baseAssetName\":\"BTC\",\n    //                 \"baseAssetPrecision\":\"0.000001\",\n    //                 \"quoteAsset\":\"USDT\",\n    //                 \"quoteAssetName\":\"USDT\",\n    //                 \"quotePrecision\":\"0.01\",\n    //                 \"icebergAllowed\":false,\n    //                 \"isAggregate\":false,\n    //                 \"allowMargin\":true\n    //            },\n    //         ],\n    //         \"options\":[\n    //             {\n    //                 \"filters\":[\n    //                     {\"minPrice\":\"0.01\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.01\",\"filterType\":\"PRICE_FILTER\"},\n    //                     {\"minQty\":\"0.01\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"0.001\",\"filterType\":\"LOT_SIZE\"},\n    //                     {\"minNotional\":\"1\",\"filterType\":\"MIN_NOTIONAL\"}\n    //                 ],\n    //                 \"exchangeId\":\"301\",\n    //                 \"symbol\":\"BTC0501CS8500\",\n    //                 \"symbolName\":\"BTC0501CS8500\",\n    //                 \"status\":\"TRADING\",\n    //                 \"baseAsset\":\"BTC0501CS8500\",\n    //                 \"baseAssetName\":\"BTC0306CS3800\",\n    //                 \"baseAssetPrecision\":\"0.001\",\n    //                 \"quoteAsset\":\"BUSDT\",\n    //                 \"quoteAssetName\":\"BUSDT\",\n    //                 \"quotePrecision\":\"0.01\",\n    //                 \"icebergAllowed\":false\n    //                 \"isAggregate\":false,\n    //                 \"allowMargin\":false\n    //             },\n    //         ],\n    //         \"contracts\":[\n    //             {\n    //                 \"filters\":[\n    //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.1\",\"filterType\":\"PRICE_FILTER\"},\n    //                     {\"minQty\":\"1\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\"},\n    //                     {\"minNotional\":\"0.000001\",\"filterType\":\"MIN_NOTIONAL\"}\n    //                 ],\n    //                 \"exchangeId\":\"301\",\n    //                 \"symbol\":\"BTC-PERP-REV\",\n    //                 \"symbolName\":\"BTC-PERP-REV\",\n    //                 \"status\":\"TRADING\",\n    //                 \"baseAsset\":\"BTC-PERP-REV\",\n    //                 \"baseAssetPrecision\":\"1\",\n    //                 \"quoteAsset\":\"USDT\",\n    //                 \"quoteAssetPrecision\":\"0.1\",\n    //                 \"icebergAllowed\":false,\n    //                 \"inverse\":true,\n    //                 \"index\":\"BTCUSDT\",\n    //                 \"marginToken\":\"TBTC\",\n    //                 \"marginPrecision\":\"0.00000001\",\n    //                 \"contractMultiplier\":\"1.0\",\n    //                 \"underlying\":\"TBTC\",\n    //                 \"riskLimits\":[\n    //                     {\"riskLimitId\":\"200000001\",\"quantity\":\"1000000.0\",\"initialMargin\":\"0.01\",\"maintMargin\":\"0.005\"},\n    //                     {\"riskLimitId\":\"200000002\",\"quantity\":\"2000000.0\",\"initialMargin\":\"0.02\",\"maintMargin\":\"0.01\"},\n    //                     {\"riskLimitId\":\"200000003\",\"quantity\":\"3000000.0\",\"initialMargin\":\"0.03\",\"maintMargin\":\"0.015\"},\n    //                     {\"riskLimitId\":\"200000004\",\"quantity\":\"4000000.0\",\"initialMargin\":\"0.04\",\"maintMargin\":\"0.02\"}\n    //                 ]\n    //             },\n    //             {\n    //                 \"filters\":[\n    //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.1\",\"filterType\":\"PRICE_FILTER\"},\n    //                     {\"minQty\":\"1\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\"},\n    //                     {\"minNotional\":\"0.000001\",\"filterType\":\"MIN_NOTIONAL\"}\n    //                 ],\n    //                 \"exchangeId\":\"301\",\n    //                 \"symbol\":\"BTC-SWAP\",\n    //                 \"symbolName\":\"BTC-SWAP\",\n    //                 \"status\":\"TRADING\",\n    //                 \"baseAsset\":\"BTC-SWAP\",\n    //                 \"baseAssetPrecision\":\"1\",\n    //                 \"quoteAsset\":\"USDT\",\n    //                 \"quoteAssetPrecision\":\"0.1\",\n    //                 \"icebergAllowed\":false,\n    //                 \"inverse\":true,\n    //                 \"index\":\"BTCUSDT\",\n    //                 \"marginToken\":\"BTC\",\n    //                 \"marginPrecision\":\"0.00000001\",\n    //                 \"contractMultiplier\":\"1.0\",\n    //                 \"underlying\":\"BTC\",\n    //                 \"riskLimits\":[\n    //                     {\"riskLimitId\":\"500000001\",\"quantity\":\"1000000.0\",\"initialMargin\":\"0.01\",\"maintMargin\":\"0.005\"},\n    //                     {\"riskLimitId\":\"500000002\",\"quantity\":\"2000000.0\",\"initialMargin\":\"0.02\",\"maintMargin\":\"0.01\"},\n    //                     {\"riskLimitId\":\"500000003\",\"quantity\":\"3000000.0\",\"initialMargin\":\"0.03\",\"maintMargin\":\"0.015\"},\n    //                     {\"riskLimitId\":\"500000004\",\"quantity\":\"4000000.0\",\"initialMargin\":\"0.04\",\"maintMargin\":\"0.02\"}\n    //                 ]\n    //             },\n    //             {\n    //                 \"filters\":[\n    //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.1\",\"filterType\":\"PRICE_FILTER\"},\n    //                     {\"minQty\":\"1\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\"},\n    //                     {\"minNotional\":\"0.000000001\",\"filterType\":\"MIN_NOTIONAL\"}\n    //                 ],\n    //                 \"exchangeId\":\"301\",\n    //                 \"symbol\":\"BTC-PERP-BUSDT\",\n    //                 \"symbolName\":\"BTC-PERP-BUSDT\",\n    //                 \"status\":\"TRADING\",\n    //                 \"baseAsset\":\"BTC-PERP-BUSDT\",\n    //                 \"baseAssetPrecision\":\"1\",\n    //                 \"quoteAsset\":\"BUSDT\",\n    //                 \"quoteAssetPrecision\":\"0.1\",\n    //                 \"icebergAllowed\":false,\n    //                 \"inverse\":false,\n    //                 \"index\":\"BTCUSDT\",\n    //                 \"marginToken\":\"BUSDT\",\n    //                 \"marginPrecision\":\"0.0001\",\n    //                 \"contractMultiplier\":\"0.0001\",\n    //                 \"underlying\":\"TBTC\",\n    //                 \"riskLimits\":[\n    //                     {\"riskLimitId\":\"600000132\",\"quantity\":\"1000000.0\",\"initialMargin\":\"0.01\",\"maintMargin\":\"0.005\"},\n    //                     {\"riskLimitId\":\"600000133\",\"quantity\":\"2000000.0\",\"initialMargin\":\"0.02\",\"maintMargin\":\"0.01\"},\n    //                     {\"riskLimitId\":\"600000134\",\"quantity\":\"3000000.0\",\"initialMargin\":\"0.03\",\"maintMargin\":\"0.015\"},\n    //                     {\"riskLimitId\":\"600000135\",\"quantity\":\"4000000.0\",\"initialMargin\":\"0.04\",\"maintMargin\":\"0.02\"}\n    //                 ]\n    //             },\n    //         ]\n    //     }\n    //\n\n    const result = [];\n    const symbols = this.safeValue(response, 'symbols', []);\n\n    for (let i = 0; i < symbols.length; i++) {\n      const market = this.parseMarket(symbols[i], 'spot');\n      result.push(market);\n    }\n\n    const options = this.safeValue(response, 'options', []);\n\n    for (let i = 0; i < options.length; i++) {\n      const market = this.parseMarket(options[i], 'option');\n      result.push(market);\n    }\n\n    const contracts = this.safeValue(response, 'contracts', []);\n\n    for (let i = 0; i < contracts.length; i++) {\n      const market = this.parseMarket(contracts[i], 'future');\n      result.push(market);\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 40, max 40\n    }\n\n    const response = await this.quoteGetDepth(this.extend(request, params)); //\n    //     {\n    //         \"time\":1588068913453,\n    //         \"bids\":[\n    //             [\"0.025278\",\"0.0202\"],\n    //             [\"0.025277\",\"16.1132\"],\n    //             [\"0.025276\",\"7.9056\"],\n    //         ]\n    //         \"asks\":[\n    //             [\"0.025302\",\"5.9999\"],\n    //             [\"0.025303\",\"34.9151\"],\n    //             [\"0.025304\",\"92.391\"],\n    //         ]\n    //     }\n    //\n\n    const timestamp = this.safeInteger(response, 'time');\n    return this.parseOrderBook(response, symbol, timestamp);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.quoteGetTicker24hr(this.extend(request, params)); //\n    //     {\n    //         \"time\":1588069860794,\n    //         \"symbol\":\"BNB0501PS16\",\n    //         \"bestBidPrice\":\"0.2129\",\n    //         \"bestAskPrice\":\"0.3163\",\n    //         \"volume\":\"33547\",\n    //         \"quoteVolume\":\"10801.987\",\n    //         \"lastPrice\":\"0.2625\",\n    //         \"highPrice\":\"0.3918\",\n    //         \"lowPrice\":\"0.2625\",\n    //         \"openPrice\":\"0.362\",\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchBidAsk(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.quoteGetTickerBookTicker(this.extend(request, params)); //\n    //     {\n    //         \"symbol\": \"LTCBTC\",\n    //         \"bidPrice\": \"4.00000000\",\n    //         \"bidQty\": \"431.00000000\",\n    //         \"askPrice\": \"4.00000200\",\n    //         \"askQty\": \"9.00000000\"\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchBidsAsks(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.quoteGetTickerBookTicker(params); //\n    //     [\n    //         {\n    //             \"symbol\": \"LTCBTC\",\n    //             \"bidPrice\": \"4.00000000\",\n    //             \"bidQty\": \"431.00000000\",\n    //             \"askPrice\": \"4.00000200\",\n    //             \"askQty\": \"9.00000000\"\n    //         },\n    //         {\n    //             \"symbol\": \"ETHBTC\",\n    //             \"bidPrice\": \"0.07946700\",\n    //             \"bidQty\": \"9.00000000\",\n    //             \"askPrice\": \"100000.00000000\",\n    //             \"askQty\": \"1000.00000000\"\n    //         },\n    //     ]\n    //\n\n    return this.parseTickers(response, symbols);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const options = this.safeValue(this.options, 'fetchTickers', {});\n    const defaultMethod = this.safeString(options, 'method', 'quoteGetTicker24hr');\n    const defaultType = this.safeString(options, 'type', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n    let method = defaultMethod;\n\n    if (type === 'future') {\n      method = 'quoteGetContractTicker24hr';\n    } else if (type === 'option') {\n      method = 'quoteGetOptionTicker24hr';\n    }\n\n    const response = await this[method](query); //\n    //     [\n    //         {\n    //             \"time\": 1538725500422,\n    //             \"symbol\": \"ETHBTC\",\n    //             \"lastPrice\": \"4.00000200\",\n    //             \"openPrice\": \"99.00000000\",\n    //             \"highPrice\": \"100.00000000\",\n    //             \"lowPrice\": \"0.10000000\",\n    //             \"volume\": \"8913.30000000\"\n    //         },\n    //     ]\n    //\n\n    return this.parseTickers(response, symbols);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const options = this.safeValue(this.options, 'fetchBalance', {});\n    const defaultType = this.safeString(options, 'type', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n    let method = 'privateGetAccount';\n\n    if (type === 'future') {\n      method = 'contractGetAccount';\n    } else if (type === 'option') {\n      method = 'optionGetAccount';\n    }\n\n    const response = await this[method](query); //\n    // spot\n    //\n    //     {\n    //         'balances': [\n    //             {\n    //                 'asset': 'ALGO',\n    //                 'free': '0',\n    //                 'locked': '0'\n    //             },\n    //             {\n    //                 'asset': 'BHT',\n    //                 'free': '0',\n    //                 'locked': '0'\n    //             }\n    //         ]\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         \"BUSDT\":{\n    //             \"total\":\"1000\",\n    //             \"availableMargin\":\"1000\",\n    //             \"positionMargin\":\"0\",\n    //             \"orderMargin\":\"0\",\n    //             \"tokenId\":\"BUSDT\"\n    //         },\n    //         \"TBTC\":{\n    //             \"total\":\"0.5\",\n    //             \"availableMargin\":\"0.5\",\n    //             \"positionMargin\":\"0\",\n    //             \"orderMargin\":\"0\",\n    //             \"tokenId\":\"TBTC\"\n    //         }\n    //     }\n    //\n    // option\n    //\n    //     {\n    //         \"optionAsset\":\"\",\n    //         \"balances\":[\n    //             {\n    //                 \"tokenName\":\"USDT\",\n    //                 \"free\":\"0.0\",\n    //                 \"locked\":\"0.0\",\n    //                 \"margin\":\"0.0\"\n    //             },\n    //             {\n    //                 \"tokenName\":\"BUSDT\",\n    //                 \"free\":\"0.0\",\n    //                 \"locked\":\"0.0\",\n    //                 \"margin\":\"0.0\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const balances = this.safeValue(response, 'balances');\n    const result = {\n      'info': response,\n      'timestamp': undefined,\n      'datetime': undefined\n    };\n\n    if (balances !== undefined) {\n      for (let i = 0; i < balances.length; i++) {\n        const balance = balances[i];\n        const currencyId = this.safeString2(balance, 'asset', 'tokenName');\n        const code = this.safeCurrencyCode(currencyId);\n        const account = this.account();\n        account['free'] = this.safeString(balance, 'free');\n        account['used'] = this.safeString(balance, 'locked');\n        result[code] = account;\n      }\n    } else {\n      const currencyIds = Object.keys(response);\n\n      for (let i = 0; i < currencyIds.length; i++) {\n        const currencyId = currencyIds[i];\n        const code = this.safeCurrencyCode(currencyId);\n        const balance = response[currencyId];\n        const account = this.account();\n        account['free'] = this.safeString(balance, 'availableMargin');\n        account['total'] = this.safeString(balance, 'total');\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = 50, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 500, max 1000\n    }\n\n    const response = await this.quoteGetTrades(this.extend(request, params)); //\n    //     [\n    //         {\"price\":\"0.025344\",\"time\":1588084082060,\"qty\":\"1\",\"isBuyerMaker\":false},\n    //         {\"price\":\"0.02535\",\"time\":1588084086021,\"qty\":\"0.553\",\"isBuyerMaker\":true},\n    //         {\"price\":\"0.025348\",\"time\":1588084097037,\"qty\":\"1\",\"isBuyerMaker\":false},\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1587906000000, // open time\n    //         \"0.1761\", // open\n    //         \"0.1761\", // high\n    //         \"0.1761\", // low\n    //         \"0.1761\", // close\n    //         \"0\", // base volume\n    //         0, // close time\n    //         \"0\", // quote volume\n    //         0, // number of trades\n    //         \"0\", // taker buy base asset volume\n    //         \"0\" // taker buy quote asset volume\n    //     ]\n    //\n    return [this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'interval': this.timeframes[timeframe]\n    };\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 500, max 500\n    }\n\n    const response = await this.quoteGetKlines(this.extend(request, params)); //\n    //     [\n    //         [1587906000000,\"0.1761\",\"0.1761\",\"0.1761\",\"0.1761\",\"0\",0,\"0\",0,\"0\",\"0\"],\n    //         [1587906180000,\"0.1761\",\"0.1761\",\"0.1761\",\"0.1761\",\"0\",0,\"0\",0,\"0\",\"0\"],\n    //         [1587906360000,\"0.1761\",\"0.1848\",\"0.1761\",\"0.1848\",\"53\",0,\"9.7944\",1,\"0\",\"0\"],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {// if only fromId is set，it will get orders < that fromId in descending order\n      // if only toId is set, it will get orders > that toId in ascending order\n      // if fromId is set and toId is set, it will get orders < that fromId and > that toId in descending order\n      // if fromId is not set and toId it not set, most recent order are returned in descending order\n      // 'fromId': '43287482374',\n      // 'toId': '43287482374',\n      // 'endTime': this.milliseconds (), // optional, spot only\n    };\n    const defaultType = this.safeString(this.options, 'type', 'spot');\n    const options = this.safeValue(this.options, 'fetchMyTrades', {});\n    const fetchMyTradesType = this.safeString(options, 'type', defaultType);\n    let type = this.safeString(params, 'type', fetchMyTradesType);\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      type = market['type'];\n    }\n\n    const query = this.omit(params, 'type');\n\n    if (limit !== undefined) {\n      // spot default 500, max 1000\n      // futures and options default 20, max 1000\n      request['limit'] = limit;\n    }\n\n    let method = 'privateGetMyTrades';\n\n    if (type === 'future') {\n      method = 'contractGetMyTrades';\n    } else {\n      if (type === 'option') {\n        method = 'optionGetMyTrades';\n      } else {\n        if (symbol === undefined) {\n          throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a `symbol` argument for ' + type + ' markets');\n        }\n\n        const market = this.market(symbol);\n        request['symbol'] = market['id']; // spot only?\n\n        if (since !== undefined) {\n          request['startTime'] = since;\n        }\n      }\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    const response = await this[method](this.extend(request, query)); //\n    // spot\n    //\n    //     [\n    //         {\n    //             \"id\":\"616384027512920576\",\n    //             \"symbol\":\"TBTCBUSDT\",\n    //             \"orderId\":\"616384027202542080\",\n    //             \"matchOrderId\":\"605124954767266560\",\n    //             \"price\":\"6826.06\",\n    //             \"qty\":\"0.1\",\n    //             \"commission\":\"0.682606\",\n    //             \"commissionAsset\":\"BUSDT\",\n    //             \"time\":\"1588214701982\",\n    //             \"isBuyer\":false,\n    //             \"isMaker\":false,\n    //             \"fee\":{\n    //                 \"feeTokenId\":\"BUSDT\",\n    //                 \"feeTokenName\":\"BUSDT\",\n    //                 \"fee\":\"0.682606\"\n    //             }\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const orderSide = side.toUpperCase();\n    const orderType = type.toUpperCase();\n    const request = {\n      'symbol': market['id'],\n      // BUY or SELL for spot and options\n      'side': orderSide // GTC, FOK, IOC for spot and options\n      // GTC, FOK, IOC, LIMIT_MAKER for futures\n      // 'timeInForce': 'GTC',\n\n    };\n    let query = params;\n    let method = 'privatePostOrder';\n\n    if (market['type'] === 'future') {\n      if (orderSide !== 'BUY_OPEN' && orderSide !== 'SELL_OPEN' && orderSide !== 'BUY_CLOSE' && orderSide !== 'SELL_CLOSE') {\n        throw new NotSupported(this.id + ' createOrder() does not support order side ' + side + ' for ' + market['type'] + ' markets, only BUY_OPEN, SELL_OPEN, BUY_CLOSE and SELL_CLOSE are supported');\n      }\n\n      if (orderType !== 'LIMIT' && orderType !== 'STOP') {\n        throw new NotSupported(this.id + ' createOrder() does not support order type ' + type + ' for ' + market['type'] + ' markets, only LIMIT and STOP are supported');\n      }\n\n      const clientOrderId = this.safeValue(params, 'clientOrderId');\n\n      if (clientOrderId === undefined) {\n        throw new ArgumentsRequired(this.id + ' createOrder() requires a clientOrderId parameter for ' + market['type'] + ' markets, supply clientOrderId in the params argument');\n      }\n\n      const leverage = this.safeValue(params, 'leverage');\n\n      if (leverage === undefined && (orderSide === 'BUY_OPEN' || orderSide === 'SELL_OPEN')) {\n        throw new NotSupported(this.id + ' createOrder() requires a leverage parameter for ' + market['type'] + ' markets if orderSide is BUY_OPEN or SELL_OPEN');\n      }\n\n      method = 'contractPostOrder';\n      const priceType = this.safeString(params, 'priceType');\n\n      if (priceType === undefined) {\n        request['price'] = this.priceToPrecision(symbol, price);\n      } else {\n        request['priceType'] = priceType;\n\n        if (priceType === 'INPUT') {\n          request['price'] = this.priceToPrecision(symbol, price);\n        }\n      }\n\n      request['orderType'] = type.toUpperCase(); // LIMIT, STOP\n\n      request['quantity'] = this.amountToPrecision(symbol, amount); // request['leverage'] = 1; // not required for closing orders\n\n      request['leverage'] = leverage;\n      request['clientOrderId'] = clientOrderId; // optional\n      // request['priceType'] = 'INPUT', // INPUT, OPPONENT, QUEUE, OVER, MARKET\n      // request['triggerPrice'] = 123.45;\n    } else {\n      if (market['type'] === 'option') {\n        method = 'optionPostOrder';\n      }\n\n      const newClientOrderId = this.safeValue2(params, 'clientOrderId', 'newClientOrderId');\n\n      if (newClientOrderId !== undefined) {\n        request['newClientOrderId'] = newClientOrderId;\n      }\n\n      request['type'] = orderType;\n\n      if (type === 'limit') {\n        request['price'] = this.priceToPrecision(symbol, price);\n        request['quantity'] = this.amountToPrecision(symbol, amount);\n      } else if (type === 'market') {\n        // for market buy it requires the amount of quote currency to spend\n        if (side === 'buy') {\n          const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);\n\n          if (createMarketBuyOrderRequiresPrice) {\n            if (price !== undefined) {\n              amount = amount * price;\n            } else {\n              throw new InvalidOrder(this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument (the exchange-specific behaviour)\");\n            }\n          }\n\n          const precision = market['precision']['price'];\n          request['quantity'] = this.decimalToPrecision(amount, TRUNCATE, precision, this.precisionMode);\n        } else {\n          request['quantity'] = this.amountToPrecision(symbol, amount);\n        }\n      }\n    }\n\n    query = this.omit(query, ['clientOrderId', 'newClientOrderId']);\n    const response = await this[method](this.extend(request, query)); //\n    // spot\n    //\n    //     {\n    //         \"symbol\":\"TBTCBUSDT\",\n    //         \"orderId\":\"616376654496877056\",\n    //         \"clientOrderId\":\"158821382304516955\",\n    //         \"transactTime\":\"1588213823080\",\n    //         \"price\":\"0\",\n    //         \"origQty\":\"1000\",\n    //         \"executedQty\":\"0\",\n    //         \"status\":\"NEW\",\n    //         \"timeInForce\":\"GTC\",\n    //         \"type\":\"MARKET\",\n    //         \"side\":\"BUY\"\n    //     }\n    //\n    // contract\n    //\n    //     {\n    //         'time': '1570759718825',\n    //         'updateTime': '0',\n    //         'orderId': '469961015902208000',\n    //         'clientOrderId': '6423344174',\n    //         'symbol': 'BTC-PERP-REV',\n    //         'price': '8200',\n    //         'leverage': '12.08',\n    //         'origQty': '5',\n    //         'executedQty': '0',\n    //         'avgPrice': '0',\n    //         'marginLocked': '0.00005047',\n    //         'orderType': 'LIMIT',\n    //         'side': 'BUY_OPEN',\n    //         'fees': [],\n    //         'timeInForce': 'GTC',\n    //         'status': 'NEW',\n    //         'priceType': 'INPUT'\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const clientOrderId = this.safeValue2(params, 'origClientOrderId', 'clientOrderId');\n    const request = {};\n    const defaultType = this.safeString(this.options, 'type', 'spot');\n    const options = this.safeValue(this.options, 'cancelOrder', {});\n    const cancelOrderType = this.safeString(options, 'type', defaultType);\n    let type = this.safeString(params, 'type', cancelOrderType);\n    let query = this.omit(params, 'type');\n\n    if (clientOrderId !== undefined) {\n      request['origClientOrderId'] = clientOrderId;\n      query = this.omit(query, ['origClientOrderId', 'clientOrderId']);\n    } else {\n      request['orderId'] = id;\n    }\n\n    let method = 'privateDeleteOrder';\n    const orderType = this.safeString(query, 'orderType');\n\n    if (orderType !== undefined) {\n      type = 'future';\n    }\n\n    if (type === 'future') {\n      method = 'contractDeleteOrderCancel';\n\n      if (orderType === undefined) {\n        throw new ArgumentsRequired(this.id + \" cancelOrder() requires an orderType parameter, pass the { 'orderType': 'LIMIT' } or { 'orderType': 'STOP' } in params argument\");\n      }\n\n      request['orderType'] = orderType;\n    } else {\n      if (type === 'option') {\n        method = 'optionDeleteOrderCancel';\n      }\n    }\n\n    const response = await this[method](this.extend(request, query)); //\n    // spot\n    //\n    //     {\n    //         'exchangeId': '301',\n    //         'symbol': 'BHTUSDT',\n    //         'clientOrderId': '0',\n    //         'orderId': '499890200602846976',\n    //         'status': 'CANCELED'\n    //     }\n    //\n    // futures\n    //\n    //     {\n    //         \"time\":\"1588353669383\",\n    //         \"updateTime\":\"0\",\n    //         \"orderId\":\"617549770304599296\",\n    //         \"clientOrderId\":\"test-001\",\n    //         \"symbol\":\"BTC-PERP-REV\",\n    //         \"price\":\"10000\",\n    //         \"leverage\":\"1\",\n    //         \"origQty\":\"100\",\n    //         \"executedQty\":\"0\",\n    //         \"avgPrice\":\"0\",\n    //         \"marginLocked\":\"0\",\n    //         \"orderType\":\"LIMIT\",\n    //         \"side\":\"SELL_OPEN\",\n    //         \"fees\":[],\n    //         \"timeInForce\":\"GTC\",\n    //         \"status\":\"CANCELED\",\n    //         \"priceType\":\"INPUT\",\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {// if orderId is set, it will get orders < that orderId otherwise most recent orders are returned\n      // 'orderId': '43287482374',\n    };\n    const defaultType = this.safeString(this.options, 'type', 'spot');\n    const options = this.safeValue(this.options, 'fetchOpenOrders', {});\n    const fetchOpenOrdersType = this.safeString(options, 'type', defaultType);\n    let type = this.safeString(params, 'type', fetchOpenOrdersType);\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      type = market['type'];\n    }\n\n    const query = this.omit(params, 'type');\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 500, max 1000\n    }\n\n    let method = 'privateGetOpenOrders';\n\n    if (type === 'future') {\n      method = 'contractGetOpenOrders';\n    } else if (type === 'option') {\n      method = 'optionGetOpenOrders';\n    }\n\n    const response = await this[method](this.extend(request, query)); //\n    // spot\n    //\n    //     [\n    //         {\n    //             'orderId': '499902955766523648',\n    //             'clientOrderId': '157432907618453',\n    //             'exchangeId': '301',\n    //             'symbol': 'BHTUSDT',\n    //             'price': '0.01',\n    //             'origQty': '50',\n    //             'executedQty': '0',\n    //             'cummulativeQuoteQty': '0',\n    //             'avgPrice': '0',\n    //             'status': 'NEW',\n    //             'timeInForce': 'GTC',\n    //             'type': 'LIMIT',\n    //             'side': 'BUY',\n    //             'stopPrice': '0.0',\n    //             'icebergQty': '0.0',\n    //             'time': '1574329076202',\n    //             'updateTime': '0',\n    //             'isWorking': true\n    //         }\n    //     ]\n    //\n    // futures\n    //\n    //     [\n    //         {\n    //             \"time\":\"1588353669383\",\n    //             \"updateTime\":\"0\",\n    //             \"orderId\":\"617549770304599296\",\n    //             \"clientOrderId\":\"test-001\",\n    //             \"symbol\":\"BTC-PERP-REV\",\n    //             \"price\":\"10000\",\n    //             \"leverage\":\"1\",\n    //             \"origQty\":\"100\",\n    //             \"executedQty\":\"0\",\n    //             \"avgPrice\":\"0\",\n    //             \"marginLocked\":\"0.01\",\n    //             \"orderType\":\"LIMIT\",\n    //             \"side\":\"SELL_OPEN\",\n    //             \"fees\":[],\n    //             \"timeInForce\":\"GTC\",\n    //             \"status\":\"NEW\",\n    //             \"priceType\":\"INPUT\"\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {// if orderId is set, it will get orders < that orderId otherwise most recent orders are returned\n      // 'orderId': '43287482374',\n      // 'endTime': this.milliseconds (), // optional\n    };\n    const defaultType = this.safeString(this.options, 'type', 'spot');\n    const options = this.safeValue(this.options, 'fetchClosedOrders', {});\n    const fetchClosedOrdersType = this.safeString(options, 'type', defaultType);\n    let type = this.safeString(params, 'type', fetchClosedOrdersType);\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      type = market['type'];\n    }\n\n    const query = this.omit(params, 'type');\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 500, max 1000\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    let method = 'privateGetHistoryOrders';\n\n    if (type === 'future') {\n      method = 'contractGetHistoryOrders';\n    } else if (type === 'option') {\n      method = 'optionGetHistoryOrders';\n    }\n\n    const response = await this[method](this.extend(request, query)); //\n    // spot\n    //\n    //     [\n    //         {\n    //             \"orderId\":\"616384027202542080\",\n    //             \"clientOrderId\":\"158821470194414688\",\n    //             \"exchangeId\":\"301\",\n    //             \"symbol\":\"TBTCBUSDT\",\n    //             \"price\":\"0\",\n    //             \"origQty\":\"0.1\",\n    //             \"executedQty\":\"0.1\",\n    //             \"cummulativeQuoteQty\":\"682.606\",\n    //             \"avgPrice\":\"6826.06\",\n    //             \"status\":\"FILLED\",\n    //             \"timeInForce\":\"GTC\",\n    //             \"type\":\"MARKET\",\n    //             \"side\":\"SELL\",\n    //             \"stopPrice\":\"0.0\",\n    //             \"icebergQty\":\"0.0\",\n    //             \"time\":\"1588214701974\",\n    //             \"updateTime\":\"0\",\n    //             \"isWorking\":true\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const clientOrderId = this.safeValue2(params, 'origClientOrderId', 'clientOrderId');\n    const request = {};\n    const defaultType = this.safeString(this.options, 'type', 'spot');\n    const options = this.safeValue(this.options, 'fetchOrder', {});\n    const fetchOrderType = this.safeString(options, 'type', defaultType);\n    const type = this.safeString(params, 'type', fetchOrderType);\n    let query = this.omit(params, 'type');\n\n    if (clientOrderId !== undefined) {\n      request['origClientOrderId'] = clientOrderId;\n      query = this.omit(query, ['origClientOrderId', 'clientOrderId']);\n    } else {\n      request['orderId'] = id;\n    }\n\n    let method = 'privateGetOrder';\n\n    if (type === 'future') {\n      method = 'contractGetGetOrder';\n    } else if (type === 'option') {\n      method = 'optionGetGetOrder';\n    }\n\n    const response = await this[method](this.extend(request, query));\n    return this.parseOrder(response);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {// 'fromId': 'string', // if fromId is set, it will get deposits > that fromId, otherwise most recent deposits are returned\n    };\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetDepositOrders(this.extend(request, params)); //\n    //     [\n    //         {\n    //             'time': '1565769575929',\n    //             'orderId': '428100569859739648',\n    //             'token': 'USDT',\n    //             'address': '',\n    //             'addressTag': '',\n    //             'fromAddress': '',\n    //             'fromAddressTag': '',\n    //             'quantity': '1100',\n    //         },\n    //     ]\n    //\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {// 'fromId': 'string', // if fromId is set, it will get deposits > that fromId, otherwise most recent deposits are returned\n    };\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['token'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 500, max 1000\n    }\n\n    const response = await this.privateGetWithdrawalOrders(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"time\":\"1536232111669\",\n    //             \"orderId\":\"90161227158286336\",\n    //             \"accountId\":\"517256161325920\",\n    //             \"tokenId\":\"BHC\",\n    //             \"tokenName\":\"BHC\",\n    //             \"address\":\"0x815bF1c3cc0f49b8FC66B21A7e48fCb476051209\",\n    //             \"addressExt\":\"address tag\",\n    //             \"quantity\":\"14\", // Withdrawal qty\n    //             \"arriveQuantity\":\"14\", // Arrived qty\n    //             \"statusCode\":\"PROCESSING_STATUS\",\n    //             \"status\":3,\n    //             \"txid\":\"\",\n    //             \"txidUrl\":\"\",\n    //             \"walletHandleTime\":\"1536232111669\",\n    //             \"feeTokenId\":\"BHC\",\n    //             \"feeTokenName\":\"BHC\",\n    //             \"fee\":\"0.1\",\n    //             \"requiredConfirmNum\":0, // Required confirmations\n    //             \"confirmNum\":0, // Confirmations\n    //             \"kernelId\":\"\", // BEAM and GRIN only\n    //             \"isInternalTransfer\": false // True if this transfer is internal\n    //         }\n    //     ]\n    //\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const clientOrderId = this.safeString(params, 'clientOrderId', this.uuid());\n    const request = {\n      'clientOrderId': clientOrderId,\n      'tokenId': currency['id'],\n      'address': address,\n      // the withdrawal address must be in current tag list in your PC/APP client\n      'withdrawQuantity': amount // 'chainType': 'OMNI', // OMNI, ERC20, TRC20\n\n    };\n\n    if (tag !== undefined) {\n      request['addressExt'] = tag;\n    }\n\n    const response = await this.privatePostWithdraw(this.extend(request, params)); //\n    //     {\n    //         \"status\": 0,\n    //         \"success\": true,\n    //         \"needBrokerAudit\": false, // Whether this request needs broker auit\n    //         \"orderId\": \"423885103582776064\" // Id for successful withdrawal\n    //     }\n    //\n\n    return {\n      'info': response,\n      'id': this.safeString(response, 'orderId')\n    };\n  }\n\n  async fetchAccounts(params = {}) {\n    const response = await this.privatePostSubAccountQuery(params); //\n    //     [\n    //         {\n    //             \"accountId\": \"122216245228131\",\n    //             \"accountName\": \"createSubAccountByCurl\", // sub-account name\n    //             \"accountType\": 1, // 1 token trading, 2 options, 3 futures\n    //             \"accountIndex\": 1, // 0 main account, 1 sub-account\n    //         },\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const account = response[i];\n      const accountId = this.safeString(account, 'accountId');\n      const accountType = this.safeString(account, 'accountType');\n      let type = accountType;\n\n      if (accountType === '1') {\n        type = 'spot';\n      } else if (accountType === '2') {\n        type = 'option';\n      } else if (accountType === '3') {\n        type = 'future';\n      }\n\n      result.push({\n        'id': accountId,\n        'type': type,\n        'currency': undefined,\n        'info': account\n      });\n    }\n\n    return result;\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'accountType': 1,\n      // spot 1, options 2, futures 3\n      'accountIndex': 0,\n      // main 0, sub-account 1\n      'fromFlowId': '',\n      // flowId to start from\n      'endFlowId': '',\n      // flowId to end with\n      'endTime': 1588450533040\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['tokenId'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 500, max 500\n    }\n\n    const response = await this.privateGetBalanceFlow(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"id\": \"539870570957903104\",\n    //             \"accountId\": \"122216245228131\",\n    //             \"tokenId\": \"BTC\",\n    //             \"tokenName\": \"BTC\",\n    //             \"flowTypeValue\": 51,\n    //             \"flowType\": \"USER_ACCOUNT_TRANSFER\",\n    //             \"flowName\": \"Transfer\",\n    //             \"change\": \"-12.5\",\n    //             \"total\": \"379.624059937852365\", // after change\n    //             \"created\": \"1579093587214\"\n    //         },\n    //         {\n    //             \"id\": \"536072393645448960\",\n    //             \"accountId\": \"122216245228131\",\n    //             \"tokenId\": \"USDT\",\n    //             \"tokenName\": \"USDT\",\n    //             \"flowTypeValue\": 7,\n    //             \"flowType\": \"AIRDROP\",\n    //             \"flowName\": \"Airdrop\",\n    //             \"change\": \"-2000\",\n    //             \"total\": \"918662.0917630848\",\n    //             \"created\": \"1578640809195\"\n    //         }\n    //     ]\n    //\n\n    return this.parseLedger(response, currency, since, limit);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //     {\n    //         \"id\": \"539870570957903104\",\n    //         \"accountId\": \"122216245228131\",\n    //         \"tokenId\": \"BTC\",\n    //         \"tokenName\": \"BTC\",\n    //         \"flowTypeValue\": 51,\n    //         \"flowType\": \"USER_ACCOUNT_TRANSFER\",\n    //         \"flowName\": \"Transfer\",\n    //         \"change\": \"-12.5\",\n    //         \"total\": \"379.624059937852365\", // after change\n    //         \"created\": \"1579093587214\"\n    //     }\n    //\n    //     {\n    //         \"id\": \"536072393645448960\",\n    //         \"accountId\": \"122216245228131\",\n    //         \"tokenId\": \"USDT\",\n    //         \"tokenName\": \"USDT\",\n    //         \"flowTypeValue\": 7,\n    //         \"flowType\": \"AIRDROP\",\n    //         \"flowName\": \"Airdrop\",\n    //         \"change\": \"-2000\",\n    //         \"total\": \"918662.0917630848\",\n    //         \"created\": \"1578640809195\"\n    //     }\n    //\n    const currencyId = this.safeString(item, 'tokenId');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const amount = this.safeNumber(item, 'change');\n    const after = this.safeNumber(item, 'total');\n    const direction = amount < 0 ? 'out' : 'in';\n    let before = undefined;\n\n    if (after !== undefined && amount !== undefined) {\n      const difference = direction === 'out' ? amount : -amount;\n      before = this.sum(after, difference);\n    }\n\n    const timestamp = this.safeInteger(item, 'created');\n    const type = this.parseLedgerEntryType(this.safeString(item, 'flowType'));\n    const id = this.safeString(item, 'id');\n    const account = this.safeString(item, 'accountId');\n    return {\n      'id': id,\n      'currency': code,\n      'account': account,\n      'referenceAccount': undefined,\n      'referenceId': undefined,\n      'status': undefined,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'fee': undefined,\n      'direction': direction,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'type': type,\n      'info': item\n    };\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'TRADE': 'trade',\n      'FEE': 'fee',\n      'TRANSFER': 'transfer',\n      'DEPOSIT': 'transaction',\n      'MAKER_REWARD': 'rebate',\n      'PNL': 'pnl',\n      'SETTLEMENT': 'settlement',\n      'LIQUIDATION': 'liquidation',\n      'FUNDING_SETTLEMENT': 'settlement',\n      'USER_ACCOUNT_TRANSFER': 'transfer',\n      'OTC_BUY_COIN': 'trade',\n      'OTC_SELL_COIN': 'trade',\n      'OTC_FEE': 'fee',\n      'OTC_TRADE': 'trade',\n      'ACTIVITY_AWARD': 'referral',\n      'INVITATION_REFERRAL_BONUS': 'referral',\n      'REGISTER_BONUS': 'referral',\n      'AIRDROP': 'airdrop',\n      'MINE_REWARD': 'reward'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'BROKER_AUDITING_STATUS': 'pending',\n      'BROKER_REJECT_STATUS': 'failed',\n      'AUDITING_STATUS': 'pending',\n      'AUDIT_REJECT_STATUS': 'failed',\n      'PROCESSING_STATUS': 'pending',\n      'WITHDRAWAL_SUCCESS_STATUS': 'ok',\n      'WITHDRAWAL_FAILURE_STATUS': 'failed',\n      'BLOCK_MINING_STATUS': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         'time': '1565769575929',\n    //         'orderId': '428100569859739648',\n    //         'token': 'USDT',\n    //         'address': '',\n    //         'addressTag': '',\n    //         'fromAddress': '',\n    //         'fromAddressTag': '',\n    //         'quantity': '1100',\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"time\":\"1536232111669\",\n    //         \"orderId\":\"90161227158286336\",\n    //         \"accountId\":\"517256161325920\",\n    //         \"tokenId\":\"BHC\",\n    //         \"tokenName\":\"BHC\",\n    //         \"address\":\"0x815bF1c3cc0f49b8FC66B21A7e48fCb476051209\",\n    //         \"addressExt\":\"address tag\",\n    //         \"quantity\":\"14\", // Withdrawal qty\n    //         \"arriveQuantity\":\"14\", // Arrived qty\n    //         \"statusCode\":\"PROCESSING_STATUS\",\n    //         \"status\":3,\n    //         \"txid\":\"\",\n    //         \"txidUrl\":\"\",\n    //         \"walletHandleTime\":\"1536232111669\",\n    //         \"feeTokenId\":\"BHC\",\n    //         \"feeTokenName\":\"BHC\",\n    //         \"fee\":\"0.1\",\n    //         \"requiredConfirmNum\":0, // Required confirmations\n    //         \"confirmNum\":0, // Confirmations\n    //         \"kernelId\":\"\", // BEAM and GRIN only\n    //         \"isInternalTransfer\": false // True if this transfer is internal\n    //     }\n    //\n    const id = this.safeString(transaction, 'orderId');\n    const address = this.safeString(transaction, 'address');\n    let tag = this.safeString2(transaction, 'addressExt', 'addressTag');\n\n    if (tag !== undefined) {\n      if (tag.length < 1) {\n        tag = undefined;\n      }\n    }\n\n    const addressFrom = this.safeString(transaction, 'fromAddress');\n    let tagFrom = this.safeString(transaction, 'fromAddressTag');\n\n    if (tagFrom !== undefined) {\n      if (tagFrom.length < 1) {\n        tagFrom = undefined;\n      }\n    }\n\n    const currencyId = this.safeString(transaction, 'tokenId');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const timestamp = this.safeInteger(transaction, 'time');\n    let txid = this.safeString(transaction, 'txid');\n\n    if (txid === '') {\n      txid = undefined;\n    }\n\n    let type = undefined;\n    let status = this.parseTransactionStatus(this.safeString(transaction, 'statusCode'));\n\n    if (status === undefined) {\n      type = 'deposit';\n      status = 'ok';\n    } else {\n      type = 'withdrawal';\n    }\n\n    const amount = this.safeNumber(transaction, 'quantity');\n    const feeCost = this.safeNumber(transaction, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(transaction, 'feeTokenId');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'currency': feeCurrencyCode,\n        'cost': feeCost\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': addressFrom,\n      'address': address,\n      'addressTo': address,\n      'tagFrom': tagFrom,\n      'tag': tag,\n      'tagTo': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'fee': fee\n    };\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker, fetchTickers\n    //\n    //     {\n    //         \"time\":1588069860794,\n    //         \"symbol\":\"BNB0501PS16\",\n    //         \"bestBidPrice\":\"0.2129\",\n    //         \"bestAskPrice\":\"0.3163\",\n    //         \"volume\":\"33547\",\n    //         \"quoteVolume\":\"10801.987\",\n    //         \"lastPrice\":\"0.2625\",\n    //         \"highPrice\":\"0.3918\",\n    //         \"lowPrice\":\"0.2625\",\n    //         \"openPrice\":\"0.362\",\n    //     }\n    //\n    // fetchBidAsk, fetchBidAsks\n    //\n    //     {\n    //         \"symbol\": \"LTCBTC\",\n    //         \"bidPrice\": \"4.00000000\",\n    //         \"bidQty\": \"431.00000000\",\n    //         \"askPrice\": \"4.00000200\",\n    //         \"askQty\": \"9.00000000\"\n    //     }\n    //\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.safeInteger(ticker, 'time');\n    const open = this.safeNumber(ticker, 'openPrice');\n    const close = this.safeNumber(ticker, 'lastPrice');\n    let change = undefined;\n    let percentage = undefined;\n    let average = undefined;\n\n    if (open !== undefined && close !== undefined) {\n      change = close - open;\n      average = this.sum(open, close) / 2;\n\n      if (close !== undefined && close > 0) {\n        percentage = change / open * 100;\n      }\n    }\n\n    const quoteVolume = this.safeNumber(ticker, 'quoteVolume');\n    const baseVolume = this.safeNumber(ticker, 'volume');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'highPrice'),\n      'low': this.safeNumber(ticker, 'lowPrice'),\n      'bid': this.safeNumber2(ticker, 'bestBidPrice', 'bidPrice'),\n      'bidVolume': this.safeNumber(ticker, 'bidQty'),\n      'ask': this.safeNumber2(ticker, 'bestAskPrice', 'askPrice'),\n      'askVolume': this.safeNumber(ticker, 'askQty'),\n      'vwap': vwap,\n      'open': open,\n      'close': close,\n      'last': close,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"price\":\"0.025344\",\n    //         \"time\":1588084082060,\n    //         \"qty\":\"1\",\n    //         \"isBuyerMaker\":false\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    // spot\n    //\n    //     {\n    //         \"id\":\"616384027512920576\",\n    //         \"symbol\":\"TBTCBUSDT\",\n    //         \"orderId\":\"616384027202542080\",\n    //         \"matchOrderId\":\"605124954767266560\",\n    //         \"price\":\"6826.06\",\n    //         \"qty\":\"0.1\",\n    //         \"commission\":\"0.682606\",\n    //         \"commissionAsset\":\"BUSDT\",\n    //         \"time\":\"1588214701982\",\n    //         \"isBuyer\":false,\n    //         \"isMaker\":false,\n    //         \"fee\":{\n    //             \"feeTokenId\":\"BUSDT\",\n    //             \"feeTokenName\":\"BUSDT\",\n    //             \"fee\":\"0.682606\"\n    //         }\n    //     }\n    //\n    const id = this.safeString(trade, 'id');\n    const timestamp = this.safeNumber(trade, 'time');\n    const type = undefined;\n    const orderId = this.safeString(trade, 'orderId');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'qty');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    let side = undefined;\n    let takerOrMaker = undefined;\n\n    if ('isBuyerMaker' in trade) {\n      side = trade['isBuyerMaker'] ? 'sell' : 'buy';\n    } else {\n      const isMaker = this.safeValue(trade, 'isMaker');\n\n      if (isMaker !== undefined) {\n        takerOrMaker = isMaker ? 'maker' : 'taker';\n      }\n\n      const isBuyer = this.safeValue(trade, 'isBuyer');\n      side = isBuyer ? 'buy' : 'sell';\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeNumber(trade, 'commission');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'commissionAsset');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    let symbol = undefined;\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'order': orderId,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"symbol\":\"TBTCBUSDT\",\n    //         \"orderId\":\"616376654496877056\",\n    //         \"clientOrderId\":\"158821382304516955\",\n    //         \"transactTime\":\"1588213823080\",\n    //         \"price\":\"0\",\n    //         \"origQty\":\"1000\",\n    //         \"executedQty\":\"0\",\n    //         \"status\":\"NEW\",\n    //         \"timeInForce\":\"GTC\",\n    //         \"type\":\"MARKET\",\n    //         \"side\":\"BUY\"\n    //     }\n    //\n    // fetchOrder, fetchOpenOrders, fetchClosedOrders\n    //\n    // spot\n    //\n    //     {\n    //         \"orderId\":\"616384027202542080\",\n    //         \"clientOrderId\":\"158821470194414688\",\n    //         \"exchangeId\":\"301\",\n    //         \"symbol\":\"TBTCBUSDT\",\n    //         \"price\":\"0\",\n    //         \"origQty\":\"0.1\",\n    //         \"executedQty\":\"0.1\",\n    //         \"cummulativeQuoteQty\":\"682.606\",\n    //         \"avgPrice\":\"6826.06\",\n    //         \"status\":\"FILLED\",\n    //         \"timeInForce\":\"GTC\",\n    //         \"type\":\"MARKET\",\n    //         \"side\":\"SELL\",\n    //         \"stopPrice\":\"0.0\",\n    //         \"icebergQty\":\"0.0\",\n    //         \"time\":\"1588214701974\",\n    //         \"updateTime\":\"0\",\n    //         \"isWorking\":true\n    //     }\n    //\n    // future\n    //\n    //     {\n    //         time: \"1588353669383\",\n    //         updateTime: \"0\",\n    //         orderId: \"617549770304599296\",\n    //         clientOrderId: \"test-001\",\n    //         symbol: \"BTC-PERP-REV\",\n    //         price: \"10000\",\n    //         leverage: \"1\",\n    //         origQty: \"100\",\n    //         executedQty: \"0\",\n    //         avgPrice: \"0\",\n    //         marginLocked: \"0\",\n    //         orderType: \"LIMIT\",\n    //         side: \"SELL_OPEN\",\n    //         fees: [],\n    //         timeInForce: \"GTC\",\n    //         status: \"CANCELED\",\n    //         priceType: \"INPUT\"\n    //     }\n    //\n    //\n    const id = this.safeString(order, 'orderId');\n    const clientOrderId = this.safeString(order, 'clientOrderId');\n    let timestamp = this.safeInteger(order, 'time');\n\n    if (timestamp === undefined) {\n      timestamp = this.safeInteger(order, 'transactTime');\n    }\n\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    let type = this.safeStringLower(order, 'type');\n    const side = this.safeStringLower(order, 'side');\n    let price = this.safeNumber(order, 'price');\n    let average = this.safeNumber(order, 'avgPrice');\n    let amount = undefined;\n    let cost = this.safeNumber(order, 'cummulativeQuoteQty');\n    let filled = undefined;\n    let remaining = undefined;\n\n    if (type === undefined) {\n      type = this.safeStringLower(order, 'orderType');\n\n      if (market !== undefined && market['inverse']) {\n        cost = this.safeNumber(order, 'executedQty');\n        amount = undefined;\n      }\n\n      if (cost === 0.0) {\n        filled = 0;\n      }\n    } else {\n      amount = this.safeNumber(order, 'origQty');\n\n      if (type === 'market') {\n        price = undefined;\n\n        if (side === 'buy') {\n          amount = undefined;\n        }\n      }\n\n      filled = this.safeNumber(order, 'executedQty');\n\n      if (filled !== undefined) {\n        if (amount !== undefined) {\n          remaining = amount - filled;\n        }\n      }\n    }\n\n    if (average === 0.0) {\n      average = undefined;\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const timeInForce = this.safeString(order, 'timeInForce');\n    const stopPrice = this.safeNumber(order, 'stopPrice');\n    const result = {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'average': average,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'trades': undefined,\n      'fee': undefined,\n      'fees': undefined\n    };\n    const fees = this.safeValue(order, 'fees', []);\n    const numFees = fees.length;\n\n    if (numFees > 0) {\n      result['fees'] = [];\n\n      for (let i = 0; i < fees.length; i++) {\n        const feeCost = this.safeNumber(fees[i], 'fee');\n\n        if (feeCost !== undefined) {\n          const feeCurrencyId = this.safeString(fees[i], 'feeToken');\n          const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n          result['fees'].push({\n            'cost': feeCost,\n            'currency': feeCurrencyCode\n          });\n        }\n      }\n    }\n\n    return result;\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'NEW': 'open',\n      'CANCELED': 'canceled',\n      'FILLED': 'closed',\n      'PARTIALLY_FILLED': 'open',\n      'PENDING_CANCEL': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n    const isPublicContract = api === 'contract' && (path === 'insurance' || path === 'fundingRate');\n\n    if (api === 'public' || api === 'quote' || isPublicContract) {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      const timestamp = this.milliseconds();\n      this.checkRequiredCredentials();\n      const request = this.extend({\n        'timestamp': timestamp\n      }, query); // 准备待签名数据\n\n      const auth = this.urlencode(request);\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha256');\n      request['signature'] = signature;\n      headers = {\n        'X-BH-APIKEY': this.apiKey\n      };\n\n      if (method === 'POST') {\n        body = this.urlencode(request);\n        headers = this.extend({\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }, headers);\n      } else {\n        url += '?' + this.urlencode(request);\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('code' in response) {\n      const code = this.safeString(response, 'code');\n\n      if (code !== '0') {\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/hbtc.js"],"names":["Exchange","require","AuthenticationError","ExchangeError","OrderNotFound","ArgumentsRequired","BadSymbol","BadRequest","NullResponse","InvalidOrder","BadResponse","NotSupported","ExchangeNotAvailable","RequestTimeout","RateLimitExceeded","PermissionDenied","InsufficientFunds","InvalidAddress","TICK_SIZE","TRUNCATE","Precise","module","exports","hbtc","describe","deepExtend","fetchTime","params","response","publicGetTime","safeInteger","parseMarket","market","type","filters","safeValue","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","spot","future","option","inverse","margin","undefined","isAggregate","active","amountMin","priceMin","priceMax","costMin","pricePrecision","amountPrecision","j","length","filter","filterType","safeNumber","precision","safeNumber2","limits","fetchMarkets","publicGetBrokerInfo","result","symbols","i","push","options","contracts","fetchOrderBook","limit","loadMarkets","request","quoteGetDepth","extend","timestamp","parseOrderBook","fetchTicker","quoteGetTicker24hr","parseTicker","fetchBidAsk","quoteGetTickerBookTicker","fetchBidsAsks","parseTickers","fetchTickers","defaultMethod","defaultType","query","omit","method","fetchBalance","balances","balance","currencyId","safeString2","code","account","currencyIds","Object","keys","parseBalance","fetchTrades","since","quoteGetTrades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","quoteGetKlines","parseOHLCVs","fetchMyTrades","fetchMyTradesType","createOrder","side","amount","price","orderSide","toUpperCase","orderType","clientOrderId","leverage","priceType","priceToPrecision","amountToPrecision","newClientOrderId","safeValue2","createMarketBuyOrderRequiresPrice","decimalToPrecision","precisionMode","parseOrder","cancelOrder","cancelOrderType","fetchOpenOrders","fetchOpenOrdersType","parseOrders","fetchClosedOrders","fetchClosedOrdersType","fetchOrder","fetchOrderType","fetchDeposits","currency","privateGetDepositOrders","parseTransactions","fetchWithdrawals","privateGetWithdrawalOrders","withdraw","address","tag","checkAddress","uuid","privatePostWithdraw","fetchAccounts","privatePostSubAccountQuery","accountId","accountType","fetchLedger","privateGetBalanceFlow","parseLedger","parseLedgerEntry","item","after","direction","before","difference","sum","parseLedgerEntryType","iso8601","types","parseTransactionStatus","status","statuses","parseTransaction","transaction","addressFrom","tagFrom","txid","feeCost","fee","feeCurrencyId","feeCurrencyCode","ticker","marketId","safeSymbol","open","close","change","percentage","average","quoteVolume","baseVolume","vwap","parseTrade","trade","orderId","priceString","amountString","parseNumber","cost","stringMul","takerOrMaker","isMaker","isBuyer","order","safeStringLower","filled","remaining","parseOrderStatus","timeInForce","stopPrice","fees","numFees","sign","path","api","headers","body","url","urls","version","implodeParams","extractParams","isPublicContract","urlencode","milliseconds","checkRequiredCredentials","auth","signature","hmac","encode","secret","apiKey","handleErrors","httpCode","reason","requestHeaders","requestBody","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { AuthenticationError, ExchangeError, OrderNotFound, ArgumentsRequired, BadSymbol, BadRequest, NullResponse, InvalidOrder, BadResponse, NotSupported, ExchangeNotAvailable, RequestTimeout, RateLimitExceeded, PermissionDenied, InsufficientFunds, InvalidAddress } = require ('./base/errors');\nconst { TICK_SIZE, TRUNCATE } = require ('./base/functions/number');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class hbtc extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'hbtc',\n            'name': 'HBTC',\n            'countries': [ 'CN' ],\n            'rateLimit': 2000,\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchAccounts': true,\n                'fetchBalance': true,\n                'fetchBidAsk': true,\n                'fetchBidsAsks': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': false,\n                'fetchDepositAddress': false,\n                'fetchDeposits': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': false,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTradingLimits': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '3m': '3m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '2h': '2h',\n                '4h': '4h',\n                '6h': '6h',\n                '8h': '8h',\n                '12h': '12h',\n                '1d': '1d',\n                '3d': '3d',\n                '1w': '1w',\n                '1M': '1M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/80134449-70663300-85a7-11ea-8942-e204cdeaab5d.jpg', // 交易所LOGO\n                'api': {\n                    'quote': 'https://api.hbtc.com/openapi/quote', // 市场API数据端点\n                    'contract': 'https://api.hbtc.com/openapi/contract', // 合约API数据端点\n                    'option': 'https://api.hbtc.com/openapi/option', // 合约API数据端点\n                    'public': 'https://api.hbtc.com/openapi', // 公共API数据端点\n                    'private': 'https://api.hbtc.com/openapi', // 私有API数据端点\n                    'zendesk': 'https://hbtc.zendesk.com/hc/en-us',\n                },\n                'www': 'https://www.hbtc.com', // 公司主页\n                'referral': 'https://www.hbtc.com/register/O2S8NS', // 邀请链接\n                'doc': 'https://github.com/bhexopen/BHEX-OpenApi/tree/master/doc', // openapi文档地址\n                'fees': 'https://hbtc.zendesk.com/hc/zh-cn/articles/360009274694', // 费率介绍\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ping',\n                        'time',\n                        'brokerInfo', // 查询当前broker交易规则和symbol信息\n                        'getOptions',\n                    ],\n                },\n                'quote': {\n                    'get': [\n                        'depth', // 获取深度\n                        'depth/merged',\n                        'trades', // 获取当前最新成交\n                        'klines', // 获取K线数据\n                        'ticker/24hr', // 获取24小时价格变化数据\n                        'ticker/price',\n                        'ticker/bookTicker',\n                        'contract/index', // 获取合约标的指数价格\n                        'contract/depth', // 获取合约深度\n                        'contract/depth/merged',\n                        'contract/trades', // 获取合约最近成交,\n                        'contract/klines', // 获取合约的K线数据\n                        'contract/ticker/24hr',\n                        'option/index',\n                        'option/depth',\n                        'option/depth/merged',\n                        'option/trades',\n                        'option/klines',\n                        'option/ticker/24hr',\n                    ],\n                },\n                'contract': {\n                    'get': [\n                        // public\n                        'insurance',\n                        'fundingRate', // 获取资金费率信息\n                        // private\n                        'openOrders', // 查询合约当前委托\n                        'historyOrders', // 查询合约历史委托\n                        'getOrder', // 查询合约订单详情\n                        'myTrades', // 查询合约历史成交\n                        'positions', // 查询合约当前持仓\n                        'account', // 查询合约账户信息\n                    ],\n                    'post': [\n                        'order', // 创建合约订单\n                        'modifyMargin', // 修改保证金\n                    ],\n                    'delete': [\n                        'order/cancel', // 取消合约订单\n                        'order/batchCancel',\n                    ],\n                },\n                'option': {\n                    'get': [\n                        'openOrders',\n                        'positions',\n                        'historyOrders',\n                        // 'getOrder',\n                        'myTrades',\n                        'settlements',\n                        'account',\n                    ],\n                    'post': [\n                        'order',\n                    ],\n                    'delete': [\n                        'order/cancel',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'order', // 查询订单\n                        'openOrders', // 查询当前委托\n                        'historyOrders', // 查询历史委托\n                        'account', // 获取当前账户信息\n                        'myTrades', // 查询历史成交\n                        'depositOrders',\n                        'withdrawalOrders',\n                        'withdraw/detail',\n                        'balance_flow',\n                    ],\n                    'post': [\n                        'order', // 创建新订单\n                        'order/test',\n                        'userDataStream',\n                        'subAccount/query',\n                        'transfer',\n                        'user/transfer',\n                        'withdraw',\n                    ],\n                    'put': [\n                        'userDataStream',\n                    ],\n                    'delete': [\n                        'order', // 取消订单\n                        'userDataStream',\n                    ],\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.001,\n                    'taker': 0.001,\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    // general server or network errors\n                    '-1000': ExchangeError, // An unknown error occured while processing the request\n                    '-1001': ExchangeError, // Internal error, unable to process your request. Please try again\n                    '-1002': AuthenticationError, // You are not authorized to execute this request. Request need API Key included in. We suggest that API Key be included in any request\n                    '-1003': RateLimitExceeded, // Too many requests, please use the websocket for live updates\n                    '-1004': BadRequest,\n                    '-1005': PermissionDenied,\n                    '-1006': BadResponse, // An unexpected response was received from the message bus. Execution status unknown. OPEN API server find some exception in execute request.Please report to Customer service\n                    '-1007': RequestTimeout, // Timeout waiting for response from backend server. Send status unknown, execution status unknown\n                    '-1014': InvalidOrder, // Unsupported order combination\n                    '-1015': RateLimitExceeded, // Reach the rate limit.Please slow down your request speed\n                    '-1016': ExchangeNotAvailable, // This service is no longer available\n                    '-1020': NotSupported, // This operation is not supported\n                    '-1021': BadRequest, // Timestamp for this request is outside of the recvWindow\n                    '-1022': AuthenticationError, // Signature for this request is not valid\n                    // request issues\n                    '-1100': BadRequest, // Illegal characters found in a parameter\n                    '-1101': BadRequest, // Too many parameters sent for this endpoint\n                    '-1102': BadRequest, // A mandatory parameter was not sent, was empty/null, or malformed\n                    '-1103': BadRequest, // An unknown parameter was sent\n                    '-1104': BadRequest, // Not all sent parameters were read\n                    '-1105': BadRequest, // A parameter was empty\n                    '-1106': BadRequest, // A parameter was sent when not required\n                    '-1111': BadRequest, // Precision is over the maximum defined for this asset\n                    '-1112': NullResponse, // No orders on book for symbol\n                    '-1114': InvalidOrder, // TimeInForce parameter sent when not required\n                    '-1115': InvalidOrder, // Invalid timeInForce\n                    '-1116': InvalidOrder, // Invalid orderType\n                    '-1117': InvalidOrder, // Invalid side\n                    '-1118': InvalidOrder, // New client order ID was empty\n                    '-1119': InvalidOrder, // Original client order ID was empty\n                    '-1120': BadRequest, // Invalid interval\n                    '-1121': BadSymbol, // Invalid symbol\n                    '-1125': AuthenticationError, // This listenKey does not exist\n                    '-1127': BadRequest, // Lookup interval is too big\n                    '-1128': BadRequest, // Combination of optional parameters invalid\n                    '-1130': BadRequest, // Invalid data sent for a parameter\n                    '-1131': InsufficientFunds,\n                    '-1132': InvalidOrder, // Order price too high\n                    '-1133': InvalidOrder, // Order price lower than the minimum,please check general broker info\n                    '-1134': InvalidOrder, // Order price decimal too long,please check general broker info\n                    '-1135': InvalidOrder, // Order quantity too large\n                    '-1136': InvalidOrder, // Order quantity lower than the minimum\n                    '-1137': InvalidOrder, // Order quantity decimal too long\n                    '-1138': InvalidOrder, // Order price exceeds permissible range\n                    '-1139': InvalidOrder, // Order has been filled\n                    '-1140': InvalidOrder, // Transaction amount lower than the minimum\n                    '-1141': InvalidOrder, // Duplicate clientOrderId\n                    '-1142': InvalidOrder, // Order has been canceled\n                    '-1143': OrderNotFound, // Cannot be found on order book\n                    '-1144': InvalidOrder, // Order has been locked\n                    '-1145': InvalidOrder, // This order type does not support cancellation\n                    '-1146': RequestTimeout, // Order creation timeout\n                    '-1147': RequestTimeout, // Order cancellation timeout\n                    '-1149': InvalidOrder, // Create order failed\n                    '-1187': InvalidAddress, // Withdrawal address not in whitelist\n                    '-2010': InvalidOrder, // NEW_ORDER_REJECTED\n                    '-2011': InvalidOrder, // CANCEL_REJECTED\n                    '-2013': OrderNotFound, // Order does not exist\n                    '-2014': AuthenticationError, // API-key format invalid\n                    '-2015': AuthenticationError, // Invalid API-key, IP, or permissions for action\n                    '-2016': ExchangeError, // No trading window could be found for the symbol. Try ticker/24hrs instead\n                },\n            },\n            // exchange-specific options\n            'options': {\n                'fetchTickers': {\n                    'method': 'quoteGetTicker24hr',\n                },\n            },\n            'commonCurrencies': {\n                'MIS': 'Themis Protocol',\n            },\n        });\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTime (params);\n        //\n        //     {\n        //         \"serverTime\": 1527777538000\n        //     }\n        //\n        return this.safeInteger (response, 'serverTime');\n    }\n\n    parseMarket (market, type = 'spot') {\n        const filters = this.safeValue (market, 'filters', []);\n        const id = this.safeString (market, 'symbol');\n        let baseId = this.safeString (market, 'baseAsset');\n        const quoteId = this.safeString (market, 'quoteAsset');\n        let base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        let symbol = base + '/' + quote;\n        let spot = true;\n        let future = false;\n        let option = false;\n        let inverse = false;\n        if (type === 'future') {\n            symbol = id;\n            spot = false;\n            future = true;\n            inverse = this.safeValue (market, 'inverse', false);\n            baseId = this.safeString (market, 'underlying');\n            base = this.safeCurrencyCode (baseId);\n        } else if (type === 'option') {\n            symbol = id;\n            spot = false;\n            option = true;\n        }\n        const margin = this.safeValue (market, 'allowMargin', undefined);\n        const isAggregate = this.safeValue (market, 'isAggregate', undefined);\n        let active = true;\n        if (isAggregate === true) {\n            active = false;\n        }\n        let amountMin = undefined;\n        let priceMin = undefined;\n        let priceMax = undefined;\n        let costMin = undefined;\n        let pricePrecision = undefined;\n        let amountPrecision = undefined;\n        for (let j = 0; j < filters.length; j++) {\n            const filter = filters[j];\n            const filterType = this.safeString (filter, 'filterType');\n            if (filterType === 'LOT_SIZE') {\n                amountMin = this.safeNumber (filter, 'minQty');\n                amountPrecision = this.safeNumber (filter, 'stepSize');\n            }\n            if (filterType === 'PRICE_FILTER') {\n                priceMin = this.safeNumber (filter, 'minPrice');\n                priceMax = this.safeNumber (filter, 'maxPrice');\n                pricePrecision = this.safeNumber (filter, 'tickSize');\n            }\n        }\n        if ((amountMin !== undefined) && (priceMin !== undefined)) {\n            costMin = amountMin * priceMin;\n        }\n        const precision = {\n            'price': pricePrecision,\n            'amount': amountPrecision,\n            'base': this.safeNumber (market, 'baseAssetPrecision'),\n            'quote': this.safeNumber2 (market, 'quotePrecision', 'quoteAssetPrecision'),\n        };\n        const limits = {\n            'amount': {\n                'min': amountMin,\n                'max': undefined,\n            },\n            'price': {\n                'min': priceMin,\n                'max': priceMax,\n            },\n            'cost': {\n                'min': costMin,\n                'max': undefined,\n            },\n        };\n        return {\n            'id': id,\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n            'active': active,\n            'type': type,\n            'spot': spot,\n            'future': future,\n            'option': option,\n            'margin': margin,\n            'inverse': inverse,\n            'precision': precision,\n            'limits': limits,\n            'info': market,\n        };\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetBrokerInfo (params);\n        //\n        //     {\n        //         \"timezone\":\"UTC\",\n        //         \"serverTime\":\"1588015885118\",\n        //         \"brokerFilters\":[],\n        //         \"symbols\":[\n        //             {\n        //                 \"filters\":[\n        //                     {\"minPrice\":\"0.01\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.01\",\"filterType\":\"PRICE_FILTER\"},\n        //                     {\"minQty\":\"0.0005\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"0.000001\",\"filterType\":\"LOT_SIZE\"},\n        //                     {\"minNotional\":\"0.01\",\"filterType\":\"MIN_NOTIONAL\"}\n        //                 ],\n        //                 \"exchangeId\":\"301\",\n        //                 \"symbol\":\"BTCUSDT\",\n        //                 \"symbolName\":\"BTCUSDT\",\n        //                 \"status\":\"TRADING\",\n        //                 \"baseAsset\":\"BTC\",\n        //                 \"baseAssetName\":\"BTC\",\n        //                 \"baseAssetPrecision\":\"0.000001\",\n        //                 \"quoteAsset\":\"USDT\",\n        //                 \"quoteAssetName\":\"USDT\",\n        //                 \"quotePrecision\":\"0.01\",\n        //                 \"icebergAllowed\":false,\n        //                 \"isAggregate\":false,\n        //                 \"allowMargin\":true\n        //            },\n        //         ],\n        //         \"options\":[\n        //             {\n        //                 \"filters\":[\n        //                     {\"minPrice\":\"0.01\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.01\",\"filterType\":\"PRICE_FILTER\"},\n        //                     {\"minQty\":\"0.01\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"0.001\",\"filterType\":\"LOT_SIZE\"},\n        //                     {\"minNotional\":\"1\",\"filterType\":\"MIN_NOTIONAL\"}\n        //                 ],\n        //                 \"exchangeId\":\"301\",\n        //                 \"symbol\":\"BTC0501CS8500\",\n        //                 \"symbolName\":\"BTC0501CS8500\",\n        //                 \"status\":\"TRADING\",\n        //                 \"baseAsset\":\"BTC0501CS8500\",\n        //                 \"baseAssetName\":\"BTC0306CS3800\",\n        //                 \"baseAssetPrecision\":\"0.001\",\n        //                 \"quoteAsset\":\"BUSDT\",\n        //                 \"quoteAssetName\":\"BUSDT\",\n        //                 \"quotePrecision\":\"0.01\",\n        //                 \"icebergAllowed\":false\n        //                 \"isAggregate\":false,\n        //                 \"allowMargin\":false\n        //             },\n        //         ],\n        //         \"contracts\":[\n        //             {\n        //                 \"filters\":[\n        //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.1\",\"filterType\":\"PRICE_FILTER\"},\n        //                     {\"minQty\":\"1\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\"},\n        //                     {\"minNotional\":\"0.000001\",\"filterType\":\"MIN_NOTIONAL\"}\n        //                 ],\n        //                 \"exchangeId\":\"301\",\n        //                 \"symbol\":\"BTC-PERP-REV\",\n        //                 \"symbolName\":\"BTC-PERP-REV\",\n        //                 \"status\":\"TRADING\",\n        //                 \"baseAsset\":\"BTC-PERP-REV\",\n        //                 \"baseAssetPrecision\":\"1\",\n        //                 \"quoteAsset\":\"USDT\",\n        //                 \"quoteAssetPrecision\":\"0.1\",\n        //                 \"icebergAllowed\":false,\n        //                 \"inverse\":true,\n        //                 \"index\":\"BTCUSDT\",\n        //                 \"marginToken\":\"TBTC\",\n        //                 \"marginPrecision\":\"0.00000001\",\n        //                 \"contractMultiplier\":\"1.0\",\n        //                 \"underlying\":\"TBTC\",\n        //                 \"riskLimits\":[\n        //                     {\"riskLimitId\":\"200000001\",\"quantity\":\"1000000.0\",\"initialMargin\":\"0.01\",\"maintMargin\":\"0.005\"},\n        //                     {\"riskLimitId\":\"200000002\",\"quantity\":\"2000000.0\",\"initialMargin\":\"0.02\",\"maintMargin\":\"0.01\"},\n        //                     {\"riskLimitId\":\"200000003\",\"quantity\":\"3000000.0\",\"initialMargin\":\"0.03\",\"maintMargin\":\"0.015\"},\n        //                     {\"riskLimitId\":\"200000004\",\"quantity\":\"4000000.0\",\"initialMargin\":\"0.04\",\"maintMargin\":\"0.02\"}\n        //                 ]\n        //             },\n        //             {\n        //                 \"filters\":[\n        //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.1\",\"filterType\":\"PRICE_FILTER\"},\n        //                     {\"minQty\":\"1\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\"},\n        //                     {\"minNotional\":\"0.000001\",\"filterType\":\"MIN_NOTIONAL\"}\n        //                 ],\n        //                 \"exchangeId\":\"301\",\n        //                 \"symbol\":\"BTC-SWAP\",\n        //                 \"symbolName\":\"BTC-SWAP\",\n        //                 \"status\":\"TRADING\",\n        //                 \"baseAsset\":\"BTC-SWAP\",\n        //                 \"baseAssetPrecision\":\"1\",\n        //                 \"quoteAsset\":\"USDT\",\n        //                 \"quoteAssetPrecision\":\"0.1\",\n        //                 \"icebergAllowed\":false,\n        //                 \"inverse\":true,\n        //                 \"index\":\"BTCUSDT\",\n        //                 \"marginToken\":\"BTC\",\n        //                 \"marginPrecision\":\"0.00000001\",\n        //                 \"contractMultiplier\":\"1.0\",\n        //                 \"underlying\":\"BTC\",\n        //                 \"riskLimits\":[\n        //                     {\"riskLimitId\":\"500000001\",\"quantity\":\"1000000.0\",\"initialMargin\":\"0.01\",\"maintMargin\":\"0.005\"},\n        //                     {\"riskLimitId\":\"500000002\",\"quantity\":\"2000000.0\",\"initialMargin\":\"0.02\",\"maintMargin\":\"0.01\"},\n        //                     {\"riskLimitId\":\"500000003\",\"quantity\":\"3000000.0\",\"initialMargin\":\"0.03\",\"maintMargin\":\"0.015\"},\n        //                     {\"riskLimitId\":\"500000004\",\"quantity\":\"4000000.0\",\"initialMargin\":\"0.04\",\"maintMargin\":\"0.02\"}\n        //                 ]\n        //             },\n        //             {\n        //                 \"filters\":[\n        //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.1\",\"filterType\":\"PRICE_FILTER\"},\n        //                     {\"minQty\":\"1\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\"},\n        //                     {\"minNotional\":\"0.000000001\",\"filterType\":\"MIN_NOTIONAL\"}\n        //                 ],\n        //                 \"exchangeId\":\"301\",\n        //                 \"symbol\":\"BTC-PERP-BUSDT\",\n        //                 \"symbolName\":\"BTC-PERP-BUSDT\",\n        //                 \"status\":\"TRADING\",\n        //                 \"baseAsset\":\"BTC-PERP-BUSDT\",\n        //                 \"baseAssetPrecision\":\"1\",\n        //                 \"quoteAsset\":\"BUSDT\",\n        //                 \"quoteAssetPrecision\":\"0.1\",\n        //                 \"icebergAllowed\":false,\n        //                 \"inverse\":false,\n        //                 \"index\":\"BTCUSDT\",\n        //                 \"marginToken\":\"BUSDT\",\n        //                 \"marginPrecision\":\"0.0001\",\n        //                 \"contractMultiplier\":\"0.0001\",\n        //                 \"underlying\":\"TBTC\",\n        //                 \"riskLimits\":[\n        //                     {\"riskLimitId\":\"600000132\",\"quantity\":\"1000000.0\",\"initialMargin\":\"0.01\",\"maintMargin\":\"0.005\"},\n        //                     {\"riskLimitId\":\"600000133\",\"quantity\":\"2000000.0\",\"initialMargin\":\"0.02\",\"maintMargin\":\"0.01\"},\n        //                     {\"riskLimitId\":\"600000134\",\"quantity\":\"3000000.0\",\"initialMargin\":\"0.03\",\"maintMargin\":\"0.015\"},\n        //                     {\"riskLimitId\":\"600000135\",\"quantity\":\"4000000.0\",\"initialMargin\":\"0.04\",\"maintMargin\":\"0.02\"}\n        //                 ]\n        //             },\n        //         ]\n        //     }\n        //\n        const result = [];\n        const symbols = this.safeValue (response, 'symbols', []);\n        for (let i = 0; i < symbols.length; i++) {\n            const market = this.parseMarket (symbols[i], 'spot');\n            result.push (market);\n        }\n        const options = this.safeValue (response, 'options', []);\n        for (let i = 0; i < options.length; i++) {\n            const market = this.parseMarket (options[i], 'option');\n            result.push (market);\n        }\n        const contracts = this.safeValue (response, 'contracts', []);\n        for (let i = 0; i < contracts.length; i++) {\n            const market = this.parseMarket (contracts[i], 'future');\n            result.push (market);\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 40, max 40\n        }\n        const response = await this.quoteGetDepth (this.extend (request, params));\n        //\n        //     {\n        //         \"time\":1588068913453,\n        //         \"bids\":[\n        //             [\"0.025278\",\"0.0202\"],\n        //             [\"0.025277\",\"16.1132\"],\n        //             [\"0.025276\",\"7.9056\"],\n        //         ]\n        //         \"asks\":[\n        //             [\"0.025302\",\"5.9999\"],\n        //             [\"0.025303\",\"34.9151\"],\n        //             [\"0.025304\",\"92.391\"],\n        //         ]\n        //     }\n        //\n        const timestamp = this.safeInteger (response, 'time');\n        return this.parseOrderBook (response, symbol, timestamp);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.quoteGetTicker24hr (this.extend (request, params));\n        //\n        //     {\n        //         \"time\":1588069860794,\n        //         \"symbol\":\"BNB0501PS16\",\n        //         \"bestBidPrice\":\"0.2129\",\n        //         \"bestAskPrice\":\"0.3163\",\n        //         \"volume\":\"33547\",\n        //         \"quoteVolume\":\"10801.987\",\n        //         \"lastPrice\":\"0.2625\",\n        //         \"highPrice\":\"0.3918\",\n        //         \"lowPrice\":\"0.2625\",\n        //         \"openPrice\":\"0.362\",\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchBidAsk (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.quoteGetTickerBookTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"symbol\": \"LTCBTC\",\n        //         \"bidPrice\": \"4.00000000\",\n        //         \"bidQty\": \"431.00000000\",\n        //         \"askPrice\": \"4.00000200\",\n        //         \"askQty\": \"9.00000000\"\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchBidsAsks (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.quoteGetTickerBookTicker (params);\n        //\n        //     [\n        //         {\n        //             \"symbol\": \"LTCBTC\",\n        //             \"bidPrice\": \"4.00000000\",\n        //             \"bidQty\": \"431.00000000\",\n        //             \"askPrice\": \"4.00000200\",\n        //             \"askQty\": \"9.00000000\"\n        //         },\n        //         {\n        //             \"symbol\": \"ETHBTC\",\n        //             \"bidPrice\": \"0.07946700\",\n        //             \"bidQty\": \"9.00000000\",\n        //             \"askPrice\": \"100000.00000000\",\n        //             \"askQty\": \"1000.00000000\"\n        //         },\n        //     ]\n        //\n        return this.parseTickers (response, symbols);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const options = this.safeValue (this.options, 'fetchTickers', {});\n        const defaultMethod = this.safeString (options, 'method', 'quoteGetTicker24hr');\n        const defaultType = this.safeString (options, 'type', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        let method = defaultMethod;\n        if (type === 'future') {\n            method = 'quoteGetContractTicker24hr';\n        } else if (type === 'option') {\n            method = 'quoteGetOptionTicker24hr';\n        }\n        const response = await this[method] (query);\n        //\n        //     [\n        //         {\n        //             \"time\": 1538725500422,\n        //             \"symbol\": \"ETHBTC\",\n        //             \"lastPrice\": \"4.00000200\",\n        //             \"openPrice\": \"99.00000000\",\n        //             \"highPrice\": \"100.00000000\",\n        //             \"lowPrice\": \"0.10000000\",\n        //             \"volume\": \"8913.30000000\"\n        //         },\n        //     ]\n        //\n        return this.parseTickers (response, symbols);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const options = this.safeValue (this.options, 'fetchBalance', {});\n        const defaultType = this.safeString (options, 'type', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        let method = 'privateGetAccount';\n        if (type === 'future') {\n            method = 'contractGetAccount';\n        } else if (type === 'option') {\n            method = 'optionGetAccount';\n        }\n        const response = await this[method] (query);\n        //\n        // spot\n        //\n        //     {\n        //         'balances': [\n        //             {\n        //                 'asset': 'ALGO',\n        //                 'free': '0',\n        //                 'locked': '0'\n        //             },\n        //             {\n        //                 'asset': 'BHT',\n        //                 'free': '0',\n        //                 'locked': '0'\n        //             }\n        //         ]\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         \"BUSDT\":{\n        //             \"total\":\"1000\",\n        //             \"availableMargin\":\"1000\",\n        //             \"positionMargin\":\"0\",\n        //             \"orderMargin\":\"0\",\n        //             \"tokenId\":\"BUSDT\"\n        //         },\n        //         \"TBTC\":{\n        //             \"total\":\"0.5\",\n        //             \"availableMargin\":\"0.5\",\n        //             \"positionMargin\":\"0\",\n        //             \"orderMargin\":\"0\",\n        //             \"tokenId\":\"TBTC\"\n        //         }\n        //     }\n        //\n        // option\n        //\n        //     {\n        //         \"optionAsset\":\"\",\n        //         \"balances\":[\n        //             {\n        //                 \"tokenName\":\"USDT\",\n        //                 \"free\":\"0.0\",\n        //                 \"locked\":\"0.0\",\n        //                 \"margin\":\"0.0\"\n        //             },\n        //             {\n        //                 \"tokenName\":\"BUSDT\",\n        //                 \"free\":\"0.0\",\n        //                 \"locked\":\"0.0\",\n        //                 \"margin\":\"0.0\"\n        //             }\n        //         ]\n        //     }\n        //\n        const balances = this.safeValue (response, 'balances');\n        const result = {\n            'info': response,\n            'timestamp': undefined,\n            'datetime': undefined,\n        };\n        if (balances !== undefined) {\n            for (let i = 0; i < balances.length; i++) {\n                const balance = balances[i];\n                const currencyId = this.safeString2 (balance, 'asset', 'tokenName');\n                const code = this.safeCurrencyCode (currencyId);\n                const account = this.account ();\n                account['free'] = this.safeString (balance, 'free');\n                account['used'] = this.safeString (balance, 'locked');\n                result[code] = account;\n            }\n        } else {\n            const currencyIds = Object.keys (response);\n            for (let i = 0; i < currencyIds.length; i++) {\n                const currencyId = currencyIds[i];\n                const code = this.safeCurrencyCode (currencyId);\n                const balance = response[currencyId];\n                const account = this.account ();\n                account['free'] = this.safeString (balance, 'availableMargin');\n                account['total'] = this.safeString (balance, 'total');\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = 50, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 500, max 1000\n        }\n        const response = await this.quoteGetTrades (this.extend (request, params));\n        //\n        //     [\n        //         {\"price\":\"0.025344\",\"time\":1588084082060,\"qty\":\"1\",\"isBuyerMaker\":false},\n        //         {\"price\":\"0.02535\",\"time\":1588084086021,\"qty\":\"0.553\",\"isBuyerMaker\":true},\n        //         {\"price\":\"0.025348\",\"time\":1588084097037,\"qty\":\"1\",\"isBuyerMaker\":false},\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1587906000000, // open time\n        //         \"0.1761\", // open\n        //         \"0.1761\", // high\n        //         \"0.1761\", // low\n        //         \"0.1761\", // close\n        //         \"0\", // base volume\n        //         0, // close time\n        //         \"0\", // quote volume\n        //         0, // number of trades\n        //         \"0\", // taker buy base asset volume\n        //         \"0\" // taker buy quote asset volume\n        //     ]\n        //\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeNumber (ohlcv, 1),\n            this.safeNumber (ohlcv, 2),\n            this.safeNumber (ohlcv, 3),\n            this.safeNumber (ohlcv, 4),\n            this.safeNumber (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'interval': this.timeframes[timeframe],\n        };\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 500, max 500\n        }\n        const response = await this.quoteGetKlines (this.extend (request, params));\n        //\n        //     [\n        //         [1587906000000,\"0.1761\",\"0.1761\",\"0.1761\",\"0.1761\",\"0\",0,\"0\",0,\"0\",\"0\"],\n        //         [1587906180000,\"0.1761\",\"0.1761\",\"0.1761\",\"0.1761\",\"0\",0,\"0\",0,\"0\",\"0\"],\n        //         [1587906360000,\"0.1761\",\"0.1848\",\"0.1761\",\"0.1848\",\"53\",0,\"9.7944\",1,\"0\",\"0\"],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            // if only fromId is set，it will get orders < that fromId in descending order\n            // if only toId is set, it will get orders > that toId in ascending order\n            // if fromId is set and toId is set, it will get orders < that fromId and > that toId in descending order\n            // if fromId is not set and toId it not set, most recent order are returned in descending order\n            // 'fromId': '43287482374',\n            // 'toId': '43287482374',\n            // 'endTime': this.milliseconds (), // optional, spot only\n        };\n        const defaultType = this.safeString (this.options, 'type', 'spot');\n        const options = this.safeValue (this.options, 'fetchMyTrades', {});\n        const fetchMyTradesType = this.safeString (options, 'type', defaultType);\n        let type = this.safeString (params, 'type', fetchMyTradesType);\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            type = market['type'];\n        }\n        const query = this.omit (params, 'type');\n        if (limit !== undefined) {\n            // spot default 500, max 1000\n            // futures and options default 20, max 1000\n            request['limit'] = limit;\n        }\n        let method = 'privateGetMyTrades';\n        if (type === 'future') {\n            method = 'contractGetMyTrades';\n        } else {\n            if (type === 'option') {\n                method = 'optionGetMyTrades';\n            } else {\n                if (symbol === undefined) {\n                    throw new ArgumentsRequired (this.id + ' fetchMyTrades() requires a `symbol` argument for ' + type + ' markets');\n                }\n                const market = this.market (symbol);\n                request['symbol'] = market['id'];\n                // spot only?\n                if (since !== undefined) {\n                    request['startTime'] = since;\n                }\n            }\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        const response = await this[method] (this.extend (request, query));\n        //\n        // spot\n        //\n        //     [\n        //         {\n        //             \"id\":\"616384027512920576\",\n        //             \"symbol\":\"TBTCBUSDT\",\n        //             \"orderId\":\"616384027202542080\",\n        //             \"matchOrderId\":\"605124954767266560\",\n        //             \"price\":\"6826.06\",\n        //             \"qty\":\"0.1\",\n        //             \"commission\":\"0.682606\",\n        //             \"commissionAsset\":\"BUSDT\",\n        //             \"time\":\"1588214701982\",\n        //             \"isBuyer\":false,\n        //             \"isMaker\":false,\n        //             \"fee\":{\n        //                 \"feeTokenId\":\"BUSDT\",\n        //                 \"feeTokenName\":\"BUSDT\",\n        //                 \"fee\":\"0.682606\"\n        //             }\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const orderSide = side.toUpperCase ();\n        const orderType = type.toUpperCase ();\n        const request = {\n            'symbol': market['id'],\n            // BUY or SELL for spot and options\n            'side': orderSide,\n            // GTC, FOK, IOC for spot and options\n            // GTC, FOK, IOC, LIMIT_MAKER for futures\n            // 'timeInForce': 'GTC',\n        };\n        let query = params;\n        let method = 'privatePostOrder';\n        if (market['type'] === 'future') {\n            if ((orderSide !== 'BUY_OPEN') && (orderSide !== 'SELL_OPEN') && (orderSide !== 'BUY_CLOSE') && (orderSide !== 'SELL_CLOSE')) {\n                throw new NotSupported (this.id + ' createOrder() does not support order side ' + side + ' for ' + market['type'] + ' markets, only BUY_OPEN, SELL_OPEN, BUY_CLOSE and SELL_CLOSE are supported');\n            }\n            if ((orderType !== 'LIMIT') && (orderType !== 'STOP')) {\n                throw new NotSupported (this.id + ' createOrder() does not support order type ' + type + ' for ' + market['type'] + ' markets, only LIMIT and STOP are supported');\n            }\n            const clientOrderId = this.safeValue (params, 'clientOrderId');\n            if (clientOrderId === undefined) {\n                throw new ArgumentsRequired (this.id + ' createOrder() requires a clientOrderId parameter for ' + market['type'] + ' markets, supply clientOrderId in the params argument');\n            }\n            const leverage = this.safeValue (params, 'leverage');\n            if (leverage === undefined && (orderSide === 'BUY_OPEN' || orderSide === 'SELL_OPEN')) {\n                throw new NotSupported (this.id + ' createOrder() requires a leverage parameter for ' + market['type'] + ' markets if orderSide is BUY_OPEN or SELL_OPEN');\n            }\n            method = 'contractPostOrder';\n            const priceType = this.safeString (params, 'priceType');\n            if (priceType === undefined) {\n                request['price'] = this.priceToPrecision (symbol, price);\n            } else {\n                request['priceType'] = priceType;\n                if (priceType === 'INPUT') {\n                    request['price'] = this.priceToPrecision (symbol, price);\n                }\n            }\n            request['orderType'] = type.toUpperCase (); // LIMIT, STOP\n            request['quantity'] = this.amountToPrecision (symbol, amount);\n            // request['leverage'] = 1; // not required for closing orders\n            request['leverage'] = leverage;\n            request['clientOrderId'] = clientOrderId;\n            // optional\n            // request['priceType'] = 'INPUT', // INPUT, OPPONENT, QUEUE, OVER, MARKET\n            // request['triggerPrice'] = 123.45;\n        } else {\n            if (market['type'] === 'option') {\n                method = 'optionPostOrder';\n            }\n            const newClientOrderId = this.safeValue2 (params, 'clientOrderId', 'newClientOrderId');\n            if (newClientOrderId !== undefined) {\n                request['newClientOrderId'] = newClientOrderId;\n            }\n            request['type'] = orderType;\n            if (type === 'limit') {\n                request['price'] = this.priceToPrecision (symbol, price);\n                request['quantity'] = this.amountToPrecision (symbol, amount);\n            } else if (type === 'market') {\n                // for market buy it requires the amount of quote currency to spend\n                if (side === 'buy') {\n                    const createMarketBuyOrderRequiresPrice = this.safeValue (this.options, 'createMarketBuyOrderRequiresPrice', true);\n                    if (createMarketBuyOrderRequiresPrice) {\n                        if (price !== undefined) {\n                            amount = amount * price;\n                        } else {\n                            throw new InvalidOrder (this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument (the exchange-specific behaviour)\");\n                        }\n                    }\n                    const precision = market['precision']['price'];\n                    request['quantity'] = this.decimalToPrecision (amount, TRUNCATE, precision, this.precisionMode);\n                } else {\n                    request['quantity'] = this.amountToPrecision (symbol, amount);\n                }\n            }\n        }\n        query = this.omit (query, [ 'clientOrderId', 'newClientOrderId' ]);\n        const response = await this[method] (this.extend (request, query));\n        //\n        // spot\n        //\n        //     {\n        //         \"symbol\":\"TBTCBUSDT\",\n        //         \"orderId\":\"616376654496877056\",\n        //         \"clientOrderId\":\"158821382304516955\",\n        //         \"transactTime\":\"1588213823080\",\n        //         \"price\":\"0\",\n        //         \"origQty\":\"1000\",\n        //         \"executedQty\":\"0\",\n        //         \"status\":\"NEW\",\n        //         \"timeInForce\":\"GTC\",\n        //         \"type\":\"MARKET\",\n        //         \"side\":\"BUY\"\n        //     }\n        //\n        // contract\n        //\n        //     {\n        //         'time': '1570759718825',\n        //         'updateTime': '0',\n        //         'orderId': '469961015902208000',\n        //         'clientOrderId': '6423344174',\n        //         'symbol': 'BTC-PERP-REV',\n        //         'price': '8200',\n        //         'leverage': '12.08',\n        //         'origQty': '5',\n        //         'executedQty': '0',\n        //         'avgPrice': '0',\n        //         'marginLocked': '0.00005047',\n        //         'orderType': 'LIMIT',\n        //         'side': 'BUY_OPEN',\n        //         'fees': [],\n        //         'timeInForce': 'GTC',\n        //         'status': 'NEW',\n        //         'priceType': 'INPUT'\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const clientOrderId = this.safeValue2 (params, 'origClientOrderId', 'clientOrderId');\n        const request = {};\n        const defaultType = this.safeString (this.options, 'type', 'spot');\n        const options = this.safeValue (this.options, 'cancelOrder', {});\n        const cancelOrderType = this.safeString (options, 'type', defaultType);\n        let type = this.safeString (params, 'type', cancelOrderType);\n        let query = this.omit (params, 'type');\n        if (clientOrderId !== undefined) {\n            request['origClientOrderId'] = clientOrderId;\n            query = this.omit (query, [ 'origClientOrderId', 'clientOrderId' ]);\n        } else {\n            request['orderId'] = id;\n        }\n        let method = 'privateDeleteOrder';\n        const orderType = this.safeString (query, 'orderType');\n        if (orderType !== undefined) {\n            type = 'future';\n        }\n        if (type === 'future') {\n            method = 'contractDeleteOrderCancel';\n            if (orderType === undefined) {\n                throw new ArgumentsRequired (this.id + \" cancelOrder() requires an orderType parameter, pass the { 'orderType': 'LIMIT' } or { 'orderType': 'STOP' } in params argument\");\n            }\n            request['orderType'] = orderType;\n        } else {\n            if (type === 'option') {\n                method = 'optionDeleteOrderCancel';\n            }\n        }\n        const response = await this[method] (this.extend (request, query));\n        //\n        // spot\n        //\n        //     {\n        //         'exchangeId': '301',\n        //         'symbol': 'BHTUSDT',\n        //         'clientOrderId': '0',\n        //         'orderId': '499890200602846976',\n        //         'status': 'CANCELED'\n        //     }\n        //\n        // futures\n        //\n        //     {\n        //         \"time\":\"1588353669383\",\n        //         \"updateTime\":\"0\",\n        //         \"orderId\":\"617549770304599296\",\n        //         \"clientOrderId\":\"test-001\",\n        //         \"symbol\":\"BTC-PERP-REV\",\n        //         \"price\":\"10000\",\n        //         \"leverage\":\"1\",\n        //         \"origQty\":\"100\",\n        //         \"executedQty\":\"0\",\n        //         \"avgPrice\":\"0\",\n        //         \"marginLocked\":\"0\",\n        //         \"orderType\":\"LIMIT\",\n        //         \"side\":\"SELL_OPEN\",\n        //         \"fees\":[],\n        //         \"timeInForce\":\"GTC\",\n        //         \"status\":\"CANCELED\",\n        //         \"priceType\":\"INPUT\",\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            // if orderId is set, it will get orders < that orderId otherwise most recent orders are returned\n            // 'orderId': '43287482374',\n        };\n        const defaultType = this.safeString (this.options, 'type', 'spot');\n        const options = this.safeValue (this.options, 'fetchOpenOrders', {});\n        const fetchOpenOrdersType = this.safeString (options, 'type', defaultType);\n        let type = this.safeString (params, 'type', fetchOpenOrdersType);\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            type = market['type'];\n        }\n        const query = this.omit (params, 'type');\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 500, max 1000\n        }\n        let method = 'privateGetOpenOrders';\n        if (type === 'future') {\n            method = 'contractGetOpenOrders';\n        } else if (type === 'option') {\n            method = 'optionGetOpenOrders';\n        }\n        const response = await this[method] (this.extend (request, query));\n        //\n        // spot\n        //\n        //     [\n        //         {\n        //             'orderId': '499902955766523648',\n        //             'clientOrderId': '157432907618453',\n        //             'exchangeId': '301',\n        //             'symbol': 'BHTUSDT',\n        //             'price': '0.01',\n        //             'origQty': '50',\n        //             'executedQty': '0',\n        //             'cummulativeQuoteQty': '0',\n        //             'avgPrice': '0',\n        //             'status': 'NEW',\n        //             'timeInForce': 'GTC',\n        //             'type': 'LIMIT',\n        //             'side': 'BUY',\n        //             'stopPrice': '0.0',\n        //             'icebergQty': '0.0',\n        //             'time': '1574329076202',\n        //             'updateTime': '0',\n        //             'isWorking': true\n        //         }\n        //     ]\n        //\n        // futures\n        //\n        //     [\n        //         {\n        //             \"time\":\"1588353669383\",\n        //             \"updateTime\":\"0\",\n        //             \"orderId\":\"617549770304599296\",\n        //             \"clientOrderId\":\"test-001\",\n        //             \"symbol\":\"BTC-PERP-REV\",\n        //             \"price\":\"10000\",\n        //             \"leverage\":\"1\",\n        //             \"origQty\":\"100\",\n        //             \"executedQty\":\"0\",\n        //             \"avgPrice\":\"0\",\n        //             \"marginLocked\":\"0.01\",\n        //             \"orderType\":\"LIMIT\",\n        //             \"side\":\"SELL_OPEN\",\n        //             \"fees\":[],\n        //             \"timeInForce\":\"GTC\",\n        //             \"status\":\"NEW\",\n        //             \"priceType\":\"INPUT\"\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            // if orderId is set, it will get orders < that orderId otherwise most recent orders are returned\n            // 'orderId': '43287482374',\n            // 'endTime': this.milliseconds (), // optional\n        };\n        const defaultType = this.safeString (this.options, 'type', 'spot');\n        const options = this.safeValue (this.options, 'fetchClosedOrders', {});\n        const fetchClosedOrdersType = this.safeString (options, 'type', defaultType);\n        let type = this.safeString (params, 'type', fetchClosedOrdersType);\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            type = market['type'];\n        }\n        const query = this.omit (params, 'type');\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 500, max 1000\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        let method = 'privateGetHistoryOrders';\n        if (type === 'future') {\n            method = 'contractGetHistoryOrders';\n        } else if (type === 'option') {\n            method = 'optionGetHistoryOrders';\n        }\n        const response = await this[method] (this.extend (request, query));\n        //\n        // spot\n        //\n        //     [\n        //         {\n        //             \"orderId\":\"616384027202542080\",\n        //             \"clientOrderId\":\"158821470194414688\",\n        //             \"exchangeId\":\"301\",\n        //             \"symbol\":\"TBTCBUSDT\",\n        //             \"price\":\"0\",\n        //             \"origQty\":\"0.1\",\n        //             \"executedQty\":\"0.1\",\n        //             \"cummulativeQuoteQty\":\"682.606\",\n        //             \"avgPrice\":\"6826.06\",\n        //             \"status\":\"FILLED\",\n        //             \"timeInForce\":\"GTC\",\n        //             \"type\":\"MARKET\",\n        //             \"side\":\"SELL\",\n        //             \"stopPrice\":\"0.0\",\n        //             \"icebergQty\":\"0.0\",\n        //             \"time\":\"1588214701974\",\n        //             \"updateTime\":\"0\",\n        //             \"isWorking\":true\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const clientOrderId = this.safeValue2 (params, 'origClientOrderId', 'clientOrderId');\n        const request = {};\n        const defaultType = this.safeString (this.options, 'type', 'spot');\n        const options = this.safeValue (this.options, 'fetchOrder', {});\n        const fetchOrderType = this.safeString (options, 'type', defaultType);\n        const type = this.safeString (params, 'type', fetchOrderType);\n        let query = this.omit (params, 'type');\n        if (clientOrderId !== undefined) {\n            request['origClientOrderId'] = clientOrderId;\n            query = this.omit (query, [ 'origClientOrderId', 'clientOrderId' ]);\n        } else {\n            request['orderId'] = id;\n        }\n        let method = 'privateGetOrder';\n        if (type === 'future') {\n            method = 'contractGetGetOrder';\n        } else if (type === 'option') {\n            method = 'optionGetGetOrder';\n        }\n        const response = await this[method] (this.extend (request, query));\n        return this.parseOrder (response);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {\n            // 'fromId': 'string', // if fromId is set, it will get deposits > that fromId, otherwise most recent deposits are returned\n        };\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetDepositOrders (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             'time': '1565769575929',\n        //             'orderId': '428100569859739648',\n        //             'token': 'USDT',\n        //             'address': '',\n        //             'addressTag': '',\n        //             'fromAddress': '',\n        //             'fromAddressTag': '',\n        //             'quantity': '1100',\n        //         },\n        //     ]\n        //\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {\n            // 'fromId': 'string', // if fromId is set, it will get deposits > that fromId, otherwise most recent deposits are returned\n        };\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['token'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 500, max 1000\n        }\n        const response = await this.privateGetWithdrawalOrders (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"time\":\"1536232111669\",\n        //             \"orderId\":\"90161227158286336\",\n        //             \"accountId\":\"517256161325920\",\n        //             \"tokenId\":\"BHC\",\n        //             \"tokenName\":\"BHC\",\n        //             \"address\":\"0x815bF1c3cc0f49b8FC66B21A7e48fCb476051209\",\n        //             \"addressExt\":\"address tag\",\n        //             \"quantity\":\"14\", // Withdrawal qty\n        //             \"arriveQuantity\":\"14\", // Arrived qty\n        //             \"statusCode\":\"PROCESSING_STATUS\",\n        //             \"status\":3,\n        //             \"txid\":\"\",\n        //             \"txidUrl\":\"\",\n        //             \"walletHandleTime\":\"1536232111669\",\n        //             \"feeTokenId\":\"BHC\",\n        //             \"feeTokenName\":\"BHC\",\n        //             \"fee\":\"0.1\",\n        //             \"requiredConfirmNum\":0, // Required confirmations\n        //             \"confirmNum\":0, // Confirmations\n        //             \"kernelId\":\"\", // BEAM and GRIN only\n        //             \"isInternalTransfer\": false // True if this transfer is internal\n        //         }\n        //     ]\n        //\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const clientOrderId = this.safeString (params, 'clientOrderId', this.uuid ());\n        const request = {\n            'clientOrderId': clientOrderId,\n            'tokenId': currency['id'],\n            'address': address, // the withdrawal address must be in current tag list in your PC/APP client\n            'withdrawQuantity': amount,\n            // 'chainType': 'OMNI', // OMNI, ERC20, TRC20\n        };\n        if (tag !== undefined) {\n            request['addressExt'] = tag;\n        }\n        const response = await this.privatePostWithdraw (this.extend (request, params));\n        //\n        //     {\n        //         \"status\": 0,\n        //         \"success\": true,\n        //         \"needBrokerAudit\": false, // Whether this request needs broker auit\n        //         \"orderId\": \"423885103582776064\" // Id for successful withdrawal\n        //     }\n        //\n        return {\n            'info': response,\n            'id': this.safeString (response, 'orderId'),\n        };\n    }\n\n    async fetchAccounts (params = {}) {\n        const response = await this.privatePostSubAccountQuery (params);\n        //\n        //     [\n        //         {\n        //             \"accountId\": \"122216245228131\",\n        //             \"accountName\": \"createSubAccountByCurl\", // sub-account name\n        //             \"accountType\": 1, // 1 token trading, 2 options, 3 futures\n        //             \"accountIndex\": 1, // 0 main account, 1 sub-account\n        //         },\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const account = response[i];\n            const accountId = this.safeString (account, 'accountId');\n            const accountType = this.safeString (account, 'accountType');\n            let type = accountType;\n            if (accountType === '1') {\n                type = 'spot';\n            } else if (accountType === '2') {\n                type = 'option';\n            } else if (accountType === '3') {\n                type = 'future';\n            }\n            result.push ({\n                'id': accountId,\n                'type': type,\n                'currency': undefined,\n                'info': account,\n            });\n        }\n        return result;\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'accountType': 1, // spot 1, options 2, futures 3\n            'accountIndex': 0, // main 0, sub-account 1\n            'fromFlowId': '', // flowId to start from\n            'endFlowId': '', // flowId to end with\n            'endTime': 1588450533040,\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['tokenId'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 500, max 500\n        }\n        const response = await this.privateGetBalanceFlow (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"id\": \"539870570957903104\",\n        //             \"accountId\": \"122216245228131\",\n        //             \"tokenId\": \"BTC\",\n        //             \"tokenName\": \"BTC\",\n        //             \"flowTypeValue\": 51,\n        //             \"flowType\": \"USER_ACCOUNT_TRANSFER\",\n        //             \"flowName\": \"Transfer\",\n        //             \"change\": \"-12.5\",\n        //             \"total\": \"379.624059937852365\", // after change\n        //             \"created\": \"1579093587214\"\n        //         },\n        //         {\n        //             \"id\": \"536072393645448960\",\n        //             \"accountId\": \"122216245228131\",\n        //             \"tokenId\": \"USDT\",\n        //             \"tokenName\": \"USDT\",\n        //             \"flowTypeValue\": 7,\n        //             \"flowType\": \"AIRDROP\",\n        //             \"flowName\": \"Airdrop\",\n        //             \"change\": \"-2000\",\n        //             \"total\": \"918662.0917630848\",\n        //             \"created\": \"1578640809195\"\n        //         }\n        //     ]\n        //\n        return this.parseLedger (response, currency, since, limit);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //     {\n        //         \"id\": \"539870570957903104\",\n        //         \"accountId\": \"122216245228131\",\n        //         \"tokenId\": \"BTC\",\n        //         \"tokenName\": \"BTC\",\n        //         \"flowTypeValue\": 51,\n        //         \"flowType\": \"USER_ACCOUNT_TRANSFER\",\n        //         \"flowName\": \"Transfer\",\n        //         \"change\": \"-12.5\",\n        //         \"total\": \"379.624059937852365\", // after change\n        //         \"created\": \"1579093587214\"\n        //     }\n        //\n        //     {\n        //         \"id\": \"536072393645448960\",\n        //         \"accountId\": \"122216245228131\",\n        //         \"tokenId\": \"USDT\",\n        //         \"tokenName\": \"USDT\",\n        //         \"flowTypeValue\": 7,\n        //         \"flowType\": \"AIRDROP\",\n        //         \"flowName\": \"Airdrop\",\n        //         \"change\": \"-2000\",\n        //         \"total\": \"918662.0917630848\",\n        //         \"created\": \"1578640809195\"\n        //     }\n        //\n        const currencyId = this.safeString (item, 'tokenId');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const amount = this.safeNumber (item, 'change');\n        const after = this.safeNumber (item, 'total');\n        const direction = (amount < 0) ? 'out' : 'in';\n        let before = undefined;\n        if (after !== undefined && amount !== undefined) {\n            const difference = (direction === 'out') ? amount : -amount;\n            before = this.sum (after, difference);\n        }\n        const timestamp = this.safeInteger (item, 'created');\n        const type = this.parseLedgerEntryType (this.safeString (item, 'flowType'));\n        const id = this.safeString (item, 'id');\n        const account = this.safeString (item, 'accountId');\n        return {\n            'id': id,\n            'currency': code,\n            'account': account,\n            'referenceAccount': undefined,\n            'referenceId': undefined,\n            'status': undefined,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'fee': undefined,\n            'direction': direction,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'type': type,\n            'info': item,\n        };\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'TRADE': 'trade',\n            'FEE': 'fee',\n            'TRANSFER': 'transfer',\n            'DEPOSIT': 'transaction',\n            'MAKER_REWARD': 'rebate',\n            'PNL': 'pnl',\n            'SETTLEMENT': 'settlement',\n            'LIQUIDATION': 'liquidation',\n            'FUNDING_SETTLEMENT': 'settlement',\n            'USER_ACCOUNT_TRANSFER': 'transfer',\n            'OTC_BUY_COIN': 'trade',\n            'OTC_SELL_COIN': 'trade',\n            'OTC_FEE': 'fee',\n            'OTC_TRADE': 'trade',\n            'ACTIVITY_AWARD': 'referral',\n            'INVITATION_REFERRAL_BONUS': 'referral',\n            'REGISTER_BONUS': 'referral',\n            'AIRDROP': 'airdrop',\n            'MINE_REWARD': 'reward',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'BROKER_AUDITING_STATUS': 'pending',\n            'BROKER_REJECT_STATUS': 'failed',\n            'AUDITING_STATUS': 'pending',\n            'AUDIT_REJECT_STATUS': 'failed',\n            'PROCESSING_STATUS': 'pending',\n            'WITHDRAWAL_SUCCESS_STATUS': 'ok',\n            'WITHDRAWAL_FAILURE_STATUS': 'failed',\n            'BLOCK_MINING_STATUS': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         'time': '1565769575929',\n        //         'orderId': '428100569859739648',\n        //         'token': 'USDT',\n        //         'address': '',\n        //         'addressTag': '',\n        //         'fromAddress': '',\n        //         'fromAddressTag': '',\n        //         'quantity': '1100',\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"time\":\"1536232111669\",\n        //         \"orderId\":\"90161227158286336\",\n        //         \"accountId\":\"517256161325920\",\n        //         \"tokenId\":\"BHC\",\n        //         \"tokenName\":\"BHC\",\n        //         \"address\":\"0x815bF1c3cc0f49b8FC66B21A7e48fCb476051209\",\n        //         \"addressExt\":\"address tag\",\n        //         \"quantity\":\"14\", // Withdrawal qty\n        //         \"arriveQuantity\":\"14\", // Arrived qty\n        //         \"statusCode\":\"PROCESSING_STATUS\",\n        //         \"status\":3,\n        //         \"txid\":\"\",\n        //         \"txidUrl\":\"\",\n        //         \"walletHandleTime\":\"1536232111669\",\n        //         \"feeTokenId\":\"BHC\",\n        //         \"feeTokenName\":\"BHC\",\n        //         \"fee\":\"0.1\",\n        //         \"requiredConfirmNum\":0, // Required confirmations\n        //         \"confirmNum\":0, // Confirmations\n        //         \"kernelId\":\"\", // BEAM and GRIN only\n        //         \"isInternalTransfer\": false // True if this transfer is internal\n        //     }\n        //\n        const id = this.safeString (transaction, 'orderId');\n        const address = this.safeString (transaction, 'address');\n        let tag = this.safeString2 (transaction, 'addressExt', 'addressTag');\n        if (tag !== undefined) {\n            if (tag.length < 1) {\n                tag = undefined;\n            }\n        }\n        const addressFrom = this.safeString (transaction, 'fromAddress');\n        let tagFrom = this.safeString (transaction, 'fromAddressTag');\n        if (tagFrom !== undefined) {\n            if (tagFrom.length < 1) {\n                tagFrom = undefined;\n            }\n        }\n        const currencyId = this.safeString (transaction, 'tokenId');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const timestamp = this.safeInteger (transaction, 'time');\n        let txid = this.safeString (transaction, 'txid');\n        if (txid === '') {\n            txid = undefined;\n        }\n        let type = undefined;\n        let status = this.parseTransactionStatus (this.safeString (transaction, 'statusCode'));\n        if (status === undefined) {\n            type = 'deposit';\n            status = 'ok';\n        } else {\n            type = 'withdrawal';\n        }\n        const amount = this.safeNumber (transaction, 'quantity');\n        const feeCost = this.safeNumber (transaction, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (transaction, 'feeTokenId');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'currency': feeCurrencyCode,\n                'cost': feeCost,\n            };\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': addressFrom,\n            'address': address,\n            'addressTo': address,\n            'tagFrom': tagFrom,\n            'tag': tag,\n            'tagTo': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'fee': fee,\n        };\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker, fetchTickers\n        //\n        //     {\n        //         \"time\":1588069860794,\n        //         \"symbol\":\"BNB0501PS16\",\n        //         \"bestBidPrice\":\"0.2129\",\n        //         \"bestAskPrice\":\"0.3163\",\n        //         \"volume\":\"33547\",\n        //         \"quoteVolume\":\"10801.987\",\n        //         \"lastPrice\":\"0.2625\",\n        //         \"highPrice\":\"0.3918\",\n        //         \"lowPrice\":\"0.2625\",\n        //         \"openPrice\":\"0.362\",\n        //     }\n        //\n        // fetchBidAsk, fetchBidAsks\n        //\n        //     {\n        //         \"symbol\": \"LTCBTC\",\n        //         \"bidPrice\": \"4.00000000\",\n        //         \"bidQty\": \"431.00000000\",\n        //         \"askPrice\": \"4.00000200\",\n        //         \"askQty\": \"9.00000000\"\n        //     }\n        //\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.safeInteger (ticker, 'time');\n        const open = this.safeNumber (ticker, 'openPrice');\n        const close = this.safeNumber (ticker, 'lastPrice');\n        let change = undefined;\n        let percentage = undefined;\n        let average = undefined;\n        if ((open !== undefined) && (close !== undefined)) {\n            change = close - open;\n            average = this.sum (open, close) / 2;\n            if ((close !== undefined) && (close > 0)) {\n                percentage = (change / open) * 100;\n            }\n        }\n        const quoteVolume = this.safeNumber (ticker, 'quoteVolume');\n        const baseVolume = this.safeNumber (ticker, 'volume');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'highPrice'),\n            'low': this.safeNumber (ticker, 'lowPrice'),\n            'bid': this.safeNumber2 (ticker, 'bestBidPrice', 'bidPrice'),\n            'bidVolume': this.safeNumber (ticker, 'bidQty'),\n            'ask': this.safeNumber2 (ticker, 'bestAskPrice', 'askPrice'),\n            'askVolume': this.safeNumber (ticker, 'askQty'),\n            'vwap': vwap,\n            'open': open,\n            'close': close,\n            'last': close,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"price\":\"0.025344\",\n        //         \"time\":1588084082060,\n        //         \"qty\":\"1\",\n        //         \"isBuyerMaker\":false\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        // spot\n        //\n        //     {\n        //         \"id\":\"616384027512920576\",\n        //         \"symbol\":\"TBTCBUSDT\",\n        //         \"orderId\":\"616384027202542080\",\n        //         \"matchOrderId\":\"605124954767266560\",\n        //         \"price\":\"6826.06\",\n        //         \"qty\":\"0.1\",\n        //         \"commission\":\"0.682606\",\n        //         \"commissionAsset\":\"BUSDT\",\n        //         \"time\":\"1588214701982\",\n        //         \"isBuyer\":false,\n        //         \"isMaker\":false,\n        //         \"fee\":{\n        //             \"feeTokenId\":\"BUSDT\",\n        //             \"feeTokenName\":\"BUSDT\",\n        //             \"fee\":\"0.682606\"\n        //         }\n        //     }\n        //\n        const id = this.safeString (trade, 'id');\n        const timestamp = this.safeNumber (trade, 'time');\n        const type = undefined;\n        const orderId = this.safeString (trade, 'orderId');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'qty');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        let side = undefined;\n        let takerOrMaker = undefined;\n        if ('isBuyerMaker' in trade) {\n            side = trade['isBuyerMaker'] ? 'sell' : 'buy';\n        } else {\n            const isMaker = this.safeValue (trade, 'isMaker');\n            if (isMaker !== undefined) {\n                takerOrMaker = isMaker ? 'maker' : 'taker';\n            }\n            const isBuyer = this.safeValue (trade, 'isBuyer');\n            side = isBuyer ? 'buy' : 'sell';\n        }\n        let fee = undefined;\n        const feeCost = this.safeNumber (trade, 'commission');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'commissionAsset');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        let symbol = undefined;\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'order': orderId,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"symbol\":\"TBTCBUSDT\",\n        //         \"orderId\":\"616376654496877056\",\n        //         \"clientOrderId\":\"158821382304516955\",\n        //         \"transactTime\":\"1588213823080\",\n        //         \"price\":\"0\",\n        //         \"origQty\":\"1000\",\n        //         \"executedQty\":\"0\",\n        //         \"status\":\"NEW\",\n        //         \"timeInForce\":\"GTC\",\n        //         \"type\":\"MARKET\",\n        //         \"side\":\"BUY\"\n        //     }\n        //\n        // fetchOrder, fetchOpenOrders, fetchClosedOrders\n        //\n        // spot\n        //\n        //     {\n        //         \"orderId\":\"616384027202542080\",\n        //         \"clientOrderId\":\"158821470194414688\",\n        //         \"exchangeId\":\"301\",\n        //         \"symbol\":\"TBTCBUSDT\",\n        //         \"price\":\"0\",\n        //         \"origQty\":\"0.1\",\n        //         \"executedQty\":\"0.1\",\n        //         \"cummulativeQuoteQty\":\"682.606\",\n        //         \"avgPrice\":\"6826.06\",\n        //         \"status\":\"FILLED\",\n        //         \"timeInForce\":\"GTC\",\n        //         \"type\":\"MARKET\",\n        //         \"side\":\"SELL\",\n        //         \"stopPrice\":\"0.0\",\n        //         \"icebergQty\":\"0.0\",\n        //         \"time\":\"1588214701974\",\n        //         \"updateTime\":\"0\",\n        //         \"isWorking\":true\n        //     }\n        //\n        // future\n        //\n        //     {\n        //         time: \"1588353669383\",\n        //         updateTime: \"0\",\n        //         orderId: \"617549770304599296\",\n        //         clientOrderId: \"test-001\",\n        //         symbol: \"BTC-PERP-REV\",\n        //         price: \"10000\",\n        //         leverage: \"1\",\n        //         origQty: \"100\",\n        //         executedQty: \"0\",\n        //         avgPrice: \"0\",\n        //         marginLocked: \"0\",\n        //         orderType: \"LIMIT\",\n        //         side: \"SELL_OPEN\",\n        //         fees: [],\n        //         timeInForce: \"GTC\",\n        //         status: \"CANCELED\",\n        //         priceType: \"INPUT\"\n        //     }\n        //\n        //\n        const id = this.safeString (order, 'orderId');\n        const clientOrderId = this.safeString (order, 'clientOrderId');\n        let timestamp = this.safeInteger (order, 'time');\n        if (timestamp === undefined) {\n            timestamp = this.safeInteger (order, 'transactTime');\n        }\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        let type = this.safeStringLower (order, 'type');\n        const side = this.safeStringLower (order, 'side');\n        let price = this.safeNumber (order, 'price');\n        let average = this.safeNumber (order, 'avgPrice');\n        let amount = undefined;\n        let cost = this.safeNumber (order, 'cummulativeQuoteQty');\n        let filled = undefined;\n        let remaining = undefined;\n        if (type === undefined) {\n            type = this.safeStringLower (order, 'orderType');\n            if ((market !== undefined) && market['inverse']) {\n                cost = this.safeNumber (order, 'executedQty');\n                amount = undefined;\n            }\n            if (cost === 0.0) {\n                filled = 0;\n            }\n        } else {\n            amount = this.safeNumber (order, 'origQty');\n            if (type === 'market') {\n                price = undefined;\n                if (side === 'buy') {\n                    amount = undefined;\n                }\n            }\n            filled = this.safeNumber (order, 'executedQty');\n            if (filled !== undefined) {\n                if (amount !== undefined) {\n                    remaining = amount - filled;\n                }\n            }\n        }\n        if (average === 0.0) {\n            average = undefined;\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const timeInForce = this.safeString (order, 'timeInForce');\n        const stopPrice = this.safeNumber (order, 'stopPrice');\n        const result = {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'average': average,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'trades': undefined,\n            'fee': undefined,\n            'fees': undefined,\n        };\n        const fees = this.safeValue (order, 'fees', []);\n        const numFees = fees.length;\n        if (numFees > 0) {\n            result['fees'] = [];\n            for (let i = 0; i < fees.length; i++) {\n                const feeCost = this.safeNumber (fees[i], 'fee');\n                if (feeCost !== undefined) {\n                    const feeCurrencyId = this.safeString (fees[i], 'feeToken');\n                    const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n                    result['fees'].push ({\n                        'cost': feeCost,\n                        'currency': feeCurrencyCode,\n                    });\n                }\n            }\n        }\n        return result;\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'NEW': 'open',\n            'CANCELED': 'canceled',\n            'FILLED': 'closed',\n            'PARTIALLY_FILLED': 'open',\n            'PENDING_CANCEL': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        const isPublicContract = (api === 'contract') && ((path === 'insurance') || (path === 'fundingRate'));\n        if ((api === 'public') || (api === 'quote') || isPublicContract) {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            const timestamp = this.milliseconds ();\n            this.checkRequiredCredentials ();\n            const request = this.extend ({\n                'timestamp': timestamp,\n            }, query);\n            // 准备待签名数据\n            const auth = this.urlencode (request);\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha256');\n            request['signature'] = signature;\n            headers = {\n                'X-BH-APIKEY': this.apiKey,\n            };\n            if (method === 'POST') {\n                body = this.urlencode (request);\n                headers = this.extend ({\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                }, headers);\n            } else {\n                url += '?' + this.urlencode (request);\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if ('code' in response) {\n            const code = this.safeString (response, 'code');\n            if (code !== '0') {\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}