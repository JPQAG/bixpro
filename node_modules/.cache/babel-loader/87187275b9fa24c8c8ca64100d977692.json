{"ast":null,"code":"'use strict';\n\nconst BN = require('../static_dependencies/BN/bn');\n\nclass Precise {\n  constructor(number, decimals = 0) {\n    const isBN = number instanceof BN;\n    const isString = typeof number === 'string';\n\n    if (!(isBN || isString)) {\n      throw new Error('Precise initiated with something other than a string or BN');\n    }\n\n    if (isBN) {\n      this.integer = number;\n      this.decimals = decimals;\n    } else {\n      if (decimals) {\n        throw new Error('Cannot set decimals when initializing with a string');\n      }\n\n      let modifier = 0;\n      number = number.toLowerCase();\n\n      if (number.indexOf('e') > -1) {\n        [number, modifier] = number.split('e');\n        modifier = parseInt(modifier);\n      }\n\n      const decimalIndex = number.indexOf('.');\n      this.decimals = decimalIndex > -1 ? number.length - decimalIndex - 1 : 0;\n      const integerString = number.replace('.', '');\n      this.integer = new BN(integerString);\n      this.decimals = this.decimals - modifier;\n    }\n\n    this.base = 10;\n    this.reduce();\n  }\n\n  mul(other) {\n    // other must be another instance of Precise\n    const integerResult = this.integer.mul(other.integer);\n    return new Precise(integerResult, this.decimals + other.decimals);\n  }\n\n  div(other, precision = 18) {\n    const distance = precision - this.decimals + other.decimals;\n    let numerator;\n\n    if (distance === 0) {\n      numerator = this.integer;\n    } else if (distance < 0) {\n      const exponent = new BN(this.base).pow(new BN(-distance));\n      numerator = this.integer.div(exponent);\n    } else {\n      const exponent = new BN(this.base).pow(new BN(distance));\n      numerator = this.integer.mul(exponent);\n    }\n\n    const result = numerator.div(other.integer);\n    return new Precise(result, precision);\n  }\n\n  add(other) {\n    if (this.decimals === other.decimals) {\n      const integerResult = this.integer.add(other.integer);\n      return new Precise(integerResult, this.decimals);\n    } else {\n      const [smaller, bigger] = this.decimals > other.decimals ? [other, this] : [this, other];\n      const exponent = new BN(bigger.decimals - smaller.decimals);\n      const normalised = smaller.integer.mul(new BN(this.base).pow(exponent));\n      const result = normalised.add(bigger.integer);\n      return new Precise(result, bigger.decimals);\n    }\n  }\n\n  sub(other) {\n    const negative = new Precise(other.integer.neg(), other.decimals);\n    return this.add(negative);\n  }\n\n  abs() {\n    return new Precise(this.integer.abs(), this.decimals);\n  }\n\n  neg() {\n    return new Precise(this.integer.neg(), this.decimals);\n  }\n\n  reduce() {\n    const zero = new BN(0);\n\n    if (this.integer.eq(zero)) {\n      this.decimals = 0;\n      return this;\n    }\n\n    const base = new BN(this.base);\n    let divmod = this.integer.divmod(base);\n\n    while (divmod.mod.eq(zero)) {\n      this.integer = divmod.div;\n      this.decimals--;\n      divmod = this.integer.divmod(base);\n    }\n\n    return this;\n  }\n\n  toString() {\n    const sign = this.integer.negative ? '-' : '';\n    const integerArray = Array.from(this.integer.abs().toString(this.base).padStart(this.decimals, '0'));\n    const index = integerArray.length - this.decimals;\n    let item;\n\n    if (index === 0) {\n      // if we are adding to the front\n      item = '0.';\n    } else if (this.decimals < 0) {\n      item = '0'.repeat(-this.decimals);\n    } else if (this.decimals === 0) {\n      item = '';\n    } else {\n      item = '.';\n    }\n\n    integerArray.splice(index, 0, item);\n    return sign + integerArray.join('');\n  }\n\n  static stringMul(string1, string2) {\n    if (string1 === undefined || string2 === undefined) {\n      return undefined;\n    }\n\n    return new Precise(string1).mul(new Precise(string2)).toString();\n  }\n\n  static stringDiv(string1, string2, precision = 18) {\n    if (string1 === undefined || string2 === undefined) {\n      return undefined;\n    }\n\n    return new Precise(string1).div(new Precise(string2), precision).toString();\n  }\n\n  static stringAdd(string1, string2) {\n    if (string1 === undefined && string2 === undefined) {\n      return undefined;\n    }\n\n    if (string1 === undefined) {\n      return string2;\n    } else if (string2 === undefined) {\n      return string1;\n    }\n\n    return new Precise(string1).add(new Precise(string2)).toString();\n  }\n\n  static stringSub(string1, string2) {\n    if (string1 === undefined || string2 === undefined) {\n      return undefined;\n    }\n\n    return new Precise(string1).sub(new Precise(string2)).toString();\n  }\n\n  static stringAbs(string) {\n    if (string === undefined) {\n      return undefined;\n    }\n\n    return new Precise(string).abs().toString();\n  }\n\n  static stringNeg(string) {\n    if (string === undefined) {\n      return undefined;\n    }\n\n    return new Precise(string).neg().toString();\n  }\n\n}\n\nmodule.exports = Precise;","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/base/Precise.js"],"names":["BN","require","Precise","constructor","number","decimals","isBN","isString","Error","integer","modifier","toLowerCase","indexOf","split","parseInt","decimalIndex","length","integerString","replace","base","reduce","mul","other","integerResult","div","precision","distance","numerator","exponent","pow","result","add","smaller","bigger","normalised","sub","negative","neg","abs","zero","eq","divmod","mod","toString","sign","integerArray","Array","from","padStart","index","item","repeat","splice","join","stringMul","string1","string2","undefined","stringDiv","stringAdd","stringSub","stringAbs","string","stringNeg","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAE,8BAAF,CAAlB;;AAEA,MAAMC,OAAN,CAAc;AACVC,EAAAA,WAAW,CAAEC,MAAF,EAAUC,QAAQ,GAAG,CAArB,EAAwB;AAC/B,UAAMC,IAAI,GAAGF,MAAM,YAAYJ,EAA/B;AACA,UAAMO,QAAQ,GAAG,OAAOH,MAAP,KAAkB,QAAnC;;AACA,QAAI,EAAEE,IAAI,IAAIC,QAAV,CAAJ,EAAyB;AACrB,YAAM,IAAIC,KAAJ,CAAW,4DAAX,CAAN;AACH;;AACD,QAAIF,IAAJ,EAAU;AACN,WAAKG,OAAL,GAAeL,MAAf;AACA,WAAKC,QAAL,GAAgBA,QAAhB;AACH,KAHD,MAGO;AACH,UAAIA,QAAJ,EAAc;AACV,cAAM,IAAIG,KAAJ,CAAW,qDAAX,CAAN;AACH;;AACD,UAAIE,QAAQ,GAAG,CAAf;AACAN,MAAAA,MAAM,GAAGA,MAAM,CAACO,WAAP,EAAT;;AACA,UAAIP,MAAM,CAACQ,OAAP,CAAgB,GAAhB,IAAuB,CAAC,CAA5B,EAA+B;AAC3B,SAAER,MAAF,EAAUM,QAAV,IAAuBN,MAAM,CAACS,KAAP,CAAc,GAAd,CAAvB;AACAH,QAAAA,QAAQ,GAAGI,QAAQ,CAAEJ,QAAF,CAAnB;AACH;;AACD,YAAMK,YAAY,GAAGX,MAAM,CAACQ,OAAP,CAAgB,GAAhB,CAArB;AACA,WAAKP,QAAL,GAAiBU,YAAY,GAAG,CAAC,CAAjB,GAAsBX,MAAM,CAACY,MAAP,GAAgBD,YAAhB,GAA+B,CAArD,GAAyD,CAAzE;AACA,YAAME,aAAa,GAAGb,MAAM,CAACc,OAAP,CAAgB,GAAhB,EAAqB,EAArB,CAAtB;AACA,WAAKT,OAAL,GAAe,IAAIT,EAAJ,CAAQiB,aAAR,CAAf;AACA,WAAKZ,QAAL,GAAgB,KAAKA,QAAL,GAAgBK,QAAhC;AACH;;AACD,SAAKS,IAAL,GAAY,EAAZ;AACA,SAAKC,MAAL;AACH;;AAEDC,EAAAA,GAAG,CAAEC,KAAF,EAAS;AACR;AACA,UAAMC,aAAa,GAAG,KAAKd,OAAL,CAAaY,GAAb,CAAkBC,KAAK,CAACb,OAAxB,CAAtB;AACA,WAAO,IAAIP,OAAJ,CAAaqB,aAAb,EAA4B,KAAKlB,QAAL,GAAgBiB,KAAK,CAACjB,QAAlD,CAAP;AACH;;AAEDmB,EAAAA,GAAG,CAAEF,KAAF,EAASG,SAAS,GAAG,EAArB,EAAyB;AACxB,UAAMC,QAAQ,GAAGD,SAAS,GAAG,KAAKpB,QAAjB,GAA4BiB,KAAK,CAACjB,QAAnD;AACA,QAAIsB,SAAJ;;AACA,QAAID,QAAQ,KAAK,CAAjB,EAAoB;AAChBC,MAAAA,SAAS,GAAG,KAAKlB,OAAjB;AACH,KAFD,MAEO,IAAIiB,QAAQ,GAAG,CAAf,EAAkB;AACrB,YAAME,QAAQ,GAAG,IAAI5B,EAAJ,CAAQ,KAAKmB,IAAb,EAAmBU,GAAnB,CAAwB,IAAI7B,EAAJ,CAAQ,CAAC0B,QAAT,CAAxB,CAAjB;AACAC,MAAAA,SAAS,GAAG,KAAKlB,OAAL,CAAae,GAAb,CAAkBI,QAAlB,CAAZ;AACH,KAHM,MAGA;AACH,YAAMA,QAAQ,GAAG,IAAI5B,EAAJ,CAAQ,KAAKmB,IAAb,EAAmBU,GAAnB,CAAwB,IAAI7B,EAAJ,CAAQ0B,QAAR,CAAxB,CAAjB;AACAC,MAAAA,SAAS,GAAG,KAAKlB,OAAL,CAAaY,GAAb,CAAkBO,QAAlB,CAAZ;AACH;;AACD,UAAME,MAAM,GAAGH,SAAS,CAACH,GAAV,CAAeF,KAAK,CAACb,OAArB,CAAf;AACA,WAAO,IAAIP,OAAJ,CAAa4B,MAAb,EAAqBL,SAArB,CAAP;AACH;;AAEDM,EAAAA,GAAG,CAAET,KAAF,EAAS;AACR,QAAI,KAAKjB,QAAL,KAAkBiB,KAAK,CAACjB,QAA5B,EAAsC;AAClC,YAAMkB,aAAa,GAAG,KAAKd,OAAL,CAAasB,GAAb,CAAkBT,KAAK,CAACb,OAAxB,CAAtB;AACA,aAAO,IAAIP,OAAJ,CAAaqB,aAAb,EAA4B,KAAKlB,QAAjC,CAAP;AACH,KAHD,MAGO;AACH,YAAM,CAAE2B,OAAF,EAAWC,MAAX,IACD,KAAK5B,QAAL,GAAgBiB,KAAK,CAACjB,QAAvB,GAAmC,CAAEiB,KAAF,EAAS,IAAT,CAAnC,GAAqD,CAAE,IAAF,EAAQA,KAAR,CADzD;AAEA,YAAMM,QAAQ,GAAG,IAAI5B,EAAJ,CAAQiC,MAAM,CAAC5B,QAAP,GAAkB2B,OAAO,CAAC3B,QAAlC,CAAjB;AACA,YAAM6B,UAAU,GAAGF,OAAO,CAACvB,OAAR,CAAgBY,GAAhB,CAAqB,IAAIrB,EAAJ,CAAQ,KAAKmB,IAAb,EAAmBU,GAAnB,CAAwBD,QAAxB,CAArB,CAAnB;AACA,YAAME,MAAM,GAAGI,UAAU,CAACH,GAAX,CAAgBE,MAAM,CAACxB,OAAvB,CAAf;AACA,aAAO,IAAIP,OAAJ,CAAa4B,MAAb,EAAqBG,MAAM,CAAC5B,QAA5B,CAAP;AACH;AACJ;;AAED8B,EAAAA,GAAG,CAAEb,KAAF,EAAS;AACR,UAAMc,QAAQ,GAAG,IAAIlC,OAAJ,CAAaoB,KAAK,CAACb,OAAN,CAAc4B,GAAd,EAAb,EAAmCf,KAAK,CAACjB,QAAzC,CAAjB;AACA,WAAO,KAAK0B,GAAL,CAAUK,QAAV,CAAP;AACH;;AAEDE,EAAAA,GAAG,GAAI;AACH,WAAO,IAAIpC,OAAJ,CAAa,KAAKO,OAAL,CAAa6B,GAAb,EAAb,EAAkC,KAAKjC,QAAvC,CAAP;AACH;;AAEDgC,EAAAA,GAAG,GAAI;AACH,WAAO,IAAInC,OAAJ,CAAa,KAAKO,OAAL,CAAa4B,GAAb,EAAb,EAAkC,KAAKhC,QAAvC,CAAP;AACH;;AAEDe,EAAAA,MAAM,GAAI;AACN,UAAMmB,IAAI,GAAG,IAAIvC,EAAJ,CAAQ,CAAR,CAAb;;AACA,QAAI,KAAKS,OAAL,CAAa+B,EAAb,CAAiBD,IAAjB,CAAJ,EAA4B;AACxB,WAAKlC,QAAL,GAAgB,CAAhB;AACA,aAAO,IAAP;AACH;;AACD,UAAMc,IAAI,GAAG,IAAInB,EAAJ,CAAQ,KAAKmB,IAAb,CAAb;AACA,QAAIsB,MAAM,GAAG,KAAKhC,OAAL,CAAagC,MAAb,CAAqBtB,IAArB,CAAb;;AACA,WAAOsB,MAAM,CAACC,GAAP,CAAWF,EAAX,CAAeD,IAAf,CAAP,EAA6B;AACzB,WAAK9B,OAAL,GAAegC,MAAM,CAACjB,GAAtB;AACA,WAAKnB,QAAL;AACAoC,MAAAA,MAAM,GAAG,KAAKhC,OAAL,CAAagC,MAAb,CAAqBtB,IAArB,CAAT;AACH;;AACD,WAAO,IAAP;AACH;;AAEDwB,EAAAA,QAAQ,GAAI;AACR,UAAMC,IAAI,GAAG,KAAKnC,OAAL,CAAa2B,QAAb,GAAwB,GAAxB,GAA8B,EAA3C;AACA,UAAMS,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAY,KAAKtC,OAAL,CAAa6B,GAAb,GAAoBK,QAApB,CAA8B,KAAKxB,IAAnC,EAAyC6B,QAAzC,CAAmD,KAAK3C,QAAxD,EAAkE,GAAlE,CAAZ,CAArB;AACA,UAAM4C,KAAK,GAAGJ,YAAY,CAAC7B,MAAb,GAAsB,KAAKX,QAAzC;AACA,QAAI6C,IAAJ;;AACA,QAAID,KAAK,KAAK,CAAd,EAAiB;AACb;AACAC,MAAAA,IAAI,GAAG,IAAP;AACH,KAHD,MAGO,IAAI,KAAK7C,QAAL,GAAgB,CAApB,EAAuB;AAC1B6C,MAAAA,IAAI,GAAG,IAAIC,MAAJ,CAAY,CAAC,KAAK9C,QAAlB,CAAP;AACH,KAFM,MAEA,IAAI,KAAKA,QAAL,KAAkB,CAAtB,EAAyB;AAC5B6C,MAAAA,IAAI,GAAG,EAAP;AACH,KAFM,MAEA;AACHA,MAAAA,IAAI,GAAG,GAAP;AACH;;AACDL,IAAAA,YAAY,CAACO,MAAb,CAAqBH,KAArB,EAA4B,CAA5B,EAA+BC,IAA/B;AACA,WAAON,IAAI,GAAGC,YAAY,CAACQ,IAAb,CAAmB,EAAnB,CAAd;AACH;;AAED,SAAOC,SAAP,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoC;AAChC,QAAKD,OAAO,KAAKE,SAAb,IAA4BD,OAAO,KAAKC,SAA5C,EAAwD;AACpD,aAAOA,SAAP;AACH;;AACD,WAAQ,IAAIvD,OAAJ,CAAaqD,OAAb,CAAD,CAAwBlC,GAAxB,CAA6B,IAAInB,OAAJ,CAAasD,OAAb,CAA7B,EAAoDb,QAApD,EAAP;AACH;;AAED,SAAOe,SAAP,CAAkBH,OAAlB,EAA2BC,OAA3B,EAAoC/B,SAAS,GAAG,EAAhD,EAAoD;AAChD,QAAK8B,OAAO,KAAKE,SAAb,IAA4BD,OAAO,KAAKC,SAA5C,EAAwD;AACpD,aAAOA,SAAP;AACH;;AACD,WAAQ,IAAIvD,OAAJ,CAAaqD,OAAb,CAAD,CAAwB/B,GAAxB,CAA6B,IAAItB,OAAJ,CAAasD,OAAb,CAA7B,EAAoD/B,SAApD,EAA+DkB,QAA/D,EAAP;AACH;;AAED,SAAOgB,SAAP,CAAkBJ,OAAlB,EAA2BC,OAA3B,EAAoC;AAChC,QAAKD,OAAO,KAAKE,SAAb,IAA4BD,OAAO,KAAKC,SAA5C,EAAwD;AACpD,aAAOA,SAAP;AACH;;AACD,QAAIF,OAAO,KAAKE,SAAhB,EAA2B;AACvB,aAAOD,OAAP;AACH,KAFD,MAEO,IAAIA,OAAO,KAAKC,SAAhB,EAA2B;AAC9B,aAAOF,OAAP;AACH;;AACD,WAAQ,IAAIrD,OAAJ,CAAaqD,OAAb,CAAD,CAAwBxB,GAAxB,CAA6B,IAAI7B,OAAJ,CAAasD,OAAb,CAA7B,EAAoDb,QAApD,EAAP;AACH;;AAED,SAAOiB,SAAP,CAAkBL,OAAlB,EAA2BC,OAA3B,EAAoC;AAChC,QAAKD,OAAO,KAAKE,SAAb,IAA4BD,OAAO,KAAKC,SAA5C,EAAwD;AACpD,aAAOA,SAAP;AACH;;AACD,WAAQ,IAAIvD,OAAJ,CAAaqD,OAAb,CAAD,CAAwBpB,GAAxB,CAA6B,IAAIjC,OAAJ,CAAasD,OAAb,CAA7B,EAAoDb,QAApD,EAAP;AACH;;AAED,SAAOkB,SAAP,CAAkBC,MAAlB,EAA0B;AACtB,QAAIA,MAAM,KAAKL,SAAf,EAA0B;AACtB,aAAOA,SAAP;AACH;;AACD,WAAQ,IAAIvD,OAAJ,CAAa4D,MAAb,CAAD,CAAuBxB,GAAvB,GAA8BK,QAA9B,EAAP;AACH;;AAED,SAAOoB,SAAP,CAAkBD,MAAlB,EAA0B;AACtB,QAAIA,MAAM,KAAKL,SAAf,EAA0B;AACtB,aAAOA,SAAP;AACH;;AACD,WAAQ,IAAIvD,OAAJ,CAAa4D,MAAb,CAAD,CAAuBzB,GAAvB,GAA8BM,QAA9B,EAAP;AACH;;AA/JS;;AAkKdqB,MAAM,CAACC,OAAP,GAAiB/D,OAAjB","sourcesContent":["'use strict'\n\nconst BN = require ('../static_dependencies/BN/bn')\n\nclass Precise {\n    constructor (number, decimals = 0) {\n        const isBN = number instanceof BN\n        const isString = typeof number === 'string'\n        if (!(isBN || isString)) {\n            throw new Error ('Precise initiated with something other than a string or BN')\n        }\n        if (isBN) {\n            this.integer = number\n            this.decimals = decimals\n        } else {\n            if (decimals) {\n                throw new Error ('Cannot set decimals when initializing with a string')\n            }\n            let modifier = 0\n            number = number.toLowerCase ()\n            if (number.indexOf ('e') > -1) {\n                [ number, modifier ] = number.split ('e')\n                modifier = parseInt (modifier)\n            }\n            const decimalIndex = number.indexOf ('.')\n            this.decimals = (decimalIndex > -1) ? number.length - decimalIndex - 1 : 0\n            const integerString = number.replace ('.', '')\n            this.integer = new BN (integerString)\n            this.decimals = this.decimals - modifier\n        }\n        this.base = 10\n        this.reduce ()\n    }\n\n    mul (other) {\n        // other must be another instance of Precise\n        const integerResult = this.integer.mul (other.integer)\n        return new Precise (integerResult, this.decimals + other.decimals)\n    }\n\n    div (other, precision = 18) {\n        const distance = precision - this.decimals + other.decimals\n        let numerator\n        if (distance === 0) {\n            numerator = this.integer\n        } else if (distance < 0) {\n            const exponent = new BN (this.base).pow (new BN (-distance))\n            numerator = this.integer.div (exponent)\n        } else {\n            const exponent = new BN (this.base).pow (new BN (distance))\n            numerator = this.integer.mul (exponent)\n        }\n        const result = numerator.div (other.integer)\n        return new Precise (result, precision)\n    }\n\n    add (other) {\n        if (this.decimals === other.decimals) {\n            const integerResult = this.integer.add (other.integer)\n            return new Precise (integerResult, this.decimals)\n        } else {\n            const [ smaller, bigger ] =\n                (this.decimals > other.decimals) ? [ other, this ] : [ this, other ]\n            const exponent = new BN (bigger.decimals - smaller.decimals)\n            const normalised = smaller.integer.mul (new BN (this.base).pow (exponent))\n            const result = normalised.add (bigger.integer)\n            return new Precise (result, bigger.decimals)\n        }\n    }\n\n    sub (other) {\n        const negative = new Precise (other.integer.neg (), other.decimals)\n        return this.add (negative)\n    }\n\n    abs () {\n        return new Precise (this.integer.abs (), this.decimals)\n    }\n\n    neg () {\n        return new Precise (this.integer.neg (), this.decimals)\n    }\n\n    reduce () {\n        const zero = new BN (0)\n        if (this.integer.eq (zero)) {\n            this.decimals = 0\n            return this\n        }\n        const base = new BN (this.base)\n        let divmod = this.integer.divmod (base)\n        while (divmod.mod.eq (zero)) {\n            this.integer = divmod.div\n            this.decimals--\n            divmod = this.integer.divmod (base)\n        }\n        return this\n    }\n\n    toString () {\n        const sign = this.integer.negative ? '-' : ''\n        const integerArray = Array.from (this.integer.abs ().toString (this.base).padStart (this.decimals, '0'))\n        const index = integerArray.length - this.decimals\n        let item\n        if (index === 0) {\n            // if we are adding to the front\n            item = '0.'\n        } else if (this.decimals < 0) {\n            item = '0'.repeat (-this.decimals)\n        } else if (this.decimals === 0) {\n            item = ''\n        } else {\n            item = '.'\n        }\n        integerArray.splice (index, 0, item)\n        return sign + integerArray.join ('')\n    }\n\n    static stringMul (string1, string2) {\n        if ((string1 === undefined) || (string2 === undefined)) {\n            return undefined\n        }\n        return (new Precise (string1)).mul (new Precise (string2)).toString ()\n    }\n\n    static stringDiv (string1, string2, precision = 18) {\n        if ((string1 === undefined) || (string2 === undefined)) {\n            return undefined\n        }\n        return (new Precise (string1)).div (new Precise (string2), precision).toString ()\n    }\n\n    static stringAdd (string1, string2) {\n        if ((string1 === undefined) && (string2 === undefined)) {\n            return undefined\n        }\n        if (string1 === undefined) {\n            return string2\n        } else if (string2 === undefined) {\n            return string1\n        }\n        return (new Precise (string1)).add (new Precise (string2)).toString ()\n    }\n\n    static stringSub (string1, string2) {\n        if ((string1 === undefined) || (string2 === undefined)) {\n            return undefined\n        }\n        return (new Precise (string1)).sub (new Precise (string2)).toString ()\n    }\n\n    static stringAbs (string) {\n        if (string === undefined) {\n            return undefined\n        }\n        return (new Precise (string)).abs ().toString ()\n    }\n\n    static stringNeg (string) {\n        if (string === undefined) {\n            return undefined\n        }\n        return (new Precise (string)).neg ().toString ()\n    }\n}\n\nmodule.exports = Precise;\n"]},"metadata":{},"sourceType":"script"}