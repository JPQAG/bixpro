{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  PAD_WITH_ZERO\n} = require('./base/functions/number');\n\nconst {\n  InvalidOrder,\n  InsufficientFunds,\n  ExchangeError,\n  ExchangeNotAvailable,\n  DDoSProtection,\n  BadRequest,\n  NotSupported,\n  InvalidAddress,\n  AuthenticationError\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class idex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'idex',\n      'name': 'IDEX',\n      'countries': ['US'],\n      'rateLimit': 1500,\n      'version': 'v2',\n      'certified': true,\n      'pro': true,\n      'requiresWeb3': true,\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchCurrencies': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchClosedOrders': true,\n        'fetchOrders': false,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTransactions': false,\n        'fetchDeposits': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '6h': '6h',\n        '1d': '1d'\n      },\n      'urls': {\n        'test': {\n          'public': 'https://api-sandbox.idex.io',\n          'private': 'https://api-sandbox.idex.io'\n        },\n        'logo': 'https://user-images.githubusercontent.com/51840849/94481303-2f222100-01e0-11eb-97dd-bc14c5943a86.jpg',\n        'api': {\n          'ETH': 'https://api-eth.idex.io',\n          'BSC': 'https://api-bsc.idex.io'\n        },\n        'www': 'https://idex.io',\n        'doc': ['https://docs.idex.io/']\n      },\n      'api': {\n        'public': {\n          'get': ['ping', 'time', 'exchange', 'assets', 'markets', 'tickers', 'candles', 'trades', 'orderbook', 'wsToken']\n        },\n        'private': {\n          'get': ['user', 'wallets', 'balances', 'orders', 'fills', 'deposits', 'withdrawals'],\n          'post': ['wallets', 'orders', 'orders/test', 'withdrawals'],\n          'delete': ['orders']\n        }\n      },\n      'options': {\n        'defaultTimeInForce': 'gtc',\n        'defaultSelfTradePrevention': 'cn',\n        'network': 'ETH' // also supports BSC\n\n      },\n      'exceptions': {\n        'INVALID_ORDER_QUANTITY': InvalidOrder,\n        'INSUFFICIENT_FUNDS': InsufficientFunds,\n        'SERVICE_UNAVAILABLE': ExchangeNotAvailable,\n        'EXCEEDED_RATE_LIMIT': DDoSProtection,\n        'INVALID_PARAMETER': BadRequest,\n        'WALLET_NOT_ASSOCIATED': InvalidAddress,\n        'INVALID_WALLET_SIGNATURE': AuthenticationError\n      },\n      'requiredCredentials': {\n        'walletAddress': true,\n        'privateKey': true,\n        'apiKey': true,\n        'secret': true\n      },\n      'paddingMode': PAD_WITH_ZERO,\n      'commonCurrencies': {},\n      'requireCredentials': {\n        'privateKey': true,\n        'apiKey': true,\n        'secret': true\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    // [\n    //   {\n    //     market: 'DIL-ETH',\n    //     status: 'active',\n    //     baseAsset: 'DIL',\n    //     baseAssetPrecision: 8,\n    //     quoteAsset: 'ETH',\n    //     quoteAssetPrecision: 8\n    //   }, ...\n    // ]\n    const response = await this.publicGetMarkets(params);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const entry = response[i];\n      const marketId = this.safeString(entry, 'market');\n      const baseId = this.safeString(entry, 'baseAsset');\n      const quoteId = this.safeString(entry, 'quoteAsset');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const basePrecisionString = this.safeString(entry, 'baseAssetPrecision');\n      const quotePrecisionString = this.safeString(entry, 'quoteAssetPrecision');\n      const basePrecision = this.parsePrecision(basePrecisionString);\n      const quotePrecision = this.parsePrecision(quotePrecisionString);\n      const status = this.safeString(entry, 'status');\n      const active = status === 'active';\n      const precision = {\n        'amount': parseInt(basePrecisionString),\n        'price': parseInt(quotePrecisionString)\n      };\n      result.push({\n        'symbol': symbol,\n        'id': marketId,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'info': entry,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.parseNumber(basePrecision),\n            'max': undefined\n          },\n          'price': {\n            'min': this.parseNumber(quotePrecision),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    }; // [\n    //   {\n    //     market: 'DIL-ETH',\n    //     time: 1598367493008,\n    //     open: '0.09695361',\n    //     high: '0.10245881',\n    //     low: '0.09572507',\n    //     close: '0.09917079',\n    //     closeQuantity: '0.71320950',\n    //     baseVolume: '309.17380612',\n    //     quoteVolume: '30.57633981',\n    //     percentChange: '2.28',\n    //     numTrades: 205,\n    //     ask: '0.09910476',\n    //     bid: '0.09688340',\n    //     sequence: 3902\n    //   }\n    // ]\n\n    const response = await this.publicGetTickers(this.extend(request, params));\n    const ticker = this.safeValue(response, 0);\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets(); // [\n    //   {\n    //     market: 'DIL-ETH',\n    //     time: 1598367493008,\n    //     open: '0.09695361',\n    //     high: '0.10245881',\n    //     low: '0.09572507',\n    //     close: '0.09917079',\n    //     closeQuantity: '0.71320950',\n    //     baseVolume: '309.17380612',\n    //     quoteVolume: '30.57633981',\n    //     percentChange: '2.28',\n    //     numTrades: 205,\n    //     ask: '0.09910476',\n    //     bid: '0.09688340',\n    //     sequence: 3902\n    //   }, ...\n    // ]\n\n    const response = await this.publicGetTickers(params);\n    return this.parseTickers(response, symbols);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    // {\n    //   market: 'DIL-ETH',\n    //   time: 1598367493008,\n    //   open: '0.09695361',\n    //   high: '0.10245881',\n    //   low: '0.09572507',\n    //   close: '0.09917079',\n    //   closeQuantity: '0.71320950',\n    //   baseVolume: '309.17380612',\n    //   quoteVolume: '30.57633981',\n    //   percentChange: '2.28',\n    //   numTrades: 205,\n    //   ask: '0.09910476',\n    //   bid: '0.09688340',\n    //   sequence: 3902\n    // }\n    const marketId = this.safeString(ticker, 'market');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const baseVolume = this.safeNumber(ticker, 'baseVolume');\n    const quoteVolume = this.safeNumber(ticker, 'quoteVolume');\n    const timestamp = this.safeInteger(ticker, 'time');\n    const open = this.safeNumber(ticker, 'open');\n    const high = this.safeNumber(ticker, 'high');\n    const low = this.safeNumber(ticker, 'low');\n    const close = this.safeNumber(ticker, 'close');\n    const ask = this.safeNumber(ticker, 'ask');\n    const bid = this.safeNumber(ticker, 'bid');\n    let percentage = this.safeNumber(ticker, 'percentChange');\n\n    if (percentage !== undefined) {\n      percentage = 1 + percentage / 100;\n    }\n\n    let change = undefined;\n\n    if (close !== undefined && open !== undefined) {\n      change = close - open;\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': high,\n      'low': low,\n      'bid': bid,\n      'bidVolume': undefined,\n      'ask': ask,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': open,\n      'close': close,\n      'last': close,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id'],\n      'interval': timeframe\n    };\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetCandles(this.extend(request, params));\n\n    if (Array.isArray(response)) {\n      // [\n      //   {\n      //     start: 1598345580000,\n      //     open: '0.09771286',\n      //     high: '0.09771286',\n      //     low: '0.09771286',\n      //     close: '0.09771286',\n      //     volume: '1.45340410',\n      //     sequence: 3853\n      //   }, ...\n      // ]\n      return this.parseOHLCVs(response, market, timeframe, since, limit);\n    } else {\n      //  {\"nextTime\":1595536440000}\n      return [];\n    }\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    // {\n    //   start: 1598345580000,\n    //   open: '0.09771286',\n    //   high: '0.09771286',\n    //   low: '0.09771286',\n    //   close: '0.09771286',\n    //   volume: '1.45340410',\n    //   sequence: 3853\n    // }\n    const timestamp = this.safeInteger(ohlcv, 'start');\n    const open = this.safeNumber(ohlcv, 'open');\n    const high = this.safeNumber(ohlcv, 'high');\n    const low = this.safeNumber(ohlcv, 'low');\n    const close = this.safeNumber(ohlcv, 'close');\n    const volume = this.safeNumber(ohlcv, 'volume');\n    return [timestamp, open, high, low, close, volume];\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    } // [\n    //   {\n    //     fillId: 'b5467d00-b13e-3fa9-8216-dd66735550fc',\n    //     price: '0.09771286',\n    //     quantity: '1.45340410',\n    //     quoteQuantity: '0.14201627',\n    //     time: 1598345638994,\n    //     makerSide: 'buy',\n    //     sequence: 3853\n    //   }, ...\n    // ]\n\n\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    // public trades\n    // {\n    //   fillId: 'b5467d00-b13e-3fa9-8216-dd66735550fc',\n    //   price: '0.09771286',\n    //   quantity: '1.45340410',\n    //   quoteQuantity: '0.14201627',\n    //   time: 1598345638994,\n    //   makerSide: 'buy',\n    //   sequence: 3853\n    // }\n    // private trades\n    // {\n    //   fillId: '48582d10-b9bb-3c4b-94d3-e67537cf2472',\n    //   price: '0.09905990',\n    //   quantity: '0.40000000',\n    //   quoteQuantity: '0.03962396',\n    //   time: 1598873478762,\n    //   makerSide: 'sell',\n    //   sequence: 5053,\n    //   market: 'DIL-ETH',\n    //   orderId: '7cdc8e90-eb7d-11ea-9e60-4118569f6e63',\n    //   side: 'buy',\n    //   fee: '0.00080000',\n    //   feeAsset: 'DIL',\n    //   gas: '0.00857497',\n    //   liquidity: 'taker',\n    //   txId: '0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65',\n    //   txStatus: 'mined'\n    // }\n    const id = this.safeString(trade, 'fillId');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'quantity');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    let cost = this.safeNumber(trade, 'quoteQuantity');\n\n    if (cost === undefined) {\n      cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    }\n\n    const timestamp = this.safeInteger(trade, 'time');\n    const marketId = this.safeString(trade, 'market');\n    const symbol = this.safeSymbol(marketId, market, '-'); // this code handles the duality of public vs private trades\n\n    const makerSide = this.safeString(trade, 'makerSide');\n    const oppositeSide = makerSide === 'buy' ? 'sell' : 'buy';\n    const side = this.safeString(trade, 'side', oppositeSide);\n    const takerOrMaker = this.safeString(trade, 'liquidity', 'taker');\n    const feeCost = this.safeNumber(trade, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'feeAsset');\n      fee = {\n        'cost': feeCost,\n        'currency': this.safeCurrencyCode(feeCurrencyId)\n      };\n    }\n\n    const orderId = this.safeString(trade, 'orderId');\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': orderId,\n      'type': 'limit',\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id'],\n      'level': 2\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    } // {\n    //   sequence: 36416753,\n    //   bids: [\n    //     [ '0.09672815', '8.22284267', 1 ],\n    //     [ '0.09672814', '1.83685554', 1 ],\n    //     [ '0.09672143', '4.10962617', 1 ],\n    //     [ '0.09658884', '4.03863759', 1 ],\n    //     [ '0.09653781', '3.35730684', 1 ],\n    //     [ '0.09624660', '2.54163586', 1 ],\n    //     [ '0.09617490', '1.93065030', 1 ]\n    //   ],\n    //   asks: [\n    //     [ '0.09910476', '3.22840154', 1 ],\n    //     [ '0.09940587', '3.39796593', 1 ],\n    //     [ '0.09948189', '4.25088898', 1 ],\n    //     [ '0.09958362', '2.42195784', 1 ],\n    //     [ '0.09974393', '4.25234367', 1 ],\n    //     [ '0.09995250', '3.40192141', 1 ]\n    //   ]\n    // }\n\n\n    const response = await this.publicGetOrderbook(this.extend(request, params));\n    const nonce = this.safeInteger(response, 'sequence');\n    return {\n      'symbol': symbol,\n      'timestamp': undefined,\n      'datetime': undefined,\n      'nonce': nonce,\n      'bids': this.parseSide(response, 'bids'),\n      'asks': this.parseSide(response, 'asks')\n    };\n  }\n\n  parseSide(book, side) {\n    const bookSide = this.safeValue(book, side, []);\n    const result = [];\n\n    for (let i = 0; i < bookSide.length; i++) {\n      const order = bookSide[i];\n      const price = this.safeNumber(order, 0);\n      const amount = this.safeNumber(order, 1);\n      const orderCount = this.safeInteger(order, 2);\n      result.push([price, amount, orderCount]);\n    }\n\n    const descending = side === 'bids';\n    return this.sortBy(result, 0, descending);\n  }\n\n  async fetchCurrencies(params = {}) {\n    // [\n    //   {\n    //     name: 'Ether',\n    //     symbol: 'ETH',\n    //     contractAddress: '0x0000000000000000000000000000000000000000',\n    //     assetDecimals: 18,\n    //     exchangeDecimals: 8\n    //   }, ..\n    // ]\n    const response = await this.publicGetAssets(params);\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const entry = response[i];\n      const name = this.safeString(entry, 'name');\n      const currencyId = this.safeString(entry, 'symbol');\n      const precisionString = this.safeString(entry, 'exchangeDecimals');\n      const code = this.safeCurrencyCode(currencyId);\n      const precision = this.parsePrecision(precisionString);\n      const lot = this.parseNumber(precision);\n      result[code] = {\n        'id': currencyId,\n        'code': code,\n        'info': entry,\n        'type': undefined,\n        'name': name,\n        'active': undefined,\n        'fee': undefined,\n        'precision': parseInt(precisionString),\n        'limits': {\n          'amount': {\n            'min': lot,\n            'max': undefined\n          },\n          'withdraw': {\n            'min': lot,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    this.checkRequiredCredentials();\n    await this.loadMarkets();\n    const nonce1 = this.uuidv1();\n    const request = {\n      'nonce': nonce1,\n      'wallet': this.walletAddress\n    }; // [\n    //   {\n    //     asset: 'DIL',\n    //     quantity: '0.00000000',\n    //     availableForTrade: '0.00000000',\n    //     locked: '0.00000000',\n    //     usdValue: null\n    //   }, ...\n    // ]\n\n    const extendedRequest = this.extend(request, params);\n\n    if (extendedRequest['wallet'] === undefined) {\n      throw new BadRequest(this.id + ' wallet is undefined, set this.walletAddress or \"address\" in params');\n    }\n\n    let response = undefined;\n\n    try {\n      response = await this.privateGetBalances(extendedRequest);\n    } catch (e) {\n      if (e instanceof InvalidAddress) {\n        const walletAddress = extendedRequest['wallet'];\n        await this.associateWallet(walletAddress);\n        response = await this.privateGetBalances(extendedRequest);\n      } else {\n        throw e;\n      }\n    }\n\n    const result = {\n      'info': response,\n      'timestamp': undefined,\n      'datetime': undefined\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const entry = response[i];\n      const currencyId = this.safeString(entry, 'asset');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeString(entry, 'quantity');\n      account['free'] = this.safeString(entry, 'availableForTrade');\n      account['used'] = this.safeString(entry, 'locked');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    this.checkRequiredCredentials();\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {\n      'nonce': this.uuidv1(),\n      'wallet': this.walletAddress\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    } // [\n    //   {\n    //     fillId: '48582d10-b9bb-3c4b-94d3-e67537cf2472',\n    //     price: '0.09905990',\n    //     quantity: '0.40000000',\n    //     quoteQuantity: '0.03962396',\n    //     time: 1598873478762,\n    //     makerSide: 'sell',\n    //     sequence: 5053,\n    //     market: 'DIL-ETH',\n    //     orderId: '7cdc8e90-eb7d-11ea-9e60-4118569f6e63',\n    //     side: 'buy',\n    //     fee: '0.00080000',\n    //     feeAsset: 'DIL',\n    //     gas: '0.00857497',\n    //     liquidity: 'taker',\n    //     txId: '0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65',\n    //     txStatus: 'mined'\n    //   }\n    // ]\n\n\n    const extendedRequest = this.extend(request, params);\n\n    if (extendedRequest['wallet'] === undefined) {\n      throw new BadRequest(this.id + ' walletAddress is undefined, set this.walletAddress or \"address\" in params');\n    }\n\n    let response = undefined;\n\n    try {\n      response = await this.privateGetFills(extendedRequest);\n    } catch (e) {\n      if (e instanceof InvalidAddress) {\n        const walletAddress = extendedRequest['wallet'];\n        await this.associateWallet(walletAddress);\n        response = await this.privateGetFills(extendedRequest);\n      } else {\n        throw e;\n      }\n    }\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'orderId': id\n    };\n    return await this.fetchOrdersHelper(symbol, undefined, undefined, this.extend(request, params));\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'closed': false\n    };\n    return await this.fetchOrdersHelper(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'closed': true\n    };\n    return await this.fetchOrdersHelper(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrdersHelper(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'nonce': this.uuidv1(),\n      'wallet': this.walletAddress\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params)); // fetchClosedOrders / fetchOpenOrders\n    // [\n    //   {\n    //     \"market\": \"DIL-ETH\",\n    //     \"orderId\": \"7cdc8e90-eb7d-11ea-9e60-4118569f6e63\",\n    //     \"wallet\": \"0x0AB991497116f7F5532a4c2f4f7B1784488628e1\",\n    //     \"time\": 1598873478650,\n    //     \"status\": \"filled\",\n    //     \"type\": \"limit\",\n    //     \"side\": \"buy\",\n    //     \"originalQuantity\": \"0.40000000\",\n    //     \"executedQuantity\": \"0.40000000\",\n    //     \"cumulativeQuoteQuantity\": \"0.03962396\",\n    //     \"avgExecutionPrice\": \"0.09905990\",\n    //     \"price\": \"1.00000000\",\n    //     \"fills\": [\n    //       {\n    //         \"fillId\": \"48582d10-b9bb-3c4b-94d3-e67537cf2472\",\n    //         \"price\": \"0.09905990\",\n    //         \"quantity\": \"0.40000000\",\n    //         \"quoteQuantity\": \"0.03962396\",\n    //         \"time\": 1598873478650,\n    //         \"makerSide\": \"sell\",\n    //         \"sequence\": 5053,\n    //         \"fee\": \"0.00080000\",\n    //         \"feeAsset\": \"DIL\",\n    //         \"gas\": \"0.00857497\",\n    //         \"liquidity\": \"taker\",\n    //         \"txId\": \"0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65\",\n    //         \"txStatus\": \"mined\"\n    //       }\n    //     ]\n    //   }\n    // ]\n    // fetchOrder\n    // { market: 'DIL-ETH',\n    //   orderId: '7cdc8e90-eb7d-11ea-9e60-4118569f6e63',\n    //   wallet: '0x0AB991497116f7F5532a4c2f4f7B1784488628e1',\n    //   time: 1598873478650,\n    //   status: 'filled',\n    //   type: 'limit',\n    //   side: 'buy',\n    //   originalQuantity: '0.40000000',\n    //   executedQuantity: '0.40000000',\n    //   cumulativeQuoteQuantity: '0.03962396',\n    //   avgExecutionPrice: '0.09905990',\n    //   price: '1.00000000',\n    //   fills:\n    //    [ { fillId: '48582d10-b9bb-3c4b-94d3-e67537cf2472',\n    //        price: '0.09905990',\n    //        quantity: '0.40000000',\n    //        quoteQuantity: '0.03962396',\n    //        time: 1598873478650,\n    //        makerSide: 'sell',\n    //        sequence: 5053,\n    //        fee: '0.00080000',\n    //        feeAsset: 'DIL',\n    //        gas: '0.00857497',\n    //        liquidity: 'taker',\n    //        txId: '0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65',\n    //        txStatus: 'mined' } ] }\n\n    if (Array.isArray(response)) {\n      return this.parseOrders(response, market, since, limit);\n    } else {\n      return this.parseOrder(response, market);\n    }\n  }\n\n  parseOrderStatus(status) {\n    // https://docs.idex.io/#order-states-amp-lifecycle\n    const statuses = {\n      'active': 'open',\n      'partiallyFilled': 'open',\n      'rejected': 'canceled',\n      'filled': 'closed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"market\": \"DIL-ETH\",\n    //         \"orderId\": \"7cdc8e90-eb7d-11ea-9e60-4118569f6e63\",\n    //         \"wallet\": \"0x0AB991497116f7F5532a4c2f4f7B1784488628e1\",\n    //         \"time\": 1598873478650,\n    //         \"status\": \"filled\",\n    //         \"type\": \"limit\",\n    //         \"side\": \"buy\",\n    //         \"originalQuantity\": \"0.40000000\",\n    //         \"executedQuantity\": \"0.40000000\",\n    //         \"cumulativeQuoteQuantity\": \"0.03962396\",\n    //         \"avgExecutionPrice\": \"0.09905990\",\n    //         \"price\": \"1.00000000\",\n    //         \"fills\": [\n    //             {\n    //             \"fillId\": \"48582d10-b9bb-3c4b-94d3-e67537cf2472\",\n    //             \"price\": \"0.09905990\",\n    //             \"quantity\": \"0.40000000\",\n    //             \"quoteQuantity\": \"0.03962396\",\n    //             \"time\": 1598873478650,\n    //             \"makerSide\": \"sell\",\n    //             \"sequence\": 5053,\n    //             \"fee\": \"0.00080000\",\n    //             \"feeAsset\": \"DIL\",\n    //             \"gas\": \"0.00857497\",\n    //             \"liquidity\": \"taker\",\n    //             \"txId\": \"0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65\",\n    //             \"txStatus\": \"mined\"\n    //             }\n    //         ]\n    //     }\n    //\n    const timestamp = this.safeInteger(order, 'time');\n    const fills = this.safeValue(order, 'fills', []);\n    const id = this.safeString(order, 'orderId');\n    const clientOrderId = this.safeString(order, 'clientOrderId');\n    const marketId = this.safeString(order, 'market');\n    const side = this.safeString(order, 'side');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const trades = this.parseTrades(fills, market);\n    const type = this.safeString(order, 'type');\n    const amount = this.safeNumber(order, 'originalQuantity');\n    const filled = this.safeNumber(order, 'executedQuantity');\n    const average = this.safeNumber(order, 'avgExecutionPrice');\n    const price = this.safeNumber(order, 'price');\n    const rawStatus = this.safeString(order, 'status');\n    const status = this.parseOrderStatus(rawStatus);\n    return this.safeOrder({\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': undefined,\n      'average': average,\n      'filled': filled,\n      'remaining': undefined,\n      'status': status,\n      'fee': undefined,\n      'trades': trades\n    });\n  }\n\n  async associateWallet(walletAddress, params = {}) {\n    const nonce = this.uuidv1();\n    const noPrefix = this.remove0xPrefix(walletAddress);\n    const byteArray = [this.base16ToBinary(nonce), this.base16ToBinary(noPrefix)];\n    const binary = this.binaryConcatArray(byteArray);\n    const hash = this.hash(binary, 'keccak', 'hex');\n    const signature = this.signMessageString(hash, this.privateKey); // {\n    //   address: '0x0AB991497116f7F5532a4c2f4f7B1784488628e1',\n    //   totalPortfolioValueUsd: '0.00',\n    //   time: 1598468353626\n    // }\n\n    const request = {\n      'parameters': {\n        'nonce': nonce,\n        'wallet': walletAddress\n      },\n      'signature': signature\n    };\n    const result = await this.privatePostWallets(request);\n    return result;\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    // https://docs.idex.io/#create-order\n    this.checkRequiredCredentials();\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const nonce = this.uuidv1();\n    let typeEnum = undefined;\n    const stopLossTypeEnums = {\n      'stopLoss': 3,\n      'stopLossLimit': 4,\n      'takeProfit': 5,\n      'takeProfitLimit': 6\n    };\n    let stopPriceString = undefined;\n\n    if (type === 'stopLossLimit' || type === 'takeProfitLimit' || 'stopPrice' in params) {\n      if (!('stopPrice' in params)) {\n        throw new BadRequest(this.id + ' stopPrice is a required parameter for ' + type + 'orders');\n      }\n\n      stopPriceString = this.priceToPrecision(symbol, params['stopPrice']);\n    }\n\n    const limitTypeEnums = {\n      'limit': 1,\n      'limitMaker': 2\n    };\n    let priceString = undefined;\n    const typeLower = type.toLowerCase();\n    const limitOrder = typeLower.indexOf('limit') > -1;\n\n    if (type in limitTypeEnums) {\n      typeEnum = limitTypeEnums[type];\n      priceString = this.priceToPrecision(symbol, price);\n    } else if (type in stopLossTypeEnums) {\n      typeEnum = stopLossTypeEnums[type];\n      priceString = this.priceToPrecision(symbol, price);\n    } else if (type === 'market') {\n      typeEnum = 0;\n    } else {\n      throw new BadRequest(this.id + ' ' + type + ' is not a valid order type');\n    }\n\n    let amountEnum = 0; // base quantity\n\n    if ('quoteOrderQuantity' in params) {\n      if (type !== 'market') {\n        throw new NotSupported(this.id + ' quoteOrderQuantity is not supported for ' + type + ' orders, only supported for market orders');\n      }\n\n      amountEnum = 1;\n      amount = this.safeNumber(params, 'quoteOrderQuantity');\n    }\n\n    const sideEnum = side === 'buy' ? 0 : 1;\n    const walletBytes = this.remove0xPrefix(this.walletAddress);\n    const network = this.safeString(this.options, 'network', 'ETH');\n    const orderVersion = network === 'ETH' ? 1 : 2;\n    const amountString = this.amountToPrecision(symbol, amount); // https://docs.idex.io/#time-in-force\n\n    const timeInForceEnums = {\n      'gtc': 0,\n      'ioc': 2,\n      'fok': 3\n    };\n    const defaultTimeInForce = this.safeString(this.options, 'defaultTimeInForce', 'gtc');\n    const timeInForce = this.safeString(params, 'timeInForce', defaultTimeInForce);\n    let timeInForceEnum = undefined;\n\n    if (timeInForce in timeInForceEnums) {\n      timeInForceEnum = timeInForceEnums[timeInForce];\n    } else {\n      const allOptions = Object.keys(timeInForceEnums);\n      const asString = allOptions.join(', ');\n      throw new BadRequest(this.id + ' ' + timeInForce + ' is not a valid timeInForce, please choose one of ' + asString);\n    } // https://docs.idex.io/#self-trade-prevention\n\n\n    const selfTradePreventionEnums = {\n      'dc': 0,\n      'co': 1,\n      'cn': 2,\n      'cb': 3\n    };\n    const defaultSelfTradePrevention = this.safeString(this.options, 'defaultSelfTradePrevention', 'cn');\n    const selfTradePrevention = this.safeString(params, 'selfTradePrevention', defaultSelfTradePrevention);\n    let selfTradePreventionEnum = undefined;\n\n    if (selfTradePrevention in selfTradePreventionEnums) {\n      selfTradePreventionEnum = selfTradePreventionEnums[selfTradePrevention];\n    } else {\n      const allOptions = Object.keys(selfTradePreventionEnums);\n      const asString = allOptions.join(', ');\n      throw new BadRequest(this.id + ' ' + selfTradePrevention + ' is not a valid selfTradePrevention, please choose one of ' + asString);\n    }\n\n    const byteArray = [this.numberToBE(orderVersion, 1), this.base16ToBinary(nonce), this.base16ToBinary(walletBytes), this.stringToBinary(this.encode(market['id'])), // TODO: refactor to remove either encode or stringToBinary\n    this.numberToBE(typeEnum, 1), this.numberToBE(sideEnum, 1), this.stringToBinary(this.encode(amountString)), this.numberToBE(amountEnum, 1)];\n\n    if (limitOrder) {\n      const encodedPrice = this.stringToBinary(this.encode(priceString));\n      byteArray.push(encodedPrice);\n    }\n\n    if (type in stopLossTypeEnums) {\n      const encodedPrice = this.stringToBinary(this.encode(stopPriceString || priceString));\n      byteArray.push(encodedPrice);\n    }\n\n    const clientOrderId = this.safeString(params, 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      byteArray.push(this.stringToBinary(this.encode(clientOrderId)));\n    }\n\n    const after = [this.numberToBE(timeInForceEnum, 1), this.numberToBE(selfTradePreventionEnum, 1), this.numberToBE(0, 8) // unused\n    ];\n    const allBytes = this.arrayConcat(byteArray, after);\n    const binary = this.binaryConcatArray(allBytes);\n    const hash = this.hash(binary, 'keccak', 'hex');\n    const signature = this.signMessageString(hash, this.privateKey);\n    const request = {\n      'parameters': {\n        'nonce': nonce,\n        'market': market['id'],\n        'side': side,\n        'type': type,\n        'wallet': this.walletAddress,\n        'timeInForce': timeInForce,\n        'selfTradePrevention': selfTradePrevention\n      },\n      'signature': signature\n    };\n\n    if (limitOrder) {\n      request['parameters']['price'] = priceString;\n    }\n\n    if (type in stopLossTypeEnums) {\n      request['parameters']['stopPrice'] = stopPriceString || priceString;\n    }\n\n    if (amountEnum === 0) {\n      request['parameters']['quantity'] = amountString;\n    } else {\n      request['parameters']['quoteOrderQuantity'] = amountString;\n    }\n\n    if (clientOrderId !== undefined) {\n      request['parameters']['clientOrderId'] = clientOrderId;\n    } // {\n    //   market: 'DIL-ETH',\n    //   orderId: '7cdc8e90-eb7d-11ea-9e60-4118569f6e63',\n    //   wallet: '0x0AB991497116f7F5532a4c2f4f7B1784488628e1',\n    //   time: 1598873478650,\n    //   status: 'filled',\n    //   type: 'limit',\n    //   side: 'buy',\n    //   originalQuantity: '0.40000000',\n    //   executedQuantity: '0.40000000',\n    //   cumulativeQuoteQuantity: '0.03962396',\n    //   price: '1.00000000',\n    //   fills: [\n    //     {\n    //       fillId: '48582d10-b9bb-3c4b-94d3-e67537cf2472',\n    //       price: '0.09905990',\n    //       quantity: '0.40000000',\n    //       quoteQuantity: '0.03962396',\n    //       time: 1598873478650,\n    //       makerSide: 'sell',\n    //       sequence: 5053,\n    //       fee: '0.00080000',\n    //       feeAsset: 'DIL',\n    //       gas: '0.00857497',\n    //       liquidity: 'taker',\n    //       txStatus: 'pending'\n    //     }\n    //   ],\n    //   avgExecutionPrice: '0.09905990'\n    // }\n    // we don't use extend here because it is a signed endpoint\n\n\n    const response = await this.privatePostOrders(request);\n    return this.parseOrder(response, market);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkRequiredCredentials();\n    await this.loadMarkets();\n    const nonce = this.uuidv1();\n    const amountString = this.currencyToPrecision(code, amount);\n    const currency = this.currency(code);\n    const walletBytes = this.remove0xPrefix(this.walletAddress);\n    const byteArray = [this.base16ToBinary(nonce), this.base16ToBinary(walletBytes), this.stringToBinary(this.encode(currency['id'])), this.stringToBinary(this.encode(amountString)), this.numberToBE(1, 1) // bool set to true\n    ];\n    const binary = this.binaryConcatArray(byteArray);\n    const hash = this.hash(binary, 'keccak', 'hex');\n    const signature = this.signMessageString(hash, this.privateKey);\n    const request = {\n      'parameters': {\n        'nonce': nonce,\n        'wallet': address,\n        'asset': currency['id'],\n        'quantity': amountString\n      },\n      'signature': signature\n    }; // {\n    //   withdrawalId: 'a61dcff0-ec4d-11ea-8b83-c78a6ecb3180',\n    //   asset: 'ETH',\n    //   assetContractAddress: '0x0000000000000000000000000000000000000000',\n    //   quantity: '0.20000000',\n    //   time: 1598962883190,\n    //   fee: '0.00024000',\n    //   txStatus: 'pending',\n    //   txId: null\n    // }\n\n    const response = await this.privatePostWithdrawals(request);\n    const id = this.safeString(response, 'withdrawalId');\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    this.checkRequiredCredentials();\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const nonce = this.uuidv1();\n    const walletBytes = this.remove0xPrefix(this.walletAddress);\n    const byteArray = [this.base16ToBinary(nonce), this.base16ToBinary(walletBytes), this.stringToBinary(this.encode(id))];\n    const binary = this.binaryConcatArray(byteArray);\n    const hash = this.hash(binary, 'keccak', 'hex');\n    const signature = this.signMessageString(hash, this.privateKey);\n    const request = {\n      'parameters': {\n        'nonce': nonce,\n        'wallet': this.walletAddress,\n        'orderId': id\n      },\n      'signature': signature\n    }; // [ { orderId: '688336f0-ec50-11ea-9842-b332f8a34d0e' } ]\n\n    const response = await this.privateDeleteOrders(this.extend(request, params));\n    const canceledOrder = this.safeValue(response, 0);\n    return this.parseOrder(canceledOrder, market);\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    const errorCode = this.safeString(response, 'code');\n    const message = this.safeString(response, 'message');\n\n    if (errorCode in this.exceptions) {\n      const Exception = this.exceptions[errorCode];\n      throw new Exception(this.id + ' ' + message);\n    }\n\n    if (errorCode !== undefined) {\n      throw new ExchangeError(this.id + ' ' + message);\n    }\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    params = this.extend({\n      'method': 'privateGetDeposits'\n    }, params);\n    return this.fetchTransactionsHelper(code, since, limit, params);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    params = this.extend({\n      'method': 'privateGetWithdrawals'\n    }, params);\n    return this.fetchTransactionsHelper(code, since, limit, params);\n  }\n\n  async fetchTransactionsHelper(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const nonce = this.uuidv1();\n    const request = {\n      'nonce': nonce,\n      'wallet': this.walletAddress\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['asset'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    } // [\n    //   {\n    //     depositId: 'e9970cc0-eb6b-11ea-9e89-09a5ebc1f98e',\n    //     asset: 'ETH',\n    //     quantity: '1.00000000',\n    //     txId: '0xcd4aac3171d7131cc9e795568c67938675185ac17641553ef54c8a7c294c8142',\n    //     txTime: 1598865853000,\n    //     confirmationTime: 1598865930231\n    //   }\n    // ]\n\n\n    const method = params['method'];\n    params = this.omit(params, 'method');\n    const response = await this[method](this.extend(request, params));\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'mined': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    // fetchDeposits\n    // {\n    //   depositId: 'e9970cc0-eb6b-11ea-9e89-09a5ebc1f98f',\n    //   asset: 'ETH',\n    //   quantity: '1.00000000',\n    //   txId: '0xcd4aac3171d7131cc9e795568c67938675185ac17641553ef54c8a7c294c8142',\n    //   txTime: 1598865853000,\n    //   confirmationTime: 1598865930231\n    // }\n    // fetchWithdrwalas\n    // {\n    //   withdrawalId: 'a62d8760-ec4d-11ea-9fa6-47904c19499b',\n    //   asset: 'ETH',\n    //   assetContractAddress: '0x0000000000000000000000000000000000000000',\n    //   quantity: '0.20000000',\n    //   time: 1598962883288,\n    //   fee: '0.00024000',\n    //   txId: '0x305e9cdbaa85ad029f50578d13d31d777c085de573ed5334d95c19116d8c03ce',\n    //   txStatus: 'mined'\n    //  }\n    let type = undefined;\n\n    if ('depositId' in transaction) {\n      type = 'deposit';\n    } else if ('withdrawalId' in transaction) {\n      type = 'withdrawal';\n    }\n\n    const id = this.safeString2(transaction, 'depositId', 'withdrawId');\n    const code = this.safeCurrencyCode(this.safeString(transaction, 'asset'), currency);\n    const amount = this.safeNumber(transaction, 'quantity');\n    const txid = this.safeString(transaction, 'txId');\n    const timestamp = this.safeInteger(transaction, 'txTime');\n    let fee = undefined;\n\n    if ('fee' in transaction) {\n      fee = {\n        'cost': this.safeNumber(transaction, 'fee'),\n        'currency': 'ETH'\n      };\n    }\n\n    const rawStatus = this.safeString(transaction, 'txStatus');\n    const status = this.parseTransactionStatus(rawStatus);\n    const updated = this.safeInteger(transaction, 'confirmationTime');\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': undefined,\n      'tag': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const network = this.safeString(this.options, 'network', 'ETH');\n    const version = this.safeString(this.options, 'version', 'v1');\n    let url = this.urls['api'][network] + '/' + version + '/' + path;\n    const keys = Object.keys(params);\n    const length = keys.length;\n    let query = undefined;\n\n    if (length > 0) {\n      if (method === 'GET') {\n        query = this.urlencode(params);\n        url = url + '?' + query;\n      } else {\n        body = this.json(params);\n      }\n    }\n\n    headers = {\n      'Content-Type': 'application/json'\n    };\n\n    if (this.apiKey !== undefined) {\n      headers['IDEX-API-Key'] = this.apiKey;\n    }\n\n    if (api === 'private') {\n      let payload = undefined;\n\n      if (method === 'GET') {\n        payload = query;\n      } else {\n        payload = body;\n      }\n\n      headers['IDEX-HMAC-Signature'] = this.hmac(this.encode(payload), this.encode(this.secret), 'sha256', 'hex');\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/idex.js"],"names":["Exchange","require","PAD_WITH_ZERO","InvalidOrder","InsufficientFunds","ExchangeError","ExchangeNotAvailable","DDoSProtection","BadRequest","NotSupported","InvalidAddress","AuthenticationError","Precise","module","exports","idex","describe","deepExtend","fetchMarkets","params","response","publicGetMarkets","result","i","length","entry","marketId","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","basePrecisionString","quotePrecisionString","basePrecision","parsePrecision","quotePrecision","status","active","precision","parseInt","push","parseNumber","undefined","fetchTicker","loadMarkets","market","request","publicGetTickers","extend","ticker","safeValue","parseTicker","fetchTickers","symbols","parseTickers","safeSymbol","baseVolume","safeNumber","quoteVolume","timestamp","safeInteger","open","high","low","close","ask","bid","percentage","change","iso8601","fetchOHLCV","timeframe","since","limit","publicGetCandles","Array","isArray","parseOHLCVs","parseOHLCV","ohlcv","volume","fetchTrades","publicGetTrades","parseTrades","parseTrade","trade","id","priceString","amountString","price","amount","cost","stringMul","makerSide","oppositeSide","side","takerOrMaker","feeCost","fee","feeCurrencyId","orderId","fetchOrderBook","publicGetOrderbook","nonce","parseSide","book","bookSide","order","orderCount","descending","sortBy","fetchCurrencies","publicGetAssets","name","currencyId","precisionString","code","lot","fetchBalance","checkRequiredCredentials","nonce1","uuidv1","walletAddress","extendedRequest","privateGetBalances","e","associateWallet","account","parseBalance","fetchMyTrades","privateGetFills","fetchOrder","fetchOrdersHelper","fetchOpenOrders","fetchClosedOrders","privateGetOrders","parseOrders","parseOrder","parseOrderStatus","statuses","fills","clientOrderId","trades","type","filled","average","rawStatus","safeOrder","noPrefix","remove0xPrefix","byteArray","base16ToBinary","binary","binaryConcatArray","hash","signature","signMessageString","privateKey","privatePostWallets","createOrder","typeEnum","stopLossTypeEnums","stopPriceString","priceToPrecision","limitTypeEnums","typeLower","toLowerCase","limitOrder","indexOf","amountEnum","sideEnum","walletBytes","network","options","orderVersion","amountToPrecision","timeInForceEnums","defaultTimeInForce","timeInForce","timeInForceEnum","allOptions","Object","keys","asString","join","selfTradePreventionEnums","defaultSelfTradePrevention","selfTradePrevention","selfTradePreventionEnum","numberToBE","stringToBinary","encode","encodedPrice","after","allBytes","arrayConcat","privatePostOrders","withdraw","address","tag","currencyToPrecision","currency","privatePostWithdrawals","cancelOrder","privateDeleteOrders","canceledOrder","handleErrors","reason","url","method","headers","body","requestHeaders","requestBody","errorCode","message","exceptions","Exception","fetchDeposits","fetchTransactionsHelper","fetchWithdrawals","omit","parseTransactions","parseTransactionStatus","parseTransaction","transaction","safeString2","txid","updated","sign","path","api","version","urls","query","urlencode","json","apiKey","payload","hmac","secret"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { PAD_WITH_ZERO } = require ('./base/functions/number');\nconst { InvalidOrder, InsufficientFunds, ExchangeError, ExchangeNotAvailable, DDoSProtection, BadRequest, NotSupported, InvalidAddress, AuthenticationError } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class idex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'idex',\n            'name': 'IDEX',\n            'countries': [ 'US' ],\n            'rateLimit': 1500,\n            'version': 'v2',\n            'certified': true,\n            'pro': true,\n            'requiresWeb3': true,\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchCurrencies': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n                'fetchOrders': false,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTransactions': false,\n                'fetchDeposits': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '6h': '6h',\n                '1d': '1d',\n            },\n            'urls': {\n                'test': {\n                    'public': 'https://api-sandbox.idex.io',\n                    'private': 'https://api-sandbox.idex.io',\n                },\n                'logo': 'https://user-images.githubusercontent.com/51840849/94481303-2f222100-01e0-11eb-97dd-bc14c5943a86.jpg',\n                'api': {\n                    'ETH': 'https://api-eth.idex.io',\n                    'BSC': 'https://api-bsc.idex.io',\n                },\n                'www': 'https://idex.io',\n                'doc': [\n                    'https://docs.idex.io/',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ping',\n                        'time',\n                        'exchange',\n                        'assets',\n                        'markets',\n                        'tickers',\n                        'candles',\n                        'trades',\n                        'orderbook',\n                        'wsToken',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'user',\n                        'wallets',\n                        'balances',\n                        'orders',\n                        'fills',\n                        'deposits',\n                        'withdrawals',\n                    ],\n                    'post': [\n                        'wallets',\n                        'orders',\n                        'orders/test',\n                        'withdrawals',\n                    ],\n                    'delete': [\n                        'orders',\n                    ],\n                },\n            },\n            'options': {\n                'defaultTimeInForce': 'gtc',\n                'defaultSelfTradePrevention': 'cn',\n                'network': 'ETH', // also supports BSC\n            },\n            'exceptions': {\n                'INVALID_ORDER_QUANTITY': InvalidOrder,\n                'INSUFFICIENT_FUNDS': InsufficientFunds,\n                'SERVICE_UNAVAILABLE': ExchangeNotAvailable,\n                'EXCEEDED_RATE_LIMIT': DDoSProtection,\n                'INVALID_PARAMETER': BadRequest,\n                'WALLET_NOT_ASSOCIATED': InvalidAddress,\n                'INVALID_WALLET_SIGNATURE': AuthenticationError,\n            },\n            'requiredCredentials': {\n                'walletAddress': true,\n                'privateKey': true,\n                'apiKey': true,\n                'secret': true,\n            },\n            'paddingMode': PAD_WITH_ZERO,\n            'commonCurrencies': {},\n            'requireCredentials': {\n                'privateKey': true,\n                'apiKey': true,\n                'secret': true,\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        // [\n        //   {\n        //     market: 'DIL-ETH',\n        //     status: 'active',\n        //     baseAsset: 'DIL',\n        //     baseAssetPrecision: 8,\n        //     quoteAsset: 'ETH',\n        //     quoteAssetPrecision: 8\n        //   }, ...\n        // ]\n        const response = await this.publicGetMarkets (params);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const entry = response[i];\n            const marketId = this.safeString (entry, 'market');\n            const baseId = this.safeString (entry, 'baseAsset');\n            const quoteId = this.safeString (entry, 'quoteAsset');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const basePrecisionString = this.safeString (entry, 'baseAssetPrecision');\n            const quotePrecisionString = this.safeString (entry, 'quoteAssetPrecision');\n            const basePrecision = this.parsePrecision (basePrecisionString);\n            const quotePrecision = this.parsePrecision (quotePrecisionString);\n            const status = this.safeString (entry, 'status');\n            const active = status === 'active';\n            const precision = {\n                'amount': parseInt (basePrecisionString),\n                'price': parseInt (quotePrecisionString),\n            };\n            result.push ({\n                'symbol': symbol,\n                'id': marketId,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'info': entry,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.parseNumber (basePrecision),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': this.parseNumber (quotePrecision),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        // [\n        //   {\n        //     market: 'DIL-ETH',\n        //     time: 1598367493008,\n        //     open: '0.09695361',\n        //     high: '0.10245881',\n        //     low: '0.09572507',\n        //     close: '0.09917079',\n        //     closeQuantity: '0.71320950',\n        //     baseVolume: '309.17380612',\n        //     quoteVolume: '30.57633981',\n        //     percentChange: '2.28',\n        //     numTrades: 205,\n        //     ask: '0.09910476',\n        //     bid: '0.09688340',\n        //     sequence: 3902\n        //   }\n        // ]\n        const response = await this.publicGetTickers (this.extend (request, params));\n        const ticker = this.safeValue (response, 0);\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        // [\n        //   {\n        //     market: 'DIL-ETH',\n        //     time: 1598367493008,\n        //     open: '0.09695361',\n        //     high: '0.10245881',\n        //     low: '0.09572507',\n        //     close: '0.09917079',\n        //     closeQuantity: '0.71320950',\n        //     baseVolume: '309.17380612',\n        //     quoteVolume: '30.57633981',\n        //     percentChange: '2.28',\n        //     numTrades: 205,\n        //     ask: '0.09910476',\n        //     bid: '0.09688340',\n        //     sequence: 3902\n        //   }, ...\n        // ]\n        const response = await this.publicGetTickers (params);\n        return this.parseTickers (response, symbols);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        // {\n        //   market: 'DIL-ETH',\n        //   time: 1598367493008,\n        //   open: '0.09695361',\n        //   high: '0.10245881',\n        //   low: '0.09572507',\n        //   close: '0.09917079',\n        //   closeQuantity: '0.71320950',\n        //   baseVolume: '309.17380612',\n        //   quoteVolume: '30.57633981',\n        //   percentChange: '2.28',\n        //   numTrades: 205,\n        //   ask: '0.09910476',\n        //   bid: '0.09688340',\n        //   sequence: 3902\n        // }\n        const marketId = this.safeString (ticker, 'market');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const baseVolume = this.safeNumber (ticker, 'baseVolume');\n        const quoteVolume = this.safeNumber (ticker, 'quoteVolume');\n        const timestamp = this.safeInteger (ticker, 'time');\n        const open = this.safeNumber (ticker, 'open');\n        const high = this.safeNumber (ticker, 'high');\n        const low = this.safeNumber (ticker, 'low');\n        const close = this.safeNumber (ticker, 'close');\n        const ask = this.safeNumber (ticker, 'ask');\n        const bid = this.safeNumber (ticker, 'bid');\n        let percentage = this.safeNumber (ticker, 'percentChange');\n        if (percentage !== undefined) {\n            percentage = 1 + percentage / 100;\n        }\n        let change = undefined;\n        if ((close !== undefined) && (open !== undefined)) {\n            change = close - open;\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': high,\n            'low': low,\n            'bid': bid,\n            'bidVolume': undefined,\n            'ask': ask,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': open,\n            'close': close,\n            'last': close,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n            'interval': timeframe,\n        };\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetCandles (this.extend (request, params));\n        if (Array.isArray (response)) {\n            // [\n            //   {\n            //     start: 1598345580000,\n            //     open: '0.09771286',\n            //     high: '0.09771286',\n            //     low: '0.09771286',\n            //     close: '0.09771286',\n            //     volume: '1.45340410',\n            //     sequence: 3853\n            //   }, ...\n            // ]\n            return this.parseOHLCVs (response, market, timeframe, since, limit);\n        } else {\n            //  {\"nextTime\":1595536440000}\n            return [];\n        }\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        // {\n        //   start: 1598345580000,\n        //   open: '0.09771286',\n        //   high: '0.09771286',\n        //   low: '0.09771286',\n        //   close: '0.09771286',\n        //   volume: '1.45340410',\n        //   sequence: 3853\n        // }\n        const timestamp = this.safeInteger (ohlcv, 'start');\n        const open = this.safeNumber (ohlcv, 'open');\n        const high = this.safeNumber (ohlcv, 'high');\n        const low = this.safeNumber (ohlcv, 'low');\n        const close = this.safeNumber (ohlcv, 'close');\n        const volume = this.safeNumber (ohlcv, 'volume');\n        return [ timestamp, open, high, low, close, volume ];\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        // [\n        //   {\n        //     fillId: 'b5467d00-b13e-3fa9-8216-dd66735550fc',\n        //     price: '0.09771286',\n        //     quantity: '1.45340410',\n        //     quoteQuantity: '0.14201627',\n        //     time: 1598345638994,\n        //     makerSide: 'buy',\n        //     sequence: 3853\n        //   }, ...\n        // ]\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        // public trades\n        // {\n        //   fillId: 'b5467d00-b13e-3fa9-8216-dd66735550fc',\n        //   price: '0.09771286',\n        //   quantity: '1.45340410',\n        //   quoteQuantity: '0.14201627',\n        //   time: 1598345638994,\n        //   makerSide: 'buy',\n        //   sequence: 3853\n        // }\n        // private trades\n        // {\n        //   fillId: '48582d10-b9bb-3c4b-94d3-e67537cf2472',\n        //   price: '0.09905990',\n        //   quantity: '0.40000000',\n        //   quoteQuantity: '0.03962396',\n        //   time: 1598873478762,\n        //   makerSide: 'sell',\n        //   sequence: 5053,\n        //   market: 'DIL-ETH',\n        //   orderId: '7cdc8e90-eb7d-11ea-9e60-4118569f6e63',\n        //   side: 'buy',\n        //   fee: '0.00080000',\n        //   feeAsset: 'DIL',\n        //   gas: '0.00857497',\n        //   liquidity: 'taker',\n        //   txId: '0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65',\n        //   txStatus: 'mined'\n        // }\n        const id = this.safeString (trade, 'fillId');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'quantity');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        let cost = this.safeNumber (trade, 'quoteQuantity');\n        if (cost === undefined) {\n            cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        }\n        const timestamp = this.safeInteger (trade, 'time');\n        const marketId = this.safeString (trade, 'market');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        // this code handles the duality of public vs private trades\n        const makerSide = this.safeString (trade, 'makerSide');\n        const oppositeSide = (makerSide === 'buy') ? 'sell' : 'buy';\n        const side = this.safeString (trade, 'side', oppositeSide);\n        const takerOrMaker = this.safeString (trade, 'liquidity', 'taker');\n        const feeCost = this.safeNumber (trade, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'feeAsset');\n            fee = {\n                'cost': feeCost,\n                'currency': this.safeCurrencyCode (feeCurrencyId),\n            };\n        }\n        const orderId = this.safeString (trade, 'orderId');\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': orderId,\n            'type': 'limit',\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n            'level': 2,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        // {\n        //   sequence: 36416753,\n        //   bids: [\n        //     [ '0.09672815', '8.22284267', 1 ],\n        //     [ '0.09672814', '1.83685554', 1 ],\n        //     [ '0.09672143', '4.10962617', 1 ],\n        //     [ '0.09658884', '4.03863759', 1 ],\n        //     [ '0.09653781', '3.35730684', 1 ],\n        //     [ '0.09624660', '2.54163586', 1 ],\n        //     [ '0.09617490', '1.93065030', 1 ]\n        //   ],\n        //   asks: [\n        //     [ '0.09910476', '3.22840154', 1 ],\n        //     [ '0.09940587', '3.39796593', 1 ],\n        //     [ '0.09948189', '4.25088898', 1 ],\n        //     [ '0.09958362', '2.42195784', 1 ],\n        //     [ '0.09974393', '4.25234367', 1 ],\n        //     [ '0.09995250', '3.40192141', 1 ]\n        //   ]\n        // }\n        const response = await this.publicGetOrderbook (this.extend (request, params));\n        const nonce = this.safeInteger (response, 'sequence');\n        return {\n            'symbol': symbol,\n            'timestamp': undefined,\n            'datetime': undefined,\n            'nonce': nonce,\n            'bids': this.parseSide (response, 'bids'),\n            'asks': this.parseSide (response, 'asks'),\n        };\n    }\n\n    parseSide (book, side) {\n        const bookSide = this.safeValue (book, side, []);\n        const result = [];\n        for (let i = 0; i < bookSide.length; i++) {\n            const order = bookSide[i];\n            const price = this.safeNumber (order, 0);\n            const amount = this.safeNumber (order, 1);\n            const orderCount = this.safeInteger (order, 2);\n            result.push ([ price, amount, orderCount ]);\n        }\n        const descending = side === 'bids';\n        return this.sortBy (result, 0, descending);\n    }\n\n    async fetchCurrencies (params = {}) {\n        // [\n        //   {\n        //     name: 'Ether',\n        //     symbol: 'ETH',\n        //     contractAddress: '0x0000000000000000000000000000000000000000',\n        //     assetDecimals: 18,\n        //     exchangeDecimals: 8\n        //   }, ..\n        // ]\n        const response = await this.publicGetAssets (params);\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const entry = response[i];\n            const name = this.safeString (entry, 'name');\n            const currencyId = this.safeString (entry, 'symbol');\n            const precisionString = this.safeString (entry, 'exchangeDecimals');\n            const code = this.safeCurrencyCode (currencyId);\n            const precision = this.parsePrecision (precisionString);\n            const lot = this.parseNumber (precision);\n            result[code] = {\n                'id': currencyId,\n                'code': code,\n                'info': entry,\n                'type': undefined,\n                'name': name,\n                'active': undefined,\n                'fee': undefined,\n                'precision': parseInt (precisionString),\n                'limits': {\n                    'amount': { 'min': lot, 'max': undefined },\n                    'withdraw': { 'min': lot, 'max': undefined },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        this.checkRequiredCredentials ();\n        await this.loadMarkets ();\n        const nonce1 = this.uuidv1 ();\n        const request = {\n            'nonce': nonce1,\n            'wallet': this.walletAddress,\n        };\n        // [\n        //   {\n        //     asset: 'DIL',\n        //     quantity: '0.00000000',\n        //     availableForTrade: '0.00000000',\n        //     locked: '0.00000000',\n        //     usdValue: null\n        //   }, ...\n        // ]\n        const extendedRequest = this.extend (request, params);\n        if (extendedRequest['wallet'] === undefined) {\n            throw new BadRequest (this.id + ' wallet is undefined, set this.walletAddress or \"address\" in params');\n        }\n        let response = undefined;\n        try {\n            response = await this.privateGetBalances (extendedRequest);\n        } catch (e) {\n            if (e instanceof InvalidAddress) {\n                const walletAddress = extendedRequest['wallet'];\n                await this.associateWallet (walletAddress);\n                response = await this.privateGetBalances (extendedRequest);\n            } else {\n                throw e;\n            }\n        }\n        const result = {\n            'info': response,\n            'timestamp': undefined,\n            'datetime': undefined,\n        };\n        for (let i = 0; i < response.length; i++) {\n            const entry = response[i];\n            const currencyId = this.safeString (entry, 'asset');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeString (entry, 'quantity');\n            account['free'] = this.safeString (entry, 'availableForTrade');\n            account['used'] = this.safeString (entry, 'locked');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        this.checkRequiredCredentials ();\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            'nonce': this.uuidv1 (),\n            'wallet': this.walletAddress,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        // [\n        //   {\n        //     fillId: '48582d10-b9bb-3c4b-94d3-e67537cf2472',\n        //     price: '0.09905990',\n        //     quantity: '0.40000000',\n        //     quoteQuantity: '0.03962396',\n        //     time: 1598873478762,\n        //     makerSide: 'sell',\n        //     sequence: 5053,\n        //     market: 'DIL-ETH',\n        //     orderId: '7cdc8e90-eb7d-11ea-9e60-4118569f6e63',\n        //     side: 'buy',\n        //     fee: '0.00080000',\n        //     feeAsset: 'DIL',\n        //     gas: '0.00857497',\n        //     liquidity: 'taker',\n        //     txId: '0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65',\n        //     txStatus: 'mined'\n        //   }\n        // ]\n        const extendedRequest = this.extend (request, params);\n        if (extendedRequest['wallet'] === undefined) {\n            throw new BadRequest (this.id + ' walletAddress is undefined, set this.walletAddress or \"address\" in params');\n        }\n        let response = undefined;\n        try {\n            response = await this.privateGetFills (extendedRequest);\n        } catch (e) {\n            if (e instanceof InvalidAddress) {\n                const walletAddress = extendedRequest['wallet'];\n                await this.associateWallet (walletAddress);\n                response = await this.privateGetFills (extendedRequest);\n            } else {\n                throw e;\n            }\n        }\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'orderId': id,\n        };\n        return await this.fetchOrdersHelper (symbol, undefined, undefined, this.extend (request, params));\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'closed': false,\n        };\n        return await this.fetchOrdersHelper (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'closed': true,\n        };\n        return await this.fetchOrdersHelper (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrdersHelper (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'nonce': this.uuidv1 (),\n            'wallet': this.walletAddress,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        // fetchClosedOrders / fetchOpenOrders\n        // [\n        //   {\n        //     \"market\": \"DIL-ETH\",\n        //     \"orderId\": \"7cdc8e90-eb7d-11ea-9e60-4118569f6e63\",\n        //     \"wallet\": \"0x0AB991497116f7F5532a4c2f4f7B1784488628e1\",\n        //     \"time\": 1598873478650,\n        //     \"status\": \"filled\",\n        //     \"type\": \"limit\",\n        //     \"side\": \"buy\",\n        //     \"originalQuantity\": \"0.40000000\",\n        //     \"executedQuantity\": \"0.40000000\",\n        //     \"cumulativeQuoteQuantity\": \"0.03962396\",\n        //     \"avgExecutionPrice\": \"0.09905990\",\n        //     \"price\": \"1.00000000\",\n        //     \"fills\": [\n        //       {\n        //         \"fillId\": \"48582d10-b9bb-3c4b-94d3-e67537cf2472\",\n        //         \"price\": \"0.09905990\",\n        //         \"quantity\": \"0.40000000\",\n        //         \"quoteQuantity\": \"0.03962396\",\n        //         \"time\": 1598873478650,\n        //         \"makerSide\": \"sell\",\n        //         \"sequence\": 5053,\n        //         \"fee\": \"0.00080000\",\n        //         \"feeAsset\": \"DIL\",\n        //         \"gas\": \"0.00857497\",\n        //         \"liquidity\": \"taker\",\n        //         \"txId\": \"0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65\",\n        //         \"txStatus\": \"mined\"\n        //       }\n        //     ]\n        //   }\n        // ]\n        // fetchOrder\n        // { market: 'DIL-ETH',\n        //   orderId: '7cdc8e90-eb7d-11ea-9e60-4118569f6e63',\n        //   wallet: '0x0AB991497116f7F5532a4c2f4f7B1784488628e1',\n        //   time: 1598873478650,\n        //   status: 'filled',\n        //   type: 'limit',\n        //   side: 'buy',\n        //   originalQuantity: '0.40000000',\n        //   executedQuantity: '0.40000000',\n        //   cumulativeQuoteQuantity: '0.03962396',\n        //   avgExecutionPrice: '0.09905990',\n        //   price: '1.00000000',\n        //   fills:\n        //    [ { fillId: '48582d10-b9bb-3c4b-94d3-e67537cf2472',\n        //        price: '0.09905990',\n        //        quantity: '0.40000000',\n        //        quoteQuantity: '0.03962396',\n        //        time: 1598873478650,\n        //        makerSide: 'sell',\n        //        sequence: 5053,\n        //        fee: '0.00080000',\n        //        feeAsset: 'DIL',\n        //        gas: '0.00857497',\n        //        liquidity: 'taker',\n        //        txId: '0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65',\n        //        txStatus: 'mined' } ] }\n        if (Array.isArray (response)) {\n            return this.parseOrders (response, market, since, limit);\n        } else {\n            return this.parseOrder (response, market);\n        }\n    }\n\n    parseOrderStatus (status) {\n        // https://docs.idex.io/#order-states-amp-lifecycle\n        const statuses = {\n            'active': 'open',\n            'partiallyFilled': 'open',\n            'rejected': 'canceled',\n            'filled': 'closed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"market\": \"DIL-ETH\",\n        //         \"orderId\": \"7cdc8e90-eb7d-11ea-9e60-4118569f6e63\",\n        //         \"wallet\": \"0x0AB991497116f7F5532a4c2f4f7B1784488628e1\",\n        //         \"time\": 1598873478650,\n        //         \"status\": \"filled\",\n        //         \"type\": \"limit\",\n        //         \"side\": \"buy\",\n        //         \"originalQuantity\": \"0.40000000\",\n        //         \"executedQuantity\": \"0.40000000\",\n        //         \"cumulativeQuoteQuantity\": \"0.03962396\",\n        //         \"avgExecutionPrice\": \"0.09905990\",\n        //         \"price\": \"1.00000000\",\n        //         \"fills\": [\n        //             {\n        //             \"fillId\": \"48582d10-b9bb-3c4b-94d3-e67537cf2472\",\n        //             \"price\": \"0.09905990\",\n        //             \"quantity\": \"0.40000000\",\n        //             \"quoteQuantity\": \"0.03962396\",\n        //             \"time\": 1598873478650,\n        //             \"makerSide\": \"sell\",\n        //             \"sequence\": 5053,\n        //             \"fee\": \"0.00080000\",\n        //             \"feeAsset\": \"DIL\",\n        //             \"gas\": \"0.00857497\",\n        //             \"liquidity\": \"taker\",\n        //             \"txId\": \"0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65\",\n        //             \"txStatus\": \"mined\"\n        //             }\n        //         ]\n        //     }\n        //\n        const timestamp = this.safeInteger (order, 'time');\n        const fills = this.safeValue (order, 'fills', []);\n        const id = this.safeString (order, 'orderId');\n        const clientOrderId = this.safeString (order, 'clientOrderId');\n        const marketId = this.safeString (order, 'market');\n        const side = this.safeString (order, 'side');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const trades = this.parseTrades (fills, market);\n        const type = this.safeString (order, 'type');\n        const amount = this.safeNumber (order, 'originalQuantity');\n        const filled = this.safeNumber (order, 'executedQuantity');\n        const average = this.safeNumber (order, 'avgExecutionPrice');\n        const price = this.safeNumber (order, 'price');\n        const rawStatus = this.safeString (order, 'status');\n        const status = this.parseOrderStatus (rawStatus);\n        return this.safeOrder ({\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': undefined,\n            'average': average,\n            'filled': filled,\n            'remaining': undefined,\n            'status': status,\n            'fee': undefined,\n            'trades': trades,\n        });\n    }\n\n    async associateWallet (walletAddress, params = {}) {\n        const nonce = this.uuidv1 ();\n        const noPrefix = this.remove0xPrefix (walletAddress);\n        const byteArray = [\n            this.base16ToBinary (nonce),\n            this.base16ToBinary (noPrefix),\n        ];\n        const binary = this.binaryConcatArray (byteArray);\n        const hash = this.hash (binary, 'keccak', 'hex');\n        const signature = this.signMessageString (hash, this.privateKey);\n        // {\n        //   address: '0x0AB991497116f7F5532a4c2f4f7B1784488628e1',\n        //   totalPortfolioValueUsd: '0.00',\n        //   time: 1598468353626\n        // }\n        const request = {\n            'parameters': {\n                'nonce': nonce,\n                'wallet': walletAddress,\n            },\n            'signature': signature,\n        };\n        const result = await this.privatePostWallets (request);\n        return result;\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        // https://docs.idex.io/#create-order\n        this.checkRequiredCredentials ();\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const nonce = this.uuidv1 ();\n        let typeEnum = undefined;\n        const stopLossTypeEnums = {\n            'stopLoss': 3,\n            'stopLossLimit': 4,\n            'takeProfit': 5,\n            'takeProfitLimit': 6,\n        };\n        let stopPriceString = undefined;\n        if ((type === 'stopLossLimit') || (type === 'takeProfitLimit') || ('stopPrice' in params)) {\n            if (!('stopPrice' in params)) {\n                throw new BadRequest (this.id + ' stopPrice is a required parameter for ' + type + 'orders');\n            }\n            stopPriceString = this.priceToPrecision (symbol, params['stopPrice']);\n        }\n        const limitTypeEnums = {\n            'limit': 1,\n            'limitMaker': 2,\n        };\n        let priceString = undefined;\n        const typeLower = type.toLowerCase ();\n        const limitOrder = typeLower.indexOf ('limit') > -1;\n        if (type in limitTypeEnums) {\n            typeEnum = limitTypeEnums[type];\n            priceString = this.priceToPrecision (symbol, price);\n        } else if (type in stopLossTypeEnums) {\n            typeEnum = stopLossTypeEnums[type];\n            priceString = this.priceToPrecision (symbol, price);\n        } else if (type === 'market') {\n            typeEnum = 0;\n        } else {\n            throw new BadRequest (this.id + ' ' + type + ' is not a valid order type');\n        }\n        let amountEnum = 0; // base quantity\n        if ('quoteOrderQuantity' in params) {\n            if (type !== 'market') {\n                throw new NotSupported (this.id + ' quoteOrderQuantity is not supported for ' + type + ' orders, only supported for market orders');\n            }\n            amountEnum = 1;\n            amount = this.safeNumber (params, 'quoteOrderQuantity');\n        }\n        const sideEnum = (side === 'buy') ? 0 : 1;\n        const walletBytes = this.remove0xPrefix (this.walletAddress);\n        const network = this.safeString (this.options, 'network', 'ETH');\n        const orderVersion = (network === 'ETH') ? 1 : 2;\n        const amountString = this.amountToPrecision (symbol, amount);\n        // https://docs.idex.io/#time-in-force\n        const timeInForceEnums = {\n            'gtc': 0,\n            'ioc': 2,\n            'fok': 3,\n        };\n        const defaultTimeInForce = this.safeString (this.options, 'defaultTimeInForce', 'gtc');\n        const timeInForce = this.safeString (params, 'timeInForce', defaultTimeInForce);\n        let timeInForceEnum = undefined;\n        if (timeInForce in timeInForceEnums) {\n            timeInForceEnum = timeInForceEnums[timeInForce];\n        } else {\n            const allOptions = Object.keys (timeInForceEnums);\n            const asString = allOptions.join (', ');\n            throw new BadRequest (this.id + ' ' + timeInForce + ' is not a valid timeInForce, please choose one of ' + asString);\n        }\n        // https://docs.idex.io/#self-trade-prevention\n        const selfTradePreventionEnums = {\n            'dc': 0,\n            'co': 1,\n            'cn': 2,\n            'cb': 3,\n        };\n        const defaultSelfTradePrevention = this.safeString (this.options, 'defaultSelfTradePrevention', 'cn');\n        const selfTradePrevention = this.safeString (params, 'selfTradePrevention', defaultSelfTradePrevention);\n        let selfTradePreventionEnum = undefined;\n        if (selfTradePrevention in selfTradePreventionEnums) {\n            selfTradePreventionEnum = selfTradePreventionEnums[selfTradePrevention];\n        } else {\n            const allOptions = Object.keys (selfTradePreventionEnums);\n            const asString = allOptions.join (', ');\n            throw new BadRequest (this.id + ' ' + selfTradePrevention + ' is not a valid selfTradePrevention, please choose one of ' + asString);\n        }\n        const byteArray = [\n            this.numberToBE (orderVersion, 1),\n            this.base16ToBinary (nonce),\n            this.base16ToBinary (walletBytes),\n            this.stringToBinary (this.encode (market['id'])),  // TODO: refactor to remove either encode or stringToBinary\n            this.numberToBE (typeEnum, 1),\n            this.numberToBE (sideEnum, 1),\n            this.stringToBinary (this.encode (amountString)),\n            this.numberToBE (amountEnum, 1),\n        ];\n        if (limitOrder) {\n            const encodedPrice = this.stringToBinary (this.encode (priceString));\n            byteArray.push (encodedPrice);\n        }\n        if (type in stopLossTypeEnums) {\n            const encodedPrice = this.stringToBinary (this.encode (stopPriceString || priceString));\n            byteArray.push (encodedPrice);\n        }\n        const clientOrderId = this.safeString (params, 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            byteArray.push (this.stringToBinary (this.encode (clientOrderId)));\n        }\n        const after = [\n            this.numberToBE (timeInForceEnum, 1),\n            this.numberToBE (selfTradePreventionEnum, 1),\n            this.numberToBE (0, 8), // unused\n        ];\n        const allBytes = this.arrayConcat (byteArray, after);\n        const binary = this.binaryConcatArray (allBytes);\n        const hash = this.hash (binary, 'keccak', 'hex');\n        const signature = this.signMessageString (hash, this.privateKey);\n        const request = {\n            'parameters': {\n                'nonce': nonce,\n                'market': market['id'],\n                'side': side,\n                'type': type,\n                'wallet': this.walletAddress,\n                'timeInForce': timeInForce,\n                'selfTradePrevention': selfTradePrevention,\n            },\n            'signature': signature,\n        };\n        if (limitOrder) {\n            request['parameters']['price'] = priceString;\n        }\n        if (type in stopLossTypeEnums) {\n            request['parameters']['stopPrice'] = stopPriceString || priceString;\n        }\n        if (amountEnum === 0) {\n            request['parameters']['quantity'] = amountString;\n        } else {\n            request['parameters']['quoteOrderQuantity'] = amountString;\n        }\n        if (clientOrderId !== undefined) {\n            request['parameters']['clientOrderId'] = clientOrderId;\n        }\n        // {\n        //   market: 'DIL-ETH',\n        //   orderId: '7cdc8e90-eb7d-11ea-9e60-4118569f6e63',\n        //   wallet: '0x0AB991497116f7F5532a4c2f4f7B1784488628e1',\n        //   time: 1598873478650,\n        //   status: 'filled',\n        //   type: 'limit',\n        //   side: 'buy',\n        //   originalQuantity: '0.40000000',\n        //   executedQuantity: '0.40000000',\n        //   cumulativeQuoteQuantity: '0.03962396',\n        //   price: '1.00000000',\n        //   fills: [\n        //     {\n        //       fillId: '48582d10-b9bb-3c4b-94d3-e67537cf2472',\n        //       price: '0.09905990',\n        //       quantity: '0.40000000',\n        //       quoteQuantity: '0.03962396',\n        //       time: 1598873478650,\n        //       makerSide: 'sell',\n        //       sequence: 5053,\n        //       fee: '0.00080000',\n        //       feeAsset: 'DIL',\n        //       gas: '0.00857497',\n        //       liquidity: 'taker',\n        //       txStatus: 'pending'\n        //     }\n        //   ],\n        //   avgExecutionPrice: '0.09905990'\n        // }\n        // we don't use extend here because it is a signed endpoint\n        const response = await this.privatePostOrders (request);\n        return this.parseOrder (response, market);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkRequiredCredentials ();\n        await this.loadMarkets ();\n        const nonce = this.uuidv1 ();\n        const amountString = this.currencyToPrecision (code, amount);\n        const currency = this.currency (code);\n        const walletBytes = this.remove0xPrefix (this.walletAddress);\n        const byteArray = [\n            this.base16ToBinary (nonce),\n            this.base16ToBinary (walletBytes),\n            this.stringToBinary (this.encode (currency['id'])),\n            this.stringToBinary (this.encode (amountString)),\n            this.numberToBE (1, 1), // bool set to true\n        ];\n        const binary = this.binaryConcatArray (byteArray);\n        const hash = this.hash (binary, 'keccak', 'hex');\n        const signature = this.signMessageString (hash, this.privateKey);\n        const request = {\n            'parameters': {\n                'nonce': nonce,\n                'wallet': address,\n                'asset': currency['id'],\n                'quantity': amountString,\n            },\n            'signature': signature,\n        };\n        // {\n        //   withdrawalId: 'a61dcff0-ec4d-11ea-8b83-c78a6ecb3180',\n        //   asset: 'ETH',\n        //   assetContractAddress: '0x0000000000000000000000000000000000000000',\n        //   quantity: '0.20000000',\n        //   time: 1598962883190,\n        //   fee: '0.00024000',\n        //   txStatus: 'pending',\n        //   txId: null\n        // }\n        const response = await this.privatePostWithdrawals (request);\n        const id = this.safeString (response, 'withdrawalId');\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        this.checkRequiredCredentials ();\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const nonce = this.uuidv1 ();\n        const walletBytes = this.remove0xPrefix (this.walletAddress);\n        const byteArray = [\n            this.base16ToBinary (nonce),\n            this.base16ToBinary (walletBytes),\n            this.stringToBinary (this.encode (id)),\n        ];\n        const binary = this.binaryConcatArray (byteArray);\n        const hash = this.hash (binary, 'keccak', 'hex');\n        const signature = this.signMessageString (hash, this.privateKey);\n        const request = {\n            'parameters': {\n                'nonce': nonce,\n                'wallet': this.walletAddress,\n                'orderId': id,\n            },\n            'signature': signature,\n        };\n        // [ { orderId: '688336f0-ec50-11ea-9842-b332f8a34d0e' } ]\n        const response = await this.privateDeleteOrders (this.extend (request, params));\n        const canceledOrder = this.safeValue (response, 0);\n        return this.parseOrder (canceledOrder, market);\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        const errorCode = this.safeString (response, 'code');\n        const message = this.safeString (response, 'message');\n        if (errorCode in this.exceptions) {\n            const Exception = this.exceptions[errorCode];\n            throw new Exception (this.id + ' ' + message);\n        }\n        if (errorCode !== undefined) {\n            throw new ExchangeError (this.id + ' ' + message);\n        }\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        params = this.extend ({\n            'method': 'privateGetDeposits',\n        }, params);\n        return this.fetchTransactionsHelper (code, since, limit, params);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        params = this.extend ({\n            'method': 'privateGetWithdrawals',\n        }, params);\n        return this.fetchTransactionsHelper (code, since, limit, params);\n    }\n\n    async fetchTransactionsHelper (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const nonce = this.uuidv1 ();\n        const request = {\n            'nonce': nonce,\n            'wallet': this.walletAddress,\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['asset'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        // [\n        //   {\n        //     depositId: 'e9970cc0-eb6b-11ea-9e89-09a5ebc1f98e',\n        //     asset: 'ETH',\n        //     quantity: '1.00000000',\n        //     txId: '0xcd4aac3171d7131cc9e795568c67938675185ac17641553ef54c8a7c294c8142',\n        //     txTime: 1598865853000,\n        //     confirmationTime: 1598865930231\n        //   }\n        // ]\n        const method = params['method'];\n        params = this.omit (params, 'method');\n        const response = await this[method] (this.extend (request, params));\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'mined': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        // fetchDeposits\n        // {\n        //   depositId: 'e9970cc0-eb6b-11ea-9e89-09a5ebc1f98f',\n        //   asset: 'ETH',\n        //   quantity: '1.00000000',\n        //   txId: '0xcd4aac3171d7131cc9e795568c67938675185ac17641553ef54c8a7c294c8142',\n        //   txTime: 1598865853000,\n        //   confirmationTime: 1598865930231\n        // }\n        // fetchWithdrwalas\n        // {\n        //   withdrawalId: 'a62d8760-ec4d-11ea-9fa6-47904c19499b',\n        //   asset: 'ETH',\n        //   assetContractAddress: '0x0000000000000000000000000000000000000000',\n        //   quantity: '0.20000000',\n        //   time: 1598962883288,\n        //   fee: '0.00024000',\n        //   txId: '0x305e9cdbaa85ad029f50578d13d31d777c085de573ed5334d95c19116d8c03ce',\n        //   txStatus: 'mined'\n        //  }\n        let type = undefined;\n        if ('depositId' in transaction) {\n            type = 'deposit';\n        } else if ('withdrawalId' in transaction) {\n            type = 'withdrawal';\n        }\n        const id = this.safeString2 (transaction, 'depositId', 'withdrawId');\n        const code = this.safeCurrencyCode (this.safeString (transaction, 'asset'), currency);\n        const amount = this.safeNumber (transaction, 'quantity');\n        const txid = this.safeString (transaction, 'txId');\n        const timestamp = this.safeInteger (transaction, 'txTime');\n        let fee = undefined;\n        if ('fee' in transaction) {\n            fee = {\n                'cost': this.safeNumber (transaction, 'fee'),\n                'currency': 'ETH',\n            };\n        }\n        const rawStatus = this.safeString (transaction, 'txStatus');\n        const status = this.parseTransactionStatus (rawStatus);\n        const updated = this.safeInteger (transaction, 'confirmationTime');\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': undefined,\n            'tag': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const network = this.safeString (this.options, 'network', 'ETH');\n        const version = this.safeString (this.options, 'version', 'v1');\n        let url = this.urls['api'][network] + '/' + version + '/' + path;\n        const keys = Object.keys (params);\n        const length = keys.length;\n        let query = undefined;\n        if (length > 0) {\n            if (method === 'GET') {\n                query = this.urlencode (params);\n                url = url + '?' + query;\n            } else {\n                body = this.json (params);\n            }\n        }\n        headers = {\n            'Content-Type': 'application/json',\n        };\n        if (this.apiKey !== undefined) {\n            headers['IDEX-API-Key'] = this.apiKey;\n        }\n        if (api === 'private') {\n            let payload = undefined;\n            if (method === 'GET') {\n                payload = query;\n            } else {\n                payload = body;\n            }\n            headers['IDEX-HMAC-Signature'] = this.hmac (this.encode (payload), this.encode (this.secret), 'sha256', 'hex');\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}