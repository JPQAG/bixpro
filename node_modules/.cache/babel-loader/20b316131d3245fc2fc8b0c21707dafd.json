{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  InsufficientFunds,\n  ExchangeError,\n  InvalidNonce,\n  InvalidOrder,\n  ArgumentsRequired\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class coinfloor extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coinfloor',\n      'name': 'coinfloor',\n      'rateLimit': 1000,\n      'countries': ['UK'],\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchLedger': true,\n        'fetchOpenOrders': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87153925-ef265e80-c2c0-11ea-91b5-020c804b90e0.jpg',\n        'api': 'https://webapi.coinfloor.co.uk/v2/bist',\n        'www': 'https://www.coinfloor.co.uk',\n        'doc': ['https://github.com/coinfloor/api', 'https://www.coinfloor.co.uk/api']\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': false,\n        'password': true,\n        'uid': true\n      },\n      'api': {\n        'public': {\n          'get': ['{id}/ticker/', '{id}/order_book/', '{id}/transactions/']\n        },\n        'private': {\n          'post': ['{id}/balance/', '{id}/user_transactions/', '{id}/open_orders/', '{symbol}/cancel_order/', '{id}/buy/', '{id}/sell/', '{id}/buy_market/', '{id}/sell_market/', '{id}/estimate_sell_market/', '{id}/estimate_buy_market/']\n        }\n      },\n      'markets': {\n        'BTC/GBP': {\n          'id': 'XBT/GBP',\n          'symbol': 'BTC/GBP',\n          'base': 'BTC',\n          'quote': 'GBP',\n          'baseId': 'XBT',\n          'quoteId': 'GBP',\n          'precision': {\n            'price': 0,\n            'amount': 4\n          }\n        },\n        'BTC/EUR': {\n          'id': 'XBT/EUR',\n          'symbol': 'BTC/EUR',\n          'base': 'BTC',\n          'quote': 'EUR',\n          'baseId': 'XBT',\n          'quoteId': 'EUR',\n          'precision': {\n            'price': 0,\n            'amount': 4\n          }\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'You have insufficient funds.': InsufficientFunds,\n          'Tonce is out of sequence.': InvalidNonce\n        }\n      }\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    let query = params;\n    const symbol = this.safeString(params, 'symbol');\n\n    if (symbol !== undefined) {\n      market = this.market(params['symbol']);\n      query = this.omit(params, 'symbol');\n    }\n\n    const marketId = this.safeString(params, 'id');\n\n    if (marketId in this.markets_by_id) {\n      market = this.markets_by_id[marketId];\n    }\n\n    if (market === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchBalance() requires a symbol param');\n    }\n\n    const request = {\n      'id': market['id']\n    };\n    const response = await this.privatePostIdBalance(this.extend(request, query));\n    const result = {\n      'info': response\n    }; // base/quote used for keys e.g. \"xbt_reserved\"\n\n    const base = market['base'];\n    const quote = market['quote'];\n    const baseIdLower = this.safeStringLower(market, 'baseId');\n    const quoteIdLower = this.safeStringLower(market, 'quoteId');\n    result[base] = {\n      'free': this.safeString(response, baseIdLower + '_available'),\n      'used': this.safeString(response, baseIdLower + '_reserved'),\n      'total': this.safeString(response, baseIdLower + '_balance')\n    };\n    result[quote] = {\n      'free': this.safeString(response, quoteIdLower + '_available'),\n      'used': this.safeString(response, quoteIdLower + '_reserved'),\n      'total': this.safeString(response, quoteIdLower + '_balance')\n    };\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': this.marketId(symbol)\n    };\n    const response = await this.publicGetIdOrderBook(this.extend(request, params));\n    return this.parseOrderBook(response, symbol);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    // rewrite to get the timestamp from HTTP headers\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const vwap = this.safeNumber(ticker, 'vwap');\n    const baseVolume = this.safeNumber(ticker, 'volume');\n    let quoteVolume = undefined;\n\n    if (vwap !== undefined) {\n      quoteVolume = baseVolume * vwap;\n    }\n\n    const last = this.safeNumber(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id']\n    };\n    const response = await this.publicGetIdTicker(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    const id = this.safeString(trade, 'tid');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'amount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'order': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id']\n    };\n    const response = await this.publicGetIdTransactions(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    // code is actually a market symbol in this situation, not a currency code\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (code !== undefined) {\n      market = this.market(code);\n\n      if (market === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchTransactions() requires a code argument (a market symbol)');\n      }\n    }\n\n    const request = {\n      'id': market['id'],\n      'limit': limit\n    };\n    const response = await this.privatePostIdUserTransactions(this.extend(request, params));\n    return this.parseLedger(response, undefined, since, undefined);\n  }\n\n  parseLedgerEntryStatus(status) {\n    const types = {\n      'completed': 'ok'\n    };\n    return this.safeString(types, status, status);\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      '0': 'transaction',\n      // deposit\n      '1': 'transaction',\n      // withdrawal\n      '2': 'trade'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    // trade\n    //\n    //     {\n    //         \"datetime\": \"2017-07-25 06:41:24\",\n    //         \"id\": 1500964884381265,\n    //         \"type\": 2,\n    //         \"xbt\": \"0.1000\",\n    //         \"xbt_eur\": \"2322.00\",\n    //         \"eur\": \"-232.20\",\n    //         \"fee\": \"0.00\",\n    //         \"order_id\": 84696745\n    //     }\n    //\n    // transaction (withdrawal)\n    //\n    //     {\n    //         \"datetime\": \"2017-07-25 13:19:46\",\n    //         \"id\": 97669,\n    //         \"type\": 1,\n    //         \"xbt\": \"-3.0000\",\n    //         \"xbt_eur\": null,\n    //         \"eur\": \"0\",\n    //         \"fee\": \"0.0000\",\n    //         \"order_id\": null\n    //     }\n    //\n    // transaction (deposit)\n    //\n    //     {\n    //         \"datetime\": \"2017-07-27 16:44:55\",\n    //         \"id\": 98277,\n    //         \"type\": 0,\n    //         \"xbt\": \"0\",\n    //         \"xbt_eur\": null,\n    //         \"eur\": \"4970.04\",\n    //         \"fee\": \"0.00\",\n    //         \"order_id\": null\n    //     }\n    //\n    const keys = Object.keys(item);\n    let baseId = undefined;\n    let quoteId = undefined;\n    let baseAmount = undefined;\n    let quoteAmount = undefined;\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n\n      if (key.indexOf('_') > 0) {\n        const parts = key.split('_');\n        const numParts = parts.length;\n\n        if (numParts === 2) {\n          const tmpBaseAmount = this.safeNumber(item, parts[0]);\n          const tmpQuoteAmount = this.safeNumber(item, parts[1]);\n\n          if (tmpBaseAmount !== undefined && tmpQuoteAmount !== undefined) {\n            baseId = parts[0];\n            quoteId = parts[1];\n            baseAmount = tmpBaseAmount;\n            quoteAmount = tmpQuoteAmount;\n          }\n        }\n      }\n    }\n\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    const type = this.parseLedgerEntryType(this.safeString(item, 'type'));\n    const referenceId = this.safeString(item, 'id');\n    const timestamp = this.parse8601(this.safeString(item, 'datetime'));\n    let fee = undefined;\n    const feeCost = this.safeNumber(item, 'fee');\n    const result = {\n      'id': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'amount': undefined,\n      'direction': undefined,\n      'currency': undefined,\n      'type': type,\n      'referenceId': referenceId,\n      'referenceAccount': undefined,\n      'before': undefined,\n      'after': undefined,\n      'status': 'ok',\n      'fee': fee,\n      'info': item\n    };\n\n    if (type === 'trade') {\n      //\n      // it's a trade so let's make multiple entries, we have several options:\n      //\n      // if fee is always in quote currency (the exchange uses this)\n      // https://github.com/coinfloor/API/blob/master/IMPL-GUIDE.md#how-fees-affect-trade-quantities\n      //\n      if (feeCost !== undefined) {\n        fee = {\n          'cost': feeCost,\n          'currency': quote\n        };\n      }\n\n      return [this.extend(result, {\n        'currency': base,\n        'amount': Math.abs(baseAmount),\n        'direction': baseAmount > 0 ? 'in' : 'out'\n      }), this.extend(result, {\n        'currency': quote,\n        'amount': Math.abs(quoteAmount),\n        'direction': quoteAmount > 0 ? 'in' : 'out',\n        'fee': fee\n      })]; //\n      // if fee is base or quote depending on buy/sell side\n      //\n      //     const baseFee = (baseAmount > 0) ? { 'currency': base, 'cost': feeCost } : undefined;\n      //     const quoteFee = (quoteAmount > 0) ? { 'currency': quote, 'cost': feeCost } : undefined;\n      //     return [\n      //         this.extend (result, { 'currency': base, 'amount': baseAmount, 'direction': (baseAmount > 0) ? 'in' : 'out', 'fee': baseFee }),\n      //         this.extend (result, { 'currency': quote, 'amount': quoteAmount, 'direction': (quoteAmount > 0) ? 'in' : 'out', 'fee': quoteFee }),\n      //     ];\n      //\n      // fee as the 3rd item\n      //\n      //     return [\n      //         this.extend (result, { 'currency': base, 'amount': baseAmount, 'direction': (baseAmount > 0) ? 'in' : 'out' }),\n      //         this.extend (result, { 'currency': quote, 'amount': quoteAmount, 'direction': (quoteAmount > 0) ? 'in' : 'out' }),\n      //         this.extend (result, { 'currency': feeCurrency, 'amount': feeCost, 'direction': 'out', 'type': 'fee' }),\n      //     ];\n      //\n    } else {\n      //\n      // it's a regular transaction (deposit or withdrawal)\n      //\n      const amount = baseAmount === 0 ? quoteAmount : baseAmount;\n      const code = baseAmount === 0 ? quote : base;\n      const direction = amount > 0 ? 'in' : 'out';\n\n      if (feeCost !== undefined) {\n        fee = {\n          'cost': feeCost,\n          'currency': code\n        };\n      }\n\n      return this.extend(result, {\n        'currency': code,\n        'amount': Math.abs(amount),\n        'direction': direction,\n        'fee': fee\n      });\n    }\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': this.marketId(symbol)\n    };\n    let method = 'privatePostId' + this.capitalize(side);\n\n    if (type === 'market') {\n      request['quantity'] = amount;\n      method += 'Market';\n    } else {\n      request['price'] = price;\n      request['amount'] = amount;\n    } //\n    //     {\n    //         \"id\":31950584,\n    //         \"datetime\":\"2020-05-21 08:38:18\",\n    //         \"type\":1,\n    //         \"price\":\"9100\",\n    //         \"amount\":\"0.0026\"\n    //     }\n    //\n\n\n    const response = await this[method](this.extend(request, params));\n    const timestamp = this.parse8601(this.safeString(response, 'datetime'));\n    return {\n      'id': this.safeString(response, 'id'),\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'type': type,\n      'price': this.safeNumber(response, 'price'),\n      'remaining': this.safeNumber(response, 'amount'),\n      'info': response\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'id': id\n    };\n    const response = await this.privatePostSymbolCancelOrder(request);\n\n    if (response === 'false') {\n      // unfortunately the exchange does not give much info in the response\n      throw new InvalidOrder(this.id + ' cancel was rejected');\n    }\n\n    return response;\n  }\n\n  parseOrder(order, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(order, 'datetime'));\n    const price = this.safeNumber(order, 'price');\n    const amount = this.safeNumber(order, 'amount');\n    let side = undefined;\n    const status = this.safeString(order, 'status');\n    const rawType = this.safeString(order, 'type');\n\n    if (rawType === '0') {\n      side = 'buy';\n    } else if (rawType === '1') {\n      side = 'sell';\n    }\n\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const id = this.safeString(order, 'id');\n    return this.safeOrder({\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': undefined,\n      'filled': undefined,\n      'remaining': amount,\n      'cost': undefined,\n      'fee': undefined,\n      'average': undefined,\n      'trades': undefined\n    });\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol param');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id']\n    };\n    const response = await this.privatePostIdOpenOrders(this.extend(request, params)); //   {\n    //     \"amount\": \"1.0000\",\n    //     \"datetime\": \"2019-07-12 13:28:16\",\n    //     \"id\": 233123443,\n    //     \"price\": \"1000.00\",\n    //     \"type\": 0\n    //   }\n\n    return this.parseOrders(response, market, since, limit, {\n      'status': 'open'\n    });\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code < 400) {\n      return;\n    }\n\n    if (response === undefined) {\n      return;\n    }\n\n    const message = this.safeString(response, 'error_msg');\n    const feedback = this.id + ' ' + body;\n    this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n    throw new ExchangeError(feedback);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    // curl -k -u '[User ID]/[API key]:[Passphrase]' https://webapi.coinfloor.co.uk:8090/bist/XBT/GBP/balance/\n    let url = this.urls['api'] + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      body = this.urlencode(this.extend({\n        'nonce': nonce\n      }, query));\n      const auth = this.uid + '/' + this.apiKey + ':' + this.password;\n      const signature = this.decode(this.stringToBase64(auth));\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + signature\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/coinfloor.js"],"names":["Exchange","require","InsufficientFunds","ExchangeError","InvalidNonce","InvalidOrder","ArgumentsRequired","Precise","module","exports","coinfloor","describe","deepExtend","fetchBalance","params","loadMarkets","market","undefined","query","symbol","safeString","omit","marketId","markets_by_id","id","request","response","privatePostIdBalance","extend","result","base","quote","baseIdLower","safeStringLower","quoteIdLower","parseBalance","fetchOrderBook","limit","publicGetIdOrderBook","parseOrderBook","parseTicker","ticker","timestamp","milliseconds","vwap","safeNumber","baseVolume","quoteVolume","last","iso8601","fetchTicker","publicGetIdTicker","parseTrade","trade","safeTimestamp","priceString","amountString","price","parseNumber","amount","cost","stringMul","fetchTrades","since","publicGetIdTransactions","parseTrades","fetchLedger","code","privatePostIdUserTransactions","parseLedger","parseLedgerEntryStatus","status","types","parseLedgerEntryType","type","parseLedgerEntry","item","currency","keys","Object","baseId","quoteId","baseAmount","quoteAmount","i","length","key","indexOf","parts","split","numParts","tmpBaseAmount","tmpQuoteAmount","safeCurrencyCode","referenceId","parse8601","fee","feeCost","Math","abs","direction","createOrder","side","method","capitalize","cancelOrder","privatePostSymbolCancelOrder","parseOrder","order","rawType","safeOrder","fetchOpenOrders","privatePostIdOpenOrders","parseOrders","handleErrors","reason","url","headers","body","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","sign","path","api","urls","implodeParams","extractParams","urlencode","checkRequiredCredentials","nonce","auth","uid","apiKey","password","signature","decode","stringToBase64"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { InsufficientFunds, ExchangeError, InvalidNonce, InvalidOrder, ArgumentsRequired } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinfloor extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinfloor',\n            'name': 'coinfloor',\n            'rateLimit': 1000,\n            'countries': [ 'UK' ],\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchLedger': true,\n                'fetchOpenOrders': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87153925-ef265e80-c2c0-11ea-91b5-020c804b90e0.jpg',\n                'api': 'https://webapi.coinfloor.co.uk/v2/bist',\n                'www': 'https://www.coinfloor.co.uk',\n                'doc': [\n                    'https://github.com/coinfloor/api',\n                    'https://www.coinfloor.co.uk/api',\n                ],\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': false,\n                'password': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{id}/ticker/',\n                        '{id}/order_book/',\n                        '{id}/transactions/',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        '{id}/balance/',\n                        '{id}/user_transactions/',\n                        '{id}/open_orders/',\n                        '{symbol}/cancel_order/',\n                        '{id}/buy/',\n                        '{id}/sell/',\n                        '{id}/buy_market/',\n                        '{id}/sell_market/',\n                        '{id}/estimate_sell_market/',\n                        '{id}/estimate_buy_market/',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/GBP': { 'id': 'XBT/GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP', 'baseId': 'XBT', 'quoteId': 'GBP', 'precision': { 'price': 0, 'amount': 4 }},\n                'BTC/EUR': { 'id': 'XBT/EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'XBT', 'quoteId': 'EUR', 'precision': { 'price': 0, 'amount': 4 }},\n            },\n            'exceptions': {\n                'exact': {\n                    'You have insufficient funds.': InsufficientFunds,\n                    'Tonce is out of sequence.': InvalidNonce,\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let query = params;\n        const symbol = this.safeString (params, 'symbol');\n        if (symbol !== undefined) {\n            market = this.market (params['symbol']);\n            query = this.omit (params, 'symbol');\n        }\n        const marketId = this.safeString (params, 'id');\n        if (marketId in this.markets_by_id) {\n            market = this.markets_by_id[marketId];\n        }\n        if (market === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchBalance() requires a symbol param');\n        }\n        const request = {\n            'id': market['id'],\n        };\n        const response = await this.privatePostIdBalance (this.extend (request, query));\n        const result = {\n            'info': response,\n        };\n        // base/quote used for keys e.g. \"xbt_reserved\"\n        const base = market['base'];\n        const quote = market['quote'];\n        const baseIdLower = this.safeStringLower (market, 'baseId');\n        const quoteIdLower = this.safeStringLower (market, 'quoteId');\n        result[base] = {\n            'free': this.safeString (response, baseIdLower + '_available'),\n            'used': this.safeString (response, baseIdLower + '_reserved'),\n            'total': this.safeString (response, baseIdLower + '_balance'),\n        };\n        result[quote] = {\n            'free': this.safeString (response, quoteIdLower + '_available'),\n            'used': this.safeString (response, quoteIdLower + '_reserved'),\n            'total': this.safeString (response, quoteIdLower + '_balance'),\n        };\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': this.marketId (symbol),\n        };\n        const response = await this.publicGetIdOrderBook (this.extend (request, params));\n        return this.parseOrderBook (response, symbol);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        // rewrite to get the timestamp from HTTP headers\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const vwap = this.safeNumber (ticker, 'vwap');\n        const baseVolume = this.safeNumber (ticker, 'volume');\n        let quoteVolume = undefined;\n        if (vwap !== undefined) {\n            quoteVolume = baseVolume * vwap;\n        }\n        const last = this.safeNumber (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n        };\n        const response = await this.publicGetIdTicker (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        const id = this.safeString (trade, 'tid');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'amount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n        };\n        const response = await this.publicGetIdTransactions (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        // code is actually a market symbol in this situation, not a currency code\n        await this.loadMarkets ();\n        let market = undefined;\n        if (code !== undefined) {\n            market = this.market (code);\n            if (market === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchTransactions() requires a code argument (a market symbol)');\n            }\n        }\n        const request = {\n            'id': market['id'],\n            'limit': limit,\n        };\n        const response = await this.privatePostIdUserTransactions (this.extend (request, params));\n        return this.parseLedger (response, undefined, since, undefined);\n    }\n\n    parseLedgerEntryStatus (status) {\n        const types = {\n            'completed': 'ok',\n        };\n        return this.safeString (types, status, status);\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            '0': 'transaction', // deposit\n            '1': 'transaction', // withdrawal\n            '2': 'trade',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        // trade\n        //\n        //     {\n        //         \"datetime\": \"2017-07-25 06:41:24\",\n        //         \"id\": 1500964884381265,\n        //         \"type\": 2,\n        //         \"xbt\": \"0.1000\",\n        //         \"xbt_eur\": \"2322.00\",\n        //         \"eur\": \"-232.20\",\n        //         \"fee\": \"0.00\",\n        //         \"order_id\": 84696745\n        //     }\n        //\n        // transaction (withdrawal)\n        //\n        //     {\n        //         \"datetime\": \"2017-07-25 13:19:46\",\n        //         \"id\": 97669,\n        //         \"type\": 1,\n        //         \"xbt\": \"-3.0000\",\n        //         \"xbt_eur\": null,\n        //         \"eur\": \"0\",\n        //         \"fee\": \"0.0000\",\n        //         \"order_id\": null\n        //     }\n        //\n        // transaction (deposit)\n        //\n        //     {\n        //         \"datetime\": \"2017-07-27 16:44:55\",\n        //         \"id\": 98277,\n        //         \"type\": 0,\n        //         \"xbt\": \"0\",\n        //         \"xbt_eur\": null,\n        //         \"eur\": \"4970.04\",\n        //         \"fee\": \"0.00\",\n        //         \"order_id\": null\n        //     }\n        //\n        const keys = Object.keys (item);\n        let baseId = undefined;\n        let quoteId = undefined;\n        let baseAmount = undefined;\n        let quoteAmount = undefined;\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            if (key.indexOf ('_') > 0) {\n                const parts = key.split ('_');\n                const numParts = parts.length;\n                if (numParts === 2) {\n                    const tmpBaseAmount = this.safeNumber (item, parts[0]);\n                    const tmpQuoteAmount = this.safeNumber (item, parts[1]);\n                    if (tmpBaseAmount !== undefined && tmpQuoteAmount !== undefined) {\n                        baseId = parts[0];\n                        quoteId = parts[1];\n                        baseAmount = tmpBaseAmount;\n                        quoteAmount = tmpQuoteAmount;\n                    }\n                }\n            }\n        }\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        const type = this.parseLedgerEntryType (this.safeString (item, 'type'));\n        const referenceId = this.safeString (item, 'id');\n        const timestamp = this.parse8601 (this.safeString (item, 'datetime'));\n        let fee = undefined;\n        const feeCost = this.safeNumber (item, 'fee');\n        const result = {\n            'id': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'amount': undefined,\n            'direction': undefined,\n            'currency': undefined,\n            'type': type,\n            'referenceId': referenceId,\n            'referenceAccount': undefined,\n            'before': undefined,\n            'after': undefined,\n            'status': 'ok',\n            'fee': fee,\n            'info': item,\n        };\n        if (type === 'trade') {\n            //\n            // it's a trade so let's make multiple entries, we have several options:\n            //\n            // if fee is always in quote currency (the exchange uses this)\n            // https://github.com/coinfloor/API/blob/master/IMPL-GUIDE.md#how-fees-affect-trade-quantities\n            //\n            if (feeCost !== undefined) {\n                fee = {\n                    'cost': feeCost,\n                    'currency': quote,\n                };\n            }\n            return [\n                this.extend (result, { 'currency': base, 'amount': Math.abs (baseAmount), 'direction': (baseAmount > 0) ? 'in' : 'out' }),\n                this.extend (result, { 'currency': quote, 'amount': Math.abs (quoteAmount), 'direction': (quoteAmount > 0) ? 'in' : 'out', 'fee': fee }),\n            ];\n            //\n            // if fee is base or quote depending on buy/sell side\n            //\n            //     const baseFee = (baseAmount > 0) ? { 'currency': base, 'cost': feeCost } : undefined;\n            //     const quoteFee = (quoteAmount > 0) ? { 'currency': quote, 'cost': feeCost } : undefined;\n            //     return [\n            //         this.extend (result, { 'currency': base, 'amount': baseAmount, 'direction': (baseAmount > 0) ? 'in' : 'out', 'fee': baseFee }),\n            //         this.extend (result, { 'currency': quote, 'amount': quoteAmount, 'direction': (quoteAmount > 0) ? 'in' : 'out', 'fee': quoteFee }),\n            //     ];\n            //\n            // fee as the 3rd item\n            //\n            //     return [\n            //         this.extend (result, { 'currency': base, 'amount': baseAmount, 'direction': (baseAmount > 0) ? 'in' : 'out' }),\n            //         this.extend (result, { 'currency': quote, 'amount': quoteAmount, 'direction': (quoteAmount > 0) ? 'in' : 'out' }),\n            //         this.extend (result, { 'currency': feeCurrency, 'amount': feeCost, 'direction': 'out', 'type': 'fee' }),\n            //     ];\n            //\n        } else {\n            //\n            // it's a regular transaction (deposit or withdrawal)\n            //\n            const amount = (baseAmount === 0) ? quoteAmount : baseAmount;\n            const code = (baseAmount === 0) ? quote : base;\n            const direction = (amount > 0) ? 'in' : 'out';\n            if (feeCost !== undefined) {\n                fee = {\n                    'cost': feeCost,\n                    'currency': code,\n                };\n            }\n            return this.extend (result, {\n                'currency': code,\n                'amount': Math.abs (amount),\n                'direction': direction,\n                'fee': fee,\n            });\n        }\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': this.marketId (symbol),\n        };\n        let method = 'privatePostId' + this.capitalize (side);\n        if (type === 'market') {\n            request['quantity'] = amount;\n            method += 'Market';\n        } else {\n            request['price'] = price;\n            request['amount'] = amount;\n        }\n        //\n        //     {\n        //         \"id\":31950584,\n        //         \"datetime\":\"2020-05-21 08:38:18\",\n        //         \"type\":1,\n        //         \"price\":\"9100\",\n        //         \"amount\":\"0.0026\"\n        //     }\n        //\n        const response = await this[method] (this.extend (request, params));\n        const timestamp = this.parse8601 (this.safeString (response, 'datetime'));\n        return {\n            'id': this.safeString (response, 'id'),\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'type': type,\n            'price': this.safeNumber (response, 'price'),\n            'remaining': this.safeNumber (response, 'amount'),\n            'info': response,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'id': id,\n        };\n        const response = await this.privatePostSymbolCancelOrder (request);\n        if (response === 'false') {\n            // unfortunately the exchange does not give much info in the response\n            throw new InvalidOrder (this.id + ' cancel was rejected');\n        }\n        return response;\n    }\n\n    parseOrder (order, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (order, 'datetime'));\n        const price = this.safeNumber (order, 'price');\n        const amount = this.safeNumber (order, 'amount');\n        let side = undefined;\n        const status = this.safeString (order, 'status');\n        const rawType = this.safeString (order, 'type');\n        if (rawType === '0') {\n            side = 'buy';\n        } else if (rawType === '1') {\n            side = 'sell';\n        }\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const id = this.safeString (order, 'id');\n        return this.safeOrder ({\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': undefined,\n            'filled': undefined,\n            'remaining': amount,\n            'cost': undefined,\n            'fee': undefined,\n            'average': undefined,\n            'trades': undefined,\n        });\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders() requires a symbol param');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n        };\n        const response = await this.privatePostIdOpenOrders (this.extend (request, params));\n        //   {\n        //     \"amount\": \"1.0000\",\n        //     \"datetime\": \"2019-07-12 13:28:16\",\n        //     \"id\": 233123443,\n        //     \"price\": \"1000.00\",\n        //     \"type\": 0\n        //   }\n        return this.parseOrders (response, market, since, limit, { 'status': 'open' });\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (code < 400) {\n            return;\n        }\n        if (response === undefined) {\n            return;\n        }\n        const message = this.safeString (response, 'error_msg');\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n        throw new ExchangeError (feedback);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        // curl -k -u '[User ID]/[API key]:[Passphrase]' https://webapi.coinfloor.co.uk:8090/bist/XBT/GBP/balance/\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            body = this.urlencode (this.extend ({ 'nonce': nonce }, query));\n            const auth = this.uid + '/' + this.apiKey + ':' + this.password;\n            const signature = this.decode (this.stringToBase64 (auth));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + signature,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}