{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  ExchangeNotAvailable,\n  InsufficientFunds,\n  OrderNotFound,\n  InvalidOrder,\n  DDoSProtection,\n  InvalidNonce,\n  AuthenticationError,\n  RateLimitExceeded,\n  PermissionDenied,\n  NotSupported,\n  BadRequest,\n  BadSymbol,\n  AccountSuspended,\n  OrderImmediatelyFillable\n} = require('./base/errors');\n\nconst {\n  TRUNCATE\n} = require('./base/functions/number');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class binance extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'binance',\n      'name': 'Binance',\n      'countries': ['JP', 'MT'],\n      // Japan, Malta\n      'rateLimit': 500,\n      'certified': true,\n      'pro': true,\n      // new metainfo interface\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchCurrencies': true,\n        'fetchBalance': true,\n        'fetchBidsAsks': true,\n        'fetchClosedOrders': 'emulated',\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchFundingFees': true,\n        'fetchFundingHistory': true,\n        'fetchFundingRate': true,\n        'fetchFundingRates': true,\n        'fetchIsolatedPositions': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrders': true,\n        'fetchOrderBook': true,\n        'fetchPositions': true,\n        'fetchStatus': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTradingFee': true,\n        'fetchTradingFees': true,\n        'fetchTransactions': false,\n        'fetchWithdrawals': true,\n        'setLeverage': true,\n        'setMarginMode': true,\n        'withdraw': true,\n        'transfer': true,\n        'fetchTransfers': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '3m': '3m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '2h': '2h',\n        '4h': '4h',\n        '6h': '6h',\n        '8h': '8h',\n        '12h': '12h',\n        '1d': '1d',\n        '3d': '3d',\n        '1w': '1w',\n        '1M': '1M'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',\n        'test': {\n          'dapiPublic': 'https://testnet.binancefuture.com/dapi/v1',\n          'dapiPrivate': 'https://testnet.binancefuture.com/dapi/v1',\n          'fapiPublic': 'https://testnet.binancefuture.com/fapi/v1',\n          'fapiPrivate': 'https://testnet.binancefuture.com/fapi/v1',\n          'fapiPrivateV2': 'https://testnet.binancefuture.com/fapi/v2',\n          'public': 'https://testnet.binance.vision/api/v3',\n          'private': 'https://testnet.binance.vision/api/v3',\n          'v3': 'https://testnet.binance.vision/api/v3',\n          'v1': 'https://testnet.binance.vision/api/v1'\n        },\n        'api': {\n          'wapi': 'https://api.binance.com/wapi/v3',\n          'sapi': 'https://api.binance.com/sapi/v1',\n          'dapiPublic': 'https://dapi.binance.com/dapi/v1',\n          'dapiPrivate': 'https://dapi.binance.com/dapi/v1',\n          'dapiPrivateV2': 'https://dapi.binance.com/dapi/v2',\n          'dapiData': 'https://dapi.binance.com/futures/data',\n          'fapiPublic': 'https://fapi.binance.com/fapi/v1',\n          'fapiPrivate': 'https://fapi.binance.com/fapi/v1',\n          'fapiData': 'https://fapi.binance.com/futures/data',\n          'fapiPrivateV2': 'https://fapi.binance.com/fapi/v2',\n          'public': 'https://api.binance.com/api/v3',\n          'private': 'https://api.binance.com/api/v3',\n          'v3': 'https://api.binance.com/api/v3',\n          'v1': 'https://api.binance.com/api/v1'\n        },\n        'www': 'https://www.binance.com',\n        'referral': 'https://www.binance.com/?ref=10205187',\n        'doc': ['https://binance-docs.github.io/apidocs/spot/en'],\n        'api_management': 'https://www.binance.com/en/usercenter/settings/api-management',\n        'fees': 'https://www.binance.com/en/fee/schedule'\n      },\n      'api': {\n        // the API structure below will need 3-layer apidefs\n        'sapi': {\n          'get': ['accountSnapshot', // these endpoints require this.apiKey\n          'margin/asset', 'margin/pair', 'margin/allAssets', 'margin/allPairs', 'margin/priceIndex', // these endpoints require this.apiKey + this.secret\n          'asset/assetDividend', 'asset/transfer', 'asset/assetDetail', 'asset/tradeFee', 'margin/loan', 'margin/repay', 'margin/account', 'margin/transfer', 'margin/interestHistory', 'margin/forceLiquidationRec', 'margin/order', 'margin/openOrders', 'margin/allOrders', 'margin/myTrades', 'margin/maxBorrowable', 'margin/maxTransferable', 'margin/isolated/transfer', 'margin/isolated/account', 'margin/isolated/pair', 'margin/isolated/allPairs', 'margin/interestRateHistory', 'fiatpayment/query/deposit/history', 'fiatpayment/query/withdraw/history', 'futures/transfer', 'futures/loan/borrow/history', 'futures/loan/repay/history', 'futures/loan/wallet', 'futures/loan/configs', 'futures/loan/calcAdjustLevel', 'futures/loan/calcMaxAdjustAmount', 'futures/loan/adjustCollateral/history', 'futures/loan/liquidationHistory', // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi\n          'capital/config/getall', // get networks for withdrawing USDT ERC20 vs USDT Omni\n          'capital/deposit/address', 'capital/deposit/hisrec', 'capital/deposit/subAddress', 'capital/deposit/subHisrec', 'capital/withdraw/history', 'bnbBurn', 'sub-account/futures/account', 'sub-account/futures/accountSummary', 'sub-account/futures/positionRisk', 'sub-account/futures/internalTransfer', 'sub-account/margin/account', 'sub-account/margin/accountSummary', 'sub-account/spotSummary', 'sub-account/status', 'sub-account/transfer/subUserHistory', 'sub-account/universalTransfer', // lending endpoints\n          'lending/daily/product/list', 'lending/daily/userLeftQuota', 'lending/daily/userRedemptionQuota', 'lending/daily/token/position', 'lending/union/account', 'lending/union/purchaseRecord', 'lending/union/redemptionRecord', 'lending/union/interestHistory', 'lending/project/list', 'lending/project/position/list', // mining endpoints\n          'mining/pub/algoList', 'mining/pub/coinList', 'mining/worker/detail', 'mining/worker/list', 'mining/payment/list', 'mining/statistics/user/status', 'mining/statistics/user/list', // liquid swap endpoints\n          'bswap/pools', 'bswap/liquidity', 'bswap/liquidityOps', 'bswap/quote', 'bswap/swap', // leveraged token endpoints\n          'blvt/tokenInfo', 'blvt/subscribe/record', 'blvt/redeem/record', 'blvt/userLimit', // broker api\n          'apiReferral/ifNewUser', 'apiReferral/customization', 'apiReferral/userCustomization', 'apiReferral/rebate/recentRecord', 'apiReferral/rebate/historicalRecord', 'apiReferral/kickback/recentRecord', 'apiReferral/kickback/historicalRecord', // brokerage API\n          'broker/subAccountApi', 'broker/subAccount', 'broker/subAccountApi/commission/futures', 'broker/subAccountApi/commission/coinFutures', 'broker/info', 'broker/transfer', 'broker/transfer/futures', 'broker/rebate/recentRecord', 'broker/rebate/historicalRecord', 'broker/subAccount/bnbBurn/status', 'broker/subAccount/depositHist', 'broker/subAccount/spotSummary', 'broker/subAccount/marginSummary', 'broker/subAccount/futuresSummary', 'broker/rebate/futures/recentRecord', 'broker/subAccountApi/ipRestriction', 'broker/universalTransfer' // v2 not supported yet\n          // GET /sapi/v2/broker/subAccount/futuresSummary\n          ],\n          'post': ['asset/dust', 'asset/transfer', 'account/disableFastWithdrawSwitch', 'account/enableFastWithdrawSwitch', 'capital/withdraw/apply', 'margin/transfer', 'margin/loan', 'margin/repay', 'margin/order', 'margin/isolated/create', 'margin/isolated/transfer', 'bnbBurn', 'sub-account/margin/transfer', 'sub-account/margin/enable', 'sub-account/margin/enable', 'sub-account/futures/enable', 'sub-account/futures/transfer', 'sub-account/futures/internalTransfer', 'sub-account/transfer/subToSub', 'sub-account/transfer/subToMaster', 'sub-account/universalTransfer', 'userDataStream', 'userDataStream/isolated', 'futures/transfer', 'futures/loan/borrow', 'futures/loan/repay', 'futures/loan/adjustCollateral', // lending\n          'lending/customizedFixed/purchase', 'lending/daily/purchase', 'lending/daily/redeem', // liquid swap endpoints\n          'bswap/liquidityAdd', 'bswap/liquidityRemove', 'bswap/swap', // leveraged token endpoints\n          'blvt/subscribe', 'blvt/redeem', // brokerage API\n          'apiReferral/customization', 'apiReferral/userCustomization', 'apiReferral/rebate/historicalRecord', 'apiReferral/kickback/historicalRecord', 'broker/subAccount', 'broker/subAccount/margin', 'broker/subAccount/futures', 'broker/subAccountApi', 'broker/subAccountApi/permission', 'broker/subAccountApi/commission', 'broker/subAccountApi/commission/futures', 'broker/subAccountApi/commission/coinFutures', 'broker/transfer', 'broker/transfer/futures', 'broker/rebate/historicalRecord', 'broker/subAccount/bnbBurn/spot', 'broker/subAccount/bnbBurn/marginInterest', 'broker/subAccount/blvt', 'broker/subAccountApi/ipRestriction', 'broker/subAccountApi/ipRestriction/ipList', 'broker/universalTransfer', 'broker/subAccountApi/permission/universalTransfer', 'broker/subAccountApi/permission/vanillaOptions'],\n          'put': ['userDataStream', 'userDataStream/isolated'],\n          'delete': ['margin/openOrders', 'margin/order', 'userDataStream', 'userDataStream/isolated', // brokerage API\n          'broker/subAccountApi', 'broker/subAccountApi/ipRestriction/ipList']\n        },\n        // deprecated\n        'wapi': {\n          'post': ['withdraw', 'sub-account/transfer'],\n          'get': ['depositHistory', 'withdrawHistory', 'depositAddress', 'accountStatus', 'systemStatus', 'apiTradingStatus', 'userAssetDribbletLog', 'tradeFee', 'assetDetail', 'sub-account/list', 'sub-account/transfer/history', 'sub-account/assets']\n        },\n        'dapiPublic': {\n          'get': ['ping', 'time', 'exchangeInfo', 'depth', 'trades', 'historicalTrades', 'aggTrades', 'premiumIndex', 'fundingRate', 'klines', 'continuousKlines', 'indexPriceKlines', 'markPriceKlines', 'ticker/24hr', 'ticker/price', 'ticker/bookTicker', 'allForceOrders', 'openInterest']\n        },\n        'dapiData': {\n          'get': ['openInterestHist', 'topLongShortAccountRatio', 'topLongShortPositionRatio', 'globalLongShortAccountRatio', 'takerBuySellVol', 'basis']\n        },\n        'dapiPrivate': {\n          'get': ['positionSide/dual', 'order', 'openOrder', 'openOrders', 'allOrders', 'balance', 'account', 'positionMargin/history', 'positionRisk', 'userTrades', 'income', 'leverageBracket', 'forceOrders', 'adlQuantile'],\n          'post': ['positionSide/dual', 'order', 'batchOrders', 'countdownCancelAll', 'leverage', 'marginType', 'positionMargin', 'listenKey'],\n          'put': ['listenKey'],\n          'delete': ['order', 'allOpenOrders', 'batchOrders', 'listenKey']\n        },\n        'dapiPrivateV2': {\n          'get': ['leverageBracket']\n        },\n        'fapiPublic': {\n          'get': ['ping', 'time', 'exchangeInfo', 'depth', 'trades', 'historicalTrades', 'aggTrades', 'klines', 'continuousKlines', 'fundingRate', 'premiumIndex', 'ticker/24hr', 'ticker/price', 'ticker/bookTicker', 'allForceOrders', 'openInterest', 'indexInfo']\n        },\n        'fapiData': {\n          'get': ['openInterestHist', 'topLongShortAccountRatio', 'topLongShortPositionRatio', 'globalLongShortAccountRatio', 'takerlongshortRatio']\n        },\n        'fapiPrivate': {\n          'get': ['allForceOrders', 'allOrders', 'openOrder', 'openOrders', 'order', 'account', 'balance', 'leverageBracket', 'positionMargin/history', 'positionRisk', 'positionSide/dual', 'userTrades', 'income', 'commissionRate', 'apiTradingStatus', // broker endpoints\n          'apiReferral/ifNewUser', 'apiReferral/customization', 'apiReferral/userCustomization', 'apiReferral/traderNum', 'apiReferral/overview', 'apiReferral/tradeVol', 'apiReferral/rebateVol', 'apiReferral/traderSummary'],\n          'post': ['batchOrders', 'positionSide/dual', 'positionMargin', 'marginType', 'order', 'leverage', 'listenKey', 'countdownCancelAll', // broker endpoints\n          'apiReferral/customization', 'apiReferral/userCustomization'],\n          'put': ['listenKey'],\n          'delete': ['batchOrders', 'order', 'allOpenOrders', 'listenKey']\n        },\n        'fapiPrivateV2': {\n          'get': ['account', 'balance', 'positionRisk']\n        },\n        'v3': {\n          'get': ['ticker/price', 'ticker/bookTicker']\n        },\n        'public': {\n          'get': ['ping', 'time', 'depth', 'trades', 'aggTrades', 'historicalTrades', 'klines', 'ticker/24hr', 'ticker/price', 'ticker/bookTicker', 'exchangeInfo'],\n          'put': ['userDataStream'],\n          'post': ['userDataStream'],\n          'delete': ['userDataStream']\n        },\n        'private': {\n          'get': ['allOrderList', // oco\n          'openOrderList', // oco\n          'orderList', // oco\n          'order', 'openOrders', 'allOrders', 'account', 'myTrades'],\n          'post': ['order/oco', 'order', 'order/test'],\n          'delete': ['openOrders', // added on 2020-04-25 for canceling all open orders per symbol\n          'orderList', // oco\n          'order']\n        }\n      },\n      'fees': {\n        'trading': {\n          'feeSide': 'get',\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.001,\n          'maker': 0.001\n        }\n      },\n      'commonCurrencies': {\n        'BCC': 'BCC',\n        // kept for backward-compatibility https://github.com/ccxt/ccxt/issues/4848\n        'YOYO': 'YOYOW'\n      },\n      // exchange-specific options\n      'options': {\n        'fetchCurrencies': false,\n        // this is a private call and it requires API keys\n        // 'fetchTradesMethod': 'publicGetAggTrades', // publicGetTrades, publicGetHistoricalTrades\n        'defaultTimeInForce': 'GTC',\n        // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n        'defaultType': 'spot',\n        // 'spot', 'future', 'margin', 'delivery'\n        'hasAlreadyAuthenticatedSuccessfully': false,\n        'warnOnFetchOpenOrdersWithoutSymbol': true,\n        'recvWindow': 5 * 1000,\n        // 5 sec, binance default\n        'timeDifference': 0,\n        // the difference between system clock and Binance clock\n        'adjustForTimeDifference': false,\n        // controls the adjustment logic upon instantiation\n        'parseOrderToPrecision': false,\n        // force amounts and costs in parseOrder to precision\n        'newOrderRespType': {\n          'market': 'FULL',\n          // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n          'limit': 'FULL' // we change it from 'ACK' by default to 'FULL' (returns immediately if limit is not hit)\n\n        },\n        'quoteOrderQty': true,\n        // whether market orders support amounts in quote currency\n        'broker': {\n          'spot': 'x-R4BD3S82',\n          'margin': 'x-R4BD3S82',\n          'future': 'x-xcKtGhcu',\n          'delivery': 'x-xcKtGhcu'\n        },\n        'accountsByType': {\n          'main': 'MAIN',\n          'spot': 'MAIN',\n          'margin': 'MARGIN',\n          'future': 'UMFUTURE',\n          'delivery': 'CMFUTURE',\n          'mining': 'MINING'\n        },\n        'typesByAccount': {\n          'MAIN': 'spot',\n          'MARGIN': 'margin',\n          'UMFUTURE': 'future',\n          'CMFUTURE': 'delivery',\n          'MINING': 'mining'\n        }\n      },\n      // https://binance-docs.github.io/apidocs/spot/en/#error-codes-2\n      'exceptions': {\n        'System abnormality': ExchangeError,\n        // {\"code\":-1000,\"msg\":\"System abnormality\"}\n        'You are not authorized to execute this request.': PermissionDenied,\n        // {\"msg\":\"You are not authorized to execute this request.\"}\n        'API key does not exist': AuthenticationError,\n        'Order would trigger immediately.': OrderImmediatelyFillable,\n        'Stop price would trigger immediately.': OrderImmediatelyFillable,\n        // {\"code\":-2010,\"msg\":\"Stop price would trigger immediately.\"}\n        'Order would immediately match and take.': OrderImmediatelyFillable,\n        // {\"code\":-2010,\"msg\":\"Order would immediately match and take.\"}\n        'Account has insufficient balance for requested action.': InsufficientFunds,\n        'Rest API trading is not enabled.': ExchangeNotAvailable,\n        \"You don't have permission.\": PermissionDenied,\n        // {\"msg\":\"You don't have permission.\",\"success\":false}\n        'Market is closed.': ExchangeNotAvailable,\n        // {\"code\":-1013,\"msg\":\"Market is closed.\"}\n        'Too many requests.': DDoSProtection,\n        // {\"msg\":\"Too many requests. Please try again later.\",\"success\":false}\n        '-1000': ExchangeNotAvailable,\n        // {\"code\":-1000,\"msg\":\"An unknown error occured while processing the request.\"}\n        '-1001': ExchangeNotAvailable,\n        // 'Internal error; unable to process your request. Please try again.'\n        '-1002': AuthenticationError,\n        // 'You are not authorized to execute this request.'\n        '-1003': RateLimitExceeded,\n        // {\"code\":-1003,\"msg\":\"Too much request weight used, current limit is 1200 request weight per 1 MINUTE. Please use the websocket for live updates to avoid polling the API.\"}\n        '-1013': InvalidOrder,\n        // createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL\n        '-1015': RateLimitExceeded,\n        // 'Too many new orders; current limit is %s orders per %s.'\n        '-1016': ExchangeNotAvailable,\n        // 'This service is no longer available.',\n        '-1020': BadRequest,\n        // 'This operation is not supported.'\n        '-1021': InvalidNonce,\n        // 'your time is ahead of server'\n        '-1022': AuthenticationError,\n        // {\"code\":-1022,\"msg\":\"Signature for this request is not valid.\"}\n        '-1100': BadRequest,\n        // createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'\n        '-1101': BadRequest,\n        // Too many parameters; expected %s and received %s.\n        '-1102': BadRequest,\n        // Param %s or %s must be sent, but both were empty\n        '-1103': BadRequest,\n        // An unknown parameter was sent.\n        '-1104': BadRequest,\n        // Not all sent parameters were read, read 8 parameters but was sent 9\n        '-1105': BadRequest,\n        // Parameter %s was empty.\n        '-1106': BadRequest,\n        // Parameter %s sent when not required.\n        '-1111': BadRequest,\n        // Precision is over the maximum defined for this asset.\n        '-1112': InvalidOrder,\n        // No orders on book for symbol.\n        '-1114': BadRequest,\n        // TimeInForce parameter sent when not required.\n        '-1115': BadRequest,\n        // Invalid timeInForce.\n        '-1116': BadRequest,\n        // Invalid orderType.\n        '-1117': BadRequest,\n        // Invalid side.\n        '-1118': BadRequest,\n        // New client order ID was empty.\n        '-1119': BadRequest,\n        // Original client order ID was empty.\n        '-1120': BadRequest,\n        // Invalid interval.\n        '-1121': BadSymbol,\n        // Invalid symbol.\n        '-1125': AuthenticationError,\n        // This listenKey does not exist.\n        '-1127': BadRequest,\n        // More than %s hours between startTime and endTime.\n        '-1128': BadRequest,\n        // {\"code\":-1128,\"msg\":\"Combination of optional parameters invalid.\"}\n        '-1130': BadRequest,\n        // Data sent for paramter %s is not valid.\n        '-1131': BadRequest,\n        // recvWindow must be less than 60000\n        '-2008': AuthenticationError,\n        // {\"code\":-2008,\"msg\":\"Invalid Api-Key ID.\"}\n        '-2010': ExchangeError,\n        // generic error code for createOrder -> 'Account has insufficient balance for requested action.', {\"code\":-2010,\"msg\":\"Rest API trading is not enabled.\"}, etc...\n        '-2011': OrderNotFound,\n        // cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'\n        '-2013': OrderNotFound,\n        // fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'\n        '-2014': AuthenticationError,\n        // { \"code\":-2014, \"msg\": \"API-key format invalid.\" }\n        '-2015': AuthenticationError,\n        // \"Invalid API-key, IP, or permissions for action.\"\n        '-2019': InsufficientFunds,\n        // {\"code\":-2019,\"msg\":\"Margin is insufficient.\"}\n        '-3005': InsufficientFunds,\n        // {\"code\":-3005,\"msg\":\"Transferring out not allowed. Transfer out amount exceeds max amount.\"}\n        '-3008': InsufficientFunds,\n        // {\"code\":-3008,\"msg\":\"Borrow not allowed. Your borrow amount has exceed maximum borrow amount.\"}\n        '-3010': ExchangeError,\n        // {\"code\":-3010,\"msg\":\"Repay not allowed. Repay amount exceeds borrow amount.\"}\n        '-3022': AccountSuspended,\n        // You account's trading is banned.\n        '-4028': BadRequest,\n        // {\"code\":-4028,\"msg\":\"Leverage 100 is not valid\"}\n        '-3020': InsufficientFunds,\n        // {\"code\":-3020,\"msg\":\"Transfer out amount exceeds max amount.\"}\n        '-3041': InsufficientFunds,\n        // {\"code\":-3041,\"msg\":\"Balance is not enough\"}\n        '-5013': InsufficientFunds // Asset transfer failed: insufficient balance\"\n\n      }\n    });\n  }\n\n  currencyToPrecision(currency, fee) {\n    return this.numberToString(fee);\n  }\n\n  nonce() {\n    return this.milliseconds() - this.options['timeDifference'];\n  }\n\n  async fetchTime(params = {}) {\n    const type = this.safeString2(this.options, 'fetchTime', 'defaultType', 'spot');\n    let method = 'publicGetTime';\n\n    if (type === 'future') {\n      method = 'fapiPublicGetTime';\n    } else if (type === 'delivery') {\n      method = 'dapiPublicGetTime';\n    }\n\n    const response = await this[method](params);\n    return this.safeInteger(response, 'serverTime');\n  }\n\n  async loadTimeDifference(params = {}) {\n    const serverTime = await this.fetchTime(params);\n    const after = this.milliseconds();\n    this.options['timeDifference'] = after - serverTime;\n    return this.options['timeDifference'];\n  }\n\n  async fetchCurrencies(params = {}) {\n    const fetchCurrenciesEnabled = this.safeValue(this.options, 'fetchCurrencies');\n\n    if (!fetchCurrenciesEnabled) {\n      return undefined;\n    } // this endpoint requires authentication\n    // while fetchCurrencies is a public API method by design\n    // therefore we check the keys here\n    // and fallback to generating the currencies from the markets\n\n\n    if (!this.checkRequiredCredentials(false)) {\n      return undefined;\n    } // sandbox/testnet does not support sapi endpoints\n\n\n    const apiBackup = this.safeString(this.urls, 'apiBackup');\n\n    if (apiBackup !== undefined) {\n      return undefined;\n    }\n\n    const response = await this.sapiGetCapitalConfigGetall(params);\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      //\n      //     {\n      //         coin: 'LINK',\n      //         depositAllEnable: true,\n      //         withdrawAllEnable: true,\n      //         name: 'ChainLink',\n      //         free: '0.06168',\n      //         locked: '0',\n      //         freeze: '0',\n      //         withdrawing: '0',\n      //         ipoing: '0',\n      //         ipoable: '0',\n      //         storage: '0',\n      //         isLegalMoney: false,\n      //         trading: true,\n      //         networkList: [\n      //             {\n      //                 network: 'BNB',\n      //                 coin: 'LINK',\n      //                 withdrawIntegerMultiple: '0',\n      //                 isDefault: false,\n      //                 depositEnable: true,\n      //                 withdrawEnable: true,\n      //                 depositDesc: '',\n      //                 withdrawDesc: '',\n      //                 specialTips: 'Both a MEMO and an Address are required to successfully deposit your LINK BEP2 tokens to Binance.',\n      //                 name: 'BEP2',\n      //                 resetAddressStatus: false,\n      //                 addressRegex: '^(bnb1)[0-9a-z]{38}$',\n      //                 memoRegex: '^[0-9A-Za-z\\\\-_]{1,120}$',\n      //                 withdrawFee: '0.002',\n      //                 withdrawMin: '0.01',\n      //                 withdrawMax: '9999999',\n      //                 minConfirm: 1,\n      //                 unLockConfirm: 0\n      //             },\n      //             {\n      //                 network: 'BSC',\n      //                 coin: 'LINK',\n      //                 withdrawIntegerMultiple: '0.00000001',\n      //                 isDefault: false,\n      //                 depositEnable: true,\n      //                 withdrawEnable: true,\n      //                 depositDesc: '',\n      //                 withdrawDesc: '',\n      //                 specialTips: '',\n      //                 name: 'BEP20 (BSC)',\n      //                 resetAddressStatus: false,\n      //                 addressRegex: '^(0x)[0-9A-Fa-f]{40}$',\n      //                 memoRegex: '',\n      //                 withdrawFee: '0.005',\n      //                 withdrawMin: '0.01',\n      //                 withdrawMax: '9999999',\n      //                 minConfirm: 15,\n      //                 unLockConfirm: 0\n      //             },\n      //             {\n      //                 network: 'ETH',\n      //                 coin: 'LINK',\n      //                 withdrawIntegerMultiple: '0.00000001',\n      //                 isDefault: true,\n      //                 depositEnable: true,\n      //                 withdrawEnable: true,\n      //                 depositDesc: '',\n      //                 withdrawDesc: '',\n      //                 name: 'ERC20',\n      //                 resetAddressStatus: false,\n      //                 addressRegex: '^(0x)[0-9A-Fa-f]{40}$',\n      //                 memoRegex: '',\n      //                 withdrawFee: '0.34',\n      //                 withdrawMin: '0.68',\n      //                 withdrawMax: '0',\n      //                 minConfirm: 12,\n      //                 unLockConfirm: 0\n      //             }\n      //         ]\n      //     }\n      //\n      const entry = response[i];\n      const id = this.safeString(entry, 'coin');\n      const name = this.safeString(entry, 'name');\n      const code = this.safeCurrencyCode(id);\n      const precision = undefined;\n      let isWithdrawEnabled = true;\n      let isDepositEnabled = true;\n      const networkList = this.safeValue(entry, 'networkList', []);\n      const fees = {};\n      let fee = undefined;\n\n      for (let j = 0; j < networkList.length; j++) {\n        const networkItem = networkList[j];\n        const network = this.safeString(networkItem, 'network'); // const name = this.safeString (networkItem, 'name');\n\n        const withdrawFee = this.safeNumber(networkItem, 'withdrawFee');\n        const depositEnable = this.safeValue(networkItem, 'depositEnable');\n        const withdrawEnable = this.safeValue(networkItem, 'withdrawEnable');\n        isDepositEnabled = isDepositEnabled || depositEnable;\n        isWithdrawEnabled = isWithdrawEnabled || withdrawEnable;\n        fees[network] = withdrawFee;\n        const isDefault = this.safeValue(networkItem, 'isDefault');\n\n        if (isDefault || fee === undefined) {\n          fee = withdrawFee;\n        }\n      }\n\n      const trading = this.safeValue(entry, 'trading');\n      const active = isWithdrawEnabled && isDepositEnabled && trading;\n      result[code] = {\n        'id': id,\n        'name': name,\n        'code': code,\n        'precision': precision,\n        'info': entry,\n        'active': active,\n        'fee': fee,\n        'fees': fees,\n        'limits': this.limits\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const defaultType = this.safeString2(this.options, 'fetchMarkets', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n\n    if (type !== 'spot' && type !== 'future' && type !== 'margin' && type !== 'delivery') {\n      throw new ExchangeError(this.id + \" does not support '\" + type + \"' type, set exchange.options['defaultType'] to 'spot', 'margin', 'delivery' or 'future'\"); // eslint-disable-line quotes\n    }\n\n    let method = 'publicGetExchangeInfo';\n\n    if (type === 'future') {\n      method = 'fapiPublicGetExchangeInfo';\n    } else if (type === 'delivery') {\n      method = 'dapiPublicGetExchangeInfo';\n    }\n\n    const response = await this[method](query); //\n    // spot / margin\n    //\n    //     {\n    //         \"timezone\":\"UTC\",\n    //         \"serverTime\":1575416692969,\n    //         \"rateLimits\":[\n    //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200},\n    //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"SECOND\",\"intervalNum\":10,\"limit\":100},\n    //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"DAY\",\"intervalNum\":1,\"limit\":200000}\n    //         ],\n    //         \"exchangeFilters\":[],\n    //         \"symbols\":[\n    //             {\n    //                 \"symbol\":\"ETHBTC\",\n    //                 \"status\":\"TRADING\",\n    //                 \"baseAsset\":\"ETH\",\n    //                 \"baseAssetPrecision\":8,\n    //                 \"quoteAsset\":\"BTC\",\n    //                 \"quotePrecision\":8,\n    //                 \"baseCommissionPrecision\":8,\n    //                 \"quoteCommissionPrecision\":8,\n    //                 \"orderTypes\":[\"LIMIT\",\"LIMIT_MAKER\",\"MARKET\",\"STOP_LOSS_LIMIT\",\"TAKE_PROFIT_LIMIT\"],\n    //                 \"icebergAllowed\":true,\n    //                 \"ocoAllowed\":true,\n    //                 \"quoteOrderQtyMarketAllowed\":true,\n    //                 \"isSpotTradingAllowed\":true,\n    //                 \"isMarginTradingAllowed\":true,\n    //                 \"filters\":[\n    //                     {\"filterType\":\"PRICE_FILTER\",\"minPrice\":\"0.00000100\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.00000100\"},\n    //                     {\"filterType\":\"PERCENT_PRICE\",\"multiplierUp\":\"5\",\"multiplierDown\":\"0.2\",\"avgPriceMins\":5},\n    //                     {\"filterType\":\"LOT_SIZE\",\"minQty\":\"0.00100000\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"0.00100000\"},\n    //                     {\"filterType\":\"MIN_NOTIONAL\",\"minNotional\":\"0.00010000\",\"applyToMarket\":true,\"avgPriceMins\":5},\n    //                     {\"filterType\":\"ICEBERG_PARTS\",\"limit\":10},\n    //                     {\"filterType\":\"MARKET_LOT_SIZE\",\"minQty\":\"0.00000000\",\"maxQty\":\"63100.00000000\",\"stepSize\":\"0.00000000\"},\n    //                     {\"filterType\":\"MAX_NUM_ALGO_ORDERS\",\"maxNumAlgoOrders\":5}\n    //                 ]\n    //             },\n    //         ],\n    //     }\n    //\n    // futures/usdt-margined (fapi)\n    //\n    //     {\n    //         \"timezone\":\"UTC\",\n    //         \"serverTime\":1575417244353,\n    //         \"rateLimits\":[\n    //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200},\n    //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200}\n    //         ],\n    //         \"exchangeFilters\":[],\n    //         \"symbols\":[\n    //             {\n    //                 \"symbol\":\"BTCUSDT\",\n    //                 \"status\":\"TRADING\",\n    //                 \"maintMarginPercent\":\"2.5000\",\n    //                 \"requiredMarginPercent\":\"5.0000\",\n    //                 \"baseAsset\":\"BTC\",\n    //                 \"quoteAsset\":\"USDT\",\n    //                 \"pricePrecision\":2,\n    //                 \"quantityPrecision\":3,\n    //                 \"baseAssetPrecision\":8,\n    //                 \"quotePrecision\":8,\n    //                 \"filters\":[\n    //                     {\"minPrice\":\"0.01\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.01\"},\n    //                     {\"stepSize\":\"0.001\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"1000\",\"minQty\":\"0.001\"},\n    //                     {\"stepSize\":\"0.001\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"1000\",\"minQty\":\"0.001\"},\n    //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n    //                     {\"multiplierDown\":\"0.8500\",\"multiplierUp\":\"1.1500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n    //                 ],\n    //                 \"orderTypes\":[\"LIMIT\",\"MARKET\",\"STOP\"],\n    //                 \"timeInForce\":[\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n    //             }\n    //         ]\n    //     }\n    //\n    // delivery/coin-margined (dapi)\n    //\n    //     {\n    //         \"timezone\": \"UTC\",\n    //         \"serverTime\": 1597667052958,\n    //         \"rateLimits\": [\n    //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":6000},\n    //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":6000}\n    //         ],\n    //         \"exchangeFilters\": [],\n    //         \"symbols\": [\n    //             {\n    //                 \"symbol\": \"BTCUSD_200925\",\n    //                 \"pair\": \"BTCUSD\",\n    //                 \"contractType\": \"CURRENT_QUARTER\",\n    //                 \"deliveryDate\": 1601020800000,\n    //                 \"onboardDate\": 1590739200000,\n    //                 \"contractStatus\": \"TRADING\",\n    //                 \"contractSize\": 100,\n    //                 \"marginAsset\": \"BTC\",\n    //                 \"maintMarginPercent\": \"2.5000\",\n    //                 \"requiredMarginPercent\": \"5.0000\",\n    //                 \"baseAsset\": \"BTC\",\n    //                 \"quoteAsset\": \"USD\",\n    //                 \"pricePrecision\": 1,\n    //                 \"quantityPrecision\": 0,\n    //                 \"baseAssetPrecision\": 8,\n    //                 \"quotePrecision\": 8,\n    //                 \"equalQtyPrecision\": 4,\n    //                 \"filters\": [\n    //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.1\"},\n    //                     {\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n    //                     {\"stepSize\":\"0\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n    //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n    //                     {\"multiplierDown\":\"0.9500\",\"multiplierUp\":\"1.0500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n    //                 ],\n    //                 \"orderTypes\": [\"LIMIT\",\"MARKET\",\"STOP\",\"STOP_MARKET\",\"TAKE_PROFIT\",\"TAKE_PROFIT_MARKET\",\"TRAILING_STOP_MARKET\"],\n    //                 \"timeInForce\": [\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n    //             },\n    //             {\n    //                 \"symbol\": \"BTCUSD_PERP\",\n    //                 \"pair\": \"BTCUSD\",\n    //                 \"contractType\": \"PERPETUAL\",\n    //                 \"deliveryDate\": 4133404800000,\n    //                 \"onboardDate\": 1596006000000,\n    //                 \"contractStatus\": \"TRADING\",\n    //                 \"contractSize\": 100,\n    //                 \"marginAsset\": \"BTC\",\n    //                 \"maintMarginPercent\": \"2.5000\",\n    //                 \"requiredMarginPercent\": \"5.0000\",\n    //                 \"baseAsset\": \"BTC\",\n    //                 \"quoteAsset\": \"USD\",\n    //                 \"pricePrecision\": 1,\n    //                 \"quantityPrecision\": 0,\n    //                 \"baseAssetPrecision\": 8,\n    //                 \"quotePrecision\": 8,\n    //                 \"equalQtyPrecision\": 4,\n    //                 \"filters\": [\n    //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.1\"},\n    //                     {\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n    //                     {\"stepSize\":\"1\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n    //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n    //                     {\"multiplierDown\":\"0.8500\",\"multiplierUp\":\"1.1500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n    //                 ],\n    //                 \"orderTypes\": [\"LIMIT\",\"MARKET\",\"STOP\",\"STOP_MARKET\",\"TAKE_PROFIT\",\"TAKE_PROFIT_MARKET\",\"TRAILING_STOP_MARKET\"],\n    //                 \"timeInForce\": [\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n    //             }\n    //         ]\n    //     }\n    //\n\n    if (this.options['adjustForTimeDifference']) {\n      await this.loadTimeDifference();\n    }\n\n    const markets = this.safeValue(response, 'symbols', []);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const spot = type === 'spot';\n      const future = type === 'future';\n      const delivery = type === 'delivery';\n      const id = this.safeString(market, 'symbol');\n      const lowercaseId = this.safeStringLower(market, 'symbol');\n      const baseId = this.safeString(market, 'baseAsset');\n      const quoteId = this.safeString(market, 'quoteAsset');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const contractType = this.safeString(market, 'contractType');\n      const idSymbol = (future || delivery) && contractType !== 'PERPETUAL';\n      let symbol = undefined;\n      let expiry = undefined;\n\n      if (idSymbol) {\n        symbol = id;\n        expiry = this.safeInteger(market, 'deliveryDate');\n      } else {\n        symbol = base + '/' + quote;\n      }\n\n      const filters = this.safeValue(market, 'filters', []);\n      const filtersByType = this.indexBy(filters, 'filterType');\n      const precision = {\n        'base': this.safeInteger(market, 'baseAssetPrecision'),\n        'quote': this.safeInteger(market, 'quotePrecision'),\n        'amount': this.safeInteger(market, 'baseAssetPrecision'),\n        'price': this.safeInteger(market, 'quotePrecision')\n      };\n      const status = this.safeString2(market, 'status', 'contractStatus');\n      const active = status === 'TRADING';\n      const margin = this.safeValue(market, 'isMarginTradingAllowed', false);\n      let contractSize = undefined;\n\n      if (future || delivery) {\n        contractSize = this.safeString(market, 'contractSize', '1');\n      }\n\n      const entry = {\n        'id': id,\n        'lowercaseId': lowercaseId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'spot': spot,\n        'type': type,\n        'margin': margin,\n        'future': future,\n        'delivery': delivery,\n        'linear': future,\n        'inverse': delivery,\n        'expiry': expiry,\n        'expiryDatetime': this.iso8601(expiry),\n        'active': active,\n        'precision': precision,\n        'contractSize': contractSize,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision['amount']),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      };\n\n      if ('PRICE_FILTER' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'PRICE_FILTER', {}); // PRICE_FILTER reports zero values for maxPrice\n        // since they updated filter types in November 2018\n        // https://github.com/ccxt/ccxt/issues/4286\n        // therefore limits['price']['max'] doesn't have any meaningful value except undefined\n\n        entry['limits']['price'] = {\n          'min': this.safeNumber(filter, 'minPrice'),\n          'max': this.safeNumber(filter, 'maxPrice')\n        };\n        entry['precision']['price'] = this.precisionFromString(filter['tickSize']);\n      }\n\n      if ('LOT_SIZE' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'LOT_SIZE', {});\n        const stepSize = this.safeString(filter, 'stepSize');\n        entry['precision']['amount'] = this.precisionFromString(stepSize);\n        entry['limits']['amount'] = {\n          'min': this.safeNumber(filter, 'minQty'),\n          'max': this.safeNumber(filter, 'maxQty')\n        };\n      }\n\n      if ('MARKET_LOT_SIZE' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'MARKET_LOT_SIZE', {});\n        entry['limits']['market'] = {\n          'min': this.safeNumber(filter, 'minQty'),\n          'max': this.safeNumber(filter, 'maxQty')\n        };\n      }\n\n      if ('MIN_NOTIONAL' in filtersByType) {\n        const filter = this.safeValue(filtersByType, 'MIN_NOTIONAL', {});\n        entry['limits']['cost']['min'] = this.safeNumber2(filter, 'minNotional', 'notional');\n      }\n\n      result.push(entry);\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString2(this.options, 'fetchBalance', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    let method = 'privateGetAccount';\n\n    if (type === 'future') {\n      const options = this.safeValue(this.options, 'future', {});\n      const fetchBalanceOptions = this.safeValue(options, 'fetchBalance', {});\n      method = this.safeString(fetchBalanceOptions, 'method', 'fapiPrivateV2GetAccount');\n    } else if (type === 'delivery') {\n      const options = this.safeValue(this.options, 'delivery', {});\n      const fetchBalanceOptions = this.safeValue(options, 'fetchBalance', {});\n      method = this.safeString(fetchBalanceOptions, 'method', 'dapiPrivateGetAccount');\n    } else if (type === 'margin') {\n      method = 'sapiGetMarginAccount';\n    }\n\n    const query = this.omit(params, 'type');\n    const response = await this[method](query); //\n    // spot\n    //\n    //     {\n    //         makerCommission: 10,\n    //         takerCommission: 10,\n    //         buyerCommission: 0,\n    //         sellerCommission: 0,\n    //         canTrade: true,\n    //         canWithdraw: true,\n    //         canDeposit: true,\n    //         updateTime: 1575357359602,\n    //         accountType: \"MARGIN\",\n    //         balances: [\n    //             { asset: \"BTC\", free: \"0.00219821\", locked: \"0.00000000\"  },\n    //         ]\n    //     }\n    //\n    // margin\n    //\n    //     {\n    //         \"borrowEnabled\":true,\n    //         \"marginLevel\":\"999.00000000\",\n    //         \"totalAssetOfBtc\":\"0.00000000\",\n    //         \"totalLiabilityOfBtc\":\"0.00000000\",\n    //         \"totalNetAssetOfBtc\":\"0.00000000\",\n    //         \"tradeEnabled\":true,\n    //         \"transferEnabled\":true,\n    //         \"userAssets\":[\n    //             {\"asset\":\"MATIC\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"},\n    //             {\"asset\":\"VET\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"},\n    //             {\"asset\":\"USDT\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"}\n    //         ],\n    //     }\n    //\n    // futures (fapi)\n    //\n    //     fapiPrivateGetAccount\n    //\n    //     {\n    //         \"feeTier\":0,\n    //         \"canTrade\":true,\n    //         \"canDeposit\":true,\n    //         \"canWithdraw\":true,\n    //         \"updateTime\":0,\n    //         \"totalInitialMargin\":\"0.00000000\",\n    //         \"totalMaintMargin\":\"0.00000000\",\n    //         \"totalWalletBalance\":\"4.54000000\",\n    //         \"totalUnrealizedProfit\":\"0.00000000\",\n    //         \"totalMarginBalance\":\"4.54000000\",\n    //         \"totalPositionInitialMargin\":\"0.00000000\",\n    //         \"totalOpenOrderInitialMargin\":\"0.00000000\",\n    //         \"maxWithdrawAmount\":\"4.54000000\",\n    //         \"assets\":[\n    //             {\n    //                 \"asset\":\"USDT\",\n    //                 \"walletBalance\":\"4.54000000\",\n    //                 \"unrealizedProfit\":\"0.00000000\",\n    //                 \"marginBalance\":\"4.54000000\",\n    //                 \"maintMargin\":\"0.00000000\",\n    //                 \"initialMargin\":\"0.00000000\",\n    //                 \"positionInitialMargin\":\"0.00000000\",\n    //                 \"openOrderInitialMargin\":\"0.00000000\",\n    //                 \"maxWithdrawAmount\":\"4.54000000\"\n    //             }\n    //         ],\n    //         \"positions\":[\n    //             {\n    //                 \"symbol\":\"BTCUSDT\",\n    //                 \"initialMargin\":\"0.00000\",\n    //                 \"maintMargin\":\"0.00000\",\n    //                 \"unrealizedProfit\":\"0.00000000\",\n    //                 \"positionInitialMargin\":\"0.00000\",\n    //                 \"openOrderInitialMargin\":\"0.00000\"\n    //             }\n    //         ]\n    //     }\n    //\n    //     fapiPrivateV2GetAccount\n    //\n    //     {\n    //         \"feeTier\":0,\n    //         \"canTrade\":true,\n    //         \"canDeposit\":true,\n    //         \"canWithdraw\":true,\n    //         \"updateTime\":0,\n    //         \"totalInitialMargin\":\"0.00000000\",\n    //         \"totalMaintMargin\":\"0.00000000\",\n    //         \"totalWalletBalance\":\"0.00000000\",\n    //         \"totalUnrealizedProfit\":\"0.00000000\",\n    //         \"totalMarginBalance\":\"0.00000000\",\n    //         \"totalPositionInitialMargin\":\"0.00000000\",\n    //         \"totalOpenOrderInitialMargin\":\"0.00000000\",\n    //         \"totalCrossWalletBalance\":\"0.00000000\",\n    //         \"totalCrossUnPnl\":\"0.00000000\",\n    //         \"availableBalance\":\"0.00000000\",\n    //         \"maxWithdrawAmount\":\"0.00000000\",\n    //         \"assets\":[\n    //             {\n    //                 \"asset\":\"BNB\",\n    //                 \"walletBalance\":\"0.01000000\",\n    //                 \"unrealizedProfit\":\"0.00000000\",\n    //                 \"marginBalance\":\"0.01000000\",\n    //                 \"maintMargin\":\"0.00000000\",\n    //                 \"initialMargin\":\"0.00000000\",\n    //                 \"positionInitialMargin\":\"0.00000000\",\n    //                 \"openOrderInitialMargin\":\"0.00000000\",\n    //                 \"maxWithdrawAmount\":\"0.01000000\",\n    //                 \"crossWalletBalance\":\"0.01000000\",\n    //                 \"crossUnPnl\":\"0.00000000\",\n    //                 \"availableBalance\":\"0.01000000\"\n    //             }\n    //         ],\n    //         \"positions\":[\n    //             {\n    //                 \"symbol\":\"BTCUSDT\",\n    //                 \"initialMargin\":\"0\",\n    //                 \"maintMargin\":\"0\",\n    //                 \"unrealizedProfit\":\"0.00000000\",\n    //                 \"positionInitialMargin\":\"0\",\n    //                 \"openOrderInitialMargin\":\"0\",\n    //                 \"leverage\":\"20\",\n    //                 \"isolated\":false,\n    //                 \"entryPrice\":\"0.00000\",\n    //                 \"maxNotional\":\"5000000\",\n    //                 \"positionSide\":\"BOTH\"\n    //             },\n    //         ]\n    //     }\n    //\n    //     fapiPrivateV2GetBalance\n    //\n    //     [\n    //         {\n    //             \"accountAlias\":\"FzFzXquXXqoC\",\n    //             \"asset\":\"BNB\",\n    //             \"balance\":\"0.01000000\",\n    //             \"crossWalletBalance\":\"0.01000000\",\n    //             \"crossUnPnl\":\"0.00000000\",\n    //             \"availableBalance\":\"0.01000000\",\n    //             \"maxWithdrawAmount\":\"0.01000000\"\n    //         }\n    //     ]\n    //\n\n    const result = {\n      'info': response\n    };\n    let timestamp = undefined;\n\n    if (type === 'spot' || type === 'margin') {\n      timestamp = this.safeInteger(response, 'updateTime');\n      const balances = this.safeValue2(response, 'balances', 'userAssets', []);\n\n      for (let i = 0; i < balances.length; i++) {\n        const balance = balances[i];\n        const currencyId = this.safeString(balance, 'asset');\n        const code = this.safeCurrencyCode(currencyId);\n        const account = this.account();\n        account['free'] = this.safeString(balance, 'free');\n        account['used'] = this.safeString(balance, 'locked');\n        result[code] = account;\n      }\n    } else {\n      let balances = response;\n\n      if (!Array.isArray(response)) {\n        balances = this.safeValue(response, 'assets', []);\n      }\n\n      for (let i = 0; i < balances.length; i++) {\n        const balance = balances[i];\n        const currencyId = this.safeString(balance, 'asset');\n        const code = this.safeCurrencyCode(currencyId);\n        const account = this.account();\n        account['free'] = this.safeString(balance, 'availableBalance');\n        account['used'] = this.safeString(balance, 'initialMargin');\n        account['total'] = this.safeString2(balance, 'marginBalance', 'balance');\n        result[code] = account;\n      }\n    }\n\n    result['timestamp'] = timestamp;\n    result['datetime'] = this.iso8601(timestamp);\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 100, max 5000, see https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book\n    }\n\n    let method = 'publicGetDepth';\n\n    if (market['linear']) {\n      method = 'fapiPublicGetDepth';\n    } else if (market['inverse']) {\n      method = 'dapiPublicGetDepth';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // future\n    //\n    //     {\n    //         \"lastUpdateId\":333598053905,\n    //         \"E\":1618631511986,\n    //         \"T\":1618631511964,\n    //         \"bids\":[\n    //             [\"2493.56\",\"20.189\"],\n    //             [\"2493.54\",\"1.000\"],\n    //             [\"2493.51\",\"0.005\"],[\"2493.37\",\"0.280\"],[\"2493.31\",\"0.865\"],[\"2493.30\",\"0.514\"],[\"2493.29\",\"2.309\"],[\"2493.25\",\"1.500\"],[\"2493.23\",\"0.012\"],[\"2493.22\",\"7.240\"],[\"2493.21\",\"3.349\"],[\"2493.20\",\"2.030\"],[\"2493.19\",\"58.118\"],[\"2493.18\",\"174.836\"],[\"2493.17\",\"14.436\"],[\"2493.12\",\"2.000\"],[\"2493.09\",\"3.232\"],[\"2493.08\",\"2.010\"],[\"2493.07\",\"2.000\"],[\"2493.06\",\"2.000\"],[\"2493.05\",\"2.684\"],[\"2493.04\",\"2.000\"],[\"2493.03\",\"2.000\"],[\"2493.02\",\"5.000\"],[\"2493.01\",\"2.000\"],[\"2493.00\",\"1.035\"],[\"2492.99\",\"8.546\"],[\"2492.98\",\"4.012\"],[\"2492.96\",\"40.937\"],[\"2492.95\",\"40.595\"],[\"2492.94\",\"21.051\"],[\"2492.92\",\"4.012\"],[\"2492.91\",\"0.200\"],[\"2492.85\",\"2.000\"],[\"2492.83\",\"24.929\"],[\"2492.81\",\"50.000\"],[\"2492.80\",\"0.030\"],[\"2492.76\",\"0.264\"],[\"2492.73\",\"32.098\"],[\"2492.71\",\"32.664\"],[\"2492.70\",\"4.228\"],[\"2492.65\",\"1.230\"],[\"2492.61\",\"5.598\"],[\"2492.60\",\"34.786\"],[\"2492.58\",\"10.393\"],[\"2492.54\",\"4.543\"],[\"2492.50\",\"0.400\"],[\"2492.49\",\"0.600\"],[\"2492.48\",\"4.941\"],[\"2492.45\",\"1.207\"],[\"2492.43\",\"4.878\"],[\"2492.40\",\"4.762\"],[\"2492.39\",\"36.489\"],[\"2492.37\",\"3.000\"],[\"2492.36\",\"4.882\"],[\"2492.33\",\"28.117\"],[\"2492.29\",\"0.490\"],[\"2492.28\",\"76.365\"],[\"2492.27\",\"0.200\"],[\"2492.23\",\"3.804\"],[\"2492.22\",\"1.000\"],[\"2492.19\",\"20.011\"],[\"2492.17\",\"13.500\"],[\"2492.16\",\"4.058\"],[\"2492.14\",\"35.673\"],[\"2492.13\",\"1.915\"],[\"2492.12\",\"76.896\"],[\"2492.10\",\"8.050\"],[\"2492.01\",\"16.615\"],[\"2492.00\",\"10.335\"],[\"2491.95\",\"5.880\"],[\"2491.93\",\"10.000\"],[\"2491.92\",\"3.916\"],[\"2491.90\",\"0.795\"],[\"2491.87\",\"22.000\"],[\"2491.85\",\"1.260\"],[\"2491.84\",\"4.014\"],[\"2491.83\",\"6.668\"],[\"2491.73\",\"0.855\"],[\"2491.72\",\"7.572\"],[\"2491.71\",\"7.000\"],[\"2491.68\",\"3.916\"],[\"2491.66\",\"2.500\"],[\"2491.64\",\"4.945\"],[\"2491.63\",\"2.302\"],[\"2491.62\",\"4.012\"],[\"2491.61\",\"16.170\"],[\"2491.60\",\"0.793\"],[\"2491.59\",\"0.403\"],[\"2491.57\",\"17.445\"],[\"2491.56\",\"88.177\"],[\"2491.53\",\"10.000\"],[\"2491.47\",\"0.013\"],[\"2491.45\",\"0.157\"],[\"2491.44\",\"11.733\"],[\"2491.39\",\"3.593\"],[\"2491.38\",\"3.570\"],[\"2491.36\",\"28.077\"],[\"2491.35\",\"0.808\"],[\"2491.30\",\"0.065\"],[\"2491.29\",\"4.880\"],[\"2491.27\",\"22.000\"],[\"2491.24\",\"9.021\"],[\"2491.23\",\"68.393\"],[\"2491.22\",\"0.050\"],[\"2491.21\",\"1.316\"],[\"2491.20\",\"4.000\"],[\"2491.19\",\"0.108\"],[\"2491.18\",\"0.498\"],[\"2491.17\",\"5.000\"],[\"2491.14\",\"10.000\"],[\"2491.13\",\"0.383\"],[\"2491.12\",\"125.959\"],[\"2491.10\",\"0.870\"],[\"2491.08\",\"10.518\"],[\"2491.05\",\"54.743\"],[\"2491.01\",\"7.980\"],[\"2490.96\",\"3.916\"],[\"2490.95\",\"0.135\"],[\"2490.91\",\"0.140\"],[\"2490.89\",\"8.424\"],[\"2490.88\",\"5.930\"],[\"2490.84\",\"1.208\"],[\"2490.83\",\"2.005\"],[\"2490.82\",\"5.517\"],[\"2490.81\",\"73.707\"],[\"2490.80\",\"1.042\"],[\"2490.79\",\"9.626\"],[\"2490.72\",\"3.916\"],[\"2490.70\",\"0.148\"],[\"2490.69\",\"0.403\"],[\"2490.68\",\"0.012\"],[\"2490.67\",\"21.887\"],[\"2490.66\",\"0.008\"],[\"2490.64\",\"11.500\"],[\"2490.61\",\"0.005\"],[\"2490.58\",\"68.175\"],[\"2490.55\",\"0.218\"],[\"2490.54\",\"14.132\"],[\"2490.53\",\"5.157\"],[\"2490.50\",\"0.018\"],[\"2490.49\",\"9.216\"],[\"2490.48\",\"3.979\"],[\"2490.47\",\"1.884\"],[\"2490.44\",\"0.003\"],[\"2490.36\",\"14.132\"],[\"2490.35\",\"2.008\"],[\"2490.34\",\"0.200\"],[\"2490.33\",\"0.015\"],[\"2490.30\",\"0.065\"],[\"2490.29\",\"5.500\"],[\"2490.28\",\"24.203\"],[\"2490.26\",\"4.373\"],[\"2490.25\",\"0.026\"],[\"2490.24\",\"4.000\"],[\"2490.23\",\"177.628\"],[\"2490.22\",\"14.132\"],[\"2490.21\",\"0.181\"],[\"2490.20\",\"0.645\"],[\"2490.19\",\"9.024\"],[\"2490.18\",\"0.108\"],[\"2490.17\",\"0.085\"],[\"2490.16\",\"0.077\"],[\"2490.14\",\"0.275\"],[\"2490.10\",\"0.080\"],[\"2490.07\",\"0.015\"],[\"2490.04\",\"6.056\"],[\"2490.00\",\"6.796\"],[\"2489.98\",\"0.005\"],[\"2489.97\",\"0.258\"],[\"2489.96\",\"10.084\"],[\"2489.95\",\"1.202\"],[\"2489.91\",\"10.121\"],[\"2489.90\",\"10.084\"],[\"2489.88\",\"0.040\"],[\"2489.87\",\"0.004\"],[\"2489.85\",\"0.003\"],[\"2489.76\",\"3.916\"],[\"2489.73\",\"10.084\"],[\"2489.71\",\"0.272\"],[\"2489.70\",\"12.834\"],[\"2489.67\",\"0.403\"],[\"2489.66\",\"0.362\"],[\"2489.64\",\"0.738\"],[\"2489.63\",\"193.236\"],[\"2489.62\",\"14.152\"],[\"2489.61\",\"0.157\"],[\"2489.59\",\"4.011\"],[\"2489.57\",\"0.015\"],[\"2489.55\",\"0.046\"],[\"2489.52\",\"3.921\"],[\"2489.51\",\"0.005\"],[\"2489.45\",\"80.000\"],[\"2489.44\",\"0.649\"],[\"2489.43\",\"10.088\"],[\"2489.39\",\"0.009\"],[\"2489.37\",\"14.132\"],[\"2489.35\",\"72.262\"],[\"2489.34\",\"10.084\"],[\"2489.33\",\"14.136\"],[\"2489.32\",\"23.953\"],[\"2489.30\",\"0.065\"],[\"2489.28\",\"8.136\"],[\"2489.24\",\"8.022\"],[\"2489.19\",\"14.132\"],[\"2489.18\",\"0.085\"],[\"2489.17\",\"0.108\"],[\"2489.14\",\"10.084\"],[\"2489.13\",\"3.142\"],[\"2489.12\",\"77.827\"],[\"2489.11\",\"10.084\"],[\"2489.10\",\"0.080\"],[\"2489.09\",\"50.024\"],[\"2489.04\",\"3.916\"],[\"2489.03\",\"0.008\"],[\"2489.01\",\"10.084\"],[\"2488.99\",\"0.135\"],[\"2488.98\",\"0.187\"],[\"2488.96\",\"0.324\"],[\"2488.92\",\"0.064\"],[\"2488.85\",\"16.056\"],[\"2488.83\",\"14.132\"],[\"2488.80\",\"3.916\"],[\"2488.79\",\"10.084\"],[\"2488.77\",\"4.414\"],[\"2488.76\",\"0.005\"],[\"2488.75\",\"13.685\"],[\"2488.73\",\"0.020\"],[\"2488.69\",\"0.157\"],[\"2488.60\",\"80.000\"],[\"2488.58\",\"10.164\"],[\"2488.57\",\"0.004\"],[\"2488.56\",\"3.933\"],[\"2488.54\",\"3.311\"],[\"2488.51\",\"12.814\"],[\"2488.50\",\"80.099\"],[\"2488.48\",\"0.684\"],[\"2488.44\",\"0.024\"],[\"2488.42\",\"68.180\"],[\"2488.39\",\"4.412\"],[\"2488.38\",\"26.138\"],[\"2488.34\",\"44.134\"],[\"2488.32\",\"8.014\"],[\"2488.30\",\"0.065\"],[\"2488.29\",\"0.009\"],[\"2488.27\",\"4.513\"],[\"2488.26\",\"4.222\"],[\"2488.25\",\"80.000\"],[\"2488.23\",\"0.007\"],[\"2488.22\",\"0.281\"],[\"2488.19\",\"0.100\"],[\"2488.18\",\"80.100\"],[\"2488.17\",\"80.000\"],[\"2488.16\",\"8.197\"],[\"2488.15\",\"79.184\"],[\"2488.13\",\"0.025\"],[\"2488.11\",\"0.050\"],[\"2488.10\",\"0.080\"],[\"2488.08\",\"3.919\"],[\"2488.04\",\"40.103\"],[\"2488.03\",\"0.120\"],[\"2488.02\",\"0.008\"],[\"2488.01\",\"0.140\"],[\"2488.00\",\"0.406\"],[\"2487.99\",\"0.384\"],[\"2487.98\",\"0.060\"],[\"2487.96\",\"8.010\"],[\"2487.94\",\"0.246\"],[\"2487.93\",\"0.020\"],[\"2487.91\",\"0.136\"],[\"2487.87\",\"0.403\"],[\"2487.84\",\"17.910\"],[\"2487.81\",\"0.005\"],[\"2487.80\",\"0.073\"],[\"2487.74\",\"36.000\"],[\"2487.73\",\"3.225\"],[\"2487.72\",\"0.018\"],[\"2487.71\",\"0.319\"],[\"2487.70\",\"0.006\"],[\"2487.66\",\"0.003\"],[\"2487.64\",\"0.003\"],[\"2487.63\",\"0.008\"],[\"2487.62\",\"0.040\"],[\"2487.60\",\"3.916\"],[\"2487.54\",\"0.805\"],[\"2487.52\",\"0.022\"],[\"2487.51\",\"0.003\"],[\"2487.50\",\"0.051\"],[\"2487.49\",\"6.081\"],[\"2487.47\",\"80.015\"],[\"2487.46\",\"4.735\"],[\"2487.45\",\"30.000\"],[\"2487.41\",\"0.096\"],[\"2487.40\",\"0.078\"],[\"2487.39\",\"0.103\"],[\"2487.37\",\"2.279\"],[\"2487.36\",\"8.152\"],[\"2487.35\",\"2.145\"],[\"2487.32\",\"12.816\"],[\"2487.31\",\"10.023\"],[\"2487.30\",\"0.157\"],[\"2487.27\",\"0.005\"],[\"2487.26\",\"4.010\"],[\"2487.25\",\"0.008\"],[\"2487.24\",\"0.003\"],[\"2487.23\",\"0.014\"],[\"2487.20\",\"0.085\"],[\"2487.17\",\"0.011\"],[\"2487.14\",\"3.217\"],[\"2487.12\",\"3.916\"],[\"2487.11\",\"0.300\"],[\"2487.10\",\"0.088\"],[\"2487.08\",\"10.097\"],[\"2487.07\",\"1.467\"],[\"2487.04\",\"0.600\"],[\"2487.01\",\"18.363\"],[\"2487.00\",\"0.292\"],[\"2486.99\",\"0.014\"],[\"2486.98\",\"0.144\"],[\"2486.97\",\"0.443\"],[\"2486.92\",\"0.005\"],[\"2486.91\",\"0.016\"],[\"2486.89\",\"3.364\"],[\"2486.88\",\"4.166\"],[\"2486.84\",\"24.306\"],[\"2486.83\",\"0.181\"],[\"2486.81\",\"0.015\"],[\"2486.80\",\"0.082\"],[\"2486.79\",\"0.007\"],[\"2486.76\",\"0.011\"],[\"2486.74\",\"0.050\"],[\"2486.73\",\"0.782\"],[\"2486.72\",\"0.004\"],[\"2486.69\",\"0.003\"],[\"2486.68\",\"8.018\"],[\"2486.66\",\"10.004\"],[\"2486.65\",\"40.391\"],[\"2486.64\",\"3.916\"],[\"2486.61\",\"0.489\"],[\"2486.60\",\"0.196\"],[\"2486.57\",\"0.396\"],[\"2486.55\",\"4.015\"],[\"2486.51\",\"3.000\"],[\"2486.50\",\"0.003\"],[\"2486.48\",\"0.005\"],[\"2486.47\",\"0.010\"],[\"2486.45\",\"4.011\"],[\"2486.44\",\"0.602\"],[\"2486.43\",\"0.566\"],[\"2486.42\",\"3.140\"],[\"2486.40\",\"3.958\"],[\"2486.39\",\"0.003\"],[\"2486.34\",\"0.010\"],[\"2486.31\",\"6.281\"],[\"2486.27\",\"0.005\"],[\"2486.26\",\"0.004\"],[\"2486.23\",\"10.088\"],[\"2486.22\",\"0.015\"],[\"2486.17\",\"0.030\"],[\"2486.16\",\"3.916\"],[\"2486.15\",\"0.020\"],[\"2486.13\",\"13.130\"],[\"2486.12\",\"82.414\"],[\"2486.11\",\"0.244\"],[\"2486.10\",\"0.132\"],[\"2486.08\",\"0.720\"],[\"2486.06\",\"0.385\"],[\"2486.01\",\"0.004\"],[\"2486.00\",\"2.359\"],[\"2485.99\",\"154.159\"],[\"2485.98\",\"20.054\"],[\"2485.96\",\"1.000\"],[\"2485.95\",\"0.190\"],[\"2485.92\",\"4.463\"],[\"2485.90\",\"1.557\"],[\"2485.87\",\"0.402\"],[\"2485.85\",\"0.114\"],[\"2485.81\",\"0.900\"],[\"2485.76\",\"4.700\"],[\"2485.75\",\"0.300\"],[\"2485.74\",\"0.196\"],[\"2485.73\",\"4.010\"],[\"2485.72\",\"0.323\"],[\"2485.70\",\"0.263\"],[\"2485.69\",\"0.261\"],[\"2485.68\",\"3.688\"],[\"2485.67\",\"0.005\"],[\"2485.64\",\"1.216\"],[\"2485.63\",\"0.005\"],[\"2485.62\",\"0.015\"],[\"2485.61\",\"0.033\"],[\"2485.60\",\"0.004\"],[\"2485.58\",\"2.012\"],[\"2485.56\",\"0.020\"],[\"2485.54\",\"0.699\"],[\"2485.52\",\"0.003\"],[\"2485.51\",\"1.830\"],[\"2485.48\",\"5.964\"],[\"2485.47\",\"0.015\"],[\"2485.44\",\"7.251\"],[\"2485.43\",\"0.006\"],[\"2485.42\",\"0.644\"],[\"2485.40\",\"8.026\"],[\"2485.38\",\"0.489\"],[\"2485.36\",\"0.014\"],[\"2485.35\",\"0.005\"],[\"2485.31\",\"1.507\"],[\"2485.30\",\"2.107\"],[\"2485.29\",\"0.039\"],[\"2485.28\",\"0.642\"],[\"2485.26\",\"1.990\"],[\"2485.25\",\"4.996\"],[\"2485.23\",\"0.003\"],[\"2485.22\",\"0.277\"],[\"2485.21\",\"0.121\"],[\"2485.20\",\"3.952\"],[\"2485.18\",\"0.006\"],[\"2485.17\",\"0.043\"],[\"2485.15\",\"4.008\"],[\"2485.14\",\"4.434\"],[\"2485.13\",\"1.003\"],[\"2485.05\",\"0.204\"],[\"2485.04\",\"0.254\"],[\"2485.02\",\"5.000\"],[\"2485.01\",\"0.050\"],[\"2485.00\",\"80.821\"],[\"2484.96\",\"3.941\"],[\"2484.95\",\"10.023\"],[\"2484.94\",\"13.935\"],[\"2484.92\",\"0.059\"],[\"2484.90\",\"150.000\"],[\"2484.89\",\"0.004\"],[\"2484.88\",\"150.127\"],[\"2484.87\",\"0.004\"],[\"2484.85\",\"0.100\"],[\"2484.83\",\"0.006\"],[\"2484.82\",\"0.030\"],[\"2484.81\",\"1.246\"],[\"2484.80\",\"0.003\"],[\"2484.79\",\"0.045\"],[\"2484.77\",\"0.003\"],[\"2484.74\",\"0.036\"],[\"2484.72\",\"3.919\"],[\"2484.70\",\"0.134\"],[\"2484.68\",\"1.111\"],[\"2484.66\",\"76.955\"],[\"2484.60\",\"2.580\"],[\"2484.59\",\"31.432\"],[\"2484.58\",\"1.468\"],[\"2484.55\",\"1.153\"],[\"2484.54\",\"0.265\"],[\"2484.53\",\"20.024\"],[\"2484.51\",\"1.047\"],[\"2484.50\",\"0.818\"],[\"2484.49\",\"0.022\"],[\"2484.48\",\"3.887\"],[\"2484.46\",\"0.048\"],[\"2484.45\",\"0.224\"],[\"2484.44\",\"0.174\"],[\"2484.43\",\"223.079\"],[\"2484.42\",\"0.014\"],[\"2484.41\",\"1.115\"],[\"2484.39\",\"26.090\"],[\"2484.38\",\"0.066\"],[\"2484.37\",\"0.121\"],[\"2484.34\",\"0.255\"],[\"2484.33\",\"23.968\"],[\"2484.29\",\"0.085\"],[\"2484.27\",\"1.128\"],[\"2484.26\",\"1.456\"],[\"2484.24\",\"3.916\"],[\"2484.23\",\"28.126\"],[\"2484.22\",\"1.329\"],[\"2484.19\",\"2.015\"],[\"2484.18\",\"0.263\"],[\"2484.15\",\"15.489\"],[\"2484.14\",\"1.135\"],[\"2484.13\",\"0.572\"],[\"2484.12\",\"8.032\"],[\"2484.11\",\"0.021\"],[\"2484.09\",\"0.059\"],[\"2484.08\",\"0.038\"],[\"2484.07\",\"0.147\"],[\"2484.05\",\"24.156\"],[\"2484.04\",\"0.008\"],[\"2484.01\",\"1.184\"],[\"2484.00\",\"4.641\"],[\"2483.99\",\"0.006\"],[\"2483.97\",\"0.294\"],[\"2483.96\",\"0.424\"],[\"2483.94\",\"3.660\"],[\"2483.93\",\"2.067\"],[\"2483.92\",\"0.008\"],[\"2483.89\",\"0.141\"],[\"2483.88\",\"1.089\"],\n    //             [\"2483.87\",\"110.000\"],[\"2483.85\",\"4.018\"],[\"2483.81\",\"150.077\"],[\"2483.80\",\"0.003\"],[\"2483.77\",\"0.020\"]\n    //         ],\n    //         \"asks\":[\n    //             [\"2493.57\",\"0.877\"],\n    //             [\"2493.62\",\"0.063\"],\n    //             [\"2493.71\",\"12.054\"],\n    //         ]\n    //     }\n\n    const timestamp = this.safeInteger(response, 'T');\n    const orderbook = this.parseOrderBook(response, symbol, timestamp);\n    orderbook['nonce'] = this.safeInteger(response, 'lastUpdateId');\n    return orderbook;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         symbol: 'ETHBTC',\n    //         priceChange: '0.00068700',\n    //         priceChangePercent: '2.075',\n    //         weightedAvgPrice: '0.03342681',\n    //         prevClosePrice: '0.03310300',\n    //         lastPrice: '0.03378900',\n    //         lastQty: '0.07700000',\n    //         bidPrice: '0.03378900',\n    //         bidQty: '7.16800000',\n    //         askPrice: '0.03379000',\n    //         askQty: '24.00000000',\n    //         openPrice: '0.03310200',\n    //         highPrice: '0.03388900',\n    //         lowPrice: '0.03306900',\n    //         volume: '205478.41000000',\n    //         quoteVolume: '6868.48826294',\n    //         openTime: 1601469986932,\n    //         closeTime: 1601556386932,\n    //         firstId: 196098772,\n    //         lastId: 196186315,\n    //         count: 87544\n    //     }\n    //\n    // coinm\n    //     {\n    //         baseVolume: '214549.95171161',\n    //         closeTime: '1621965286847',\n    //         count: '1283779',\n    //         firstId: '152560106',\n    //         highPrice: '39938.3',\n    //         lastId: '153843955',\n    //         lastPrice: '37993.4',\n    //         lastQty: '1',\n    //         lowPrice: '36457.2',\n    //         openPrice: '37783.4',\n    //         openTime: '1621878840000',\n    //         pair: 'BTCUSD',\n    //         priceChange: '210.0',\n    //         priceChangePercent: '0.556',\n    //         symbol: 'BTCUSD_PERP',\n    //         volume: '81990451',\n    //         weightedAvgPrice: '38215.08713747'\n    //     }\n    //\n    const timestamp = this.safeInteger(ticker, 'closeTime');\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const last = this.safeNumber(ticker, 'lastPrice');\n    const isCoinm = ('baseVolume' in ticker);\n    let baseVolume = undefined;\n    let quoteVolume = undefined;\n\n    if (isCoinm) {\n      baseVolume = this.safeNumber(ticker, 'baseVolume');\n      quoteVolume = this.safeNumber(ticker, 'volume');\n    } else {\n      baseVolume = this.safeNumber(ticker, 'volume');\n      quoteVolume = this.safeNumber(ticker, 'quoteVolume');\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'highPrice'),\n      'low': this.safeNumber(ticker, 'lowPrice'),\n      'bid': this.safeNumber(ticker, 'bidPrice'),\n      'bidVolume': this.safeNumber(ticker, 'bidQty'),\n      'ask': this.safeNumber(ticker, 'askPrice'),\n      'askVolume': this.safeNumber(ticker, 'askQty'),\n      'vwap': this.safeNumber(ticker, 'weightedAvgPrice'),\n      'open': this.safeNumber(ticker, 'openPrice'),\n      'close': last,\n      'last': last,\n      'previousClose': this.safeNumber(ticker, 'prevClosePrice'),\n      // previous day close\n      'change': this.safeNumber(ticker, 'priceChange'),\n      'percentage': this.safeNumber(ticker, 'priceChangePercent'),\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchStatus(params = {}) {\n    const response = await this.wapiGetSystemStatus(params);\n    let status = this.safeString(response, 'status');\n\n    if (status !== undefined) {\n      status = status === '0' ? 'ok' : 'maintenance';\n      this.status = this.extend(this.status, {\n        'status': status,\n        'updated': this.milliseconds()\n      });\n    }\n\n    return this.status;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    let method = 'publicGetTicker24hr';\n\n    if (market['linear']) {\n      method = 'fapiPublicGetTicker24hr';\n    } else if (market['inverse']) {\n      method = 'dapiPublicGetTicker24hr';\n    }\n\n    const response = await this[method](this.extend(request, params));\n\n    if (Array.isArray(response)) {\n      const firstTicker = this.safeValue(response, 0, {});\n      return this.parseTicker(firstTicker, market);\n    }\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchBidsAsks(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString2(this.options, 'fetchBidsAsks', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n    let method = undefined;\n\n    if (type === 'future') {\n      method = 'fapiPublicGetTickerBookTicker';\n    } else if (type === 'delivery') {\n      method = 'dapiPublicGetTickerBookTicker';\n    } else {\n      method = 'publicGetTickerBookTicker';\n    }\n\n    const response = await this[method](query);\n    return this.parseTickers(response, symbols);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString2(this.options, 'fetchTickers', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n    let defaultMethod = undefined;\n\n    if (type === 'future') {\n      defaultMethod = 'fapiPublicGetTicker24hr';\n    } else if (type === 'delivery') {\n      defaultMethod = 'dapiPublicGetTicker24hr';\n    } else {\n      defaultMethod = 'publicGetTicker24hr';\n    }\n\n    const method = this.safeString(this.options, 'fetchTickersMethod', defaultMethod);\n    const response = await this[method](query);\n    return this.parseTickers(response, symbols);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1591478520000,\n    //         \"0.02501300\",\n    //         \"0.02501800\",\n    //         \"0.02500000\",\n    //         \"0.02500000\",\n    //         \"22.19000000\",\n    //         1591478579999,\n    //         \"0.55490906\",\n    //         40,\n    //         \"10.92900000\",\n    //         \"0.27336462\",\n    //         \"0\"\n    //     ]\n    //\n    return [this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol); // binance docs say that the default limit 500, max 1500 for futures, max 1000 for spot markets\n    // the reality is that the time range wider than 500 candles won't work right\n\n    const defaultLimit = 500;\n    const maxLimit = 1500;\n    limit = limit === undefined ? defaultLimit : Math.min(limit, maxLimit);\n    const request = {\n      'symbol': market['id'],\n      'interval': this.timeframes[timeframe],\n      'limit': limit\n    };\n    const duration = this.parseTimeframe(timeframe);\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n\n      if (since > 0) {\n        const endTime = this.sum(since, limit * duration * 1000 - 1);\n        const now = this.milliseconds();\n        request['endTime'] = Math.min(now, endTime);\n      }\n    }\n\n    let method = 'publicGetKlines';\n\n    if (market['linear']) {\n      method = 'fapiPublicGetKlines';\n    } else if (market['inverse']) {\n      method = 'dapiPublicGetKlines';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     [\n    //         [1591478520000,\"0.02501300\",\"0.02501800\",\"0.02500000\",\"0.02500000\",\"22.19000000\",1591478579999,\"0.55490906\",40,\"10.92900000\",\"0.27336462\",\"0\"],\n    //         [1591478580000,\"0.02499600\",\"0.02500900\",\"0.02499400\",\"0.02500300\",\"21.34700000\",1591478639999,\"0.53370468\",24,\"7.53800000\",\"0.18850725\",\"0\"],\n    //         [1591478640000,\"0.02500800\",\"0.02501100\",\"0.02500300\",\"0.02500800\",\"154.14200000\",1591478699999,\"3.85405839\",97,\"5.32300000\",\"0.13312641\",\"0\"],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    if ('isDustTrade' in trade) {\n      return this.parseDustTrade(trade, market);\n    } //\n    // aggregate trades\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list\n    //\n    //     {\n    //         \"a\": 26129,         // Aggregate tradeId\n    //         \"p\": \"0.01633102\",  // Price\n    //         \"q\": \"4.70443515\",  // Quantity\n    //         \"f\": 27781,         // First tradeId\n    //         \"l\": 27781,         // Last tradeId\n    //         \"T\": 1498793709153, // Timestamp\n    //         \"m\": true,          // Was the buyer the maker?\n    //         \"M\": true           // Was the trade the best price match?\n    //     }\n    //\n    // recent public trades and old public trades\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#recent-trades-list\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#old-trade-lookup-market_data\n    //\n    //     {\n    //         \"id\": 28457,\n    //         \"price\": \"4.00000100\",\n    //         \"qty\": \"12.00000000\",\n    //         \"time\": 1499865549590,\n    //         \"isBuyerMaker\": true,\n    //         \"isBestMatch\": true\n    //     }\n    //\n    // private trades\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-trade-list-user_data\n    //\n    //     {\n    //         \"symbol\": \"BNBBTC\",\n    //         \"id\": 28457,\n    //         \"orderId\": 100234,\n    //         \"price\": \"4.00000100\",\n    //         \"qty\": \"12.00000000\",\n    //         \"commission\": \"10.10000000\",\n    //         \"commissionAsset\": \"BNB\",\n    //         \"time\": 1499865549590,\n    //         \"isBuyer\": true,\n    //         \"isMaker\": false,\n    //         \"isBestMatch\": true\n    //     }\n    //\n    // futures trades\n    // https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data\n    //\n    //     {\n    //       \"accountId\": 20,\n    //       \"buyer\": False,\n    //       \"commission\": \"-0.07819010\",\n    //       \"commissionAsset\": \"USDT\",\n    //       \"counterPartyId\": 653,\n    //       \"id\": 698759,\n    //       \"maker\": False,\n    //       \"orderId\": 25851813,\n    //       \"price\": \"7819.01\",\n    //       \"qty\": \"0.002\",\n    //       \"quoteQty\": \"0.01563\",\n    //       \"realizedPnl\": \"-0.91539999\",\n    //       \"side\": \"SELL\",\n    //       \"symbol\": \"BTCUSDT\",\n    //       \"time\": 1569514978020\n    //     }\n    //     {\n    //       \"symbol\": \"BTCUSDT\",\n    //       \"id\": 477128891,\n    //       \"orderId\": 13809777875,\n    //       \"side\": \"SELL\",\n    //       \"price\": \"38479.55\",\n    //       \"qty\": \"0.001\",\n    //       \"realizedPnl\": \"-0.00009534\",\n    //       \"marginAsset\": \"USDT\",\n    //       \"quoteQty\": \"38.47955\",\n    //       \"commission\": \"-0.00076959\",\n    //       \"commissionAsset\": \"USDT\",\n    //       \"time\": 1612733566708,\n    //       \"positionSide\": \"BOTH\",\n    //       \"maker\": true,\n    //       \"buyer\": false\n    //     }\n    //\n\n\n    const timestamp = this.safeInteger2(trade, 'T', 'time');\n    const priceString = this.safeString2(trade, 'p', 'price');\n    const amountString = this.safeString2(trade, 'q', 'qty');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    let id = this.safeString2(trade, 't', 'a');\n    id = this.safeString(trade, 'id', id);\n    let side = undefined;\n    const orderId = this.safeString(trade, 'orderId');\n\n    if ('m' in trade) {\n      side = trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally\n    } else if ('isBuyerMaker' in trade) {\n      side = trade['isBuyerMaker'] ? 'sell' : 'buy';\n    } else if ('side' in trade) {\n      side = this.safeStringLower(trade, 'side');\n    } else {\n      if ('isBuyer' in trade) {\n        side = trade['isBuyer'] ? 'buy' : 'sell'; // this is a true side\n      }\n    }\n\n    let fee = undefined;\n\n    if ('commission' in trade) {\n      fee = {\n        'cost': this.safeNumber(trade, 'commission'),\n        'currency': this.safeCurrencyCode(this.safeString(trade, 'commissionAsset'))\n      };\n    }\n\n    let takerOrMaker = undefined;\n\n    if ('isMaker' in trade) {\n      takerOrMaker = trade['isMaker'] ? 'maker' : 'taker';\n    }\n\n    if ('maker' in trade) {\n      takerOrMaker = trade['maker'] ? 'maker' : 'taker';\n    }\n\n    const marketId = this.safeString(trade, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'] // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.\n      // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.\n      // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.\n      // 'limit': 500,     // default = 500, maximum = 1000\n\n    };\n    const defaultType = this.safeString2(this.options, 'fetchTrades', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n    let defaultMethod = undefined;\n\n    if (type === 'future') {\n      defaultMethod = 'fapiPublicGetAggTrades';\n    } else if (type === 'delivery') {\n      defaultMethod = 'dapiPublicGetAggTrades';\n    } else {\n      defaultMethod = 'publicGetAggTrades';\n    }\n\n    let method = this.safeString(this.options, 'fetchTradesMethod', defaultMethod);\n\n    if (method === 'publicGetAggTrades') {\n      if (since !== undefined) {\n        request['startTime'] = since; // https://github.com/ccxt/ccxt/issues/6400\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list\n\n        request['endTime'] = this.sum(since, 3600000);\n      }\n\n      if (type === 'future') {\n        method = 'fapiPublicGetAggTrades';\n      } else if (type === 'delivery') {\n        method = 'dapiPublicGetAggTrades';\n      }\n    } else if (method === 'publicGetHistoricalTrades') {\n      if (type === 'future') {\n        method = 'fapiPublicGetHistoricalTrades';\n      } else if (type === 'delivery') {\n        method = 'dapiPublicGetHistoricalTrades';\n      }\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default = 500, maximum = 1000\n    } //\n    // Caveats:\n    // - default limit (500) applies only if no other parameters set, trades up\n    //   to the maximum limit may be returned to satisfy other parameters\n    // - if both limit and time window is set and time window contains more\n    //   trades than the limit then the last trades from the window are returned\n    // - 'tradeId' accepted and returned by this method is \"aggregate\" trade id\n    //   which is different from actual trade id\n    // - setting both fromId and time window results in error\n\n\n    const response = await this[method](this.extend(request, query)); //\n    // aggregate trades\n    //\n    //     [\n    //         {\n    //             \"a\": 26129,         // Aggregate tradeId\n    //             \"p\": \"0.01633102\",  // Price\n    //             \"q\": \"4.70443515\",  // Quantity\n    //             \"f\": 27781,         // First tradeId\n    //             \"l\": 27781,         // Last tradeId\n    //             \"T\": 1498793709153, // Timestamp\n    //             \"m\": true,          // Was the buyer the maker?\n    //             \"M\": true           // Was the trade the best price match?\n    //         }\n    //     ]\n    //\n    // recent public trades and historical public trades\n    //\n    //     [\n    //         {\n    //             \"id\": 28457,\n    //             \"price\": \"4.00000100\",\n    //             \"qty\": \"12.00000000\",\n    //             \"time\": 1499865549590,\n    //             \"isBuyerMaker\": true,\n    //             \"isBestMatch\": true\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'NEW': 'open',\n      'PARTIALLY_FILLED': 'open',\n      'FILLED': 'closed',\n      'CANCELED': 'canceled',\n      'PENDING_CANCEL': 'canceling',\n      // currently unused\n      'REJECTED': 'rejected',\n      'EXPIRED': 'expired'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // spot\n    //\n    //     {\n    //         \"symbol\": \"LTCBTC\",\n    //         \"orderId\": 1,\n    //         \"clientOrderId\": \"myOrder1\",\n    //         \"price\": \"0.1\",\n    //         \"origQty\": \"1.0\",\n    //         \"executedQty\": \"0.0\",\n    //         \"cummulativeQuoteQty\": \"0.0\",\n    //         \"status\": \"NEW\",\n    //         \"timeInForce\": \"GTC\",\n    //         \"type\": \"LIMIT\",\n    //         \"side\": \"BUY\",\n    //         \"stopPrice\": \"0.0\",\n    //         \"icebergQty\": \"0.0\",\n    //         \"time\": 1499827319559,\n    //         \"updateTime\": 1499827319559,\n    //         \"isWorking\": true\n    //     }\n    //\n    // futures\n    //\n    //     {\n    //         \"symbol\": \"BTCUSDT\",\n    //         \"orderId\": 1,\n    //         \"clientOrderId\": \"myOrder1\",\n    //         \"price\": \"0.1\",\n    //         \"origQty\": \"1.0\",\n    //         \"executedQty\": \"1.0\",\n    //         \"cumQuote\": \"10.0\",\n    //         \"status\": \"NEW\",\n    //         \"timeInForce\": \"GTC\",\n    //         \"type\": \"LIMIT\",\n    //         \"side\": \"BUY\",\n    //         \"stopPrice\": \"0.0\",\n    //         \"updateTime\": 1499827319559\n    //     }\n    //\n    // createOrder with { \"newOrderRespType\": \"FULL\" }\n    //\n    //     {\n    //       \"symbol\": \"BTCUSDT\",\n    //       \"orderId\": 5403233939,\n    //       \"orderListId\": -1,\n    //       \"clientOrderId\": \"x-R4BD3S825e669e75b6c14f69a2c43e\",\n    //       \"transactTime\": 1617151923742,\n    //       \"price\": \"0.00000000\",\n    //       \"origQty\": \"0.00050000\",\n    //       \"executedQty\": \"0.00050000\",\n    //       \"cummulativeQuoteQty\": \"29.47081500\",\n    //       \"status\": \"FILLED\",\n    //       \"timeInForce\": \"GTC\",\n    //       \"type\": \"MARKET\",\n    //       \"side\": \"BUY\",\n    //       \"fills\": [\n    //         {\n    //           \"price\": \"58941.63000000\",\n    //           \"qty\": \"0.00050000\",\n    //           \"commission\": \"0.00007050\",\n    //           \"commissionAsset\": \"BNB\",\n    //           \"tradeId\": 737466631\n    //         }\n    //       ]\n    //     }\n    //\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const filledString = this.safeString(order, 'executedQty', '0');\n    const filled = this.parseNumber(filledString);\n    const filledFloat = parseFloat(filledString);\n    let timestamp = undefined;\n    let lastTradeTimestamp = undefined;\n\n    if ('time' in order) {\n      timestamp = this.safeInteger(order, 'time');\n    } else if ('transactTime' in order) {\n      timestamp = this.safeInteger(order, 'transactTime');\n    } else if ('updateTime' in order) {\n      if (status === 'open') {\n        if (filledFloat > 0) {\n          lastTradeTimestamp = this.safeInteger(order, 'updateTime');\n        } else {\n          timestamp = this.safeInteger(order, 'updateTime');\n        }\n      }\n    }\n\n    const averageString = this.safeString(order, 'avgPrice');\n    const average = this.parseNumber(this.omitZero(averageString));\n    const priceString = this.safeString(order, 'price');\n    const price = this.parseNumber(this.omitZero(priceString));\n    const amount = this.safeNumber(order, 'origQty'); // - Spot/Margin market: cummulativeQuoteQty\n    // - Futures market: cumQuote.\n    //   Note this is not the actual cost, since Binance futures uses leverage to calculate margins.\n\n    const cost = this.safeNumber2(order, 'cummulativeQuoteQty', 'cumQuote');\n    const id = this.safeString(order, 'orderId');\n    let type = this.safeStringLower(order, 'type');\n\n    if (type === 'limit_maker') {\n      type = 'limit';\n    }\n\n    const side = this.safeStringLower(order, 'side');\n    const fills = this.safeValue(order, 'fills', []);\n    const trades = this.parseTrades(fills, market);\n    const clientOrderId = this.safeString(order, 'clientOrderId');\n    const timeInForce = this.safeString(order, 'timeInForce');\n    const postOnly = type === 'limit_maker' || timeInForce === 'GTX';\n    const stopPriceString = this.safeString(order, 'stopPrice');\n    const stopPrice = this.parseNumber(this.omitZero(stopPriceString));\n    return this.safeOrder({\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': undefined,\n      'status': status,\n      'fee': undefined,\n      'trades': trades\n    });\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString2(this.options, 'createOrder', 'defaultType', 'spot');\n    const orderType = this.safeString(params, 'type', defaultType);\n    const clientOrderId = this.safeString2(params, 'newClientOrderId', 'clientOrderId');\n    params = this.omit(params, ['type', 'newClientOrderId', 'clientOrderId']);\n    let method = 'privatePostOrder';\n\n    if (orderType === 'future') {\n      method = 'fapiPrivatePostOrder';\n    } else if (orderType === 'delivery') {\n      method = 'dapiPrivatePostOrder';\n    } else if (orderType === 'margin') {\n      method = 'sapiPostMarginOrder';\n    } // the next 5 lines are added to support for testing orders\n\n\n    if (market['spot']) {\n      const test = this.safeValue(params, 'test', false);\n\n      if (test) {\n        method += 'Test';\n      }\n\n      params = this.omit(params, 'test');\n    }\n\n    const uppercaseType = type.toUpperCase();\n    const validOrderTypes = this.safeValue(market['info'], 'orderTypes');\n\n    if (!this.inArray(uppercaseType, validOrderTypes)) {\n      throw new InvalidOrder(this.id + ' ' + type + ' is not a valid order type in market ' + symbol);\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'type': uppercaseType,\n      'side': side.toUpperCase()\n    };\n\n    if (clientOrderId === undefined) {\n      const broker = this.safeValue(this.options, 'broker');\n\n      if (broker) {\n        const brokerId = this.safeString(broker, orderType);\n\n        if (brokerId !== undefined) {\n          request['newClientOrderId'] = brokerId + this.uuid22();\n        }\n      }\n    } else {\n      request['newClientOrderId'] = clientOrderId;\n    }\n\n    if (orderType === 'spot' || orderType === 'margin') {\n      request['newOrderRespType'] = this.safeValue(this.options['newOrderRespType'], type, 'RESULT'); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n    } else {\n      // delivery and future\n      request['newOrderRespType'] = 'RESULT'; // \"ACK\", \"RESULT\", default \"ACK\"\n    } // additional required fields depending on the order type\n\n\n    let timeInForceIsRequired = false;\n    let priceIsRequired = false;\n    let stopPriceIsRequired = false;\n    let quantityIsRequired = false; //\n    // spot/margin\n    //\n    //     LIMIT                timeInForce, quantity, price\n    //     MARKET               quantity or quoteOrderQty\n    //     STOP_LOSS            quantity, stopPrice\n    //     STOP_LOSS_LIMIT      timeInForce, quantity, price, stopPrice\n    //     TAKE_PROFIT          quantity, stopPrice\n    //     TAKE_PROFIT_LIMIT    timeInForce, quantity, price, stopPrice\n    //     LIMIT_MAKER          quantity, price\n    //\n    // futures\n    //\n    //     LIMIT                timeInForce, quantity, price\n    //     MARKET               quantity\n    //     STOP/TAKE_PROFIT     quantity, price, stopPrice\n    //     STOP_MARKET          stopPrice\n    //     TAKE_PROFIT_MARKET   stopPrice\n    //     TRAILING_STOP_MARKET callbackRate\n    //\n\n    if (uppercaseType === 'MARKET') {\n      const quoteOrderQty = this.safeValue(this.options, 'quoteOrderQty', false);\n\n      if (quoteOrderQty) {\n        const quoteOrderQty = this.safeNumber(params, 'quoteOrderQty');\n        const precision = market['precision']['price'];\n\n        if (quoteOrderQty !== undefined) {\n          request['quoteOrderQty'] = this.decimalToPrecision(quoteOrderQty, TRUNCATE, precision, this.precisionMode);\n          params = this.omit(params, 'quoteOrderQty');\n        } else if (price !== undefined) {\n          request['quoteOrderQty'] = this.decimalToPrecision(amount * price, TRUNCATE, precision, this.precisionMode);\n        } else {\n          quantityIsRequired = true;\n        }\n      } else {\n        quantityIsRequired = true;\n      }\n    } else if (uppercaseType === 'LIMIT') {\n      priceIsRequired = true;\n      timeInForceIsRequired = true;\n      quantityIsRequired = true;\n    } else if (uppercaseType === 'STOP_LOSS' || uppercaseType === 'TAKE_PROFIT') {\n      stopPriceIsRequired = true;\n      quantityIsRequired = true;\n\n      if (market['linear'] || market['inverse']) {\n        priceIsRequired = true;\n      }\n    } else if (uppercaseType === 'STOP_LOSS_LIMIT' || uppercaseType === 'TAKE_PROFIT_LIMIT') {\n      quantityIsRequired = true;\n      stopPriceIsRequired = true;\n      priceIsRequired = true;\n      timeInForceIsRequired = true;\n    } else if (uppercaseType === 'LIMIT_MAKER') {\n      priceIsRequired = true;\n      quantityIsRequired = true;\n    } else if (uppercaseType === 'STOP') {\n      quantityIsRequired = true;\n      stopPriceIsRequired = true;\n      priceIsRequired = true;\n    } else if (uppercaseType === 'STOP_MARKET' || uppercaseType === 'TAKE_PROFIT_MARKET') {\n      const closePosition = this.safeValue(params, 'closePosition');\n\n      if (closePosition === undefined) {\n        quantityIsRequired = true;\n      }\n\n      stopPriceIsRequired = true;\n    } else if (uppercaseType === 'TRAILING_STOP_MARKET') {\n      quantityIsRequired = true;\n      const callbackRate = this.safeNumber(params, 'callbackRate');\n\n      if (callbackRate === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder() requires a callbackRate extra param for a ' + type + ' order');\n      }\n    }\n\n    if (quantityIsRequired) {\n      request['quantity'] = this.amountToPrecision(symbol, amount);\n    }\n\n    if (priceIsRequired) {\n      if (price === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder() requires a price argument for a ' + type + ' order');\n      }\n\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    if (timeInForceIsRequired) {\n      request['timeInForce'] = this.options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n    }\n\n    if (stopPriceIsRequired) {\n      const stopPrice = this.safeNumber(params, 'stopPrice');\n\n      if (stopPrice === undefined) {\n        throw new InvalidOrder(this.id + ' createOrder() requires a stopPrice extra param for a ' + type + ' order');\n      } else {\n        params = this.omit(params, 'stopPrice');\n        request['stopPrice'] = this.priceToPrecision(symbol, stopPrice);\n      }\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString2(this.options, 'fetchOrder', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    let method = 'privateGetOrder';\n\n    if (type === 'future') {\n      method = 'fapiPrivateGetOrder';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateGetOrder';\n    } else if (type === 'margin') {\n      method = 'sapiGetMarginOrder';\n    }\n\n    const request = {\n      'symbol': market['id']\n    };\n    const clientOrderId = this.safeValue2(params, 'origClientOrderId', 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['origClientOrderId'] = clientOrderId;\n    } else {\n      request['orderId'] = id;\n    }\n\n    const query = this.omit(params, ['type', 'clientOrderId', 'origClientOrderId']);\n    const response = await this[method](this.extend(request, query));\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString2(this.options, 'fetchOrders', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    let method = 'privateGetAllOrders';\n\n    if (type === 'future') {\n      method = 'fapiPrivateGetAllOrders';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateGetAllOrders';\n    } else if (type === 'margin') {\n      method = 'sapiGetMarginAllOrders';\n    }\n\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const query = this.omit(params, 'type');\n    const response = await this[method](this.extend(request, query)); //\n    //  spot\n    //\n    //     [\n    //         {\n    //             \"symbol\": \"LTCBTC\",\n    //             \"orderId\": 1,\n    //             \"clientOrderId\": \"myOrder1\",\n    //             \"price\": \"0.1\",\n    //             \"origQty\": \"1.0\",\n    //             \"executedQty\": \"0.0\",\n    //             \"cummulativeQuoteQty\": \"0.0\",\n    //             \"status\": \"NEW\",\n    //             \"timeInForce\": \"GTC\",\n    //             \"type\": \"LIMIT\",\n    //             \"side\": \"BUY\",\n    //             \"stopPrice\": \"0.0\",\n    //             \"icebergQty\": \"0.0\",\n    //             \"time\": 1499827319559,\n    //             \"updateTime\": 1499827319559,\n    //             \"isWorking\": true\n    //         }\n    //     ]\n    //\n    //  futures\n    //\n    //     [\n    //         {\n    //             \"symbol\": \"BTCUSDT\",\n    //             \"orderId\": 1,\n    //             \"clientOrderId\": \"myOrder1\",\n    //             \"price\": \"0.1\",\n    //             \"origQty\": \"1.0\",\n    //             \"executedQty\": \"1.0\",\n    //             \"cumQuote\": \"10.0\",\n    //             \"status\": \"NEW\",\n    //             \"timeInForce\": \"GTC\",\n    //             \"type\": \"LIMIT\",\n    //             \"side\": \"BUY\",\n    //             \"stopPrice\": \"0.0\",\n    //             \"updateTime\": 1499827319559\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    let query = undefined;\n    let type = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      const defaultType = this.safeString2(this.options, 'fetchOpenOrders', 'defaultType', 'spot');\n      type = this.safeString(params, 'type', defaultType);\n      query = this.omit(params, 'type');\n    } else if (this.options['warnOnFetchOpenOrdersWithoutSymbol']) {\n      const symbols = this.symbols;\n      const numSymbols = symbols.length;\n      const fetchOpenOrdersRateLimit = parseInt(numSymbols / 2);\n      throw new ExchangeError(this.id + ' fetchOpenOrders WARNING: fetching open orders without specifying a symbol is rate-limited to one call per ' + fetchOpenOrdersRateLimit.toString() + ' seconds. Do not call this method frequently to avoid ban. Set ' + this.id + '.options[\"warnOnFetchOpenOrdersWithoutSymbol\"] = false to suppress this warning message.');\n    } else {\n      const defaultType = this.safeString2(this.options, 'fetchOpenOrders', 'defaultType', 'spot');\n      type = this.safeString(params, 'type', defaultType);\n      query = this.omit(params, 'type');\n    }\n\n    let method = 'privateGetOpenOrders';\n\n    if (type === 'future') {\n      method = 'fapiPrivateGetOpenOrders';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateGetOpenOrders';\n    } else if (type === 'margin') {\n      method = 'sapiGetMarginOpenOrders';\n    }\n\n    const response = await this[method](this.extend(request, query));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const orders = await this.fetchOrders(symbol, since, limit, params);\n    return this.filterBy(orders, 'status', 'closed');\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString2(this.options, 'fetchOpenOrders', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType); // https://github.com/ccxt/ccxt/issues/6507\n\n    const origClientOrderId = this.safeValue2(params, 'origClientOrderId', 'clientOrderId');\n    const request = {\n      'symbol': market['id'] // 'orderId': id,\n      // 'origClientOrderId': id,\n\n    };\n\n    if (origClientOrderId === undefined) {\n      request['orderId'] = id;\n    } else {\n      request['origClientOrderId'] = origClientOrderId;\n    }\n\n    let method = 'privateDeleteOrder';\n\n    if (type === 'future') {\n      method = 'fapiPrivateDeleteOrder';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateDeleteOrder';\n    } else if (type === 'margin') {\n      method = 'sapiDeleteMarginOrder';\n    }\n\n    const query = this.omit(params, ['type', 'origClientOrderId', 'clientOrderId']);\n    const response = await this[method](this.extend(request, query));\n    return this.parseOrder(response);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelAllOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const defaultType = this.safeString2(this.options, 'cancelAllOrders', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n    let method = 'privateDeleteOpenOrders';\n\n    if (type === 'margin') {\n      method = 'sapiDeleteMarginOpenOrders';\n    } else if (type === 'future') {\n      method = 'fapiPrivateDeleteAllOpenOrders';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateDeleteAllOpenOrders';\n    }\n\n    const response = await this[method](this.extend(request, query));\n\n    if (Array.isArray(response)) {\n      return this.parseOrders(response, market);\n    } else {\n      return response;\n    }\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const defaultType = this.safeString2(this.options, 'fetchMyTrades', 'defaultType', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n    let method = undefined;\n\n    if (type === 'spot') {\n      method = 'privateGetMyTrades';\n    } else if (type === 'margin') {\n      method = 'sapiGetMarginMyTrades';\n    } else if (type === 'future') {\n      method = 'fapiPrivateGetUserTrades';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateGetUserTrades';\n    }\n\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot trade\n    //\n    //     [\n    //         {\n    //             \"symbol\": \"BNBBTC\",\n    //             \"id\": 28457,\n    //             \"orderId\": 100234,\n    //             \"price\": \"4.00000100\",\n    //             \"qty\": \"12.00000000\",\n    //             \"commission\": \"10.10000000\",\n    //             \"commissionAsset\": \"BNB\",\n    //             \"time\": 1499865549590,\n    //             \"isBuyer\": true,\n    //             \"isMaker\": false,\n    //             \"isBestMatch\": true,\n    //         }\n    //     ]\n    //\n    // futures trade\n    //\n    //     [\n    //         {\n    //             \"accountId\": 20,\n    //             \"buyer\": False,\n    //             \"commission\": \"-0.07819010\",\n    //             \"commissionAsset\": \"USDT\",\n    //             \"counterPartyId\": 653,\n    //             \"id\": 698759,\n    //             \"maker\": False,\n    //             \"orderId\": 25851813,\n    //             \"price\": \"7819.01\",\n    //             \"qty\": \"0.002\",\n    //             \"quoteQty\": \"0.01563\",\n    //             \"realizedPnl\": \"-0.91539999\",\n    //             \"side\": \"SELL\",\n    //             \"symbol\": \"BTCUSDT\",\n    //             \"time\": 1569514978020\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchMyDustTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    //\n    // Binance provides an opportunity to trade insignificant (i.e. non-tradable and non-withdrawable)\n    // token leftovers (of any asset) into `BNB` coin which in turn can be used to pay trading fees with it.\n    // The corresponding trades history is called the `Dust Log` and can be requested via the following end-point:\n    // https://github.com/binance-exchange/binance-official-api-docs/blob/master/wapi-api.md#dustlog-user_data\n    //\n    await this.loadMarkets();\n    const response = await this.wapiGetUserAssetDribbletLog(params); // { success:    true,\n    //   results: { total:    1,\n    //               rows: [ {     transfered_total: \"1.06468458\",\n    //                         service_charge_total: \"0.02172826\",\n    //                                      tran_id: 2701371634,\n    //                                         logs: [ {              tranId:  2701371634,\n    //                                                   serviceChargeAmount: \"0.00012819\",\n    //                                                                   uid: \"35103861\",\n    //                                                                amount: \"0.8012\",\n    //                                                           operateTime: \"2018-10-07 17:56:07\",\n    //                                                      transferedAmount: \"0.00628141\",\n    //                                                             fromAsset: \"ADA\"                  } ],\n    //                                 operate_time: \"2018-10-07 17:56:06\"                                } ] } }\n\n    const results = this.safeValue(response, 'results', {});\n    const rows = this.safeValue(results, 'rows', []);\n    const data = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      const logs = rows[i]['logs'];\n\n      for (let j = 0; j < logs.length; j++) {\n        logs[j]['isDustTrade'] = true;\n        data.push(logs[j]);\n      }\n    }\n\n    const trades = this.parseTrades(data, undefined, since, limit);\n    return this.filterBySinceLimit(trades, since, limit);\n  }\n\n  parseDustTrade(trade, market = undefined) {\n    // {              tranId:  2701371634,\n    //   serviceChargeAmount: \"0.00012819\",\n    //                   uid: \"35103861\",\n    //                amount: \"0.8012\",\n    //           operateTime: \"2018-10-07 17:56:07\",\n    //      transferedAmount: \"0.00628141\",\n    //             fromAsset: \"ADA\"                  },\n    const orderId = this.safeString(trade, 'tranId');\n    const timestamp = this.parse8601(this.safeString(trade, 'operateTime'));\n    const tradedCurrency = this.safeCurrencyCode(this.safeString(trade, 'fromAsset'));\n    const earnedCurrency = this.currency('BNB')['code'];\n    const applicantSymbol = earnedCurrency + '/' + tradedCurrency;\n    let tradedCurrencyIsQuote = false;\n\n    if (applicantSymbol in this.markets) {\n      tradedCurrencyIsQuote = true;\n    } //\n    // Warning\n    // Binance dust trade `fee` is already excluded from the `BNB` earning reported in the `Dust Log`.\n    // So the parser should either set the `fee.cost` to `0` or add it on top of the earned\n    // BNB `amount` (or `cost` depending on the trade `side`). The second of the above options\n    // is much more illustrative and therefore preferable.\n    //\n\n\n    const fee = {\n      'currency': earnedCurrency,\n      'cost': this.safeNumber(trade, 'serviceChargeAmount')\n    };\n    let symbol = undefined;\n    let amount = undefined;\n    let cost = undefined;\n    let side = undefined;\n\n    if (tradedCurrencyIsQuote) {\n      symbol = applicantSymbol;\n      amount = this.sum(this.safeNumber(trade, 'transferedAmount'), fee['cost']);\n      cost = this.safeNumber(trade, 'amount');\n      side = 'buy';\n    } else {\n      symbol = tradedCurrency + '/' + earnedCurrency;\n      amount = this.safeNumber(trade, 'amount');\n      cost = this.sum(this.safeNumber(trade, 'transferedAmount'), fee['cost']);\n      side = 'sell';\n    }\n\n    let price = undefined;\n\n    if (cost !== undefined) {\n      if (amount) {\n        price = cost / amount;\n      }\n    }\n\n    const id = undefined;\n    const type = undefined;\n    const takerOrMaker = undefined;\n    return {\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': type,\n      'takerOrMaker': takerOrMaker,\n      'side': side,\n      'amount': amount,\n      'price': price,\n      'cost': cost,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['coin'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since; // max 3 months range https://github.com/ccxt/ccxt/issues/6495\n\n      request['endTime'] = this.sum(since, 7776000000);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.sapiGetCapitalDepositHisrec(this.extend(request, params)); //     [\n    //       {\n    //         \"amount\": \"0.01844487\",\n    //         \"coin\": \"BCH\",\n    //         \"network\": \"BCH\",\n    //         \"status\": 1,\n    //         \"address\": \"1NYxAJhW2281HK1KtJeaENBqHeygA88FzR\",\n    //         \"addressTag\": \"\",\n    //         \"txId\": \"bafc5902504d6504a00b7d0306a41154cbf1d1b767ab70f3bc226327362588af\",\n    //         \"insertTime\": 1610784980000,\n    //         \"transferType\": 0,\n    //         \"confirmTimes\": \"2/2\"\n    //       },\n    //       {\n    //         \"amount\": \"4500\",\n    //         \"coin\": \"USDT\",\n    //         \"network\": \"BSC\",\n    //         \"status\": 1,\n    //         \"address\": \"0xc9c923c87347ca0f3451d6d308ce84f691b9f501\",\n    //         \"addressTag\": \"\",\n    //         \"txId\": \"Internal transfer 51376627901\",\n    //         \"insertTime\": 1618394381000,\n    //         \"transferType\": 1,\n    //         \"confirmTimes\": \"1/15\"\n    //     }\n    //   ]\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['coin'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since; // max 3 months range https://github.com/ccxt/ccxt/issues/6495\n\n      request['endTime'] = this.sum(since, 7776000000);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.sapiGetCapitalWithdrawHistory(this.extend(request, params)); //     [\n    //       {\n    //         \"id\": \"69e53ad305124b96b43668ceab158a18\",\n    //         \"amount\": \"28.75\",\n    //         \"transactionFee\": \"0.25\",\n    //         \"coin\": \"XRP\",\n    //         \"status\": 6,\n    //         \"address\": \"r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza\",\n    //         \"addressTag\": \"101286922\",\n    //         \"txId\": \"19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A\",\n    //         \"applyTime\": \"2021-04-15 12:09:16\",\n    //         \"network\": \"XRP\",\n    //         \"transferType\": 0\n    //       },\n    //       {\n    //         \"id\": \"9a67628b16ba4988ae20d329333f16bc\",\n    //         \"amount\": \"20\",\n    //         \"transactionFee\": \"20\",\n    //         \"coin\": \"USDT\",\n    //         \"status\": 6,\n    //         \"address\": \"0x0AB991497116f7F5532a4c2f4f7B1784488628e1\",\n    //         \"txId\": \"0x77fbf2cf2c85b552f0fd31fd2e56dc95c08adae031d96f3717d8b17e1aea3e46\",\n    //         \"applyTime\": \"2021-04-15 12:06:53\",\n    //         \"network\": \"ETH\",\n    //         \"transferType\": 0\n    //       },\n    //       {\n    //         \"id\": \"a7cdc0afbfa44a48bd225c9ece958fe2\",\n    //         \"amount\": \"51\",\n    //         \"transactionFee\": \"1\",\n    //         \"coin\": \"USDT\",\n    //         \"status\": 6,\n    //         \"address\": \"TYDmtuWL8bsyjvcauUTerpfYyVhFtBjqyo\",\n    //         \"txId\": \"168a75112bce6ceb4823c66726ad47620ad332e69fe92d9cb8ceb76023f9a028\",\n    //         \"applyTime\": \"2021-04-13 12:46:59\",\n    //         \"network\": \"TRX\",\n    //         \"transferType\": 0\n    //       }\n    //     ]\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  parseTransactionStatusByType(status, type = undefined) {\n    const statusesByType = {\n      'deposit': {\n        '0': 'pending',\n        '1': 'ok'\n      },\n      'withdrawal': {\n        '0': 'pending',\n        // Email Sent\n        '1': 'canceled',\n        // Cancelled (different from 1 = ok in deposits)\n        '2': 'pending',\n        // Awaiting Approval\n        '3': 'failed',\n        // Rejected\n        '4': 'pending',\n        // Processing\n        '5': 'failed',\n        // Failure\n        '6': 'ok' // Completed\n\n      }\n    };\n    const statuses = this.safeValue(statusesByType, type, {});\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //       \"amount\": \"4500\",\n    //       \"coin\": \"USDT\",\n    //       \"network\": \"BSC\",\n    //       \"status\": 1,\n    //       \"address\": \"0xc9c923c87347ca0f3451d6d308ce84f691b9f501\",\n    //       \"addressTag\": \"\",\n    //       \"txId\": \"Internal transfer 51376627901\",\n    //       \"insertTime\": 1618394381000,\n    //       \"transferType\": 1,\n    //       \"confirmTimes\": \"1/15\"\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //       \"id\": \"69e53ad305124b96b43668ceab158a18\",\n    //       \"amount\": \"28.75\",\n    //       \"transactionFee\": \"0.25\",\n    //       \"coin\": \"XRP\",\n    //       \"status\": 6,\n    //       \"address\": \"r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza\",\n    //       \"addressTag\": \"101286922\",\n    //       \"txId\": \"19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A\",\n    //       \"applyTime\": \"2021-04-15 12:09:16\",\n    //       \"network\": \"XRP\",\n    //       \"transferType\": 0\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const address = this.safeString(transaction, 'address');\n    let tag = this.safeString(transaction, 'addressTag'); // set but unused\n\n    if (tag !== undefined) {\n      if (tag.length < 1) {\n        tag = undefined;\n      }\n    }\n\n    let txid = this.safeString(transaction, 'txId');\n\n    if (txid !== undefined && txid.indexOf('Internal transfer ') >= 0) {\n      txid = txid.slice(18);\n    }\n\n    const currencyId = this.safeString(transaction, 'coin');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    let timestamp = undefined;\n    const insertTime = this.safeInteger(transaction, 'insertTime');\n    const applyTime = this.parse8601(this.safeString(transaction, 'applyTime'));\n    let type = this.safeString(transaction, 'type');\n\n    if (type === undefined) {\n      if (insertTime !== undefined && applyTime === undefined) {\n        type = 'deposit';\n        timestamp = insertTime;\n      } else if (insertTime === undefined && applyTime !== undefined) {\n        type = 'withdrawal';\n        timestamp = applyTime;\n      }\n    }\n\n    const status = this.parseTransactionStatusByType(this.safeString(transaction, 'status'), type);\n    const amount = this.safeNumber(transaction, 'amount');\n    const feeCost = this.safeNumber(transaction, 'transactionFee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': code,\n        'cost': feeCost\n      };\n    }\n\n    const updated = this.safeInteger(transaction, 'successTime');\n    let internal = this.safeInteger(transaction, 'transferType', false);\n    internal = internal ? true : false;\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'addressTo': address,\n      'addressFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'tagFrom': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'internal': internal,\n      'fee': fee\n    };\n  }\n\n  parseTransferStatus(status) {\n    const statuses = {\n      'CONFIRMED': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransfer(transfer, currency = undefined) {\n    //\n    // transfer\n    //\n    //     {\n    //         \"tranId\":13526853623\n    //     }\n    //\n    // fetchTransfers\n    //\n    //     {\n    //         timestamp: 1614640878000,\n    //         asset: 'USDT',\n    //         amount: '25',\n    //         type: 'MAIN_UMFUTURE',\n    //         status: 'CONFIRMED',\n    //         tranId: 43000126248\n    //     }\n    //\n    const id = this.safeString(transfer, 'tranId');\n    const currencyId = this.safeString(transfer, 'asset');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const amount = this.safeNumber(transfer, 'amount');\n    const type = this.safeString(transfer, 'type');\n    let fromAccount = undefined;\n    let toAccount = undefined;\n    const typesByAccount = this.safeValue(this.options, 'typesByAccount', {});\n\n    if (type !== undefined) {\n      const parts = type.split('_');\n      fromAccount = this.safeValue(parts, 0);\n      toAccount = this.safeValue(parts, 1);\n      fromAccount = this.safeString(typesByAccount, fromAccount, fromAccount);\n      toAccount = this.safeString(typesByAccount, toAccount, toAccount);\n    }\n\n    const timestamp = this.safeInteger(transfer, 'timestamp');\n    const status = this.parseTransferStatus(this.safeString(transfer, 'status'));\n    return {\n      'info': transfer,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'currency': code,\n      'amount': amount,\n      'fromAccount': fromAccount,\n      'toAccount': toAccount,\n      'status': status\n    };\n  }\n\n  parseIncome(income, market = undefined) {\n    //\n    //     {\n    //       \"symbol\": \"ETHUSDT\",\n    //       \"incomeType\": \"FUNDING_FEE\",\n    //       \"income\": \"0.00134317\",\n    //       \"asset\": \"USDT\",\n    //       \"time\": \"1621584000000\",\n    //       \"info\": \"FUNDING_FEE\",\n    //       \"tranId\": \"4480321991774044580\",\n    //       \"tradeId\": \"\"\n    //     }\n    //\n    const marketId = this.safeString(income, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const amount = this.safeNumber(income, 'income');\n    const currencyId = this.safeString(income, 'asset');\n    const code = this.safeCurrencyCode(currencyId);\n    const id = this.safeString(income, 'tranId');\n    const timestamp = this.safeInteger(income, 'time');\n    return {\n      'info': income,\n      'symbol': symbol,\n      'code': code,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'id': id,\n      'amount': amount\n    };\n  }\n\n  parseIncomes(incomes, market = undefined, since = undefined, limit = undefined) {\n    const result = [];\n\n    for (let i = 0; i < incomes.length; i++) {\n      const entry = incomes[i];\n      const parsed = this.parseIncome(entry, market);\n      result.push(parsed);\n    }\n\n    return this.filterBySinceLimit(result, since, limit, 'timestamp');\n  }\n\n  async transfer(code, amount, fromAccount, toAccount, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    let type = this.safeString(params, 'type');\n\n    if (type === undefined) {\n      const accountsByType = this.safeValue(this.options, 'accountsByType', {});\n      const fromId = this.safeString(accountsByType, fromAccount, fromAccount);\n      const toId = this.safeString(accountsByType, toAccount, toAccount);\n\n      if (fromId === undefined) {\n        const keys = Object.keys(accountsByType);\n        throw new ExchangeError(this.id + ' fromAccount must be one of ' + keys.join(', '));\n      }\n\n      if (toId === undefined) {\n        const keys = Object.keys(accountsByType);\n        throw new ExchangeError(this.id + ' toAccount must be one of ' + keys.join(', '));\n      }\n\n      type = fromId + '_' + toId;\n    }\n\n    const request = {\n      'asset': currency['id'],\n      'amount': this.currencyToPrecision(code, amount),\n      'type': type\n    };\n    const response = await this.sapiPostAssetTransfer(this.extend(request, params)); //\n    //     {\n    //         \"tranId\":13526853623\n    //     }\n    //\n\n    const transfer = this.parseTransfer(response, currency);\n    return this.extend(transfer, {\n      'amount': amount,\n      'currency': code,\n      'fromAccount': fromAccount,\n      'toAccount': toAccount\n    });\n  }\n\n  async fetchTransfers(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const defaultType = this.safeString2(this.options, 'fetchTransfers', 'defaultType', 'spot');\n    const fromAccount = this.safeString(params, 'fromAccount', defaultType);\n    const defaultTo = fromAccount === 'future' ? 'spot' : 'future';\n    const toAccount = this.safeString(params, 'toAccount', defaultTo);\n    let type = this.safeString(params, 'type');\n    const accountsByType = this.safeValue(this.options, 'accountsByType', {});\n    const fromId = this.safeString(accountsByType, fromAccount);\n    const toId = this.safeString(accountsByType, toAccount);\n\n    if (type === undefined) {\n      if (fromId === undefined) {\n        const keys = Object.keys(accountsByType);\n        throw new ExchangeError(this.id + ' fromAccount parameter must be one of ' + keys.join(', '));\n      }\n\n      if (toId === undefined) {\n        const keys = Object.keys(accountsByType);\n        throw new ExchangeError(this.id + ' toAccount parameter must be one of ' + keys.join(', '));\n      }\n\n      type = fromId + '_' + toId;\n    }\n\n    const request = {\n      'type': type\n    };\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    }\n\n    const response = await this.sapiGetAssetTransfer(this.extend(request, params)); //\n    //     {\n    //         total: 3,\n    //         rows: [\n    //             {\n    //                 timestamp: 1614640878000,\n    //                 asset: 'USDT',\n    //                 amount: '25',\n    //                 type: 'MAIN_UMFUTURE',\n    //                 status: 'CONFIRMED',\n    //                 tranId: 43000126248\n    //             },\n    //         ]\n    //     }\n    //\n\n    const rows = this.safeValue(response, 'rows', []);\n    return this.parseTransfers(rows, currency, since, limit);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coin': currency['id'] // 'network': 'ETH', // 'BSC', 'XMR', you can get network and isDefault in networkList in the response of sapiGetCapitalConfigDetail\n\n    }; // has support for the 'network' parameter\n    // https://binance-docs.github.io/apidocs/spot/en/#deposit-address-supporting-network-user_data\n\n    const response = await this.sapiGetCapitalDepositAddress(this.extend(request, params)); //\n    //     {\n    //         currency: 'XRP',\n    //         address: 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',\n    //         tag: '108618262',\n    //         info: {\n    //             coin: 'XRP',\n    //             address: 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',\n    //             tag: '108618262',\n    //             url: 'https://bithomp.com/explorer/rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh'\n    //         }\n    //     }\n    //\n\n    const address = this.safeString(response, 'address');\n    const tag = this.safeString(response, 'tag');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchFundingFees(codes = undefined, params = {}) {\n    const response = await this.sapiGetAssetAssetDetail(params); //\n    //     {\n    //       \"VRAB\": {\n    //         \"withdrawFee\": \"100\",\n    //         \"minWithdrawAmount\": \"200\",\n    //         \"withdrawStatus\": true,\n    //         \"depositStatus\": true\n    //       },\n    //       \"NZD\": {\n    //         \"withdrawFee\": \"0\",\n    //         \"minWithdrawAmount\": \"0\",\n    //         \"withdrawStatus\": false,\n    //         \"depositStatus\": false\n    //       },\n    //       \"AKRO\": {\n    //         \"withdrawFee\": \"313\",\n    //         \"minWithdrawAmount\": \"626\",\n    //         \"withdrawStatus\": true,\n    //         \"depositStatus\": true\n    //       },\n    //     }\n    //\n\n    const ids = Object.keys(response);\n    const withdrawFees = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const code = this.safeCurrencyCode(id);\n      withdrawFees[code] = this.safeNumber(response[id], 'withdrawFee');\n    }\n\n    return {\n      'withdraw': withdrawFees,\n      'deposit': {},\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coin': currency['id'],\n      'address': address,\n      'amount': amount // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi\n      // issue sapiGetCapitalConfigGetall () to get networks for withdrawing USDT ERC20 vs USDT Omni\n      // 'network': 'ETH', // 'BTC', 'TRX', etc, optional\n\n    };\n\n    if (tag !== undefined) {\n      request['addressTag'] = tag;\n    }\n\n    const response = await this.sapiPostCapitalWithdrawApply(this.extend(request, params)); //     { id: '9a67628b16ba4988ae20d329333f16bc' }\n\n    return {\n      'info': response,\n      'id': this.safeString(response, 'id')\n    };\n  }\n\n  parseTradingFee(fee, market = undefined) {\n    //\n    //     {\n    //         \"symbol\": \"ADABNB\",\n    //         \"makerCommission\": 0.001,\n    //         \"takerCommission\": 0.001\n    //     }\n    //\n    const marketId = this.safeString(fee, 'symbol');\n    const symbol = this.safeSymbol(marketId);\n    return {\n      'info': fee,\n      'symbol': symbol,\n      'maker': this.safeNumber(fee, 'makerCommission'),\n      'taker': this.safeNumber(fee, 'takerCommission')\n    };\n  }\n\n  async fetchTradingFee(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.sapiGetAssetTradeFee(this.extend(request, params)); //\n    //     [\n    //       {\n    //         \"symbol\": \"BTCUSDT\",\n    //         \"makerCommission\": \"0.001\",\n    //         \"takerCommission\": \"0.001\"\n    //       }\n    //     ]\n    //\n\n    const first = this.safeValue(response, 0, {});\n    return this.parseTradingFee(first);\n  }\n\n  async fetchTradingFees(params = {}) {\n    await this.loadMarkets();\n    const response = await this.sapiGetAssetTradeFee(params); //\n    //    [\n    //       {\n    //         \"symbol\": \"ZRXBNB\",\n    //         \"makerCommission\": \"0.001\",\n    //         \"takerCommission\": \"0.001\"\n    //       },\n    //       {\n    //         \"symbol\": \"ZRXBTC\",\n    //         \"makerCommission\": \"0.001\",\n    //         \"takerCommission\": \"0.001\"\n    //       },\n    //    ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const fee = this.parseTradingFee(response[i]);\n      const symbol = fee['symbol'];\n      result[symbol] = fee;\n    }\n\n    return result;\n  }\n\n  async futuresTransfer(code, amount, type, params = {}) {\n    if (type < 1 || type > 4) {\n      throw new ArgumentsRequired(this.id + ' type must be between 1 and 4');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'asset': currency['id'],\n      'amount': amount,\n      'type': type\n    };\n    const response = await this.sapiPostFuturesTransfer(this.extend(request, params)); //\n    //   {\n    //       \"tranId\": 100000001\n    //   }\n    //\n\n    return this.parseTransfer(response, currency);\n  }\n\n  async fetchFundingRate(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    let method = undefined;\n\n    if (market['linear']) {\n      method = 'fapiPublicGetPremiumIndex';\n    } else if (market['inverse']) {\n      method = 'dapiPublicGetPremiumIndex';\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"symbol\": \"BTCUSDT\",\n    //         \"markPrice\": \"45802.81129892\",\n    //         \"indexPrice\": \"45745.47701915\",\n    //         \"estimatedSettlePrice\": \"45133.91753671\",\n    //         \"lastFundingRate\": \"0.00063521\",\n    //         \"interestRate\": \"0.00010000\",\n    //         \"nextFundingTime\": \"1621267200000\",\n    //         \"time\": \"1621252344001\"\n    //     }\n    //\n\n    return this.parseFundingRate(response);\n  }\n\n  async fetchFundingRates(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    let method = undefined;\n    const defaultType = this.safeString2(this.options, 'fetchFundingRates', 'defaultType', 'future');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n\n    if (type === 'future') {\n      method = 'fapiPublicGetPremiumIndex';\n    } else if (type === 'delivery') {\n      method = 'dapiPublicGetPremiumIndex';\n    }\n\n    const response = await this[method](query);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const entry = response[i];\n      const parsed = this.parseFundingRate(entry);\n      result.push(parsed);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  parseFundingRate(premiumIndex, market = undefined) {\n    // ensure it matches with https://www.binance.com/en/futures/funding-history/0\n    //\n    //   {\n    //     \"symbol\": \"BTCUSDT\",\n    //     \"markPrice\": \"45802.81129892\",\n    //     \"indexPrice\": \"45745.47701915\",\n    //     \"estimatedSettlePrice\": \"45133.91753671\",\n    //     \"lastFundingRate\": \"0.00063521\",\n    //     \"interestRate\": \"0.00010000\",\n    //     \"nextFundingTime\": \"1621267200000\",\n    //     \"time\": \"1621252344001\"\n    //  }\n    //\n    const timestamp = this.safeInteger(premiumIndex, 'time');\n    const marketId = this.safeString(premiumIndex, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const markPrice = this.safeNumber(premiumIndex, 'markPrice');\n    const indexPrice = this.safeNumber(premiumIndex, 'indexPrice');\n    const interestRate = this.safeNumber(premiumIndex, 'interestRate'); // current funding rate\n\n    const fundingRate = this.safeNumber(premiumIndex, 'lastFundingRate');\n    const nextFundingTime = this.safeInteger(premiumIndex, 'nextFundingTime');\n    return {\n      'info': premiumIndex,\n      'symbol': symbol,\n      'markPrice': markPrice,\n      'indexPrice': indexPrice,\n      'interestRate': interestRate,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fundingRate': fundingRate,\n      'nextFundingTimestamp': nextFundingTime,\n      'nextFundingDatetime': this.iso8601(nextFundingTime)\n    };\n  }\n\n  parseAccountPositions(account) {\n    const positions = this.safeValue(account, 'positions');\n    const assets = this.safeValue(account, 'assets');\n    const balances = {};\n\n    for (let i = 0; i < assets.length; i++) {\n      const entry = assets[i];\n      const currencyId = this.safeString(entry, 'asset');\n      const code = this.safeCurrencyCode(currencyId);\n      const crossWalletBalance = this.safeString(entry, 'crossWalletBalance');\n      const crossUnPnl = this.safeString(entry, 'crossUnPnl');\n      balances[code] = {\n        'crossMargin': Precise.stringAdd(crossWalletBalance, crossUnPnl),\n        'crossWalletBalance': crossWalletBalance\n      };\n    }\n\n    const result = [];\n\n    for (let i = 0; i < positions.length; i++) {\n      const position = positions[i];\n      const marketId = this.safeString(position, 'symbol');\n      const market = this.safeMarket(marketId);\n      const code = this.options['defaultType'] === 'future' ? market['quote'] : market['base'];\n      const parsed = this.parsePosition(this.extend(position, {\n        'crossMargin': balances[code]['crossMargin'],\n        'crossWalletBalance': balances[code]['crossWalletBalance']\n      }), market);\n      result.push(parsed);\n    }\n\n    return result;\n  }\n\n  parsePosition(position, market = undefined) {\n    //\n    // usdm\n    //    {\n    //       \"symbol\": \"BTCBUSD\",\n    //       \"initialMargin\": \"0\",\n    //       \"maintMargin\": \"0\",\n    //       \"unrealizedProfit\": \"0.00000000\",\n    //       \"positionInitialMargin\": \"0\",\n    //       \"openOrderInitialMargin\": \"0\",\n    //       \"leverage\": \"20\",\n    //       \"isolated\": false,\n    //       \"entryPrice\": \"0.0000\",\n    //       \"maxNotional\": \"100000\",\n    //       \"positionSide\": \"BOTH\",\n    //       \"positionAmt\": \"0.000\",\n    //       \"notional\": \"0\",\n    //       \"isolatedWallet\": \"0\",\n    //       \"updateTime\": \"0\",\n    //       \"crossMargin\": \"100.93634809\",\n    //     }\n    //\n    // coinm\n    //     {\n    //       \"symbol\": \"BTCUSD_210625\",\n    //       \"initialMargin\": \"0.00024393\",\n    //       \"maintMargin\": \"0.00002439\",\n    //       \"unrealizedProfit\": \"-0.00000163\",\n    //       \"positionInitialMargin\": \"0.00024393\",\n    //       \"openOrderInitialMargin\": \"0\",\n    //       \"leverage\": \"10\",\n    //       \"isolated\": false,\n    //       \"positionSide\": \"BOTH\",\n    //       \"entryPrice\": \"41021.20000069\",\n    //       \"maxQty\": \"100\",\n    //       \"notionalValue\": \"0.00243939\",\n    //       \"isolatedWallet\": \"0\",\n    //       \"crossMargin\": \"0.314\"\n    //       \"crossWalletBalance\": \"34\",\n    //     }\n    //\n    const marketId = this.safeString(position, 'symbol');\n    market = this.safeMarket(marketId, market);\n    const symbol = market['symbol'];\n    const leverageString = this.safeString(position, 'leverage');\n    const leverage = parseInt(leverageString);\n    const initialMarginString = this.safeString(position, 'initialMargin');\n    const initialMargin = this.parseNumber(initialMarginString);\n    let initialMarginPercentageString = Precise.stringDiv('1', leverageString, 8);\n    const rational = 1000 % leverage === 0;\n\n    if (!rational) {\n      initialMarginPercentageString = Precise.stringDiv(Precise.stringAdd(initialMarginPercentageString, '1e-8'), '1', 8);\n    }\n\n    const usdm = ('notional' in position);\n    const maintenanceMarginString = this.safeString(position, 'maintMargin');\n    const maintenanceMargin = this.parseNumber(maintenanceMarginString);\n    const entryPriceString = this.safeString(position, 'entryPrice');\n    let entryPrice = this.parseNumber(entryPriceString);\n    const notionalString = this.safeString2(position, 'notional', 'notionalValue');\n    const notionalStringAbs = Precise.stringAbs(notionalString);\n    const notionalFloat = parseFloat(notionalString);\n    const notionalFloatAbs = parseFloat(notionalStringAbs);\n    const notional = this.parseNumber(Precise.stringAbs(notionalString));\n    let contractsString = this.safeString(position, 'positionAmt');\n    let contractsStringAbs = Precise.stringAbs(contractsString);\n\n    if (contractsString === undefined) {\n      const entryNotional = Precise.stringMul(Precise.stringMul(leverageString, initialMarginString), entryPriceString);\n      contractsString = Precise.stringDiv(entryNotional, market['contractSize']);\n      contractsStringAbs = Precise.stringDiv(Precise.stringAdd(contractsString, '0.5'), '1', 0);\n    }\n\n    const contracts = this.parseNumber(contractsStringAbs);\n    const leverageBracket = this.options['leverageBrackets'][symbol];\n    let maintenanceMarginPercentageString = undefined;\n\n    for (let i = 0; i < leverageBracket.length; i++) {\n      const bracket = leverageBracket[i];\n\n      if (notionalFloatAbs < bracket[0]) {\n        break;\n      }\n\n      maintenanceMarginPercentageString = bracket[1];\n    }\n\n    const maintenanceMarginPercentage = this.parseNumber(maintenanceMarginPercentageString);\n    const unrealizedPnlString = this.safeString(position, 'unrealizedProfit');\n    const unrealizedPnl = this.parseNumber(unrealizedPnlString);\n    let timestamp = this.safeInteger(position, 'updateTime');\n\n    if (timestamp === 0) {\n      timestamp = undefined;\n    }\n\n    const isolated = this.safeValue(position, 'isolated');\n    let marginType = undefined;\n    let collateralString = undefined;\n    let walletBalance = undefined;\n\n    if (isolated) {\n      marginType = 'isolated';\n      walletBalance = this.safeString(position, 'isolatedWallet');\n      collateralString = Precise.stringAdd(walletBalance, unrealizedPnlString);\n    } else {\n      marginType = 'cross';\n      walletBalance = this.safeString(position, 'crossWalletBalance');\n      collateralString = this.safeString(position, 'crossMargin');\n    }\n\n    const collateral = this.parseNumber(collateralString);\n    let marginRatio = undefined;\n    let side = undefined;\n    let percentage = undefined;\n    let liquidationPriceStringRaw = undefined;\n    let liquidationPrice = undefined;\n\n    if (notionalFloat === 0.0) {\n      entryPrice = undefined;\n    } else {\n      side = notionalFloat < 0 ? 'short' : 'long';\n      marginRatio = this.parseNumber(Precise.stringDiv(maintenanceMarginString, collateralString, 4));\n      percentage = this.parseNumber(Precise.stringMul(Precise.stringDiv(unrealizedPnlString, initialMarginString, 4), '100'));\n\n      if (usdm) {\n        // calculate liquidation price\n        //\n        // liquidationPrice = (walletBalance / (contracts * (±1 + mmp))) (±entryPrice / (±1 + mmp))\n        //\n        // mmp = maintenanceMarginPercentage\n        // where ± is negative for long and positive for short\n        // TODO: calculate liquidation price for coinm contracts\n        let onePlusMaintenanceMarginPercentageString = undefined;\n        let entryPriceSignString = entryPriceString;\n\n        if (side === 'short') {\n          onePlusMaintenanceMarginPercentageString = Precise.stringAdd('1', maintenanceMarginPercentageString);\n        } else {\n          onePlusMaintenanceMarginPercentageString = Precise.stringAdd('-1', maintenanceMarginPercentageString);\n          entryPriceSignString = Precise.stringMul('-1', entryPriceSignString);\n        }\n\n        const leftSide = Precise.stringDiv(walletBalance, Precise.stringMul(contractsStringAbs, onePlusMaintenanceMarginPercentageString));\n        const rightSide = Precise.stringDiv(entryPriceSignString, onePlusMaintenanceMarginPercentageString);\n        liquidationPriceStringRaw = Precise.stringAdd(leftSide, rightSide);\n      } else {\n        // calculate liquidation price\n        //\n        // liquidationPrice = (contracts * contractSize(±1 - mmp)) / (±1/entryPrice * contracts * contractSize - walletBalance)\n        //\n        let onePlusMaintenanceMarginPercentageString = undefined;\n        let entryPriceSignString = entryPriceString;\n\n        if (side === 'short') {\n          onePlusMaintenanceMarginPercentageString = Precise.stringSub('1', maintenanceMarginPercentageString);\n        } else {\n          onePlusMaintenanceMarginPercentageString = Precise.stringSub('-1', maintenanceMarginPercentageString);\n          entryPriceSignString = Precise.stringMul('-1', entryPriceSignString);\n        }\n\n        const size = Precise.stringMul(contractsStringAbs, market['contractSize']);\n        const leftSide = Precise.stringMul(size, onePlusMaintenanceMarginPercentageString);\n        const rightSide = Precise.stringSub(Precise.stringMul(Precise.stringDiv('1', entryPriceSignString), size), walletBalance);\n        liquidationPriceStringRaw = Precise.stringDiv(leftSide, rightSide);\n      }\n\n      const pricePrecision = market['precision']['price'];\n      const pricePrecisionPlusOne = pricePrecision + 1;\n      const pricePrecisionPlusOneString = pricePrecisionPlusOne.toString(); // round half up\n\n      const rounder = new Precise('5e-' + pricePrecisionPlusOneString);\n      const rounderString = rounder.toString();\n      const liquidationPriceRoundedString = Precise.stringAdd(rounderString, liquidationPriceStringRaw);\n      let truncatedLiquidationPrice = Precise.stringDiv(liquidationPriceRoundedString, '1', pricePrecision);\n\n      if (truncatedLiquidationPrice[0] === '-') {\n        // user cannot be liquidated\n        // since he has more collateral than the size of the position\n        truncatedLiquidationPrice = undefined;\n      }\n\n      liquidationPrice = this.parseNumber(truncatedLiquidationPrice);\n    }\n\n    return {\n      'info': position,\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'initialMargin': initialMargin,\n      'initialMarginPercentage': this.parseNumber(initialMarginPercentageString),\n      'maintenanceMargin': maintenanceMargin,\n      'maintenanceMarginPercentage': maintenanceMarginPercentage,\n      'entryPrice': entryPrice,\n      'notional': notional,\n      'leverage': leverage,\n      'unrealizedPnl': unrealizedPnl,\n      'contracts': contracts,\n      'marginRatio': marginRatio,\n      'liquidationPrice': liquidationPrice,\n      'markPrice': undefined,\n      'collateral': collateral,\n      'marginType': marginType,\n      'side': side,\n      'percentage': percentage\n    };\n  }\n\n  parsePositionRisk(position, market = undefined) {\n    //\n    // usdm\n    //     {\n    //       \"symbol\": \"BTCUSDT\",\n    //       \"positionAmt\": \"0.001\",\n    //       \"entryPrice\": \"43578.07000\",\n    //       \"markPrice\": \"43532.30000000\",\n    //       \"unRealizedProfit\": \"-0.04577000\",\n    //       \"liquidationPrice\": \"21841.24993976\",\n    //       \"leverage\": \"2\",\n    //       \"maxNotionalValue\": \"300000000\",\n    //       \"marginType\": \"isolated\",\n    //       \"isolatedMargin\": \"21.77841506\",\n    //       \"isAutoAddMargin\": \"false\",\n    //       \"positionSide\": \"BOTH\",\n    //       \"notional\": \"43.53230000\",\n    //       \"isolatedWallet\": \"21.82418506\",\n    //       \"updateTime\": \"1621358023886\"\n    //     }\n    //\n    // coinm\n    //     {\n    //       \"symbol\": \"BTCUSD_PERP\",\n    //       \"positionAmt\": \"2\",\n    //       \"entryPrice\": \"37643.10000021\",\n    //       \"markPrice\": \"38103.05510455\",\n    //       \"unRealizedProfit\": \"0.00006413\",\n    //       \"liquidationPrice\": \"25119.97445760\",\n    //       \"leverage\": \"2\",\n    //       \"maxQty\": \"1500\",\n    //       \"marginType\": \"isolated\",\n    //       \"isolatedMargin\": \"0.00274471\",\n    //       \"isAutoAddMargin\": \"false\",\n    //       \"positionSide\": \"BOTH\",\n    //       \"notionalValue\": \"0.00524892\",\n    //       \"isolatedWallet\": \"0.00268058\"\n    //     }\n    //\n    const marketId = this.safeString(position, 'symbol');\n    market = this.safeMarket(marketId, market);\n    const symbol = market['symbol'];\n    const leverageBracket = this.options['leverageBrackets'][symbol];\n    const notionalString = this.safeString2(position, 'notional', 'notionalValue');\n    const notionalStringAbs = Precise.stringAbs(notionalString);\n    const notionalFloatAbs = parseFloat(notionalStringAbs);\n    const notionalFloat = parseFloat(notionalString);\n    let maintenanceMarginPercentageString = undefined;\n\n    for (let i = 0; i < leverageBracket.length; i++) {\n      const bracket = leverageBracket[i];\n\n      if (notionalFloatAbs < bracket[0]) {\n        break;\n      }\n\n      maintenanceMarginPercentageString = bracket[1];\n    }\n\n    const notional = this.parseNumber(notionalStringAbs);\n    const contractsAbs = Precise.stringAbs(this.safeString(position, 'positionAmt'));\n    const contracts = this.parseNumber(contractsAbs);\n    const unrealizedPnlString = this.safeString(position, 'unRealizedProfit');\n    const unrealizedPnl = this.parseNumber(unrealizedPnlString);\n    const leverageString = this.safeString(position, 'leverage');\n    const leverage = parseInt(leverageString);\n    let liquidationPrice = this.safeNumber(position, 'liquidationPrice');\n    const collateralString = this.safeString(position, 'isolatedMargin');\n    const collateralFloat = parseFloat(collateralString);\n    const collateral = this.parseNumber(collateralString);\n    const markPriceString = this.safeString(position, 'markPrice');\n    const markPriceFloat = parseFloat(markPriceString);\n    let markPrice = undefined;\n\n    if (markPriceFloat !== 0.0) {\n      markPrice = this.parseNumber(markPriceString);\n    }\n\n    const entryPrice = this.safeNumber(position, 'entryPrice');\n    const timestamp = this.safeInteger(position, 'updateTime');\n    const maintenanceMarginPercentage = this.parseNumber(maintenanceMarginPercentageString);\n    const maintenanceMarginString = Precise.stringMul(maintenanceMarginPercentageString, notionalStringAbs);\n    const maintenanceMargin = this.parseNumber(maintenanceMarginString);\n    let initialMarginPercentageString = Precise.stringDiv('1', leverageString, 8);\n    const rational = 1000 % leverage === 0;\n\n    if (!rational) {\n      initialMarginPercentageString = Precise.stringAdd(initialMarginPercentageString, '1e-8');\n    }\n\n    const initialMarginString = Precise.stringDiv(Precise.stringMul(notionalStringAbs, initialMarginPercentageString), '1', 8);\n    const initialMargin = this.parseNumber(initialMarginString);\n    let marginRatio = undefined;\n    let side = undefined;\n    let percentage = undefined;\n\n    if (collateralFloat === 0.0) {\n      liquidationPrice = undefined;\n    } else {\n      marginRatio = this.parseNumber(Precise.stringDiv(maintenanceMarginString, collateralString, 4));\n      side = notionalFloat < 0 ? 'short' : 'long';\n      percentage = this.parseNumber(Precise.stringMul(Precise.stringDiv(unrealizedPnlString, initialMarginString, 4), '100'));\n    }\n\n    const marginType = this.safeString(position, 'marginType');\n\n    if (marginType === 'cross') {\n      liquidationPrice = undefined;\n    }\n\n    return {\n      'info': position,\n      'symbol': symbol,\n      'contracts': contracts,\n      'unrealizedPnl': unrealizedPnl,\n      'leverage': leverage,\n      'liquidationPrice': liquidationPrice,\n      'collateral': collateral,\n      'notional': notional,\n      'markPrice': markPrice,\n      'entryPrice': entryPrice,\n      'timestamp': timestamp,\n      'initialMargin': initialMargin,\n      'initialMarginPercentage': this.parseNumber(initialMarginPercentageString),\n      'maintenanceMargin': maintenanceMargin,\n      'maintenanceMarginPercentage': maintenanceMarginPercentage,\n      'marginRatio': marginRatio,\n      'datetime': this.iso8601(timestamp),\n      'marginType': marginType,\n      'side': side,\n      'percentage': percentage\n    };\n  }\n\n  async loadLeverageBrackets(reload = false, params = {}) {\n    await this.loadMarkets(); // by default cache the leverage bracket\n    // it contains useful stuff like the maintenance margin and initial margin for positions\n\n    if (this.options['leverageBrackets'] === undefined || reload) {\n      let method = undefined;\n      const defaultType = this.safeString2(this.options, 'fetchPositions', 'defaultType', 'future');\n      const type = this.safeString(params, 'type', defaultType);\n      const query = this.omit(params, 'type');\n\n      if (type === 'future') {\n        method = 'fapiPrivateGetLeverageBracket';\n      } else if (type === 'delivery') {\n        method = 'dapiPrivateV2GetLeverageBracket';\n      }\n\n      const response = await this[method](query);\n      this.options['leverageBrackets'] = {};\n\n      for (let i = 0; i < response.length; i++) {\n        const entry = response[i];\n        const marketId = this.safeString(entry, 'symbol');\n        const symbol = this.safeSymbol(marketId);\n        const brackets = this.safeValue(entry, 'brackets');\n        const result = [];\n\n        for (let j = 0; j < brackets.length; j++) {\n          const bracket = brackets[j]; // we use floats here internally on purpose\n\n          const floorValue = this.safeFloat2(bracket, 'notionalFloor', 'qtyFloor');\n          const maintenanceMarginPercentage = this.safeString(bracket, 'maintMarginRatio');\n          result.push([floorValue, maintenanceMarginPercentage]);\n        }\n\n        this.options['leverageBrackets'][symbol] = result;\n      }\n    }\n\n    return this.options['leverageBrackets'];\n  }\n\n  async fetchPositions(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadLeverageBrackets();\n    let method = undefined;\n    const defaultType = this.safeString2(this.options, 'fetchPositions', 'defaultType', 'future');\n    const type = this.safeString(params, 'type', defaultType);\n    const query = this.omit(params, 'type');\n\n    if (type === 'future') {\n      method = 'fapiPrivateGetAccount';\n    } else if (type === 'delivery') {\n      method = 'dapiPrivateGetAccount';\n    }\n\n    const account = await this[method](query);\n    const result = this.parseAccountPositions(account);\n    return this.filterByArray(result, 'symbol', symbols, false);\n  }\n\n  async fetchIsolatedPositions(symbol = undefined, params = {}) {\n    // only supported in usdm futures\n    await this.loadMarkets();\n    await this.loadLeverageBrackets();\n    const request = {};\n    let market = undefined;\n    let method = undefined;\n    let defaultType = 'future';\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n\n      if (market['linear']) {\n        defaultType = 'future';\n      } else if (market['inverse']) {\n        defaultType = 'delivery';\n      } else {\n        throw NotSupported(this.id + ' fetchIsolatedPositions() supports linear and inverse contracts only');\n      }\n    }\n\n    defaultType = this.safeString2(this.options, 'fetchIsolatedPositions', 'defaultType', defaultType);\n    const type = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n\n    if (type === 'future' || type === 'linear') {\n      method = 'fapiPrivateGetPositionRisk';\n    } else if (type === 'delivery' || type === 'inverse') {\n      method = 'dapiPrivateGetPositionRisk';\n    } else {\n      throw NotSupported(this.id + ' fetchIsolatedPositions() supports linear and inverse contracts only');\n    }\n\n    const response = await this[method](this.extend(request, params));\n\n    if (symbol === undefined) {\n      const result = [];\n\n      for (let i = 0; i < response.length; i++) {\n        const parsed = this.parsePositionRisk(response[i], market);\n\n        if (parsed['marginType'] === 'isolated') {\n          result.push(parsed);\n        }\n      }\n\n      return result;\n    } else {\n      return this.parsePositionRisk(this.safeValue(response, 0), market);\n    }\n  }\n\n  async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    let method = undefined;\n    let defaultType = 'future';\n    const request = {\n      'incomeType': 'FUNDING_FEE' // \"TRANSFER\"，\"WELCOME_BONUS\", \"REALIZED_PNL\"，\"FUNDING_FEE\", \"COMMISSION\" and \"INSURANCE_CLEAR\"\n\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n\n      if (market['linear']) {\n        defaultType = 'future';\n      } else if (market['inverse']) {\n        defaultType = 'delivery';\n      } else {\n        throw NotSupported(this.id + ' fetchFundingHistory() supports linear and inverse contracts only');\n      }\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    defaultType = this.safeString2(this.options, 'fetchFundingHistory', 'defaultType', defaultType);\n    const type = this.safeString(params, 'type', defaultType);\n    params = this.omit(params, 'type');\n\n    if (type === 'future' || type === 'linear') {\n      method = 'fapiPrivateGetIncome';\n    } else if (type === 'delivery' || type === 'inverse') {\n      method = 'dapiPrivateGetIncome';\n    } else {\n      throw NotSupported(this.id + ' fetchFundingHistory() supports linear and inverse contracts only');\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return this.parseIncomes(response, market, since, limit);\n  }\n\n  async setLeverage(symbol, leverage, params = {}) {\n    // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS\n    // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS\n    if (leverage < 1 || leverage > 125) {\n      throw new BadRequest(this.id + ' leverage should be between 1 and 125');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let method = undefined;\n\n    if (market['linear']) {\n      method = 'fapiPrivatePostLeverage';\n    } else if (market['inverse']) {\n      method = 'dapiPrivatePostLeverage';\n    } else {\n      throw NotSupported(this.id + ' setLeverage() supports linear and inverse contracts only');\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'leverage': leverage\n    };\n    return await this[method](this.extend(request, params));\n  }\n\n  async setMarginMode(symbol, marginType, params = {}) {\n    //\n    // { \"code\": -4048 , \"msg\": \"Margin type cannot be changed if there exists position.\" }\n    //\n    // or\n    //\n    // { \"code\": 200, \"msg\": \"success\" }\n    //\n    marginType = marginType.toUpperCase();\n\n    if (marginType !== 'ISOLATED' && marginType !== 'CROSSED') {\n      throw new BadRequest(this.id + ' marginType must be either isolated or crossed');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let method = undefined;\n\n    if (market['linear']) {\n      method = 'fapiPrivatePostMarginType';\n    } else if (market['inverse']) {\n      method = 'dapiPrivatePostMarginType';\n    } else {\n      throw NotSupported(this.id + ' setMarginMode() supports linear and inverse contracts only');\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'marginType': marginType\n    };\n    return await this[method](this.extend(request, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    if (!(api in this.urls['api'])) {\n      throw new NotSupported(this.id + ' does not have a testnet/sandbox URL for ' + api + ' endpoints');\n    }\n\n    let url = this.urls['api'][api];\n    url += '/' + path;\n\n    if (api === 'wapi') {\n      url += '.html';\n    }\n\n    if (path === 'historicalTrades') {\n      if (this.apiKey) {\n        headers = {\n          'X-MBX-APIKEY': this.apiKey\n        };\n      } else {\n        throw new AuthenticationError(this.id + ' historicalTrades endpoint requires `apiKey` credential');\n      }\n    }\n\n    const userDataStream = path === 'userDataStream' || path === 'listenKey';\n\n    if (userDataStream) {\n      if (this.apiKey) {\n        // v1 special case for userDataStream\n        headers = {\n          'X-MBX-APIKEY': this.apiKey,\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n\n        if (method !== 'GET') {\n          body = this.urlencode(params);\n        }\n      } else {\n        throw new AuthenticationError(this.id + ' userDataStream endpoint requires `apiKey` credential');\n      }\n    } else if (api === 'private' || api === 'sapi' || api === 'wapi' && path !== 'systemStatus' || api === 'dapiPrivate' || api === 'dapiPrivateV2' || api === 'fapiPrivate' || api === 'fapiPrivateV2') {\n      this.checkRequiredCredentials();\n      let query = undefined;\n      const recvWindow = this.safeInteger(this.options, 'recvWindow', 5000);\n\n      if (api === 'sapi' && path === 'asset/dust') {\n        query = this.urlencodeWithArrayRepeat(this.extend({\n          'timestamp': this.nonce(),\n          'recvWindow': recvWindow\n        }, params));\n      } else if (path === 'batchOrders' || path.indexOf('sub-account') >= 0) {\n        query = this.rawencode(this.extend({\n          'timestamp': this.nonce(),\n          'recvWindow': recvWindow\n        }, params));\n      } else {\n        query = this.urlencode(this.extend({\n          'timestamp': this.nonce(),\n          'recvWindow': recvWindow\n        }, params));\n      }\n\n      const signature = this.hmac(this.encode(query), this.encode(this.secret));\n      query += '&' + 'signature=' + signature;\n      headers = {\n        'X-MBX-APIKEY': this.apiKey\n      };\n\n      if (method === 'GET' || method === 'DELETE' || api === 'wapi') {\n        url += '?' + query;\n      } else {\n        body = query;\n        headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      }\n    } else {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code === 418 || code === 429) {\n      throw new DDoSProtection(this.id + ' ' + code.toString() + ' ' + reason + ' ' + body);\n    } // error response in a form: { \"code\": -1013, \"msg\": \"Invalid quantity.\" }\n    // following block cointains legacy checks against message patterns in \"msg\" property\n    // will switch \"code\" checks eventually, when we know all of them\n\n\n    if (code >= 400) {\n      if (body.indexOf('Price * QTY is zero or less') >= 0) {\n        throw new InvalidOrder(this.id + ' order cost = amount * price is zero or less ' + body);\n      }\n\n      if (body.indexOf('LOT_SIZE') >= 0) {\n        throw new InvalidOrder(this.id + ' order amount should be evenly divisible by lot size ' + body);\n      }\n\n      if (body.indexOf('PRICE_FILTER') >= 0) {\n        throw new InvalidOrder(this.id + ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use this.priceToPrecision (symbol, amount) ' + body);\n      }\n    }\n\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } // check success value for wapi endpoints\n    // response in format {'msg': 'The coin does not exist.', 'success': true/false}\n\n\n    const success = this.safeValue(response, 'success', true);\n\n    if (!success) {\n      const message = this.safeString(response, 'msg');\n      let parsedMessage = undefined;\n\n      if (message !== undefined) {\n        try {\n          parsedMessage = JSON.parse(message);\n        } catch (e) {\n          // do nothing\n          parsedMessage = undefined;\n        }\n\n        if (parsedMessage !== undefined) {\n          response = parsedMessage;\n        }\n      }\n    }\n\n    const message = this.safeString(response, 'msg');\n\n    if (message !== undefined) {\n      this.throwExactlyMatchedException(this.exceptions, message, this.id + ' ' + message);\n    } // checks against error codes\n\n\n    const error = this.safeString(response, 'code');\n\n    if (error !== undefined) {\n      // https://github.com/ccxt/ccxt/issues/6501\n      // https://github.com/ccxt/ccxt/issues/7742\n      if (error === '200' || error === '0') {\n        return;\n      } // a workaround for {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}\n      // despite that their message is very confusing, it is raised by Binance\n      // on a temporary ban, the API key is valid, but disabled for a while\n\n\n      if (error === '-2015' && this.options['hasAlreadyAuthenticatedSuccessfully']) {\n        throw new DDoSProtection(this.id + ' temporary banned: ' + body);\n      }\n\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions, error, feedback);\n      throw new ExchangeError(feedback);\n    }\n\n    if (!success) {\n      throw new ExchangeError(this.id + ' ' + body);\n    }\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body); // a workaround for {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}\n\n    if (api === 'private' || api === 'wapi') {\n      this.options['hasAlreadyAuthenticatedSuccessfully'] = true;\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/binance.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","ExchangeNotAvailable","InsufficientFunds","OrderNotFound","InvalidOrder","DDoSProtection","InvalidNonce","AuthenticationError","RateLimitExceeded","PermissionDenied","NotSupported","BadRequest","BadSymbol","AccountSuspended","OrderImmediatelyFillable","TRUNCATE","Precise","module","exports","binance","describe","deepExtend","currencyToPrecision","currency","fee","numberToString","nonce","milliseconds","options","fetchTime","params","type","safeString2","method","response","safeInteger","loadTimeDifference","serverTime","after","fetchCurrencies","fetchCurrenciesEnabled","safeValue","undefined","checkRequiredCredentials","apiBackup","safeString","urls","sapiGetCapitalConfigGetall","result","i","length","entry","id","name","code","safeCurrencyCode","precision","isWithdrawEnabled","isDepositEnabled","networkList","fees","j","networkItem","network","withdrawFee","safeNumber","depositEnable","withdrawEnable","isDefault","trading","active","limits","fetchMarkets","defaultType","query","omit","markets","market","spot","future","delivery","lowercaseId","safeStringLower","baseId","quoteId","base","quote","contractType","idSymbol","symbol","expiry","filters","filtersByType","indexBy","status","margin","contractSize","iso8601","Math","pow","filter","precisionFromString","stepSize","safeNumber2","push","fetchBalance","loadMarkets","fetchBalanceOptions","timestamp","balances","safeValue2","balance","currencyId","account","Array","isArray","parseBalance","fetchOrderBook","limit","request","extend","orderbook","parseOrderBook","parseTicker","ticker","marketId","safeSymbol","last","isCoinm","baseVolume","quoteVolume","fetchStatus","wapiGetSystemStatus","fetchTicker","firstTicker","fetchBidsAsks","symbols","parseTickers","fetchTickers","defaultMethod","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","defaultLimit","maxLimit","min","timeframes","duration","parseTimeframe","endTime","sum","now","parseOHLCVs","parseTrade","trade","parseDustTrade","safeInteger2","priceString","amountString","price","parseNumber","amount","cost","stringMul","side","orderId","takerOrMaker","fetchTrades","parseTrades","parseOrderStatus","statuses","parseOrder","order","filledString","filled","filledFloat","parseFloat","lastTradeTimestamp","averageString","average","omitZero","fills","trades","clientOrderId","timeInForce","postOnly","stopPriceString","stopPrice","safeOrder","createOrder","orderType","test","uppercaseType","toUpperCase","validOrderTypes","inArray","broker","brokerId","uuid22","timeInForceIsRequired","priceIsRequired","stopPriceIsRequired","quantityIsRequired","quoteOrderQty","decimalToPrecision","precisionMode","closePosition","callbackRate","amountToPrecision","priceToPrecision","fetchOrder","fetchOrders","parseOrders","fetchOpenOrders","numSymbols","fetchOpenOrdersRateLimit","parseInt","toString","fetchClosedOrders","orders","filterBy","cancelOrder","origClientOrderId","cancelAllOrders","fetchMyTrades","fetchMyDustTrades","wapiGetUserAssetDribbletLog","results","rows","data","logs","filterBySinceLimit","parse8601","tradedCurrency","earnedCurrency","applicantSymbol","tradedCurrencyIsQuote","fetchDeposits","sapiGetCapitalDepositHisrec","parseTransactions","fetchWithdrawals","sapiGetCapitalWithdrawHistory","parseTransactionStatusByType","statusesByType","parseTransaction","transaction","address","tag","txid","indexOf","slice","insertTime","applyTime","feeCost","updated","internal","parseTransferStatus","parseTransfer","transfer","fromAccount","toAccount","typesByAccount","parts","split","parseIncome","income","parseIncomes","incomes","parsed","accountsByType","fromId","toId","keys","Object","join","sapiPostAssetTransfer","fetchTransfers","defaultTo","sapiGetAssetTransfer","parseTransfers","fetchDepositAddress","sapiGetCapitalDepositAddress","checkAddress","fetchFundingFees","codes","sapiGetAssetAssetDetail","ids","withdrawFees","withdraw","sapiPostCapitalWithdrawApply","parseTradingFee","fetchTradingFee","sapiGetAssetTradeFee","first","fetchTradingFees","futuresTransfer","sapiPostFuturesTransfer","fetchFundingRate","parseFundingRate","fetchFundingRates","filterByArray","premiumIndex","markPrice","indexPrice","interestRate","fundingRate","nextFundingTime","parseAccountPositions","positions","assets","crossWalletBalance","crossUnPnl","stringAdd","position","safeMarket","parsePosition","leverageString","leverage","initialMarginString","initialMargin","initialMarginPercentageString","stringDiv","rational","usdm","maintenanceMarginString","maintenanceMargin","entryPriceString","entryPrice","notionalString","notionalStringAbs","stringAbs","notionalFloat","notionalFloatAbs","notional","contractsString","contractsStringAbs","entryNotional","contracts","leverageBracket","maintenanceMarginPercentageString","bracket","maintenanceMarginPercentage","unrealizedPnlString","unrealizedPnl","isolated","marginType","collateralString","walletBalance","collateral","marginRatio","percentage","liquidationPriceStringRaw","liquidationPrice","onePlusMaintenanceMarginPercentageString","entryPriceSignString","leftSide","rightSide","stringSub","size","pricePrecision","pricePrecisionPlusOne","pricePrecisionPlusOneString","rounder","rounderString","liquidationPriceRoundedString","truncatedLiquidationPrice","parsePositionRisk","contractsAbs","collateralFloat","markPriceString","markPriceFloat","loadLeverageBrackets","reload","brackets","floorValue","safeFloat2","fetchPositions","fetchIsolatedPositions","fetchFundingHistory","setLeverage","setMarginMode","sign","path","api","headers","body","url","apiKey","userDataStream","urlencode","recvWindow","urlencodeWithArrayRepeat","rawencode","signature","hmac","encode","secret","handleErrors","reason","requestHeaders","requestBody","success","message","parsedMessage","JSON","parse","e","throwExactlyMatchedException","exceptions","error","feedback","fetch2"],"mappings":"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AAKY,UAAL,CAAiB8D,mBAAjB,EAAsC,QAAtC,EAAgD,uBAAhD,CAAT;AACH,KAJM,MAIA,IAAI5E,IAAI,KAAK,QAAb,EAAuB;AAC1BE,MAAAA,MAAM,GAAG,sBAAT;AACH;;AACD,UAAMyC,KAAK,GAAG,KAAKC,IAAL,CAAW7C,MAAX,EAAmB,MAAnB,CAAd;AACA,UAAMI,QAAQ,GAAG,MAAM,KAAKD,MAAL,EAAcyC,KAAd,CAAvB,CAjB6B,CAkB7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAM1B,MAAM,GAAG;AACX,cAAQd;AADG,KAAf;AAGA,QAAI0E,SAAS,GAAGlE,SAAhB;;AACA,QAAKX,IAAI,KAAK,MAAV,IAAsBA,IAAI,KAAK,QAAnC,EAA8C;AAC1C6E,MAAAA,SAAS,GAAG,KAAKzE,WAAL,CAAkBD,QAAlB,EAA4B,YAA5B,CAAZ;AACA,YAAM2E,QAAQ,GAAG,KAA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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, ExchangeNotAvailable, InsufficientFunds, OrderNotFound, InvalidOrder, DDoSProtection, InvalidNonce, AuthenticationError, RateLimitExceeded, PermissionDenied, NotSupported, BadRequest, BadSymbol, AccountSuspended, OrderImmediatelyFillable } = require ('./base/errors');\nconst { TRUNCATE } = require ('./base/functions/number');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class binance extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'binance',\n            'name': 'Binance',\n            'countries': [ 'JP', 'MT' ], // Japan, Malta\n            'rateLimit': 500,\n            'certified': true,\n            'pro': true,\n            // new metainfo interface\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchCurrencies': true,\n                'fetchBalance': true,\n                'fetchBidsAsks': true,\n                'fetchClosedOrders': 'emulated',\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchFundingFees': true,\n                'fetchFundingHistory': true,\n                'fetchFundingRate': true,\n                'fetchFundingRates': true,\n                'fetchIsolatedPositions': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchOrderBook': true,\n                'fetchPositions': true,\n                'fetchStatus': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTradingFee': true,\n                'fetchTradingFees': true,\n                'fetchTransactions': false,\n                'fetchWithdrawals': true,\n                'setLeverage': true,\n                'setMarginMode': true,\n                'withdraw': true,\n                'transfer': true,\n                'fetchTransfers': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '3m': '3m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '2h': '2h',\n                '4h': '4h',\n                '6h': '6h',\n                '8h': '8h',\n                '12h': '12h',\n                '1d': '1d',\n                '3d': '3d',\n                '1w': '1w',\n                '1M': '1M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',\n                'test': {\n                    'dapiPublic': 'https://testnet.binancefuture.com/dapi/v1',\n                    'dapiPrivate': 'https://testnet.binancefuture.com/dapi/v1',\n                    'fapiPublic': 'https://testnet.binancefuture.com/fapi/v1',\n                    'fapiPrivate': 'https://testnet.binancefuture.com/fapi/v1',\n                    'fapiPrivateV2': 'https://testnet.binancefuture.com/fapi/v2',\n                    'public': 'https://testnet.binance.vision/api/v3',\n                    'private': 'https://testnet.binance.vision/api/v3',\n                    'v3': 'https://testnet.binance.vision/api/v3',\n                    'v1': 'https://testnet.binance.vision/api/v1',\n                },\n                'api': {\n                    'wapi': 'https://api.binance.com/wapi/v3',\n                    'sapi': 'https://api.binance.com/sapi/v1',\n                    'dapiPublic': 'https://dapi.binance.com/dapi/v1',\n                    'dapiPrivate': 'https://dapi.binance.com/dapi/v1',\n                    'dapiPrivateV2': 'https://dapi.binance.com/dapi/v2',\n                    'dapiData': 'https://dapi.binance.com/futures/data',\n                    'fapiPublic': 'https://fapi.binance.com/fapi/v1',\n                    'fapiPrivate': 'https://fapi.binance.com/fapi/v1',\n                    'fapiData': 'https://fapi.binance.com/futures/data',\n                    'fapiPrivateV2': 'https://fapi.binance.com/fapi/v2',\n                    'public': 'https://api.binance.com/api/v3',\n                    'private': 'https://api.binance.com/api/v3',\n                    'v3': 'https://api.binance.com/api/v3',\n                    'v1': 'https://api.binance.com/api/v1',\n                },\n                'www': 'https://www.binance.com',\n                'referral': 'https://www.binance.com/?ref=10205187',\n                'doc': [\n                    'https://binance-docs.github.io/apidocs/spot/en',\n                ],\n                'api_management': 'https://www.binance.com/en/usercenter/settings/api-management',\n                'fees': 'https://www.binance.com/en/fee/schedule',\n            },\n            'api': {\n                // the API structure below will need 3-layer apidefs\n                'sapi': {\n                    'get': [\n                        'accountSnapshot',\n                        // these endpoints require this.apiKey\n                        'margin/asset',\n                        'margin/pair',\n                        'margin/allAssets',\n                        'margin/allPairs',\n                        'margin/priceIndex',\n                        // these endpoints require this.apiKey + this.secret\n                        'asset/assetDividend',\n                        'asset/transfer',\n                        'asset/assetDetail',\n                        'asset/tradeFee',\n                        'margin/loan',\n                        'margin/repay',\n                        'margin/account',\n                        'margin/transfer',\n                        'margin/interestHistory',\n                        'margin/forceLiquidationRec',\n                        'margin/order',\n                        'margin/openOrders',\n                        'margin/allOrders',\n                        'margin/myTrades',\n                        'margin/maxBorrowable',\n                        'margin/maxTransferable',\n                        'margin/isolated/transfer',\n                        'margin/isolated/account',\n                        'margin/isolated/pair',\n                        'margin/isolated/allPairs',\n                        'margin/interestRateHistory',\n                        'fiatpayment/query/deposit/history',\n                        'fiatpayment/query/withdraw/history',\n                        'futures/transfer',\n                        'futures/loan/borrow/history',\n                        'futures/loan/repay/history',\n                        'futures/loan/wallet',\n                        'futures/loan/configs',\n                        'futures/loan/calcAdjustLevel',\n                        'futures/loan/calcMaxAdjustAmount',\n                        'futures/loan/adjustCollateral/history',\n                        'futures/loan/liquidationHistory',\n                        // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi\n                        'capital/config/getall', // get networks for withdrawing USDT ERC20 vs USDT Omni\n                        'capital/deposit/address',\n                        'capital/deposit/hisrec',\n                        'capital/deposit/subAddress',\n                        'capital/deposit/subHisrec',\n                        'capital/withdraw/history',\n                        'bnbBurn',\n                        'sub-account/futures/account',\n                        'sub-account/futures/accountSummary',\n                        'sub-account/futures/positionRisk',\n                        'sub-account/futures/internalTransfer',\n                        'sub-account/margin/account',\n                        'sub-account/margin/accountSummary',\n                        'sub-account/spotSummary',\n                        'sub-account/status',\n                        'sub-account/transfer/subUserHistory',\n                        'sub-account/universalTransfer',\n                        // lending endpoints\n                        'lending/daily/product/list',\n                        'lending/daily/userLeftQuota',\n                        'lending/daily/userRedemptionQuota',\n                        'lending/daily/token/position',\n                        'lending/union/account',\n                        'lending/union/purchaseRecord',\n                        'lending/union/redemptionRecord',\n                        'lending/union/interestHistory',\n                        'lending/project/list',\n                        'lending/project/position/list',\n                        // mining endpoints\n                        'mining/pub/algoList',\n                        'mining/pub/coinList',\n                        'mining/worker/detail',\n                        'mining/worker/list',\n                        'mining/payment/list',\n                        'mining/statistics/user/status',\n                        'mining/statistics/user/list',\n                        // liquid swap endpoints\n                        'bswap/pools',\n                        'bswap/liquidity',\n                        'bswap/liquidityOps',\n                        'bswap/quote',\n                        'bswap/swap',\n                        // leveraged token endpoints\n                        'blvt/tokenInfo',\n                        'blvt/subscribe/record',\n                        'blvt/redeem/record',\n                        'blvt/userLimit',\n                        // broker api\n                        'apiReferral/ifNewUser',\n                        'apiReferral/customization',\n                        'apiReferral/userCustomization',\n                        'apiReferral/rebate/recentRecord',\n                        'apiReferral/rebate/historicalRecord',\n                        'apiReferral/kickback/recentRecord',\n                        'apiReferral/kickback/historicalRecord',\n                        // brokerage API\n                        'broker/subAccountApi',\n                        'broker/subAccount',\n                        'broker/subAccountApi/commission/futures',\n                        'broker/subAccountApi/commission/coinFutures',\n                        'broker/info',\n                        'broker/transfer',\n                        'broker/transfer/futures',\n                        'broker/rebate/recentRecord',\n                        'broker/rebate/historicalRecord',\n                        'broker/subAccount/bnbBurn/status',\n                        'broker/subAccount/depositHist',\n                        'broker/subAccount/spotSummary',\n                        'broker/subAccount/marginSummary',\n                        'broker/subAccount/futuresSummary',\n                        'broker/rebate/futures/recentRecord',\n                        'broker/subAccountApi/ipRestriction',\n                        'broker/universalTransfer',\n                        // v2 not supported yet\n                        // GET /sapi/v2/broker/subAccount/futuresSummary\n                    ],\n                    'post': [\n                        'asset/dust',\n                        'asset/transfer',\n                        'account/disableFastWithdrawSwitch',\n                        'account/enableFastWithdrawSwitch',\n                        'capital/withdraw/apply',\n                        'margin/transfer',\n                        'margin/loan',\n                        'margin/repay',\n                        'margin/order',\n                        'margin/isolated/create',\n                        'margin/isolated/transfer',\n                        'bnbBurn',\n                        'sub-account/margin/transfer',\n                        'sub-account/margin/enable',\n                        'sub-account/margin/enable',\n                        'sub-account/futures/enable',\n                        'sub-account/futures/transfer',\n                        'sub-account/futures/internalTransfer',\n                        'sub-account/transfer/subToSub',\n                        'sub-account/transfer/subToMaster',\n                        'sub-account/universalTransfer',\n                        'userDataStream',\n                        'userDataStream/isolated',\n                        'futures/transfer',\n                        'futures/loan/borrow',\n                        'futures/loan/repay',\n                        'futures/loan/adjustCollateral',\n                        // lending\n                        'lending/customizedFixed/purchase',\n                        'lending/daily/purchase',\n                        'lending/daily/redeem',\n                        // liquid swap endpoints\n                        'bswap/liquidityAdd',\n                        'bswap/liquidityRemove',\n                        'bswap/swap',\n                        // leveraged token endpoints\n                        'blvt/subscribe',\n                        'blvt/redeem',\n                        // brokerage API\n                        'apiReferral/customization',\n                        'apiReferral/userCustomization',\n                        'apiReferral/rebate/historicalRecord',\n                        'apiReferral/kickback/historicalRecord',\n                        'broker/subAccount',\n                        'broker/subAccount/margin',\n                        'broker/subAccount/futures',\n                        'broker/subAccountApi',\n                        'broker/subAccountApi/permission',\n                        'broker/subAccountApi/commission',\n                        'broker/subAccountApi/commission/futures',\n                        'broker/subAccountApi/commission/coinFutures',\n                        'broker/transfer',\n                        'broker/transfer/futures',\n                        'broker/rebate/historicalRecord',\n                        'broker/subAccount/bnbBurn/spot',\n                        'broker/subAccount/bnbBurn/marginInterest',\n                        'broker/subAccount/blvt',\n                        'broker/subAccountApi/ipRestriction',\n                        'broker/subAccountApi/ipRestriction/ipList',\n                        'broker/universalTransfer',\n                        'broker/subAccountApi/permission/universalTransfer',\n                        'broker/subAccountApi/permission/vanillaOptions',\n                    ],\n                    'put': [\n                        'userDataStream',\n                        'userDataStream/isolated',\n                    ],\n                    'delete': [\n                        'margin/openOrders',\n                        'margin/order',\n                        'userDataStream',\n                        'userDataStream/isolated',\n                        // brokerage API\n                        'broker/subAccountApi',\n                        'broker/subAccountApi/ipRestriction/ipList',\n                    ],\n                },\n                // deprecated\n                'wapi': {\n                    'post': [\n                        'withdraw',\n                        'sub-account/transfer',\n                    ],\n                    'get': [\n                        'depositHistory',\n                        'withdrawHistory',\n                        'depositAddress',\n                        'accountStatus',\n                        'systemStatus',\n                        'apiTradingStatus',\n                        'userAssetDribbletLog',\n                        'tradeFee',\n                        'assetDetail',\n                        'sub-account/list',\n                        'sub-account/transfer/history',\n                        'sub-account/assets',\n                    ],\n                },\n                'dapiPublic': {\n                    'get': [\n                        'ping',\n                        'time',\n                        'exchangeInfo',\n                        'depth',\n                        'trades',\n                        'historicalTrades',\n                        'aggTrades',\n                        'premiumIndex',\n                        'fundingRate',\n                        'klines',\n                        'continuousKlines',\n                        'indexPriceKlines',\n                        'markPriceKlines',\n                        'ticker/24hr',\n                        'ticker/price',\n                        'ticker/bookTicker',\n                        'allForceOrders',\n                        'openInterest',\n                    ],\n                },\n                'dapiData': {\n                    'get': [\n                        'openInterestHist',\n                        'topLongShortAccountRatio',\n                        'topLongShortPositionRatio',\n                        'globalLongShortAccountRatio',\n                        'takerBuySellVol',\n                        'basis',\n                    ],\n                },\n                'dapiPrivate': {\n                    'get': [\n                        'positionSide/dual',\n                        'order',\n                        'openOrder',\n                        'openOrders',\n                        'allOrders',\n                        'balance',\n                        'account',\n                        'positionMargin/history',\n                        'positionRisk',\n                        'userTrades',\n                        'income',\n                        'leverageBracket',\n                        'forceOrders',\n                        'adlQuantile',\n                    ],\n                    'post': [\n                        'positionSide/dual',\n                        'order',\n                        'batchOrders',\n                        'countdownCancelAll',\n                        'leverage',\n                        'marginType',\n                        'positionMargin',\n                        'listenKey',\n                    ],\n                    'put': [\n                        'listenKey',\n                    ],\n                    'delete': [\n                        'order',\n                        'allOpenOrders',\n                        'batchOrders',\n                        'listenKey',\n                    ],\n                },\n                'dapiPrivateV2': {\n                    'get': [\n                        'leverageBracket',\n                    ],\n                },\n                'fapiPublic': {\n                    'get': [\n                        'ping',\n                        'time',\n                        'exchangeInfo',\n                        'depth',\n                        'trades',\n                        'historicalTrades',\n                        'aggTrades',\n                        'klines',\n                        'continuousKlines',\n                        'fundingRate',\n                        'premiumIndex',\n                        'ticker/24hr',\n                        'ticker/price',\n                        'ticker/bookTicker',\n                        'allForceOrders',\n                        'openInterest',\n                        'indexInfo',\n                    ],\n                },\n                'fapiData': {\n                    'get': [\n                        'openInterestHist',\n                        'topLongShortAccountRatio',\n                        'topLongShortPositionRatio',\n                        'globalLongShortAccountRatio',\n                        'takerlongshortRatio',\n                    ],\n                },\n                'fapiPrivate': {\n                    'get': [\n                        'allForceOrders',\n                        'allOrders',\n                        'openOrder',\n                        'openOrders',\n                        'order',\n                        'account',\n                        'balance',\n                        'leverageBracket',\n                        'positionMargin/history',\n                        'positionRisk',\n                        'positionSide/dual',\n                        'userTrades',\n                        'income',\n                        'commissionRate',\n                        'apiTradingStatus',\n                        // broker endpoints\n                        'apiReferral/ifNewUser',\n                        'apiReferral/customization',\n                        'apiReferral/userCustomization',\n                        'apiReferral/traderNum',\n                        'apiReferral/overview',\n                        'apiReferral/tradeVol',\n                        'apiReferral/rebateVol',\n                        'apiReferral/traderSummary',\n                    ],\n                    'post': [\n                        'batchOrders',\n                        'positionSide/dual',\n                        'positionMargin',\n                        'marginType',\n                        'order',\n                        'leverage',\n                        'listenKey',\n                        'countdownCancelAll',\n                        // broker endpoints\n                        'apiReferral/customization',\n                        'apiReferral/userCustomization',\n                    ],\n                    'put': [\n                        'listenKey',\n                    ],\n                    'delete': [\n                        'batchOrders',\n                        'order',\n                        'allOpenOrders',\n                        'listenKey',\n                    ],\n                },\n                'fapiPrivateV2': {\n                    'get': [\n                        'account',\n                        'balance',\n                        'positionRisk',\n                    ],\n                },\n                'v3': {\n                    'get': [\n                        'ticker/price',\n                        'ticker/bookTicker',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'ping',\n                        'time',\n                        'depth',\n                        'trades',\n                        'aggTrades',\n                        'historicalTrades',\n                        'klines',\n                        'ticker/24hr',\n                        'ticker/price',\n                        'ticker/bookTicker',\n                        'exchangeInfo',\n                    ],\n                    'put': [ 'userDataStream' ],\n                    'post': [ 'userDataStream' ],\n                    'delete': [ 'userDataStream' ],\n                },\n                'private': {\n                    'get': [\n                        'allOrderList', // oco\n                        'openOrderList', // oco\n                        'orderList', // oco\n                        'order',\n                        'openOrders',\n                        'allOrders',\n                        'account',\n                        'myTrades',\n                    ],\n                    'post': [\n                        'order/oco',\n                        'order',\n                        'order/test',\n                    ],\n                    'delete': [\n                        'openOrders', // added on 2020-04-25 for canceling all open orders per symbol\n                        'orderList', // oco\n                        'order',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'feeSide': 'get',\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.001,\n                    'maker': 0.001,\n                },\n            },\n            'commonCurrencies': {\n                'BCC': 'BCC', // kept for backward-compatibility https://github.com/ccxt/ccxt/issues/4848\n                'YOYO': 'YOYOW',\n            },\n            // exchange-specific options\n            'options': {\n                'fetchCurrencies': false, // this is a private call and it requires API keys\n                // 'fetchTradesMethod': 'publicGetAggTrades', // publicGetTrades, publicGetHistoricalTrades\n                'defaultTimeInForce': 'GTC', // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n                'defaultType': 'spot', // 'spot', 'future', 'margin', 'delivery'\n                'hasAlreadyAuthenticatedSuccessfully': false,\n                'warnOnFetchOpenOrdersWithoutSymbol': true,\n                'recvWindow': 5 * 1000, // 5 sec, binance default\n                'timeDifference': 0, // the difference between system clock and Binance clock\n                'adjustForTimeDifference': false, // controls the adjustment logic upon instantiation\n                'parseOrderToPrecision': false, // force amounts and costs in parseOrder to precision\n                'newOrderRespType': {\n                    'market': 'FULL', // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n                    'limit': 'FULL', // we change it from 'ACK' by default to 'FULL' (returns immediately if limit is not hit)\n                },\n                'quoteOrderQty': true, // whether market orders support amounts in quote currency\n                'broker': {\n                    'spot': 'x-R4BD3S82',\n                    'margin': 'x-R4BD3S82',\n                    'future': 'x-xcKtGhcu',\n                    'delivery': 'x-xcKtGhcu',\n                },\n                'accountsByType': {\n                    'main': 'MAIN',\n                    'spot': 'MAIN',\n                    'margin': 'MARGIN',\n                    'future': 'UMFUTURE',\n                    'delivery': 'CMFUTURE',\n                    'mining': 'MINING',\n                },\n                'typesByAccount': {\n                    'MAIN': 'spot',\n                    'MARGIN': 'margin',\n                    'UMFUTURE': 'future',\n                    'CMFUTURE': 'delivery',\n                    'MINING': 'mining',\n                },\n            },\n            // https://binance-docs.github.io/apidocs/spot/en/#error-codes-2\n            'exceptions': {\n                'System abnormality': ExchangeError, // {\"code\":-1000,\"msg\":\"System abnormality\"}\n                'You are not authorized to execute this request.': PermissionDenied, // {\"msg\":\"You are not authorized to execute this request.\"}\n                'API key does not exist': AuthenticationError,\n                'Order would trigger immediately.': OrderImmediatelyFillable,\n                'Stop price would trigger immediately.': OrderImmediatelyFillable, // {\"code\":-2010,\"msg\":\"Stop price would trigger immediately.\"}\n                'Order would immediately match and take.': OrderImmediatelyFillable, // {\"code\":-2010,\"msg\":\"Order would immediately match and take.\"}\n                'Account has insufficient balance for requested action.': InsufficientFunds,\n                'Rest API trading is not enabled.': ExchangeNotAvailable,\n                \"You don't have permission.\": PermissionDenied, // {\"msg\":\"You don't have permission.\",\"success\":false}\n                'Market is closed.': ExchangeNotAvailable, // {\"code\":-1013,\"msg\":\"Market is closed.\"}\n                'Too many requests.': DDoSProtection, // {\"msg\":\"Too many requests. Please try again later.\",\"success\":false}\n                '-1000': ExchangeNotAvailable, // {\"code\":-1000,\"msg\":\"An unknown error occured while processing the request.\"}\n                '-1001': ExchangeNotAvailable, // 'Internal error; unable to process your request. Please try again.'\n                '-1002': AuthenticationError, // 'You are not authorized to execute this request.'\n                '-1003': RateLimitExceeded, // {\"code\":-1003,\"msg\":\"Too much request weight used, current limit is 1200 request weight per 1 MINUTE. Please use the websocket for live updates to avoid polling the API.\"}\n                '-1013': InvalidOrder, // createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL\n                '-1015': RateLimitExceeded, // 'Too many new orders; current limit is %s orders per %s.'\n                '-1016': ExchangeNotAvailable, // 'This service is no longer available.',\n                '-1020': BadRequest, // 'This operation is not supported.'\n                '-1021': InvalidNonce, // 'your time is ahead of server'\n                '-1022': AuthenticationError, // {\"code\":-1022,\"msg\":\"Signature for this request is not valid.\"}\n                '-1100': BadRequest, // createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'\n                '-1101': BadRequest, // Too many parameters; expected %s and received %s.\n                '-1102': BadRequest, // Param %s or %s must be sent, but both were empty\n                '-1103': BadRequest, // An unknown parameter was sent.\n                '-1104': BadRequest, // Not all sent parameters were read, read 8 parameters but was sent 9\n                '-1105': BadRequest, // Parameter %s was empty.\n                '-1106': BadRequest, // Parameter %s sent when not required.\n                '-1111': BadRequest, // Precision is over the maximum defined for this asset.\n                '-1112': InvalidOrder, // No orders on book for symbol.\n                '-1114': BadRequest, // TimeInForce parameter sent when not required.\n                '-1115': BadRequest, // Invalid timeInForce.\n                '-1116': BadRequest, // Invalid orderType.\n                '-1117': BadRequest, // Invalid side.\n                '-1118': BadRequest, // New client order ID was empty.\n                '-1119': BadRequest, // Original client order ID was empty.\n                '-1120': BadRequest, // Invalid interval.\n                '-1121': BadSymbol, // Invalid symbol.\n                '-1125': AuthenticationError, // This listenKey does not exist.\n                '-1127': BadRequest, // More than %s hours between startTime and endTime.\n                '-1128': BadRequest, // {\"code\":-1128,\"msg\":\"Combination of optional parameters invalid.\"}\n                '-1130': BadRequest, // Data sent for paramter %s is not valid.\n                '-1131': BadRequest, // recvWindow must be less than 60000\n                '-2008': AuthenticationError, // {\"code\":-2008,\"msg\":\"Invalid Api-Key ID.\"}\n                '-2010': ExchangeError, // generic error code for createOrder -> 'Account has insufficient balance for requested action.', {\"code\":-2010,\"msg\":\"Rest API trading is not enabled.\"}, etc...\n                '-2011': OrderNotFound, // cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'\n                '-2013': OrderNotFound, // fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'\n                '-2014': AuthenticationError, // { \"code\":-2014, \"msg\": \"API-key format invalid.\" }\n                '-2015': AuthenticationError, // \"Invalid API-key, IP, or permissions for action.\"\n                '-2019': InsufficientFunds, // {\"code\":-2019,\"msg\":\"Margin is insufficient.\"}\n                '-3005': InsufficientFunds, // {\"code\":-3005,\"msg\":\"Transferring out not allowed. Transfer out amount exceeds max amount.\"}\n                '-3008': InsufficientFunds, // {\"code\":-3008,\"msg\":\"Borrow not allowed. Your borrow amount has exceed maximum borrow amount.\"}\n                '-3010': ExchangeError, // {\"code\":-3010,\"msg\":\"Repay not allowed. Repay amount exceeds borrow amount.\"}\n                '-3022': AccountSuspended, // You account's trading is banned.\n                '-4028': BadRequest, // {\"code\":-4028,\"msg\":\"Leverage 100 is not valid\"}\n                '-3020': InsufficientFunds, // {\"code\":-3020,\"msg\":\"Transfer out amount exceeds max amount.\"}\n                '-3041': InsufficientFunds, // {\"code\":-3041,\"msg\":\"Balance is not enough\"}\n                '-5013': InsufficientFunds, // Asset transfer failed: insufficient balance\"\n            },\n        });\n    }\n\n    currencyToPrecision (currency, fee) {\n        return this.numberToString (fee);\n    }\n\n    nonce () {\n        return this.milliseconds () - this.options['timeDifference'];\n    }\n\n    async fetchTime (params = {}) {\n        const type = this.safeString2 (this.options, 'fetchTime', 'defaultType', 'spot');\n        let method = 'publicGetTime';\n        if (type === 'future') {\n            method = 'fapiPublicGetTime';\n        } else if (type === 'delivery') {\n            method = 'dapiPublicGetTime';\n        }\n        const response = await this[method] (params);\n        return this.safeInteger (response, 'serverTime');\n    }\n\n    async loadTimeDifference (params = {}) {\n        const serverTime = await this.fetchTime (params);\n        const after = this.milliseconds ();\n        this.options['timeDifference'] = after - serverTime;\n        return this.options['timeDifference'];\n    }\n\n    async fetchCurrencies (params = {}) {\n        const fetchCurrenciesEnabled = this.safeValue (this.options, 'fetchCurrencies');\n        if (!fetchCurrenciesEnabled) {\n            return undefined;\n        }\n        // this endpoint requires authentication\n        // while fetchCurrencies is a public API method by design\n        // therefore we check the keys here\n        // and fallback to generating the currencies from the markets\n        if (!this.checkRequiredCredentials (false)) {\n            return undefined;\n        }\n        // sandbox/testnet does not support sapi endpoints\n        const apiBackup = this.safeString (this.urls, 'apiBackup');\n        if (apiBackup !== undefined) {\n            return undefined;\n        }\n        const response = await this.sapiGetCapitalConfigGetall (params);\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            //\n            //     {\n            //         coin: 'LINK',\n            //         depositAllEnable: true,\n            //         withdrawAllEnable: true,\n            //         name: 'ChainLink',\n            //         free: '0.06168',\n            //         locked: '0',\n            //         freeze: '0',\n            //         withdrawing: '0',\n            //         ipoing: '0',\n            //         ipoable: '0',\n            //         storage: '0',\n            //         isLegalMoney: false,\n            //         trading: true,\n            //         networkList: [\n            //             {\n            //                 network: 'BNB',\n            //                 coin: 'LINK',\n            //                 withdrawIntegerMultiple: '0',\n            //                 isDefault: false,\n            //                 depositEnable: true,\n            //                 withdrawEnable: true,\n            //                 depositDesc: '',\n            //                 withdrawDesc: '',\n            //                 specialTips: 'Both a MEMO and an Address are required to successfully deposit your LINK BEP2 tokens to Binance.',\n            //                 name: 'BEP2',\n            //                 resetAddressStatus: false,\n            //                 addressRegex: '^(bnb1)[0-9a-z]{38}$',\n            //                 memoRegex: '^[0-9A-Za-z\\\\-_]{1,120}$',\n            //                 withdrawFee: '0.002',\n            //                 withdrawMin: '0.01',\n            //                 withdrawMax: '9999999',\n            //                 minConfirm: 1,\n            //                 unLockConfirm: 0\n            //             },\n            //             {\n            //                 network: 'BSC',\n            //                 coin: 'LINK',\n            //                 withdrawIntegerMultiple: '0.00000001',\n            //                 isDefault: false,\n            //                 depositEnable: true,\n            //                 withdrawEnable: true,\n            //                 depositDesc: '',\n            //                 withdrawDesc: '',\n            //                 specialTips: '',\n            //                 name: 'BEP20 (BSC)',\n            //                 resetAddressStatus: false,\n            //                 addressRegex: '^(0x)[0-9A-Fa-f]{40}$',\n            //                 memoRegex: '',\n            //                 withdrawFee: '0.005',\n            //                 withdrawMin: '0.01',\n            //                 withdrawMax: '9999999',\n            //                 minConfirm: 15,\n            //                 unLockConfirm: 0\n            //             },\n            //             {\n            //                 network: 'ETH',\n            //                 coin: 'LINK',\n            //                 withdrawIntegerMultiple: '0.00000001',\n            //                 isDefault: true,\n            //                 depositEnable: true,\n            //                 withdrawEnable: true,\n            //                 depositDesc: '',\n            //                 withdrawDesc: '',\n            //                 name: 'ERC20',\n            //                 resetAddressStatus: false,\n            //                 addressRegex: '^(0x)[0-9A-Fa-f]{40}$',\n            //                 memoRegex: '',\n            //                 withdrawFee: '0.34',\n            //                 withdrawMin: '0.68',\n            //                 withdrawMax: '0',\n            //                 minConfirm: 12,\n            //                 unLockConfirm: 0\n            //             }\n            //         ]\n            //     }\n            //\n            const entry = response[i];\n            const id = this.safeString (entry, 'coin');\n            const name = this.safeString (entry, 'name');\n            const code = this.safeCurrencyCode (id);\n            const precision = undefined;\n            let isWithdrawEnabled = true;\n            let isDepositEnabled = true;\n            const networkList = this.safeValue (entry, 'networkList', []);\n            const fees = {};\n            let fee = undefined;\n            for (let j = 0; j < networkList.length; j++) {\n                const networkItem = networkList[j];\n                const network = this.safeString (networkItem, 'network');\n                // const name = this.safeString (networkItem, 'name');\n                const withdrawFee = this.safeNumber (networkItem, 'withdrawFee');\n                const depositEnable = this.safeValue (networkItem, 'depositEnable');\n                const withdrawEnable = this.safeValue (networkItem, 'withdrawEnable');\n                isDepositEnabled = isDepositEnabled || depositEnable;\n                isWithdrawEnabled = isWithdrawEnabled || withdrawEnable;\n                fees[network] = withdrawFee;\n                const isDefault = this.safeValue (networkItem, 'isDefault');\n                if (isDefault || fee === undefined) {\n                    fee = withdrawFee;\n                }\n            }\n            const trading = this.safeValue (entry, 'trading');\n            const active = (isWithdrawEnabled && isDepositEnabled && trading);\n            result[code] = {\n                'id': id,\n                'name': name,\n                'code': code,\n                'precision': precision,\n                'info': entry,\n                'active': active,\n                'fee': fee,\n                'fees': fees,\n                'limits': this.limits,\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const defaultType = this.safeString2 (this.options, 'fetchMarkets', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        if ((type !== 'spot') && (type !== 'future') && (type !== 'margin') && (type !== 'delivery')) {\n            throw new ExchangeError (this.id + \" does not support '\" + type + \"' type, set exchange.options['defaultType'] to 'spot', 'margin', 'delivery' or 'future'\"); // eslint-disable-line quotes\n        }\n        let method = 'publicGetExchangeInfo';\n        if (type === 'future') {\n            method = 'fapiPublicGetExchangeInfo';\n        } else if (type === 'delivery') {\n            method = 'dapiPublicGetExchangeInfo';\n        }\n        const response = await this[method] (query);\n        //\n        // spot / margin\n        //\n        //     {\n        //         \"timezone\":\"UTC\",\n        //         \"serverTime\":1575416692969,\n        //         \"rateLimits\":[\n        //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200},\n        //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"SECOND\",\"intervalNum\":10,\"limit\":100},\n        //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"DAY\",\"intervalNum\":1,\"limit\":200000}\n        //         ],\n        //         \"exchangeFilters\":[],\n        //         \"symbols\":[\n        //             {\n        //                 \"symbol\":\"ETHBTC\",\n        //                 \"status\":\"TRADING\",\n        //                 \"baseAsset\":\"ETH\",\n        //                 \"baseAssetPrecision\":8,\n        //                 \"quoteAsset\":\"BTC\",\n        //                 \"quotePrecision\":8,\n        //                 \"baseCommissionPrecision\":8,\n        //                 \"quoteCommissionPrecision\":8,\n        //                 \"orderTypes\":[\"LIMIT\",\"LIMIT_MAKER\",\"MARKET\",\"STOP_LOSS_LIMIT\",\"TAKE_PROFIT_LIMIT\"],\n        //                 \"icebergAllowed\":true,\n        //                 \"ocoAllowed\":true,\n        //                 \"quoteOrderQtyMarketAllowed\":true,\n        //                 \"isSpotTradingAllowed\":true,\n        //                 \"isMarginTradingAllowed\":true,\n        //                 \"filters\":[\n        //                     {\"filterType\":\"PRICE_FILTER\",\"minPrice\":\"0.00000100\",\"maxPrice\":\"100000.00000000\",\"tickSize\":\"0.00000100\"},\n        //                     {\"filterType\":\"PERCENT_PRICE\",\"multiplierUp\":\"5\",\"multiplierDown\":\"0.2\",\"avgPriceMins\":5},\n        //                     {\"filterType\":\"LOT_SIZE\",\"minQty\":\"0.00100000\",\"maxQty\":\"100000.00000000\",\"stepSize\":\"0.00100000\"},\n        //                     {\"filterType\":\"MIN_NOTIONAL\",\"minNotional\":\"0.00010000\",\"applyToMarket\":true,\"avgPriceMins\":5},\n        //                     {\"filterType\":\"ICEBERG_PARTS\",\"limit\":10},\n        //                     {\"filterType\":\"MARKET_LOT_SIZE\",\"minQty\":\"0.00000000\",\"maxQty\":\"63100.00000000\",\"stepSize\":\"0.00000000\"},\n        //                     {\"filterType\":\"MAX_NUM_ALGO_ORDERS\",\"maxNumAlgoOrders\":5}\n        //                 ]\n        //             },\n        //         ],\n        //     }\n        //\n        // futures/usdt-margined (fapi)\n        //\n        //     {\n        //         \"timezone\":\"UTC\",\n        //         \"serverTime\":1575417244353,\n        //         \"rateLimits\":[\n        //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200},\n        //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":1200}\n        //         ],\n        //         \"exchangeFilters\":[],\n        //         \"symbols\":[\n        //             {\n        //                 \"symbol\":\"BTCUSDT\",\n        //                 \"status\":\"TRADING\",\n        //                 \"maintMarginPercent\":\"2.5000\",\n        //                 \"requiredMarginPercent\":\"5.0000\",\n        //                 \"baseAsset\":\"BTC\",\n        //                 \"quoteAsset\":\"USDT\",\n        //                 \"pricePrecision\":2,\n        //                 \"quantityPrecision\":3,\n        //                 \"baseAssetPrecision\":8,\n        //                 \"quotePrecision\":8,\n        //                 \"filters\":[\n        //                     {\"minPrice\":\"0.01\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.01\"},\n        //                     {\"stepSize\":\"0.001\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"1000\",\"minQty\":\"0.001\"},\n        //                     {\"stepSize\":\"0.001\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"1000\",\"minQty\":\"0.001\"},\n        //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n        //                     {\"multiplierDown\":\"0.8500\",\"multiplierUp\":\"1.1500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n        //                 ],\n        //                 \"orderTypes\":[\"LIMIT\",\"MARKET\",\"STOP\"],\n        //                 \"timeInForce\":[\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n        //             }\n        //         ]\n        //     }\n        //\n        // delivery/coin-margined (dapi)\n        //\n        //     {\n        //         \"timezone\": \"UTC\",\n        //         \"serverTime\": 1597667052958,\n        //         \"rateLimits\": [\n        //             {\"rateLimitType\":\"REQUEST_WEIGHT\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":6000},\n        //             {\"rateLimitType\":\"ORDERS\",\"interval\":\"MINUTE\",\"intervalNum\":1,\"limit\":6000}\n        //         ],\n        //         \"exchangeFilters\": [],\n        //         \"symbols\": [\n        //             {\n        //                 \"symbol\": \"BTCUSD_200925\",\n        //                 \"pair\": \"BTCUSD\",\n        //                 \"contractType\": \"CURRENT_QUARTER\",\n        //                 \"deliveryDate\": 1601020800000,\n        //                 \"onboardDate\": 1590739200000,\n        //                 \"contractStatus\": \"TRADING\",\n        //                 \"contractSize\": 100,\n        //                 \"marginAsset\": \"BTC\",\n        //                 \"maintMarginPercent\": \"2.5000\",\n        //                 \"requiredMarginPercent\": \"5.0000\",\n        //                 \"baseAsset\": \"BTC\",\n        //                 \"quoteAsset\": \"USD\",\n        //                 \"pricePrecision\": 1,\n        //                 \"quantityPrecision\": 0,\n        //                 \"baseAssetPrecision\": 8,\n        //                 \"quotePrecision\": 8,\n        //                 \"equalQtyPrecision\": 4,\n        //                 \"filters\": [\n        //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.1\"},\n        //                     {\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n        //                     {\"stepSize\":\"0\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n        //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n        //                     {\"multiplierDown\":\"0.9500\",\"multiplierUp\":\"1.0500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n        //                 ],\n        //                 \"orderTypes\": [\"LIMIT\",\"MARKET\",\"STOP\",\"STOP_MARKET\",\"TAKE_PROFIT\",\"TAKE_PROFIT_MARKET\",\"TRAILING_STOP_MARKET\"],\n        //                 \"timeInForce\": [\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n        //             },\n        //             {\n        //                 \"symbol\": \"BTCUSD_PERP\",\n        //                 \"pair\": \"BTCUSD\",\n        //                 \"contractType\": \"PERPETUAL\",\n        //                 \"deliveryDate\": 4133404800000,\n        //                 \"onboardDate\": 1596006000000,\n        //                 \"contractStatus\": \"TRADING\",\n        //                 \"contractSize\": 100,\n        //                 \"marginAsset\": \"BTC\",\n        //                 \"maintMarginPercent\": \"2.5000\",\n        //                 \"requiredMarginPercent\": \"5.0000\",\n        //                 \"baseAsset\": \"BTC\",\n        //                 \"quoteAsset\": \"USD\",\n        //                 \"pricePrecision\": 1,\n        //                 \"quantityPrecision\": 0,\n        //                 \"baseAssetPrecision\": 8,\n        //                 \"quotePrecision\": 8,\n        //                 \"equalQtyPrecision\": 4,\n        //                 \"filters\": [\n        //                     {\"minPrice\":\"0.1\",\"maxPrice\":\"100000\",\"filterType\":\"PRICE_FILTER\",\"tickSize\":\"0.1\"},\n        //                     {\"stepSize\":\"1\",\"filterType\":\"LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n        //                     {\"stepSize\":\"1\",\"filterType\":\"MARKET_LOT_SIZE\",\"maxQty\":\"100000\",\"minQty\":\"1\"},\n        //                     {\"limit\":200,\"filterType\":\"MAX_NUM_ORDERS\"},\n        //                     {\"multiplierDown\":\"0.8500\",\"multiplierUp\":\"1.1500\",\"multiplierDecimal\":\"4\",\"filterType\":\"PERCENT_PRICE\"}\n        //                 ],\n        //                 \"orderTypes\": [\"LIMIT\",\"MARKET\",\"STOP\",\"STOP_MARKET\",\"TAKE_PROFIT\",\"TAKE_PROFIT_MARKET\",\"TRAILING_STOP_MARKET\"],\n        //                 \"timeInForce\": [\"GTC\",\"IOC\",\"FOK\",\"GTX\"]\n        //             }\n        //         ]\n        //     }\n        //\n        if (this.options['adjustForTimeDifference']) {\n            await this.loadTimeDifference ();\n        }\n        const markets = this.safeValue (response, 'symbols', []);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const spot = (type === 'spot');\n            const future = (type === 'future');\n            const delivery = (type === 'delivery');\n            const id = this.safeString (market, 'symbol');\n            const lowercaseId = this.safeStringLower (market, 'symbol');\n            const baseId = this.safeString (market, 'baseAsset');\n            const quoteId = this.safeString (market, 'quoteAsset');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const contractType = this.safeString (market, 'contractType');\n            const idSymbol = (future || delivery) && (contractType !== 'PERPETUAL');\n            let symbol = undefined;\n            let expiry = undefined;\n            if (idSymbol) {\n                symbol = id;\n                expiry = this.safeInteger (market, 'deliveryDate');\n            } else {\n                symbol = base + '/' + quote;\n            }\n            const filters = this.safeValue (market, 'filters', []);\n            const filtersByType = this.indexBy (filters, 'filterType');\n            const precision = {\n                'base': this.safeInteger (market, 'baseAssetPrecision'),\n                'quote': this.safeInteger (market, 'quotePrecision'),\n                'amount': this.safeInteger (market, 'baseAssetPrecision'),\n                'price': this.safeInteger (market, 'quotePrecision'),\n            };\n            const status = this.safeString2 (market, 'status', 'contractStatus');\n            const active = (status === 'TRADING');\n            const margin = this.safeValue (market, 'isMarginTradingAllowed', false);\n            let contractSize = undefined;\n            if (future || delivery) {\n                contractSize = this.safeString (market, 'contractSize', '1');\n            }\n            const entry = {\n                'id': id,\n                'lowercaseId': lowercaseId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'spot': spot,\n                'type': type,\n                'margin': margin,\n                'future': future,\n                'delivery': delivery,\n                'linear': future,\n                'inverse': delivery,\n                'expiry': expiry,\n                'expiryDatetime': this.iso8601 (expiry),\n                'active': active,\n                'precision': precision,\n                'contractSize': contractSize,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            };\n            if ('PRICE_FILTER' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'PRICE_FILTER', {});\n                // PRICE_FILTER reports zero values for maxPrice\n                // since they updated filter types in November 2018\n                // https://github.com/ccxt/ccxt/issues/4286\n                // therefore limits['price']['max'] doesn't have any meaningful value except undefined\n                entry['limits']['price'] = {\n                    'min': this.safeNumber (filter, 'minPrice'),\n                    'max': this.safeNumber (filter, 'maxPrice'),\n                };\n                entry['precision']['price'] = this.precisionFromString (filter['tickSize']);\n            }\n            if ('LOT_SIZE' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'LOT_SIZE', {});\n                const stepSize = this.safeString (filter, 'stepSize');\n                entry['precision']['amount'] = this.precisionFromString (stepSize);\n                entry['limits']['amount'] = {\n                    'min': this.safeNumber (filter, 'minQty'),\n                    'max': this.safeNumber (filter, 'maxQty'),\n                };\n            }\n            if ('MARKET_LOT_SIZE' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'MARKET_LOT_SIZE', {});\n                entry['limits']['market'] = {\n                    'min': this.safeNumber (filter, 'minQty'),\n                    'max': this.safeNumber (filter, 'maxQty'),\n                };\n            }\n            if ('MIN_NOTIONAL' in filtersByType) {\n                const filter = this.safeValue (filtersByType, 'MIN_NOTIONAL', {});\n                entry['limits']['cost']['min'] = this.safeNumber2 (filter, 'minNotional', 'notional');\n            }\n            result.push (entry);\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString2 (this.options, 'fetchBalance', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        let method = 'privateGetAccount';\n        if (type === 'future') {\n            const options = this.safeValue (this.options, 'future', {});\n            const fetchBalanceOptions = this.safeValue (options, 'fetchBalance', {});\n            method = this.safeString (fetchBalanceOptions, 'method', 'fapiPrivateV2GetAccount');\n        } else if (type === 'delivery') {\n            const options = this.safeValue (this.options, 'delivery', {});\n            const fetchBalanceOptions = this.safeValue (options, 'fetchBalance', {});\n            method = this.safeString (fetchBalanceOptions, 'method', 'dapiPrivateGetAccount');\n        } else if (type === 'margin') {\n            method = 'sapiGetMarginAccount';\n        }\n        const query = this.omit (params, 'type');\n        const response = await this[method] (query);\n        //\n        // spot\n        //\n        //     {\n        //         makerCommission: 10,\n        //         takerCommission: 10,\n        //         buyerCommission: 0,\n        //         sellerCommission: 0,\n        //         canTrade: true,\n        //         canWithdraw: true,\n        //         canDeposit: true,\n        //         updateTime: 1575357359602,\n        //         accountType: \"MARGIN\",\n        //         balances: [\n        //             { asset: \"BTC\", free: \"0.00219821\", locked: \"0.00000000\"  },\n        //         ]\n        //     }\n        //\n        // margin\n        //\n        //     {\n        //         \"borrowEnabled\":true,\n        //         \"marginLevel\":\"999.00000000\",\n        //         \"totalAssetOfBtc\":\"0.00000000\",\n        //         \"totalLiabilityOfBtc\":\"0.00000000\",\n        //         \"totalNetAssetOfBtc\":\"0.00000000\",\n        //         \"tradeEnabled\":true,\n        //         \"transferEnabled\":true,\n        //         \"userAssets\":[\n        //             {\"asset\":\"MATIC\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"},\n        //             {\"asset\":\"VET\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"},\n        //             {\"asset\":\"USDT\",\"borrowed\":\"0.00000000\",\"free\":\"0.00000000\",\"interest\":\"0.00000000\",\"locked\":\"0.00000000\",\"netAsset\":\"0.00000000\"}\n        //         ],\n        //     }\n        //\n        // futures (fapi)\n        //\n        //     fapiPrivateGetAccount\n        //\n        //     {\n        //         \"feeTier\":0,\n        //         \"canTrade\":true,\n        //         \"canDeposit\":true,\n        //         \"canWithdraw\":true,\n        //         \"updateTime\":0,\n        //         \"totalInitialMargin\":\"0.00000000\",\n        //         \"totalMaintMargin\":\"0.00000000\",\n        //         \"totalWalletBalance\":\"4.54000000\",\n        //         \"totalUnrealizedProfit\":\"0.00000000\",\n        //         \"totalMarginBalance\":\"4.54000000\",\n        //         \"totalPositionInitialMargin\":\"0.00000000\",\n        //         \"totalOpenOrderInitialMargin\":\"0.00000000\",\n        //         \"maxWithdrawAmount\":\"4.54000000\",\n        //         \"assets\":[\n        //             {\n        //                 \"asset\":\"USDT\",\n        //                 \"walletBalance\":\"4.54000000\",\n        //                 \"unrealizedProfit\":\"0.00000000\",\n        //                 \"marginBalance\":\"4.54000000\",\n        //                 \"maintMargin\":\"0.00000000\",\n        //                 \"initialMargin\":\"0.00000000\",\n        //                 \"positionInitialMargin\":\"0.00000000\",\n        //                 \"openOrderInitialMargin\":\"0.00000000\",\n        //                 \"maxWithdrawAmount\":\"4.54000000\"\n        //             }\n        //         ],\n        //         \"positions\":[\n        //             {\n        //                 \"symbol\":\"BTCUSDT\",\n        //                 \"initialMargin\":\"0.00000\",\n        //                 \"maintMargin\":\"0.00000\",\n        //                 \"unrealizedProfit\":\"0.00000000\",\n        //                 \"positionInitialMargin\":\"0.00000\",\n        //                 \"openOrderInitialMargin\":\"0.00000\"\n        //             }\n        //         ]\n        //     }\n        //\n        //     fapiPrivateV2GetAccount\n        //\n        //     {\n        //         \"feeTier\":0,\n        //         \"canTrade\":true,\n        //         \"canDeposit\":true,\n        //         \"canWithdraw\":true,\n        //         \"updateTime\":0,\n        //         \"totalInitialMargin\":\"0.00000000\",\n        //         \"totalMaintMargin\":\"0.00000000\",\n        //         \"totalWalletBalance\":\"0.00000000\",\n        //         \"totalUnrealizedProfit\":\"0.00000000\",\n        //         \"totalMarginBalance\":\"0.00000000\",\n        //         \"totalPositionInitialMargin\":\"0.00000000\",\n        //         \"totalOpenOrderInitialMargin\":\"0.00000000\",\n        //         \"totalCrossWalletBalance\":\"0.00000000\",\n        //         \"totalCrossUnPnl\":\"0.00000000\",\n        //         \"availableBalance\":\"0.00000000\",\n        //         \"maxWithdrawAmount\":\"0.00000000\",\n        //         \"assets\":[\n        //             {\n        //                 \"asset\":\"BNB\",\n        //                 \"walletBalance\":\"0.01000000\",\n        //                 \"unrealizedProfit\":\"0.00000000\",\n        //                 \"marginBalance\":\"0.01000000\",\n        //                 \"maintMargin\":\"0.00000000\",\n        //                 \"initialMargin\":\"0.00000000\",\n        //                 \"positionInitialMargin\":\"0.00000000\",\n        //                 \"openOrderInitialMargin\":\"0.00000000\",\n        //                 \"maxWithdrawAmount\":\"0.01000000\",\n        //                 \"crossWalletBalance\":\"0.01000000\",\n        //                 \"crossUnPnl\":\"0.00000000\",\n        //                 \"availableBalance\":\"0.01000000\"\n        //             }\n        //         ],\n        //         \"positions\":[\n        //             {\n        //                 \"symbol\":\"BTCUSDT\",\n        //                 \"initialMargin\":\"0\",\n        //                 \"maintMargin\":\"0\",\n        //                 \"unrealizedProfit\":\"0.00000000\",\n        //                 \"positionInitialMargin\":\"0\",\n        //                 \"openOrderInitialMargin\":\"0\",\n        //                 \"leverage\":\"20\",\n        //                 \"isolated\":false,\n        //                 \"entryPrice\":\"0.00000\",\n        //                 \"maxNotional\":\"5000000\",\n        //                 \"positionSide\":\"BOTH\"\n        //             },\n        //         ]\n        //     }\n        //\n        //     fapiPrivateV2GetBalance\n        //\n        //     [\n        //         {\n        //             \"accountAlias\":\"FzFzXquXXqoC\",\n        //             \"asset\":\"BNB\",\n        //             \"balance\":\"0.01000000\",\n        //             \"crossWalletBalance\":\"0.01000000\",\n        //             \"crossUnPnl\":\"0.00000000\",\n        //             \"availableBalance\":\"0.01000000\",\n        //             \"maxWithdrawAmount\":\"0.01000000\"\n        //         }\n        //     ]\n        //\n        const result = {\n            'info': response,\n        };\n        let timestamp = undefined;\n        if ((type === 'spot') || (type === 'margin')) {\n            timestamp = this.safeInteger (response, 'updateTime');\n            const balances = this.safeValue2 (response, 'balances', 'userAssets', []);\n            for (let i = 0; i < balances.length; i++) {\n                const balance = balances[i];\n                const currencyId = this.safeString (balance, 'asset');\n                const code = this.safeCurrencyCode (currencyId);\n                const account = this.account ();\n                account['free'] = this.safeString (balance, 'free');\n                account['used'] = this.safeString (balance, 'locked');\n                result[code] = account;\n            }\n        } else {\n            let balances = response;\n            if (!Array.isArray (response)) {\n                balances = this.safeValue (response, 'assets', []);\n            }\n            for (let i = 0; i < balances.length; i++) {\n                const balance = balances[i];\n                const currencyId = this.safeString (balance, 'asset');\n                const code = this.safeCurrencyCode (currencyId);\n                const account = this.account ();\n                account['free'] = this.safeString (balance, 'availableBalance');\n                account['used'] = this.safeString (balance, 'initialMargin');\n                account['total'] = this.safeString2 (balance, 'marginBalance', 'balance');\n                result[code] = account;\n            }\n        }\n        result['timestamp'] = timestamp;\n        result['datetime'] = this.iso8601 (timestamp);\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 100, max 5000, see https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book\n        }\n        let method = 'publicGetDepth';\n        if (market['linear']) {\n            method = 'fapiPublicGetDepth';\n        } else if (market['inverse']) {\n            method = 'dapiPublicGetDepth';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // future\n        //\n        //     {\n        //         \"lastUpdateId\":333598053905,\n        //         \"E\":1618631511986,\n        //         \"T\":1618631511964,\n        //         \"bids\":[\n        //             [\"2493.56\",\"20.189\"],\n        //             [\"2493.54\",\"1.000\"],\n        //             [\"2493.51\",\"0.005\"],[\"2493.37\",\"0.280\"],[\"2493.31\",\"0.865\"],[\"2493.30\",\"0.514\"],[\"2493.29\",\"2.309\"],[\"2493.25\",\"1.500\"],[\"2493.23\",\"0.012\"],[\"2493.22\",\"7.240\"],[\"2493.21\",\"3.349\"],[\"2493.20\",\"2.030\"],[\"2493.19\",\"58.118\"],[\"2493.18\",\"174.836\"],[\"2493.17\",\"14.436\"],[\"2493.12\",\"2.000\"],[\"2493.09\",\"3.232\"],[\"2493.08\",\"2.010\"],[\"2493.07\",\"2.000\"],[\"2493.06\",\"2.000\"],[\"2493.05\",\"2.684\"],[\"2493.04\",\"2.000\"],[\"2493.03\",\"2.000\"],[\"2493.02\",\"5.000\"],[\"2493.01\",\"2.000\"],[\"2493.00\",\"1.035\"],[\"2492.99\",\"8.546\"],[\"2492.98\",\"4.012\"],[\"2492.96\",\"40.937\"],[\"2492.95\",\"40.595\"],[\"2492.94\",\"21.051\"],[\"2492.92\",\"4.012\"],[\"2492.91\",\"0.200\"],[\"2492.85\",\"2.000\"],[\"2492.83\",\"24.929\"],[\"2492.81\",\"50.000\"],[\"2492.80\",\"0.030\"],[\"2492.76\",\"0.264\"],[\"2492.73\",\"32.098\"],[\"2492.71\",\"32.664\"],[\"2492.70\",\"4.228\"],[\"2492.65\",\"1.230\"],[\"2492.61\",\"5.598\"],[\"2492.60\",\"34.786\"],[\"2492.58\",\"10.393\"],[\"2492.54\",\"4.543\"],[\"2492.50\",\"0.400\"],[\"2492.49\",\"0.600\"],[\"2492.48\",\"4.941\"],[\"2492.45\",\"1.207\"],[\"2492.43\",\"4.878\"],[\"2492.40\",\"4.762\"],[\"2492.39\",\"36.489\"],[\"2492.37\",\"3.000\"],[\"2492.36\",\"4.882\"],[\"2492.33\",\"28.117\"],[\"2492.29\",\"0.490\"],[\"2492.28\",\"76.365\"],[\"2492.27\",\"0.200\"],[\"2492.23\",\"3.804\"],[\"2492.22\",\"1.000\"],[\"2492.19\",\"20.011\"],[\"2492.17\",\"13.500\"],[\"2492.16\",\"4.058\"],[\"2492.14\",\"35.673\"],[\"2492.13\",\"1.915\"],[\"2492.12\",\"76.896\"],[\"2492.10\",\"8.050\"],[\"2492.01\",\"16.615\"],[\"2492.00\",\"10.335\"],[\"2491.95\",\"5.880\"],[\"2491.93\",\"10.000\"],[\"2491.92\",\"3.916\"],[\"2491.90\",\"0.795\"],[\"2491.87\",\"22.000\"],[\"2491.85\",\"1.260\"],[\"2491.84\",\"4.014\"],[\"2491.83\",\"6.668\"],[\"2491.73\",\"0.855\"],[\"2491.72\",\"7.572\"],[\"2491.71\",\"7.000\"],[\"2491.68\",\"3.916\"],[\"2491.66\",\"2.500\"],[\"2491.64\",\"4.945\"],[\"2491.63\",\"2.302\"],[\"2491.62\",\"4.012\"],[\"2491.61\",\"16.170\"],[\"2491.60\",\"0.793\"],[\"2491.59\",\"0.403\"],[\"2491.57\",\"17.445\"],[\"2491.56\",\"88.177\"],[\"2491.53\",\"10.000\"],[\"2491.47\",\"0.013\"],[\"2491.45\",\"0.157\"],[\"2491.44\",\"11.733\"],[\"2491.39\",\"3.593\"],[\"2491.38\",\"3.570\"],[\"2491.36\",\"28.077\"],[\"2491.35\",\"0.808\"],[\"2491.30\",\"0.065\"],[\"2491.29\",\"4.880\"],[\"2491.27\",\"22.000\"],[\"2491.24\",\"9.021\"],[\"2491.23\",\"68.393\"],[\"2491.22\",\"0.050\"],[\"2491.21\",\"1.316\"],[\"2491.20\",\"4.000\"],[\"2491.19\",\"0.108\"],[\"2491.18\",\"0.498\"],[\"2491.17\",\"5.000\"],[\"2491.14\",\"10.000\"],[\"2491.13\",\"0.383\"],[\"2491.12\",\"125.959\"],[\"2491.10\",\"0.870\"],[\"2491.08\",\"10.518\"],[\"2491.05\",\"54.743\"],[\"2491.01\",\"7.980\"],[\"2490.96\",\"3.916\"],[\"2490.95\",\"0.135\"],[\"2490.91\",\"0.140\"],[\"2490.89\",\"8.424\"],[\"2490.88\",\"5.930\"],[\"2490.84\",\"1.208\"],[\"2490.83\",\"2.005\"],[\"2490.82\",\"5.517\"],[\"2490.81\",\"73.707\"],[\"2490.80\",\"1.042\"],[\"2490.79\",\"9.626\"],[\"2490.72\",\"3.916\"],[\"2490.70\",\"0.148\"],[\"2490.69\",\"0.403\"],[\"2490.68\",\"0.012\"],[\"2490.67\",\"21.887\"],[\"2490.66\",\"0.008\"],[\"2490.64\",\"11.500\"],[\"2490.61\",\"0.005\"],[\"2490.58\",\"68.175\"],[\"2490.55\",\"0.218\"],[\"2490.54\",\"14.132\"],[\"2490.53\",\"5.157\"],[\"2490.50\",\"0.018\"],[\"2490.49\",\"9.216\"],[\"2490.48\",\"3.979\"],[\"2490.47\",\"1.884\"],[\"2490.44\",\"0.003\"],[\"2490.36\",\"14.132\"],[\"2490.35\",\"2.008\"],[\"2490.34\",\"0.200\"],[\"2490.33\",\"0.015\"],[\"2490.30\",\"0.065\"],[\"2490.29\",\"5.500\"],[\"2490.28\",\"24.203\"],[\"2490.26\",\"4.373\"],[\"2490.25\",\"0.026\"],[\"2490.24\",\"4.000\"],[\"2490.23\",\"177.628\"],[\"2490.22\",\"14.132\"],[\"2490.21\",\"0.181\"],[\"2490.20\",\"0.645\"],[\"2490.19\",\"9.024\"],[\"2490.18\",\"0.108\"],[\"2490.17\",\"0.085\"],[\"2490.16\",\"0.077\"],[\"2490.14\",\"0.275\"],[\"2490.10\",\"0.080\"],[\"2490.07\",\"0.015\"],[\"2490.04\",\"6.056\"],[\"2490.00\",\"6.796\"],[\"2489.98\",\"0.005\"],[\"2489.97\",\"0.258\"],[\"2489.96\",\"10.084\"],[\"2489.95\",\"1.202\"],[\"2489.91\",\"10.121\"],[\"2489.90\",\"10.084\"],[\"2489.88\",\"0.040\"],[\"2489.87\",\"0.004\"],[\"2489.85\",\"0.003\"],[\"2489.76\",\"3.916\"],[\"2489.73\",\"10.084\"],[\"2489.71\",\"0.272\"],[\"2489.70\",\"12.834\"],[\"2489.67\",\"0.403\"],[\"2489.66\",\"0.362\"],[\"2489.64\",\"0.738\"],[\"2489.63\",\"193.236\"],[\"2489.62\",\"14.152\"],[\"2489.61\",\"0.157\"],[\"2489.59\",\"4.011\"],[\"2489.57\",\"0.015\"],[\"2489.55\",\"0.046\"],[\"2489.52\",\"3.921\"],[\"2489.51\",\"0.005\"],[\"2489.45\",\"80.000\"],[\"2489.44\",\"0.649\"],[\"2489.43\",\"10.088\"],[\"2489.39\",\"0.009\"],[\"2489.37\",\"14.132\"],[\"2489.35\",\"72.262\"],[\"2489.34\",\"10.084\"],[\"2489.33\",\"14.136\"],[\"2489.32\",\"23.953\"],[\"2489.30\",\"0.065\"],[\"2489.28\",\"8.136\"],[\"2489.24\",\"8.022\"],[\"2489.19\",\"14.132\"],[\"2489.18\",\"0.085\"],[\"2489.17\",\"0.108\"],[\"2489.14\",\"10.084\"],[\"2489.13\",\"3.142\"],[\"2489.12\",\"77.827\"],[\"2489.11\",\"10.084\"],[\"2489.10\",\"0.080\"],[\"2489.09\",\"50.024\"],[\"2489.04\",\"3.916\"],[\"2489.03\",\"0.008\"],[\"2489.01\",\"10.084\"],[\"2488.99\",\"0.135\"],[\"2488.98\",\"0.187\"],[\"2488.96\",\"0.324\"],[\"2488.92\",\"0.064\"],[\"2488.85\",\"16.056\"],[\"2488.83\",\"14.132\"],[\"2488.80\",\"3.916\"],[\"2488.79\",\"10.084\"],[\"2488.77\",\"4.414\"],[\"2488.76\",\"0.005\"],[\"2488.75\",\"13.685\"],[\"2488.73\",\"0.020\"],[\"2488.69\",\"0.157\"],[\"2488.60\",\"80.000\"],[\"2488.58\",\"10.164\"],[\"2488.57\",\"0.004\"],[\"2488.56\",\"3.933\"],[\"2488.54\",\"3.311\"],[\"2488.51\",\"12.814\"],[\"2488.50\",\"80.099\"],[\"2488.48\",\"0.684\"],[\"2488.44\",\"0.024\"],[\"2488.42\",\"68.180\"],[\"2488.39\",\"4.412\"],[\"2488.38\",\"26.138\"],[\"2488.34\",\"44.134\"],[\"2488.32\",\"8.014\"],[\"2488.30\",\"0.065\"],[\"2488.29\",\"0.009\"],[\"2488.27\",\"4.513\"],[\"2488.26\",\"4.222\"],[\"2488.25\",\"80.000\"],[\"2488.23\",\"0.007\"],[\"2488.22\",\"0.281\"],[\"2488.19\",\"0.100\"],[\"2488.18\",\"80.100\"],[\"2488.17\",\"80.000\"],[\"2488.16\",\"8.197\"],[\"2488.15\",\"79.184\"],[\"2488.13\",\"0.025\"],[\"2488.11\",\"0.050\"],[\"2488.10\",\"0.080\"],[\"2488.08\",\"3.919\"],[\"2488.04\",\"40.103\"],[\"2488.03\",\"0.120\"],[\"2488.02\",\"0.008\"],[\"2488.01\",\"0.140\"],[\"2488.00\",\"0.406\"],[\"2487.99\",\"0.384\"],[\"2487.98\",\"0.060\"],[\"2487.96\",\"8.010\"],[\"2487.94\",\"0.246\"],[\"2487.93\",\"0.020\"],[\"2487.91\",\"0.136\"],[\"2487.87\",\"0.403\"],[\"2487.84\",\"17.910\"],[\"2487.81\",\"0.005\"],[\"2487.80\",\"0.073\"],[\"2487.74\",\"36.000\"],[\"2487.73\",\"3.225\"],[\"2487.72\",\"0.018\"],[\"2487.71\",\"0.319\"],[\"2487.70\",\"0.006\"],[\"2487.66\",\"0.003\"],[\"2487.64\",\"0.003\"],[\"2487.63\",\"0.008\"],[\"2487.62\",\"0.040\"],[\"2487.60\",\"3.916\"],[\"2487.54\",\"0.805\"],[\"2487.52\",\"0.022\"],[\"2487.51\",\"0.003\"],[\"2487.50\",\"0.051\"],[\"2487.49\",\"6.081\"],[\"2487.47\",\"80.015\"],[\"2487.46\",\"4.735\"],[\"2487.45\",\"30.000\"],[\"2487.41\",\"0.096\"],[\"2487.40\",\"0.078\"],[\"2487.39\",\"0.103\"],[\"2487.37\",\"2.279\"],[\"2487.36\",\"8.152\"],[\"2487.35\",\"2.145\"],[\"2487.32\",\"12.816\"],[\"2487.31\",\"10.023\"],[\"2487.30\",\"0.157\"],[\"2487.27\",\"0.005\"],[\"2487.26\",\"4.010\"],[\"2487.25\",\"0.008\"],[\"2487.24\",\"0.003\"],[\"2487.23\",\"0.014\"],[\"2487.20\",\"0.085\"],[\"2487.17\",\"0.011\"],[\"2487.14\",\"3.217\"],[\"2487.12\",\"3.916\"],[\"2487.11\",\"0.300\"],[\"2487.10\",\"0.088\"],[\"2487.08\",\"10.097\"],[\"2487.07\",\"1.467\"],[\"2487.04\",\"0.600\"],[\"2487.01\",\"18.363\"],[\"2487.00\",\"0.292\"],[\"2486.99\",\"0.014\"],[\"2486.98\",\"0.144\"],[\"2486.97\",\"0.443\"],[\"2486.92\",\"0.005\"],[\"2486.91\",\"0.016\"],[\"2486.89\",\"3.364\"],[\"2486.88\",\"4.166\"],[\"2486.84\",\"24.306\"],[\"2486.83\",\"0.181\"],[\"2486.81\",\"0.015\"],[\"2486.80\",\"0.082\"],[\"2486.79\",\"0.007\"],[\"2486.76\",\"0.011\"],[\"2486.74\",\"0.050\"],[\"2486.73\",\"0.782\"],[\"2486.72\",\"0.004\"],[\"2486.69\",\"0.003\"],[\"2486.68\",\"8.018\"],[\"2486.66\",\"10.004\"],[\"2486.65\",\"40.391\"],[\"2486.64\",\"3.916\"],[\"2486.61\",\"0.489\"],[\"2486.60\",\"0.196\"],[\"2486.57\",\"0.396\"],[\"2486.55\",\"4.015\"],[\"2486.51\",\"3.000\"],[\"2486.50\",\"0.003\"],[\"2486.48\",\"0.005\"],[\"2486.47\",\"0.010\"],[\"2486.45\",\"4.011\"],[\"2486.44\",\"0.602\"],[\"2486.43\",\"0.566\"],[\"2486.42\",\"3.140\"],[\"2486.40\",\"3.958\"],[\"2486.39\",\"0.003\"],[\"2486.34\",\"0.010\"],[\"2486.31\",\"6.281\"],[\"2486.27\",\"0.005\"],[\"2486.26\",\"0.004\"],[\"2486.23\",\"10.088\"],[\"2486.22\",\"0.015\"],[\"2486.17\",\"0.030\"],[\"2486.16\",\"3.916\"],[\"2486.15\",\"0.020\"],[\"2486.13\",\"13.130\"],[\"2486.12\",\"82.414\"],[\"2486.11\",\"0.244\"],[\"2486.10\",\"0.132\"],[\"2486.08\",\"0.720\"],[\"2486.06\",\"0.385\"],[\"2486.01\",\"0.004\"],[\"2486.00\",\"2.359\"],[\"2485.99\",\"154.159\"],[\"2485.98\",\"20.054\"],[\"2485.96\",\"1.000\"],[\"2485.95\",\"0.190\"],[\"2485.92\",\"4.463\"],[\"2485.90\",\"1.557\"],[\"2485.87\",\"0.402\"],[\"2485.85\",\"0.114\"],[\"2485.81\",\"0.900\"],[\"2485.76\",\"4.700\"],[\"2485.75\",\"0.300\"],[\"2485.74\",\"0.196\"],[\"2485.73\",\"4.010\"],[\"2485.72\",\"0.323\"],[\"2485.70\",\"0.263\"],[\"2485.69\",\"0.261\"],[\"2485.68\",\"3.688\"],[\"2485.67\",\"0.005\"],[\"2485.64\",\"1.216\"],[\"2485.63\",\"0.005\"],[\"2485.62\",\"0.015\"],[\"2485.61\",\"0.033\"],[\"2485.60\",\"0.004\"],[\"2485.58\",\"2.012\"],[\"2485.56\",\"0.020\"],[\"2485.54\",\"0.699\"],[\"2485.52\",\"0.003\"],[\"2485.51\",\"1.830\"],[\"2485.48\",\"5.964\"],[\"2485.47\",\"0.015\"],[\"2485.44\",\"7.251\"],[\"2485.43\",\"0.006\"],[\"2485.42\",\"0.644\"],[\"2485.40\",\"8.026\"],[\"2485.38\",\"0.489\"],[\"2485.36\",\"0.014\"],[\"2485.35\",\"0.005\"],[\"2485.31\",\"1.507\"],[\"2485.30\",\"2.107\"],[\"2485.29\",\"0.039\"],[\"2485.28\",\"0.642\"],[\"2485.26\",\"1.990\"],[\"2485.25\",\"4.996\"],[\"2485.23\",\"0.003\"],[\"2485.22\",\"0.277\"],[\"2485.21\",\"0.121\"],[\"2485.20\",\"3.952\"],[\"2485.18\",\"0.006\"],[\"2485.17\",\"0.043\"],[\"2485.15\",\"4.008\"],[\"2485.14\",\"4.434\"],[\"2485.13\",\"1.003\"],[\"2485.05\",\"0.204\"],[\"2485.04\",\"0.254\"],[\"2485.02\",\"5.000\"],[\"2485.01\",\"0.050\"],[\"2485.00\",\"80.821\"],[\"2484.96\",\"3.941\"],[\"2484.95\",\"10.023\"],[\"2484.94\",\"13.935\"],[\"2484.92\",\"0.059\"],[\"2484.90\",\"150.000\"],[\"2484.89\",\"0.004\"],[\"2484.88\",\"150.127\"],[\"2484.87\",\"0.004\"],[\"2484.85\",\"0.100\"],[\"2484.83\",\"0.006\"],[\"2484.82\",\"0.030\"],[\"2484.81\",\"1.246\"],[\"2484.80\",\"0.003\"],[\"2484.79\",\"0.045\"],[\"2484.77\",\"0.003\"],[\"2484.74\",\"0.036\"],[\"2484.72\",\"3.919\"],[\"2484.70\",\"0.134\"],[\"2484.68\",\"1.111\"],[\"2484.66\",\"76.955\"],[\"2484.60\",\"2.580\"],[\"2484.59\",\"31.432\"],[\"2484.58\",\"1.468\"],[\"2484.55\",\"1.153\"],[\"2484.54\",\"0.265\"],[\"2484.53\",\"20.024\"],[\"2484.51\",\"1.047\"],[\"2484.50\",\"0.818\"],[\"2484.49\",\"0.022\"],[\"2484.48\",\"3.887\"],[\"2484.46\",\"0.048\"],[\"2484.45\",\"0.224\"],[\"2484.44\",\"0.174\"],[\"2484.43\",\"223.079\"],[\"2484.42\",\"0.014\"],[\"2484.41\",\"1.115\"],[\"2484.39\",\"26.090\"],[\"2484.38\",\"0.066\"],[\"2484.37\",\"0.121\"],[\"2484.34\",\"0.255\"],[\"2484.33\",\"23.968\"],[\"2484.29\",\"0.085\"],[\"2484.27\",\"1.128\"],[\"2484.26\",\"1.456\"],[\"2484.24\",\"3.916\"],[\"2484.23\",\"28.126\"],[\"2484.22\",\"1.329\"],[\"2484.19\",\"2.015\"],[\"2484.18\",\"0.263\"],[\"2484.15\",\"15.489\"],[\"2484.14\",\"1.135\"],[\"2484.13\",\"0.572\"],[\"2484.12\",\"8.032\"],[\"2484.11\",\"0.021\"],[\"2484.09\",\"0.059\"],[\"2484.08\",\"0.038\"],[\"2484.07\",\"0.147\"],[\"2484.05\",\"24.156\"],[\"2484.04\",\"0.008\"],[\"2484.01\",\"1.184\"],[\"2484.00\",\"4.641\"],[\"2483.99\",\"0.006\"],[\"2483.97\",\"0.294\"],[\"2483.96\",\"0.424\"],[\"2483.94\",\"3.660\"],[\"2483.93\",\"2.067\"],[\"2483.92\",\"0.008\"],[\"2483.89\",\"0.141\"],[\"2483.88\",\"1.089\"],\n        //             [\"2483.87\",\"110.000\"],[\"2483.85\",\"4.018\"],[\"2483.81\",\"150.077\"],[\"2483.80\",\"0.003\"],[\"2483.77\",\"0.020\"]\n        //         ],\n        //         \"asks\":[\n        //             [\"2493.57\",\"0.877\"],\n        //             [\"2493.62\",\"0.063\"],\n        //             [\"2493.71\",\"12.054\"],\n        //         ]\n        //     }\n        const timestamp = this.safeInteger (response, 'T');\n        const orderbook = this.parseOrderBook (response, symbol, timestamp);\n        orderbook['nonce'] = this.safeInteger (response, 'lastUpdateId');\n        return orderbook;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         symbol: 'ETHBTC',\n        //         priceChange: '0.00068700',\n        //         priceChangePercent: '2.075',\n        //         weightedAvgPrice: '0.03342681',\n        //         prevClosePrice: '0.03310300',\n        //         lastPrice: '0.03378900',\n        //         lastQty: '0.07700000',\n        //         bidPrice: '0.03378900',\n        //         bidQty: '7.16800000',\n        //         askPrice: '0.03379000',\n        //         askQty: '24.00000000',\n        //         openPrice: '0.03310200',\n        //         highPrice: '0.03388900',\n        //         lowPrice: '0.03306900',\n        //         volume: '205478.41000000',\n        //         quoteVolume: '6868.48826294',\n        //         openTime: 1601469986932,\n        //         closeTime: 1601556386932,\n        //         firstId: 196098772,\n        //         lastId: 196186315,\n        //         count: 87544\n        //     }\n        //\n        // coinm\n        //     {\n        //         baseVolume: '214549.95171161',\n        //         closeTime: '1621965286847',\n        //         count: '1283779',\n        //         firstId: '152560106',\n        //         highPrice: '39938.3',\n        //         lastId: '153843955',\n        //         lastPrice: '37993.4',\n        //         lastQty: '1',\n        //         lowPrice: '36457.2',\n        //         openPrice: '37783.4',\n        //         openTime: '1621878840000',\n        //         pair: 'BTCUSD',\n        //         priceChange: '210.0',\n        //         priceChangePercent: '0.556',\n        //         symbol: 'BTCUSD_PERP',\n        //         volume: '81990451',\n        //         weightedAvgPrice: '38215.08713747'\n        //     }\n        //\n        const timestamp = this.safeInteger (ticker, 'closeTime');\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const last = this.safeNumber (ticker, 'lastPrice');\n        const isCoinm = ('baseVolume' in ticker);\n        let baseVolume = undefined;\n        let quoteVolume = undefined;\n        if (isCoinm) {\n            baseVolume = this.safeNumber (ticker, 'baseVolume');\n            quoteVolume = this.safeNumber (ticker, 'volume');\n        } else {\n            baseVolume = this.safeNumber (ticker, 'volume');\n            quoteVolume = this.safeNumber (ticker, 'quoteVolume');\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'highPrice'),\n            'low': this.safeNumber (ticker, 'lowPrice'),\n            'bid': this.safeNumber (ticker, 'bidPrice'),\n            'bidVolume': this.safeNumber (ticker, 'bidQty'),\n            'ask': this.safeNumber (ticker, 'askPrice'),\n            'askVolume': this.safeNumber (ticker, 'askQty'),\n            'vwap': this.safeNumber (ticker, 'weightedAvgPrice'),\n            'open': this.safeNumber (ticker, 'openPrice'),\n            'close': last,\n            'last': last,\n            'previousClose': this.safeNumber (ticker, 'prevClosePrice'), // previous day close\n            'change': this.safeNumber (ticker, 'priceChange'),\n            'percentage': this.safeNumber (ticker, 'priceChangePercent'),\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchStatus (params = {}) {\n        const response = await this.wapiGetSystemStatus (params);\n        let status = this.safeString (response, 'status');\n        if (status !== undefined) {\n            status = (status === '0') ? 'ok' : 'maintenance';\n            this.status = this.extend (this.status, {\n                'status': status,\n                'updated': this.milliseconds (),\n            });\n        }\n        return this.status;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        let method = 'publicGetTicker24hr';\n        if (market['linear']) {\n            method = 'fapiPublicGetTicker24hr';\n        } else if (market['inverse']) {\n            method = 'dapiPublicGetTicker24hr';\n        }\n        const response = await this[method] (this.extend (request, params));\n        if (Array.isArray (response)) {\n            const firstTicker = this.safeValue (response, 0, {});\n            return this.parseTicker (firstTicker, market);\n        }\n        return this.parseTicker (response, market);\n    }\n\n    async fetchBidsAsks (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString2 (this.options, 'fetchBidsAsks', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        let method = undefined;\n        if (type === 'future') {\n            method = 'fapiPublicGetTickerBookTicker';\n        } else if (type === 'delivery') {\n            method = 'dapiPublicGetTickerBookTicker';\n        } else {\n            method = 'publicGetTickerBookTicker';\n        }\n        const response = await this[method] (query);\n        return this.parseTickers (response, symbols);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString2 (this.options, 'fetchTickers', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        let defaultMethod = undefined;\n        if (type === 'future') {\n            defaultMethod = 'fapiPublicGetTicker24hr';\n        } else if (type === 'delivery') {\n            defaultMethod = 'dapiPublicGetTicker24hr';\n        } else {\n            defaultMethod = 'publicGetTicker24hr';\n        }\n        const method = this.safeString (this.options, 'fetchTickersMethod', defaultMethod);\n        const response = await this[method] (query);\n        return this.parseTickers (response, symbols);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1591478520000,\n        //         \"0.02501300\",\n        //         \"0.02501800\",\n        //         \"0.02500000\",\n        //         \"0.02500000\",\n        //         \"22.19000000\",\n        //         1591478579999,\n        //         \"0.55490906\",\n        //         40,\n        //         \"10.92900000\",\n        //         \"0.27336462\",\n        //         \"0\"\n        //     ]\n        //\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeNumber (ohlcv, 1),\n            this.safeNumber (ohlcv, 2),\n            this.safeNumber (ohlcv, 3),\n            this.safeNumber (ohlcv, 4),\n            this.safeNumber (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // binance docs say that the default limit 500, max 1500 for futures, max 1000 for spot markets\n        // the reality is that the time range wider than 500 candles won't work right\n        const defaultLimit = 500;\n        const maxLimit = 1500;\n        limit = (limit === undefined) ? defaultLimit : Math.min (limit, maxLimit);\n        const request = {\n            'symbol': market['id'],\n            'interval': this.timeframes[timeframe],\n            'limit': limit,\n        };\n        const duration = this.parseTimeframe (timeframe);\n        if (since !== undefined) {\n            request['startTime'] = since;\n            if (since > 0) {\n                const endTime = this.sum (since, limit * duration * 1000 - 1);\n                const now = this.milliseconds ();\n                request['endTime'] = Math.min (now, endTime);\n            }\n        }\n        let method = 'publicGetKlines';\n        if (market['linear']) {\n            method = 'fapiPublicGetKlines';\n        } else if (market['inverse']) {\n            method = 'dapiPublicGetKlines';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     [\n        //         [1591478520000,\"0.02501300\",\"0.02501800\",\"0.02500000\",\"0.02500000\",\"22.19000000\",1591478579999,\"0.55490906\",40,\"10.92900000\",\"0.27336462\",\"0\"],\n        //         [1591478580000,\"0.02499600\",\"0.02500900\",\"0.02499400\",\"0.02500300\",\"21.34700000\",1591478639999,\"0.53370468\",24,\"7.53800000\",\"0.18850725\",\"0\"],\n        //         [1591478640000,\"0.02500800\",\"0.02501100\",\"0.02500300\",\"0.02500800\",\"154.14200000\",1591478699999,\"3.85405839\",97,\"5.32300000\",\"0.13312641\",\"0\"],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        if ('isDustTrade' in trade) {\n            return this.parseDustTrade (trade, market);\n        }\n        //\n        // aggregate trades\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list\n        //\n        //     {\n        //         \"a\": 26129,         // Aggregate tradeId\n        //         \"p\": \"0.01633102\",  // Price\n        //         \"q\": \"4.70443515\",  // Quantity\n        //         \"f\": 27781,         // First tradeId\n        //         \"l\": 27781,         // Last tradeId\n        //         \"T\": 1498793709153, // Timestamp\n        //         \"m\": true,          // Was the buyer the maker?\n        //         \"M\": true           // Was the trade the best price match?\n        //     }\n        //\n        // recent public trades and old public trades\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#recent-trades-list\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#old-trade-lookup-market_data\n        //\n        //     {\n        //         \"id\": 28457,\n        //         \"price\": \"4.00000100\",\n        //         \"qty\": \"12.00000000\",\n        //         \"time\": 1499865549590,\n        //         \"isBuyerMaker\": true,\n        //         \"isBestMatch\": true\n        //     }\n        //\n        // private trades\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-trade-list-user_data\n        //\n        //     {\n        //         \"symbol\": \"BNBBTC\",\n        //         \"id\": 28457,\n        //         \"orderId\": 100234,\n        //         \"price\": \"4.00000100\",\n        //         \"qty\": \"12.00000000\",\n        //         \"commission\": \"10.10000000\",\n        //         \"commissionAsset\": \"BNB\",\n        //         \"time\": 1499865549590,\n        //         \"isBuyer\": true,\n        //         \"isMaker\": false,\n        //         \"isBestMatch\": true\n        //     }\n        //\n        // futures trades\n        // https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data\n        //\n        //     {\n        //       \"accountId\": 20,\n        //       \"buyer\": False,\n        //       \"commission\": \"-0.07819010\",\n        //       \"commissionAsset\": \"USDT\",\n        //       \"counterPartyId\": 653,\n        //       \"id\": 698759,\n        //       \"maker\": False,\n        //       \"orderId\": 25851813,\n        //       \"price\": \"7819.01\",\n        //       \"qty\": \"0.002\",\n        //       \"quoteQty\": \"0.01563\",\n        //       \"realizedPnl\": \"-0.91539999\",\n        //       \"side\": \"SELL\",\n        //       \"symbol\": \"BTCUSDT\",\n        //       \"time\": 1569514978020\n        //     }\n        //     {\n        //       \"symbol\": \"BTCUSDT\",\n        //       \"id\": 477128891,\n        //       \"orderId\": 13809777875,\n        //       \"side\": \"SELL\",\n        //       \"price\": \"38479.55\",\n        //       \"qty\": \"0.001\",\n        //       \"realizedPnl\": \"-0.00009534\",\n        //       \"marginAsset\": \"USDT\",\n        //       \"quoteQty\": \"38.47955\",\n        //       \"commission\": \"-0.00076959\",\n        //       \"commissionAsset\": \"USDT\",\n        //       \"time\": 1612733566708,\n        //       \"positionSide\": \"BOTH\",\n        //       \"maker\": true,\n        //       \"buyer\": false\n        //     }\n        //\n        const timestamp = this.safeInteger2 (trade, 'T', 'time');\n        const priceString = this.safeString2 (trade, 'p', 'price');\n        const amountString = this.safeString2 (trade, 'q', 'qty');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        let id = this.safeString2 (trade, 't', 'a');\n        id = this.safeString (trade, 'id', id);\n        let side = undefined;\n        const orderId = this.safeString (trade, 'orderId');\n        if ('m' in trade) {\n            side = trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally\n        } else if ('isBuyerMaker' in trade) {\n            side = trade['isBuyerMaker'] ? 'sell' : 'buy';\n        } else if ('side' in trade) {\n            side = this.safeStringLower (trade, 'side');\n        } else {\n            if ('isBuyer' in trade) {\n                side = trade['isBuyer'] ? 'buy' : 'sell'; // this is a true side\n            }\n        }\n        let fee = undefined;\n        if ('commission' in trade) {\n            fee = {\n                'cost': this.safeNumber (trade, 'commission'),\n                'currency': this.safeCurrencyCode (this.safeString (trade, 'commissionAsset')),\n            };\n        }\n        let takerOrMaker = undefined;\n        if ('isMaker' in trade) {\n            takerOrMaker = trade['isMaker'] ? 'maker' : 'taker';\n        }\n        if ('maker' in trade) {\n            takerOrMaker = trade['maker'] ? 'maker' : 'taker';\n        }\n        const marketId = this.safeString (trade, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.\n            // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.\n            // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.\n            // 'limit': 500,     // default = 500, maximum = 1000\n        };\n        const defaultType = this.safeString2 (this.options, 'fetchTrades', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        let defaultMethod = undefined;\n        if (type === 'future') {\n            defaultMethod = 'fapiPublicGetAggTrades';\n        } else if (type === 'delivery') {\n            defaultMethod = 'dapiPublicGetAggTrades';\n        } else {\n            defaultMethod = 'publicGetAggTrades';\n        }\n        let method = this.safeString (this.options, 'fetchTradesMethod', defaultMethod);\n        if (method === 'publicGetAggTrades') {\n            if (since !== undefined) {\n                request['startTime'] = since;\n                // https://github.com/ccxt/ccxt/issues/6400\n                // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list\n                request['endTime'] = this.sum (since, 3600000);\n            }\n            if (type === 'future') {\n                method = 'fapiPublicGetAggTrades';\n            } else if (type === 'delivery') {\n                method = 'dapiPublicGetAggTrades';\n            }\n        } else if (method === 'publicGetHistoricalTrades') {\n            if (type === 'future') {\n                method = 'fapiPublicGetHistoricalTrades';\n            } else if (type === 'delivery') {\n                method = 'dapiPublicGetHistoricalTrades';\n            }\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default = 500, maximum = 1000\n        }\n        //\n        // Caveats:\n        // - default limit (500) applies only if no other parameters set, trades up\n        //   to the maximum limit may be returned to satisfy other parameters\n        // - if both limit and time window is set and time window contains more\n        //   trades than the limit then the last trades from the window are returned\n        // - 'tradeId' accepted and returned by this method is \"aggregate\" trade id\n        //   which is different from actual trade id\n        // - setting both fromId and time window results in error\n        const response = await this[method] (this.extend (request, query));\n        //\n        // aggregate trades\n        //\n        //     [\n        //         {\n        //             \"a\": 26129,         // Aggregate tradeId\n        //             \"p\": \"0.01633102\",  // Price\n        //             \"q\": \"4.70443515\",  // Quantity\n        //             \"f\": 27781,         // First tradeId\n        //             \"l\": 27781,         // Last tradeId\n        //             \"T\": 1498793709153, // Timestamp\n        //             \"m\": true,          // Was the buyer the maker?\n        //             \"M\": true           // Was the trade the best price match?\n        //         }\n        //     ]\n        //\n        // recent public trades and historical public trades\n        //\n        //     [\n        //         {\n        //             \"id\": 28457,\n        //             \"price\": \"4.00000100\",\n        //             \"qty\": \"12.00000000\",\n        //             \"time\": 1499865549590,\n        //             \"isBuyerMaker\": true,\n        //             \"isBestMatch\": true\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'NEW': 'open',\n            'PARTIALLY_FILLED': 'open',\n            'FILLED': 'closed',\n            'CANCELED': 'canceled',\n            'PENDING_CANCEL': 'canceling', // currently unused\n            'REJECTED': 'rejected',\n            'EXPIRED': 'expired',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // spot\n        //\n        //     {\n        //         \"symbol\": \"LTCBTC\",\n        //         \"orderId\": 1,\n        //         \"clientOrderId\": \"myOrder1\",\n        //         \"price\": \"0.1\",\n        //         \"origQty\": \"1.0\",\n        //         \"executedQty\": \"0.0\",\n        //         \"cummulativeQuoteQty\": \"0.0\",\n        //         \"status\": \"NEW\",\n        //         \"timeInForce\": \"GTC\",\n        //         \"type\": \"LIMIT\",\n        //         \"side\": \"BUY\",\n        //         \"stopPrice\": \"0.0\",\n        //         \"icebergQty\": \"0.0\",\n        //         \"time\": 1499827319559,\n        //         \"updateTime\": 1499827319559,\n        //         \"isWorking\": true\n        //     }\n        //\n        // futures\n        //\n        //     {\n        //         \"symbol\": \"BTCUSDT\",\n        //         \"orderId\": 1,\n        //         \"clientOrderId\": \"myOrder1\",\n        //         \"price\": \"0.1\",\n        //         \"origQty\": \"1.0\",\n        //         \"executedQty\": \"1.0\",\n        //         \"cumQuote\": \"10.0\",\n        //         \"status\": \"NEW\",\n        //         \"timeInForce\": \"GTC\",\n        //         \"type\": \"LIMIT\",\n        //         \"side\": \"BUY\",\n        //         \"stopPrice\": \"0.0\",\n        //         \"updateTime\": 1499827319559\n        //     }\n        //\n        // createOrder with { \"newOrderRespType\": \"FULL\" }\n        //\n        //     {\n        //       \"symbol\": \"BTCUSDT\",\n        //       \"orderId\": 5403233939,\n        //       \"orderListId\": -1,\n        //       \"clientOrderId\": \"x-R4BD3S825e669e75b6c14f69a2c43e\",\n        //       \"transactTime\": 1617151923742,\n        //       \"price\": \"0.00000000\",\n        //       \"origQty\": \"0.00050000\",\n        //       \"executedQty\": \"0.00050000\",\n        //       \"cummulativeQuoteQty\": \"29.47081500\",\n        //       \"status\": \"FILLED\",\n        //       \"timeInForce\": \"GTC\",\n        //       \"type\": \"MARKET\",\n        //       \"side\": \"BUY\",\n        //       \"fills\": [\n        //         {\n        //           \"price\": \"58941.63000000\",\n        //           \"qty\": \"0.00050000\",\n        //           \"commission\": \"0.00007050\",\n        //           \"commissionAsset\": \"BNB\",\n        //           \"tradeId\": 737466631\n        //         }\n        //       ]\n        //     }\n        //\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const filledString = this.safeString (order, 'executedQty', '0');\n        const filled = this.parseNumber (filledString);\n        const filledFloat = parseFloat (filledString);\n        let timestamp = undefined;\n        let lastTradeTimestamp = undefined;\n        if ('time' in order) {\n            timestamp = this.safeInteger (order, 'time');\n        } else if ('transactTime' in order) {\n            timestamp = this.safeInteger (order, 'transactTime');\n        } else if ('updateTime' in order) {\n            if (status === 'open') {\n                if (filledFloat > 0) {\n                    lastTradeTimestamp = this.safeInteger (order, 'updateTime');\n                } else {\n                    timestamp = this.safeInteger (order, 'updateTime');\n                }\n            }\n        }\n        const averageString = this.safeString (order, 'avgPrice');\n        const average = this.parseNumber (this.omitZero (averageString));\n        const priceString = this.safeString (order, 'price');\n        const price = this.parseNumber (this.omitZero (priceString));\n        const amount = this.safeNumber (order, 'origQty');\n        // - Spot/Margin market: cummulativeQuoteQty\n        // - Futures market: cumQuote.\n        //   Note this is not the actual cost, since Binance futures uses leverage to calculate margins.\n        const cost = this.safeNumber2 (order, 'cummulativeQuoteQty', 'cumQuote');\n        const id = this.safeString (order, 'orderId');\n        let type = this.safeStringLower (order, 'type');\n        if (type === 'limit_maker') {\n            type = 'limit';\n        }\n        const side = this.safeStringLower (order, 'side');\n        const fills = this.safeValue (order, 'fills', []);\n        const trades = this.parseTrades (fills, market);\n        const clientOrderId = this.safeString (order, 'clientOrderId');\n        const timeInForce = this.safeString (order, 'timeInForce');\n        const postOnly = (type === 'limit_maker') || (timeInForce === 'GTX');\n        const stopPriceString = this.safeString (order, 'stopPrice');\n        const stopPrice = this.parseNumber (this.omitZero (stopPriceString));\n        return this.safeOrder ({\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': undefined,\n            'status': status,\n            'fee': undefined,\n            'trades': trades,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString2 (this.options, 'createOrder', 'defaultType', 'spot');\n        const orderType = this.safeString (params, 'type', defaultType);\n        const clientOrderId = this.safeString2 (params, 'newClientOrderId', 'clientOrderId');\n        params = this.omit (params, [ 'type', 'newClientOrderId', 'clientOrderId' ]);\n        let method = 'privatePostOrder';\n        if (orderType === 'future') {\n            method = 'fapiPrivatePostOrder';\n        } else if (orderType === 'delivery') {\n            method = 'dapiPrivatePostOrder';\n        } else if (orderType === 'margin') {\n            method = 'sapiPostMarginOrder';\n        }\n        // the next 5 lines are added to support for testing orders\n        if (market['spot']) {\n            const test = this.safeValue (params, 'test', false);\n            if (test) {\n                method += 'Test';\n            }\n            params = this.omit (params, 'test');\n        }\n        const uppercaseType = type.toUpperCase ();\n        const validOrderTypes = this.safeValue (market['info'], 'orderTypes');\n        if (!this.inArray (uppercaseType, validOrderTypes)) {\n            throw new InvalidOrder (this.id + ' ' + type + ' is not a valid order type in market ' + symbol);\n        }\n        const request = {\n            'symbol': market['id'],\n            'type': uppercaseType,\n            'side': side.toUpperCase (),\n        };\n        if (clientOrderId === undefined) {\n            const broker = this.safeValue (this.options, 'broker');\n            if (broker) {\n                const brokerId = this.safeString (broker, orderType);\n                if (brokerId !== undefined) {\n                    request['newClientOrderId'] = brokerId + this.uuid22 ();\n                }\n            }\n        } else {\n            request['newClientOrderId'] = clientOrderId;\n        }\n        if ((orderType === 'spot') || (orderType === 'margin')) {\n            request['newOrderRespType'] = this.safeValue (this.options['newOrderRespType'], type, 'RESULT'); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills\n        } else {\n            // delivery and future\n            request['newOrderRespType'] = 'RESULT';  // \"ACK\", \"RESULT\", default \"ACK\"\n        }\n        // additional required fields depending on the order type\n        let timeInForceIsRequired = false;\n        let priceIsRequired = false;\n        let stopPriceIsRequired = false;\n        let quantityIsRequired = false;\n        //\n        // spot/margin\n        //\n        //     LIMIT                timeInForce, quantity, price\n        //     MARKET               quantity or quoteOrderQty\n        //     STOP_LOSS            quantity, stopPrice\n        //     STOP_LOSS_LIMIT      timeInForce, quantity, price, stopPrice\n        //     TAKE_PROFIT          quantity, stopPrice\n        //     TAKE_PROFIT_LIMIT    timeInForce, quantity, price, stopPrice\n        //     LIMIT_MAKER          quantity, price\n        //\n        // futures\n        //\n        //     LIMIT                timeInForce, quantity, price\n        //     MARKET               quantity\n        //     STOP/TAKE_PROFIT     quantity, price, stopPrice\n        //     STOP_MARKET          stopPrice\n        //     TAKE_PROFIT_MARKET   stopPrice\n        //     TRAILING_STOP_MARKET callbackRate\n        //\n        if (uppercaseType === 'MARKET') {\n            const quoteOrderQty = this.safeValue (this.options, 'quoteOrderQty', false);\n            if (quoteOrderQty) {\n                const quoteOrderQty = this.safeNumber (params, 'quoteOrderQty');\n                const precision = market['precision']['price'];\n                if (quoteOrderQty !== undefined) {\n                    request['quoteOrderQty'] = this.decimalToPrecision (quoteOrderQty, TRUNCATE, precision, this.precisionMode);\n                    params = this.omit (params, 'quoteOrderQty');\n                } else if (price !== undefined) {\n                    request['quoteOrderQty'] = this.decimalToPrecision (amount * price, TRUNCATE, precision, this.precisionMode);\n                } else {\n                    quantityIsRequired = true;\n                }\n            } else {\n                quantityIsRequired = true;\n            }\n        } else if (uppercaseType === 'LIMIT') {\n            priceIsRequired = true;\n            timeInForceIsRequired = true;\n            quantityIsRequired = true;\n        } else if ((uppercaseType === 'STOP_LOSS') || (uppercaseType === 'TAKE_PROFIT')) {\n            stopPriceIsRequired = true;\n            quantityIsRequired = true;\n            if (market['linear'] || market['inverse']) {\n                priceIsRequired = true;\n            }\n        } else if ((uppercaseType === 'STOP_LOSS_LIMIT') || (uppercaseType === 'TAKE_PROFIT_LIMIT')) {\n            quantityIsRequired = true;\n            stopPriceIsRequired = true;\n            priceIsRequired = true;\n            timeInForceIsRequired = true;\n        } else if (uppercaseType === 'LIMIT_MAKER') {\n            priceIsRequired = true;\n            quantityIsRequired = true;\n        } else if (uppercaseType === 'STOP') {\n            quantityIsRequired = true;\n            stopPriceIsRequired = true;\n            priceIsRequired = true;\n        } else if ((uppercaseType === 'STOP_MARKET') || (uppercaseType === 'TAKE_PROFIT_MARKET')) {\n            const closePosition = this.safeValue (params, 'closePosition');\n            if (closePosition === undefined) {\n                quantityIsRequired = true;\n            }\n            stopPriceIsRequired = true;\n        } else if (uppercaseType === 'TRAILING_STOP_MARKET') {\n            quantityIsRequired = true;\n            const callbackRate = this.safeNumber (params, 'callbackRate');\n            if (callbackRate === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder() requires a callbackRate extra param for a ' + type + ' order');\n            }\n        }\n        if (quantityIsRequired) {\n            request['quantity'] = this.amountToPrecision (symbol, amount);\n        }\n        if (priceIsRequired) {\n            if (price === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder() requires a price argument for a ' + type + ' order');\n            }\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        if (timeInForceIsRequired) {\n            request['timeInForce'] = this.options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n        }\n        if (stopPriceIsRequired) {\n            const stopPrice = this.safeNumber (params, 'stopPrice');\n            if (stopPrice === undefined) {\n                throw new InvalidOrder (this.id + ' createOrder() requires a stopPrice extra param for a ' + type + ' order');\n            } else {\n                params = this.omit (params, 'stopPrice');\n                request['stopPrice'] = this.priceToPrecision (symbol, stopPrice);\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString2 (this.options, 'fetchOrder', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        let method = 'privateGetOrder';\n        if (type === 'future') {\n            method = 'fapiPrivateGetOrder';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateGetOrder';\n        } else if (type === 'margin') {\n            method = 'sapiGetMarginOrder';\n        }\n        const request = {\n            'symbol': market['id'],\n        };\n        const clientOrderId = this.safeValue2 (params, 'origClientOrderId', 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            request['origClientOrderId'] = clientOrderId;\n        } else {\n            request['orderId'] = id;\n        }\n        const query = this.omit (params, [ 'type', 'clientOrderId', 'origClientOrderId' ]);\n        const response = await this[method] (this.extend (request, query));\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString2 (this.options, 'fetchOrders', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        let method = 'privateGetAllOrders';\n        if (type === 'future') {\n            method = 'fapiPrivateGetAllOrders';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateGetAllOrders';\n        } else if (type === 'margin') {\n            method = 'sapiGetMarginAllOrders';\n        }\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const query = this.omit (params, 'type');\n        const response = await this[method] (this.extend (request, query));\n        //\n        //  spot\n        //\n        //     [\n        //         {\n        //             \"symbol\": \"LTCBTC\",\n        //             \"orderId\": 1,\n        //             \"clientOrderId\": \"myOrder1\",\n        //             \"price\": \"0.1\",\n        //             \"origQty\": \"1.0\",\n        //             \"executedQty\": \"0.0\",\n        //             \"cummulativeQuoteQty\": \"0.0\",\n        //             \"status\": \"NEW\",\n        //             \"timeInForce\": \"GTC\",\n        //             \"type\": \"LIMIT\",\n        //             \"side\": \"BUY\",\n        //             \"stopPrice\": \"0.0\",\n        //             \"icebergQty\": \"0.0\",\n        //             \"time\": 1499827319559,\n        //             \"updateTime\": 1499827319559,\n        //             \"isWorking\": true\n        //         }\n        //     ]\n        //\n        //  futures\n        //\n        //     [\n        //         {\n        //             \"symbol\": \"BTCUSDT\",\n        //             \"orderId\": 1,\n        //             \"clientOrderId\": \"myOrder1\",\n        //             \"price\": \"0.1\",\n        //             \"origQty\": \"1.0\",\n        //             \"executedQty\": \"1.0\",\n        //             \"cumQuote\": \"10.0\",\n        //             \"status\": \"NEW\",\n        //             \"timeInForce\": \"GTC\",\n        //             \"type\": \"LIMIT\",\n        //             \"side\": \"BUY\",\n        //             \"stopPrice\": \"0.0\",\n        //             \"updateTime\": 1499827319559\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let query = undefined;\n        let type = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            const defaultType = this.safeString2 (this.options, 'fetchOpenOrders', 'defaultType', 'spot');\n            type = this.safeString (params, 'type', defaultType);\n            query = this.omit (params, 'type');\n        } else if (this.options['warnOnFetchOpenOrdersWithoutSymbol']) {\n            const symbols = this.symbols;\n            const numSymbols = symbols.length;\n            const fetchOpenOrdersRateLimit = parseInt (numSymbols / 2);\n            throw new ExchangeError (this.id + ' fetchOpenOrders WARNING: fetching open orders without specifying a symbol is rate-limited to one call per ' + fetchOpenOrdersRateLimit.toString () + ' seconds. Do not call this method frequently to avoid ban. Set ' + this.id + '.options[\"warnOnFetchOpenOrdersWithoutSymbol\"] = false to suppress this warning message.');\n        } else {\n            const defaultType = this.safeString2 (this.options, 'fetchOpenOrders', 'defaultType', 'spot');\n            type = this.safeString (params, 'type', defaultType);\n            query = this.omit (params, 'type');\n        }\n        let method = 'privateGetOpenOrders';\n        if (type === 'future') {\n            method = 'fapiPrivateGetOpenOrders';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateGetOpenOrders';\n        } else if (type === 'margin') {\n            method = 'sapiGetMarginOpenOrders';\n        }\n        const response = await this[method] (this.extend (request, query));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const orders = await this.fetchOrders (symbol, since, limit, params);\n        return this.filterBy (orders, 'status', 'closed');\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString2 (this.options, 'fetchOpenOrders', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        // https://github.com/ccxt/ccxt/issues/6507\n        const origClientOrderId = this.safeValue2 (params, 'origClientOrderId', 'clientOrderId');\n        const request = {\n            'symbol': market['id'],\n            // 'orderId': id,\n            // 'origClientOrderId': id,\n        };\n        if (origClientOrderId === undefined) {\n            request['orderId'] = id;\n        } else {\n            request['origClientOrderId'] = origClientOrderId;\n        }\n        let method = 'privateDeleteOrder';\n        if (type === 'future') {\n            method = 'fapiPrivateDeleteOrder';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateDeleteOrder';\n        } else if (type === 'margin') {\n            method = 'sapiDeleteMarginOrder';\n        }\n        const query = this.omit (params, [ 'type', 'origClientOrderId', 'clientOrderId' ]);\n        const response = await this[method] (this.extend (request, query));\n        return this.parseOrder (response);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelAllOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const defaultType = this.safeString2 (this.options, 'cancelAllOrders', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        let method = 'privateDeleteOpenOrders';\n        if (type === 'margin') {\n            method = 'sapiDeleteMarginOpenOrders';\n        } else if (type === 'future') {\n            method = 'fapiPrivateDeleteAllOpenOrders';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateDeleteAllOpenOrders';\n        }\n        const response = await this[method] (this.extend (request, query));\n        if (Array.isArray (response)) {\n            return this.parseOrders (response, market);\n        } else {\n            return response;\n        }\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const defaultType = this.safeString2 (this.options, 'fetchMyTrades', 'defaultType', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        let method = undefined;\n        if (type === 'spot') {\n            method = 'privateGetMyTrades';\n        } else if (type === 'margin') {\n            method = 'sapiGetMarginMyTrades';\n        } else if (type === 'future') {\n            method = 'fapiPrivateGetUserTrades';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateGetUserTrades';\n        }\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot trade\n        //\n        //     [\n        //         {\n        //             \"symbol\": \"BNBBTC\",\n        //             \"id\": 28457,\n        //             \"orderId\": 100234,\n        //             \"price\": \"4.00000100\",\n        //             \"qty\": \"12.00000000\",\n        //             \"commission\": \"10.10000000\",\n        //             \"commissionAsset\": \"BNB\",\n        //             \"time\": 1499865549590,\n        //             \"isBuyer\": true,\n        //             \"isMaker\": false,\n        //             \"isBestMatch\": true,\n        //         }\n        //     ]\n        //\n        // futures trade\n        //\n        //     [\n        //         {\n        //             \"accountId\": 20,\n        //             \"buyer\": False,\n        //             \"commission\": \"-0.07819010\",\n        //             \"commissionAsset\": \"USDT\",\n        //             \"counterPartyId\": 653,\n        //             \"id\": 698759,\n        //             \"maker\": False,\n        //             \"orderId\": 25851813,\n        //             \"price\": \"7819.01\",\n        //             \"qty\": \"0.002\",\n        //             \"quoteQty\": \"0.01563\",\n        //             \"realizedPnl\": \"-0.91539999\",\n        //             \"side\": \"SELL\",\n        //             \"symbol\": \"BTCUSDT\",\n        //             \"time\": 1569514978020\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchMyDustTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        //\n        // Binance provides an opportunity to trade insignificant (i.e. non-tradable and non-withdrawable)\n        // token leftovers (of any asset) into `BNB` coin which in turn can be used to pay trading fees with it.\n        // The corresponding trades history is called the `Dust Log` and can be requested via the following end-point:\n        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/wapi-api.md#dustlog-user_data\n        //\n        await this.loadMarkets ();\n        const response = await this.wapiGetUserAssetDribbletLog (params);\n        // { success:    true,\n        //   results: { total:    1,\n        //               rows: [ {     transfered_total: \"1.06468458\",\n        //                         service_charge_total: \"0.02172826\",\n        //                                      tran_id: 2701371634,\n        //                                         logs: [ {              tranId:  2701371634,\n        //                                                   serviceChargeAmount: \"0.00012819\",\n        //                                                                   uid: \"35103861\",\n        //                                                                amount: \"0.8012\",\n        //                                                           operateTime: \"2018-10-07 17:56:07\",\n        //                                                      transferedAmount: \"0.00628141\",\n        //                                                             fromAsset: \"ADA\"                  } ],\n        //                                 operate_time: \"2018-10-07 17:56:06\"                                } ] } }\n        const results = this.safeValue (response, 'results', {});\n        const rows = this.safeValue (results, 'rows', []);\n        const data = [];\n        for (let i = 0; i < rows.length; i++) {\n            const logs = rows[i]['logs'];\n            for (let j = 0; j < logs.length; j++) {\n                logs[j]['isDustTrade'] = true;\n                data.push (logs[j]);\n            }\n        }\n        const trades = this.parseTrades (data, undefined, since, limit);\n        return this.filterBySinceLimit (trades, since, limit);\n    }\n\n    parseDustTrade (trade, market = undefined) {\n        // {              tranId:  2701371634,\n        //   serviceChargeAmount: \"0.00012819\",\n        //                   uid: \"35103861\",\n        //                amount: \"0.8012\",\n        //           operateTime: \"2018-10-07 17:56:07\",\n        //      transferedAmount: \"0.00628141\",\n        //             fromAsset: \"ADA\"                  },\n        const orderId = this.safeString (trade, 'tranId');\n        const timestamp = this.parse8601 (this.safeString (trade, 'operateTime'));\n        const tradedCurrency = this.safeCurrencyCode (this.safeString (trade, 'fromAsset'));\n        const earnedCurrency = this.currency ('BNB')['code'];\n        const applicantSymbol = earnedCurrency + '/' + tradedCurrency;\n        let tradedCurrencyIsQuote = false;\n        if (applicantSymbol in this.markets) {\n            tradedCurrencyIsQuote = true;\n        }\n        //\n        // Warning\n        // Binance dust trade `fee` is already excluded from the `BNB` earning reported in the `Dust Log`.\n        // So the parser should either set the `fee.cost` to `0` or add it on top of the earned\n        // BNB `amount` (or `cost` depending on the trade `side`). The second of the above options\n        // is much more illustrative and therefore preferable.\n        //\n        const fee = {\n            'currency': earnedCurrency,\n            'cost': this.safeNumber (trade, 'serviceChargeAmount'),\n        };\n        let symbol = undefined;\n        let amount = undefined;\n        let cost = undefined;\n        let side = undefined;\n        if (tradedCurrencyIsQuote) {\n            symbol = applicantSymbol;\n            amount = this.sum (this.safeNumber (trade, 'transferedAmount'), fee['cost']);\n            cost = this.safeNumber (trade, 'amount');\n            side = 'buy';\n        } else {\n            symbol = tradedCurrency + '/' + earnedCurrency;\n            amount = this.safeNumber (trade, 'amount');\n            cost = this.sum (this.safeNumber (trade, 'transferedAmount'), fee['cost']);\n            side = 'sell';\n        }\n        let price = undefined;\n        if (cost !== undefined) {\n            if (amount) {\n                price = cost / amount;\n            }\n        }\n        const id = undefined;\n        const type = undefined;\n        const takerOrMaker = undefined;\n        return {\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': type,\n            'takerOrMaker': takerOrMaker,\n            'side': side,\n            'amount': amount,\n            'price': price,\n            'cost': cost,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['coin'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n            // max 3 months range https://github.com/ccxt/ccxt/issues/6495\n            request['endTime'] = this.sum (since, 7776000000);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.sapiGetCapitalDepositHisrec (this.extend (request, params));\n        //     [\n        //       {\n        //         \"amount\": \"0.01844487\",\n        //         \"coin\": \"BCH\",\n        //         \"network\": \"BCH\",\n        //         \"status\": 1,\n        //         \"address\": \"1NYxAJhW2281HK1KtJeaENBqHeygA88FzR\",\n        //         \"addressTag\": \"\",\n        //         \"txId\": \"bafc5902504d6504a00b7d0306a41154cbf1d1b767ab70f3bc226327362588af\",\n        //         \"insertTime\": 1610784980000,\n        //         \"transferType\": 0,\n        //         \"confirmTimes\": \"2/2\"\n        //       },\n        //       {\n        //         \"amount\": \"4500\",\n        //         \"coin\": \"USDT\",\n        //         \"network\": \"BSC\",\n        //         \"status\": 1,\n        //         \"address\": \"0xc9c923c87347ca0f3451d6d308ce84f691b9f501\",\n        //         \"addressTag\": \"\",\n        //         \"txId\": \"Internal transfer 51376627901\",\n        //         \"insertTime\": 1618394381000,\n        //         \"transferType\": 1,\n        //         \"confirmTimes\": \"1/15\"\n        //     }\n        //   ]\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['coin'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n            // max 3 months range https://github.com/ccxt/ccxt/issues/6495\n            request['endTime'] = this.sum (since, 7776000000);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.sapiGetCapitalWithdrawHistory (this.extend (request, params));\n        //     [\n        //       {\n        //         \"id\": \"69e53ad305124b96b43668ceab158a18\",\n        //         \"amount\": \"28.75\",\n        //         \"transactionFee\": \"0.25\",\n        //         \"coin\": \"XRP\",\n        //         \"status\": 6,\n        //         \"address\": \"r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza\",\n        //         \"addressTag\": \"101286922\",\n        //         \"txId\": \"19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A\",\n        //         \"applyTime\": \"2021-04-15 12:09:16\",\n        //         \"network\": \"XRP\",\n        //         \"transferType\": 0\n        //       },\n        //       {\n        //         \"id\": \"9a67628b16ba4988ae20d329333f16bc\",\n        //         \"amount\": \"20\",\n        //         \"transactionFee\": \"20\",\n        //         \"coin\": \"USDT\",\n        //         \"status\": 6,\n        //         \"address\": \"0x0AB991497116f7F5532a4c2f4f7B1784488628e1\",\n        //         \"txId\": \"0x77fbf2cf2c85b552f0fd31fd2e56dc95c08adae031d96f3717d8b17e1aea3e46\",\n        //         \"applyTime\": \"2021-04-15 12:06:53\",\n        //         \"network\": \"ETH\",\n        //         \"transferType\": 0\n        //       },\n        //       {\n        //         \"id\": \"a7cdc0afbfa44a48bd225c9ece958fe2\",\n        //         \"amount\": \"51\",\n        //         \"transactionFee\": \"1\",\n        //         \"coin\": \"USDT\",\n        //         \"status\": 6,\n        //         \"address\": \"TYDmtuWL8bsyjvcauUTerpfYyVhFtBjqyo\",\n        //         \"txId\": \"168a75112bce6ceb4823c66726ad47620ad332e69fe92d9cb8ceb76023f9a028\",\n        //         \"applyTime\": \"2021-04-13 12:46:59\",\n        //         \"network\": \"TRX\",\n        //         \"transferType\": 0\n        //       }\n        //     ]\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    parseTransactionStatusByType (status, type = undefined) {\n        const statusesByType = {\n            'deposit': {\n                '0': 'pending',\n                '1': 'ok',\n            },\n            'withdrawal': {\n                '0': 'pending', // Email Sent\n                '1': 'canceled', // Cancelled (different from 1 = ok in deposits)\n                '2': 'pending', // Awaiting Approval\n                '3': 'failed', // Rejected\n                '4': 'pending', // Processing\n                '5': 'failed', // Failure\n                '6': 'ok', // Completed\n            },\n        };\n        const statuses = this.safeValue (statusesByType, type, {});\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //       \"amount\": \"4500\",\n        //       \"coin\": \"USDT\",\n        //       \"network\": \"BSC\",\n        //       \"status\": 1,\n        //       \"address\": \"0xc9c923c87347ca0f3451d6d308ce84f691b9f501\",\n        //       \"addressTag\": \"\",\n        //       \"txId\": \"Internal transfer 51376627901\",\n        //       \"insertTime\": 1618394381000,\n        //       \"transferType\": 1,\n        //       \"confirmTimes\": \"1/15\"\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //       \"id\": \"69e53ad305124b96b43668ceab158a18\",\n        //       \"amount\": \"28.75\",\n        //       \"transactionFee\": \"0.25\",\n        //       \"coin\": \"XRP\",\n        //       \"status\": 6,\n        //       \"address\": \"r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza\",\n        //       \"addressTag\": \"101286922\",\n        //       \"txId\": \"19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A\",\n        //       \"applyTime\": \"2021-04-15 12:09:16\",\n        //       \"network\": \"XRP\",\n        //       \"transferType\": 0\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const address = this.safeString (transaction, 'address');\n        let tag = this.safeString (transaction, 'addressTag'); // set but unused\n        if (tag !== undefined) {\n            if (tag.length < 1) {\n                tag = undefined;\n            }\n        }\n        let txid = this.safeString (transaction, 'txId');\n        if ((txid !== undefined) && (txid.indexOf ('Internal transfer ') >= 0)) {\n            txid = txid.slice (18);\n        }\n        const currencyId = this.safeString (transaction, 'coin');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        let timestamp = undefined;\n        const insertTime = this.safeInteger (transaction, 'insertTime');\n        const applyTime = this.parse8601 (this.safeString (transaction, 'applyTime'));\n        let type = this.safeString (transaction, 'type');\n        if (type === undefined) {\n            if ((insertTime !== undefined) && (applyTime === undefined)) {\n                type = 'deposit';\n                timestamp = insertTime;\n            } else if ((insertTime === undefined) && (applyTime !== undefined)) {\n                type = 'withdrawal';\n                timestamp = applyTime;\n            }\n        }\n        const status = this.parseTransactionStatusByType (this.safeString (transaction, 'status'), type);\n        const amount = this.safeNumber (transaction, 'amount');\n        const feeCost = this.safeNumber (transaction, 'transactionFee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = { 'currency': code, 'cost': feeCost };\n        }\n        const updated = this.safeInteger (transaction, 'successTime');\n        let internal = this.safeInteger (transaction, 'transferType', false);\n        internal = internal ? true : false;\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'addressTo': address,\n            'addressFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'tagFrom': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'internal': internal,\n            'fee': fee,\n        };\n    }\n\n    parseTransferStatus (status) {\n        const statuses = {\n            'CONFIRMED': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransfer (transfer, currency = undefined) {\n        //\n        // transfer\n        //\n        //     {\n        //         \"tranId\":13526853623\n        //     }\n        //\n        // fetchTransfers\n        //\n        //     {\n        //         timestamp: 1614640878000,\n        //         asset: 'USDT',\n        //         amount: '25',\n        //         type: 'MAIN_UMFUTURE',\n        //         status: 'CONFIRMED',\n        //         tranId: 43000126248\n        //     }\n        //\n        const id = this.safeString (transfer, 'tranId');\n        const currencyId = this.safeString (transfer, 'asset');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const amount = this.safeNumber (transfer, 'amount');\n        const type = this.safeString (transfer, 'type');\n        let fromAccount = undefined;\n        let toAccount = undefined;\n        const typesByAccount = this.safeValue (this.options, 'typesByAccount', {});\n        if (type !== undefined) {\n            const parts = type.split ('_');\n            fromAccount = this.safeValue (parts, 0);\n            toAccount = this.safeValue (parts, 1);\n            fromAccount = this.safeString (typesByAccount, fromAccount, fromAccount);\n            toAccount = this.safeString (typesByAccount, toAccount, toAccount);\n        }\n        const timestamp = this.safeInteger (transfer, 'timestamp');\n        const status = this.parseTransferStatus (this.safeString (transfer, 'status'));\n        return {\n            'info': transfer,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'currency': code,\n            'amount': amount,\n            'fromAccount': fromAccount,\n            'toAccount': toAccount,\n            'status': status,\n        };\n    }\n\n    parseIncome (income, market = undefined) {\n        //\n        //     {\n        //       \"symbol\": \"ETHUSDT\",\n        //       \"incomeType\": \"FUNDING_FEE\",\n        //       \"income\": \"0.00134317\",\n        //       \"asset\": \"USDT\",\n        //       \"time\": \"1621584000000\",\n        //       \"info\": \"FUNDING_FEE\",\n        //       \"tranId\": \"4480321991774044580\",\n        //       \"tradeId\": \"\"\n        //     }\n        //\n        const marketId = this.safeString (income, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const amount = this.safeNumber (income, 'income');\n        const currencyId = this.safeString (income, 'asset');\n        const code = this.safeCurrencyCode (currencyId);\n        const id = this.safeString (income, 'tranId');\n        const timestamp = this.safeInteger (income, 'time');\n        return {\n            'info': income,\n            'symbol': symbol,\n            'code': code,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'id': id,\n            'amount': amount,\n        };\n    }\n\n    parseIncomes (incomes, market = undefined, since = undefined, limit = undefined) {\n        const result = [];\n        for (let i = 0; i < incomes.length; i++) {\n            const entry = incomes[i];\n            const parsed = this.parseIncome (entry, market);\n            result.push (parsed);\n        }\n        return this.filterBySinceLimit (result, since, limit, 'timestamp');\n    }\n\n    async transfer (code, amount, fromAccount, toAccount, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        let type = this.safeString (params, 'type');\n        if (type === undefined) {\n            const accountsByType = this.safeValue (this.options, 'accountsByType', {});\n            const fromId = this.safeString (accountsByType, fromAccount, fromAccount);\n            const toId = this.safeString (accountsByType, toAccount, toAccount);\n            if (fromId === undefined) {\n                const keys = Object.keys (accountsByType);\n                throw new ExchangeError (this.id + ' fromAccount must be one of ' + keys.join (', '));\n            }\n            if (toId === undefined) {\n                const keys = Object.keys (accountsByType);\n                throw new ExchangeError (this.id + ' toAccount must be one of ' + keys.join (', '));\n            }\n            type = fromId + '_' + toId;\n        }\n        const request = {\n            'asset': currency['id'],\n            'amount': this.currencyToPrecision (code, amount),\n            'type': type,\n        };\n        const response = await this.sapiPostAssetTransfer (this.extend (request, params));\n        //\n        //     {\n        //         \"tranId\":13526853623\n        //     }\n        //\n        const transfer = this.parseTransfer (response, currency);\n        return this.extend (transfer, {\n            'amount': amount,\n            'currency': code,\n            'fromAccount': fromAccount,\n            'toAccount': toAccount,\n        });\n    }\n\n    async fetchTransfers (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const defaultType = this.safeString2 (this.options, 'fetchTransfers', 'defaultType', 'spot');\n        const fromAccount = this.safeString (params, 'fromAccount', defaultType);\n        const defaultTo = (fromAccount === 'future') ? 'spot' : 'future';\n        const toAccount = this.safeString (params, 'toAccount', defaultTo);\n        let type = this.safeString (params, 'type');\n        const accountsByType = this.safeValue (this.options, 'accountsByType', {});\n        const fromId = this.safeString (accountsByType, fromAccount);\n        const toId = this.safeString (accountsByType, toAccount);\n        if (type === undefined) {\n            if (fromId === undefined) {\n                const keys = Object.keys (accountsByType);\n                throw new ExchangeError (this.id + ' fromAccount parameter must be one of ' + keys.join (', '));\n            }\n            if (toId === undefined) {\n                const keys = Object.keys (accountsByType);\n                throw new ExchangeError (this.id + ' toAccount parameter must be one of ' + keys.join (', '));\n            }\n            type = fromId + '_' + toId;\n        }\n        const request = {\n            'type': type,\n        };\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['size'] = limit;\n        }\n        const response = await this.sapiGetAssetTransfer (this.extend (request, params));\n        //\n        //     {\n        //         total: 3,\n        //         rows: [\n        //             {\n        //                 timestamp: 1614640878000,\n        //                 asset: 'USDT',\n        //                 amount: '25',\n        //                 type: 'MAIN_UMFUTURE',\n        //                 status: 'CONFIRMED',\n        //                 tranId: 43000126248\n        //             },\n        //         ]\n        //     }\n        //\n        const rows = this.safeValue (response, 'rows', []);\n        return this.parseTransfers (rows, currency, since, limit);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coin': currency['id'],\n            // 'network': 'ETH', // 'BSC', 'XMR', you can get network and isDefault in networkList in the response of sapiGetCapitalConfigDetail\n        };\n        // has support for the 'network' parameter\n        // https://binance-docs.github.io/apidocs/spot/en/#deposit-address-supporting-network-user_data\n        const response = await this.sapiGetCapitalDepositAddress (this.extend (request, params));\n        //\n        //     {\n        //         currency: 'XRP',\n        //         address: 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',\n        //         tag: '108618262',\n        //         info: {\n        //             coin: 'XRP',\n        //             address: 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',\n        //             tag: '108618262',\n        //             url: 'https://bithomp.com/explorer/rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh'\n        //         }\n        //     }\n        //\n        const address = this.safeString (response, 'address');\n        const tag = this.safeString (response, 'tag');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchFundingFees (codes = undefined, params = {}) {\n        const response = await this.sapiGetAssetAssetDetail (params);\n        //\n        //     {\n        //       \"VRAB\": {\n        //         \"withdrawFee\": \"100\",\n        //         \"minWithdrawAmount\": \"200\",\n        //         \"withdrawStatus\": true,\n        //         \"depositStatus\": true\n        //       },\n        //       \"NZD\": {\n        //         \"withdrawFee\": \"0\",\n        //         \"minWithdrawAmount\": \"0\",\n        //         \"withdrawStatus\": false,\n        //         \"depositStatus\": false\n        //       },\n        //       \"AKRO\": {\n        //         \"withdrawFee\": \"313\",\n        //         \"minWithdrawAmount\": \"626\",\n        //         \"withdrawStatus\": true,\n        //         \"depositStatus\": true\n        //       },\n        //     }\n        //\n        const ids = Object.keys (response);\n        const withdrawFees = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const code = this.safeCurrencyCode (id);\n            withdrawFees[code] = this.safeNumber (response[id], 'withdrawFee');\n        }\n        return {\n            'withdraw': withdrawFees,\n            'deposit': {},\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coin': currency['id'],\n            'address': address,\n            'amount': amount,\n            // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi\n            // issue sapiGetCapitalConfigGetall () to get networks for withdrawing USDT ERC20 vs USDT Omni\n            // 'network': 'ETH', // 'BTC', 'TRX', etc, optional\n        };\n        if (tag !== undefined) {\n            request['addressTag'] = tag;\n        }\n        const response = await this.sapiPostCapitalWithdrawApply (this.extend (request, params));\n        //     { id: '9a67628b16ba4988ae20d329333f16bc' }\n        return {\n            'info': response,\n            'id': this.safeString (response, 'id'),\n        };\n    }\n\n    parseTradingFee (fee, market = undefined) {\n        //\n        //     {\n        //         \"symbol\": \"ADABNB\",\n        //         \"makerCommission\": 0.001,\n        //         \"takerCommission\": 0.001\n        //     }\n        //\n        const marketId = this.safeString (fee, 'symbol');\n        const symbol = this.safeSymbol (marketId);\n        return {\n            'info': fee,\n            'symbol': symbol,\n            'maker': this.safeNumber (fee, 'makerCommission'),\n            'taker': this.safeNumber (fee, 'takerCommission'),\n        };\n    }\n\n    async fetchTradingFee (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.sapiGetAssetTradeFee (this.extend (request, params));\n        //\n        //     [\n        //       {\n        //         \"symbol\": \"BTCUSDT\",\n        //         \"makerCommission\": \"0.001\",\n        //         \"takerCommission\": \"0.001\"\n        //       }\n        //     ]\n        //\n        const first = this.safeValue (response, 0, {});\n        return this.parseTradingFee (first);\n    }\n\n    async fetchTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.sapiGetAssetTradeFee (params);\n        //\n        //    [\n        //       {\n        //         \"symbol\": \"ZRXBNB\",\n        //         \"makerCommission\": \"0.001\",\n        //         \"takerCommission\": \"0.001\"\n        //       },\n        //       {\n        //         \"symbol\": \"ZRXBTC\",\n        //         \"makerCommission\": \"0.001\",\n        //         \"takerCommission\": \"0.001\"\n        //       },\n        //    ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const fee = this.parseTradingFee (response[i]);\n            const symbol = fee['symbol'];\n            result[symbol] = fee;\n        }\n        return result;\n    }\n\n    async futuresTransfer (code, amount, type, params = {}) {\n        if ((type < 1) || (type > 4)) {\n            throw new ArgumentsRequired (this.id + ' type must be between 1 and 4');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'asset': currency['id'],\n            'amount': amount,\n            'type': type,\n        };\n        const response = await this.sapiPostFuturesTransfer (this.extend (request, params));\n        //\n        //   {\n        //       \"tranId\": 100000001\n        //   }\n        //\n        return this.parseTransfer (response, currency);\n    }\n\n    async fetchFundingRate (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        let method = undefined;\n        if (market['linear']) {\n            method = 'fapiPublicGetPremiumIndex';\n        } else if (market['inverse']) {\n            method = 'dapiPublicGetPremiumIndex';\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"symbol\": \"BTCUSDT\",\n        //         \"markPrice\": \"45802.81129892\",\n        //         \"indexPrice\": \"45745.47701915\",\n        //         \"estimatedSettlePrice\": \"45133.91753671\",\n        //         \"lastFundingRate\": \"0.00063521\",\n        //         \"interestRate\": \"0.00010000\",\n        //         \"nextFundingTime\": \"1621267200000\",\n        //         \"time\": \"1621252344001\"\n        //     }\n        //\n        return this.parseFundingRate (response);\n    }\n\n    async fetchFundingRates (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = undefined;\n        const defaultType = this.safeString2 (this.options, 'fetchFundingRates', 'defaultType', 'future');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        if (type === 'future') {\n            method = 'fapiPublicGetPremiumIndex';\n        } else if (type === 'delivery') {\n            method = 'dapiPublicGetPremiumIndex';\n        }\n        const response = await this[method] (query);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const entry = response[i];\n            const parsed = this.parseFundingRate (entry);\n            result.push (parsed);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    parseFundingRate (premiumIndex, market = undefined) {\n        // ensure it matches with https://www.binance.com/en/futures/funding-history/0\n        //\n        //   {\n        //     \"symbol\": \"BTCUSDT\",\n        //     \"markPrice\": \"45802.81129892\",\n        //     \"indexPrice\": \"45745.47701915\",\n        //     \"estimatedSettlePrice\": \"45133.91753671\",\n        //     \"lastFundingRate\": \"0.00063521\",\n        //     \"interestRate\": \"0.00010000\",\n        //     \"nextFundingTime\": \"1621267200000\",\n        //     \"time\": \"1621252344001\"\n        //  }\n        //\n        const timestamp = this.safeInteger (premiumIndex, 'time');\n        const marketId = this.safeString (premiumIndex, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const markPrice = this.safeNumber (premiumIndex, 'markPrice');\n        const indexPrice = this.safeNumber (premiumIndex, 'indexPrice');\n        const interestRate = this.safeNumber (premiumIndex, 'interestRate');\n        // current funding rate\n        const fundingRate = this.safeNumber (premiumIndex, 'lastFundingRate');\n        const nextFundingTime = this.safeInteger (premiumIndex, 'nextFundingTime');\n        return {\n            'info': premiumIndex,\n            'symbol': symbol,\n            'markPrice': markPrice,\n            'indexPrice': indexPrice,\n            'interestRate': interestRate,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fundingRate': fundingRate,\n            'nextFundingTimestamp': nextFundingTime,\n            'nextFundingDatetime': this.iso8601 (nextFundingTime),\n        };\n    }\n\n    parseAccountPositions (account) {\n        const positions = this.safeValue (account, 'positions');\n        const assets = this.safeValue (account, 'assets');\n        const balances = {};\n        for (let i = 0; i < assets.length; i++) {\n            const entry = assets[i];\n            const currencyId = this.safeString (entry, 'asset');\n            const code = this.safeCurrencyCode (currencyId);\n            const crossWalletBalance = this.safeString (entry, 'crossWalletBalance');\n            const crossUnPnl = this.safeString (entry, 'crossUnPnl');\n            balances[code] = {\n                'crossMargin': Precise.stringAdd (crossWalletBalance, crossUnPnl),\n                'crossWalletBalance': crossWalletBalance,\n            };\n        }\n        const result = [];\n        for (let i = 0; i < positions.length; i++) {\n            const position = positions[i];\n            const marketId = this.safeString (position, 'symbol');\n            const market = this.safeMarket (marketId);\n            const code = (this.options['defaultType'] === 'future') ? market['quote'] : market['base'];\n            const parsed = this.parsePosition (this.extend (position, {\n                'crossMargin': balances[code]['crossMargin'],\n                'crossWalletBalance': balances[code]['crossWalletBalance'],\n            }), market);\n            result.push (parsed);\n        }\n        return result;\n    }\n\n    parsePosition (position, market = undefined) {\n        //\n        // usdm\n        //    {\n        //       \"symbol\": \"BTCBUSD\",\n        //       \"initialMargin\": \"0\",\n        //       \"maintMargin\": \"0\",\n        //       \"unrealizedProfit\": \"0.00000000\",\n        //       \"positionInitialMargin\": \"0\",\n        //       \"openOrderInitialMargin\": \"0\",\n        //       \"leverage\": \"20\",\n        //       \"isolated\": false,\n        //       \"entryPrice\": \"0.0000\",\n        //       \"maxNotional\": \"100000\",\n        //       \"positionSide\": \"BOTH\",\n        //       \"positionAmt\": \"0.000\",\n        //       \"notional\": \"0\",\n        //       \"isolatedWallet\": \"0\",\n        //       \"updateTime\": \"0\",\n        //       \"crossMargin\": \"100.93634809\",\n        //     }\n        //\n        // coinm\n        //     {\n        //       \"symbol\": \"BTCUSD_210625\",\n        //       \"initialMargin\": \"0.00024393\",\n        //       \"maintMargin\": \"0.00002439\",\n        //       \"unrealizedProfit\": \"-0.00000163\",\n        //       \"positionInitialMargin\": \"0.00024393\",\n        //       \"openOrderInitialMargin\": \"0\",\n        //       \"leverage\": \"10\",\n        //       \"isolated\": false,\n        //       \"positionSide\": \"BOTH\",\n        //       \"entryPrice\": \"41021.20000069\",\n        //       \"maxQty\": \"100\",\n        //       \"notionalValue\": \"0.00243939\",\n        //       \"isolatedWallet\": \"0\",\n        //       \"crossMargin\": \"0.314\"\n        //       \"crossWalletBalance\": \"34\",\n        //     }\n        //\n        const marketId = this.safeString (position, 'symbol');\n        market = this.safeMarket (marketId, market);\n        const symbol = market['symbol'];\n        const leverageString = this.safeString (position, 'leverage');\n        const leverage = parseInt (leverageString);\n        const initialMarginString = this.safeString (position, 'initialMargin');\n        const initialMargin = this.parseNumber (initialMarginString);\n        let initialMarginPercentageString = Precise.stringDiv ('1', leverageString, 8);\n        const rational = (1000 % leverage) === 0;\n        if (!rational) {\n            initialMarginPercentageString = Precise.stringDiv (Precise.stringAdd (initialMarginPercentageString, '1e-8'), '1', 8);\n        }\n        const usdm = ('notional' in position);\n        const maintenanceMarginString = this.safeString (position, 'maintMargin');\n        const maintenanceMargin = this.parseNumber (maintenanceMarginString);\n        const entryPriceString = this.safeString (position, 'entryPrice');\n        let entryPrice = this.parseNumber (entryPriceString);\n        const notionalString = this.safeString2 (position, 'notional', 'notionalValue');\n        const notionalStringAbs = Precise.stringAbs (notionalString);\n        const notionalFloat = parseFloat (notionalString);\n        const notionalFloatAbs = parseFloat (notionalStringAbs);\n        const notional = this.parseNumber (Precise.stringAbs (notionalString));\n        let contractsString = this.safeString (position, 'positionAmt');\n        let contractsStringAbs = Precise.stringAbs (contractsString);\n        if (contractsString === undefined) {\n            const entryNotional = Precise.stringMul (Precise.stringMul (leverageString, initialMarginString), entryPriceString);\n            contractsString = Precise.stringDiv (entryNotional, market['contractSize']);\n            contractsStringAbs = Precise.stringDiv (Precise.stringAdd (contractsString, '0.5'), '1', 0);\n        }\n        const contracts = this.parseNumber (contractsStringAbs);\n        const leverageBracket = this.options['leverageBrackets'][symbol];\n        let maintenanceMarginPercentageString = undefined;\n        for (let i = 0; i < leverageBracket.length; i++) {\n            const bracket = leverageBracket[i];\n            if (notionalFloatAbs < bracket[0]) {\n                break;\n            }\n            maintenanceMarginPercentageString = bracket[1];\n        }\n        const maintenanceMarginPercentage = this.parseNumber (maintenanceMarginPercentageString);\n        const unrealizedPnlString = this.safeString (position, 'unrealizedProfit');\n        const unrealizedPnl = this.parseNumber (unrealizedPnlString);\n        let timestamp = this.safeInteger (position, 'updateTime');\n        if (timestamp === 0) {\n            timestamp = undefined;\n        }\n        const isolated = this.safeValue (position, 'isolated');\n        let marginType = undefined;\n        let collateralString = undefined;\n        let walletBalance = undefined;\n        if (isolated) {\n            marginType = 'isolated';\n            walletBalance = this.safeString (position, 'isolatedWallet');\n            collateralString = Precise.stringAdd (walletBalance, unrealizedPnlString);\n        } else {\n            marginType = 'cross';\n            walletBalance = this.safeString (position, 'crossWalletBalance');\n            collateralString = this.safeString (position, 'crossMargin');\n        }\n        const collateral = this.parseNumber (collateralString);\n        let marginRatio = undefined;\n        let side = undefined;\n        let percentage = undefined;\n        let liquidationPriceStringRaw = undefined;\n        let liquidationPrice = undefined;\n        if (notionalFloat === 0.0) {\n            entryPrice = undefined;\n        } else {\n            side = (notionalFloat < 0) ? 'short' : 'long';\n            marginRatio = this.parseNumber (Precise.stringDiv (maintenanceMarginString, collateralString, 4));\n            percentage = this.parseNumber (Precise.stringMul (Precise.stringDiv (unrealizedPnlString, initialMarginString, 4), '100'));\n            if (usdm) {\n                // calculate liquidation price\n                //\n                // liquidationPrice = (walletBalance / (contracts * (±1 + mmp))) (±entryPrice / (±1 + mmp))\n                //\n                // mmp = maintenanceMarginPercentage\n                // where ± is negative for long and positive for short\n                // TODO: calculate liquidation price for coinm contracts\n                let onePlusMaintenanceMarginPercentageString = undefined;\n                let entryPriceSignString = entryPriceString;\n                if (side === 'short') {\n                    onePlusMaintenanceMarginPercentageString = Precise.stringAdd ('1', maintenanceMarginPercentageString);\n                } else {\n                    onePlusMaintenanceMarginPercentageString = Precise.stringAdd ('-1', maintenanceMarginPercentageString);\n                    entryPriceSignString = Precise.stringMul ('-1', entryPriceSignString);\n                }\n                const leftSide = Precise.stringDiv (walletBalance, Precise.stringMul (contractsStringAbs, onePlusMaintenanceMarginPercentageString));\n                const rightSide = Precise.stringDiv (entryPriceSignString, onePlusMaintenanceMarginPercentageString);\n                liquidationPriceStringRaw = Precise.stringAdd (leftSide, rightSide);\n            } else {\n                // calculate liquidation price\n                //\n                // liquidationPrice = (contracts * contractSize(±1 - mmp)) / (±1/entryPrice * contracts * contractSize - walletBalance)\n                //\n                let onePlusMaintenanceMarginPercentageString = undefined;\n                let entryPriceSignString = entryPriceString;\n                if (side === 'short') {\n                    onePlusMaintenanceMarginPercentageString = Precise.stringSub ('1', maintenanceMarginPercentageString);\n                } else {\n                    onePlusMaintenanceMarginPercentageString = Precise.stringSub ('-1', maintenanceMarginPercentageString);\n                    entryPriceSignString = Precise.stringMul ('-1', entryPriceSignString);\n                }\n                const size = Precise.stringMul (contractsStringAbs, market['contractSize']);\n                const leftSide = Precise.stringMul (size, onePlusMaintenanceMarginPercentageString);\n                const rightSide = Precise.stringSub (Precise.stringMul (Precise.stringDiv ('1', entryPriceSignString), size), walletBalance);\n                liquidationPriceStringRaw = Precise.stringDiv (leftSide, rightSide);\n            }\n            const pricePrecision = market['precision']['price'];\n            const pricePrecisionPlusOne = pricePrecision + 1;\n            const pricePrecisionPlusOneString = pricePrecisionPlusOne.toString ();\n            // round half up\n            const rounder = new Precise ('5e-' + pricePrecisionPlusOneString);\n            const rounderString = rounder.toString ();\n            const liquidationPriceRoundedString = Precise.stringAdd (rounderString, liquidationPriceStringRaw);\n            let truncatedLiquidationPrice = Precise.stringDiv (liquidationPriceRoundedString, '1', pricePrecision);\n            if (truncatedLiquidationPrice[0] === '-') {\n                // user cannot be liquidated\n                // since he has more collateral than the size of the position\n                truncatedLiquidationPrice = undefined;\n            }\n            liquidationPrice = this.parseNumber (truncatedLiquidationPrice);\n        }\n        return {\n            'info': position,\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'initialMargin': initialMargin,\n            'initialMarginPercentage': this.parseNumber (initialMarginPercentageString),\n            'maintenanceMargin': maintenanceMargin,\n            'maintenanceMarginPercentage': maintenanceMarginPercentage,\n            'entryPrice': entryPrice,\n            'notional': notional,\n            'leverage': leverage,\n            'unrealizedPnl': unrealizedPnl,\n            'contracts': contracts,\n            'marginRatio': marginRatio,\n            'liquidationPrice': liquidationPrice,\n            'markPrice': undefined,\n            'collateral': collateral,\n            'marginType': marginType,\n            'side': side,\n            'percentage': percentage,\n        };\n    }\n\n    parsePositionRisk (position, market = undefined) {\n        //\n        // usdm\n        //     {\n        //       \"symbol\": \"BTCUSDT\",\n        //       \"positionAmt\": \"0.001\",\n        //       \"entryPrice\": \"43578.07000\",\n        //       \"markPrice\": \"43532.30000000\",\n        //       \"unRealizedProfit\": \"-0.04577000\",\n        //       \"liquidationPrice\": \"21841.24993976\",\n        //       \"leverage\": \"2\",\n        //       \"maxNotionalValue\": \"300000000\",\n        //       \"marginType\": \"isolated\",\n        //       \"isolatedMargin\": \"21.77841506\",\n        //       \"isAutoAddMargin\": \"false\",\n        //       \"positionSide\": \"BOTH\",\n        //       \"notional\": \"43.53230000\",\n        //       \"isolatedWallet\": \"21.82418506\",\n        //       \"updateTime\": \"1621358023886\"\n        //     }\n        //\n        // coinm\n        //     {\n        //       \"symbol\": \"BTCUSD_PERP\",\n        //       \"positionAmt\": \"2\",\n        //       \"entryPrice\": \"37643.10000021\",\n        //       \"markPrice\": \"38103.05510455\",\n        //       \"unRealizedProfit\": \"0.00006413\",\n        //       \"liquidationPrice\": \"25119.97445760\",\n        //       \"leverage\": \"2\",\n        //       \"maxQty\": \"1500\",\n        //       \"marginType\": \"isolated\",\n        //       \"isolatedMargin\": \"0.00274471\",\n        //       \"isAutoAddMargin\": \"false\",\n        //       \"positionSide\": \"BOTH\",\n        //       \"notionalValue\": \"0.00524892\",\n        //       \"isolatedWallet\": \"0.00268058\"\n        //     }\n        //\n        const marketId = this.safeString (position, 'symbol');\n        market = this.safeMarket (marketId, market);\n        const symbol = market['symbol'];\n        const leverageBracket = this.options['leverageBrackets'][symbol];\n        const notionalString = this.safeString2 (position, 'notional', 'notionalValue');\n        const notionalStringAbs = Precise.stringAbs (notionalString);\n        const notionalFloatAbs = parseFloat (notionalStringAbs);\n        const notionalFloat = parseFloat (notionalString);\n        let maintenanceMarginPercentageString = undefined;\n        for (let i = 0; i < leverageBracket.length; i++) {\n            const bracket = leverageBracket[i];\n            if (notionalFloatAbs < bracket[0]) {\n                break;\n            }\n            maintenanceMarginPercentageString = bracket[1];\n        }\n        const notional = this.parseNumber (notionalStringAbs);\n        const contractsAbs = Precise.stringAbs (this.safeString (position, 'positionAmt'));\n        const contracts = this.parseNumber (contractsAbs);\n        const unrealizedPnlString = this.safeString (position, 'unRealizedProfit');\n        const unrealizedPnl = this.parseNumber (unrealizedPnlString);\n        const leverageString = this.safeString (position, 'leverage');\n        const leverage = parseInt (leverageString);\n        let liquidationPrice = this.safeNumber (position, 'liquidationPrice');\n        const collateralString = this.safeString (position, 'isolatedMargin');\n        const collateralFloat = parseFloat (collateralString);\n        const collateral = this.parseNumber (collateralString);\n        const markPriceString = this.safeString (position, 'markPrice');\n        const markPriceFloat = parseFloat (markPriceString);\n        let markPrice = undefined;\n        if (markPriceFloat !== 0.0) {\n            markPrice = this.parseNumber (markPriceString);\n        }\n        const entryPrice = this.safeNumber (position, 'entryPrice');\n        const timestamp = this.safeInteger (position, 'updateTime');\n        const maintenanceMarginPercentage = this.parseNumber (maintenanceMarginPercentageString);\n        const maintenanceMarginString = Precise.stringMul (maintenanceMarginPercentageString, notionalStringAbs);\n        const maintenanceMargin = this.parseNumber (maintenanceMarginString);\n        let initialMarginPercentageString = Precise.stringDiv ('1', leverageString, 8);\n        const rational = (1000 % leverage) === 0;\n        if (!rational) {\n            initialMarginPercentageString = Precise.stringAdd (initialMarginPercentageString, '1e-8');\n        }\n        const initialMarginString = Precise.stringDiv (Precise.stringMul (notionalStringAbs, initialMarginPercentageString), '1', 8);\n        const initialMargin = this.parseNumber (initialMarginString);\n        let marginRatio = undefined;\n        let side = undefined;\n        let percentage = undefined;\n        if (collateralFloat === 0.0) {\n            liquidationPrice = undefined;\n        } else {\n            marginRatio = this.parseNumber (Precise.stringDiv (maintenanceMarginString, collateralString, 4));\n            side = (notionalFloat < 0) ? 'short' : 'long';\n            percentage = this.parseNumber (Precise.stringMul (Precise.stringDiv (unrealizedPnlString, initialMarginString, 4), '100'));\n        }\n        const marginType = this.safeString (position, 'marginType');\n        if (marginType === 'cross') {\n            liquidationPrice = undefined;\n        }\n        return {\n            'info': position,\n            'symbol': symbol,\n            'contracts': contracts,\n            'unrealizedPnl': unrealizedPnl,\n            'leverage': leverage,\n            'liquidationPrice': liquidationPrice,\n            'collateral': collateral,\n            'notional': notional,\n            'markPrice': markPrice,\n            'entryPrice': entryPrice,\n            'timestamp': timestamp,\n            'initialMargin': initialMargin,\n            'initialMarginPercentage': this.parseNumber (initialMarginPercentageString),\n            'maintenanceMargin': maintenanceMargin,\n            'maintenanceMarginPercentage': maintenanceMarginPercentage,\n            'marginRatio': marginRatio,\n            'datetime': this.iso8601 (timestamp),\n            'marginType': marginType,\n            'side': side,\n            'percentage': percentage,\n        };\n    }\n\n    async loadLeverageBrackets (reload = false, params = {}) {\n        await this.loadMarkets ();\n        // by default cache the leverage bracket\n        // it contains useful stuff like the maintenance margin and initial margin for positions\n        if ((this.options['leverageBrackets'] === undefined) || (reload)) {\n            let method = undefined;\n            const defaultType = this.safeString2 (this.options, 'fetchPositions', 'defaultType', 'future');\n            const type = this.safeString (params, 'type', defaultType);\n            const query = this.omit (params, 'type');\n            if (type === 'future') {\n                method = 'fapiPrivateGetLeverageBracket';\n            } else if (type === 'delivery') {\n                method = 'dapiPrivateV2GetLeverageBracket';\n            }\n            const response = await this[method] (query);\n            this.options['leverageBrackets'] = {};\n            for (let i = 0; i < response.length; i++) {\n                const entry = response[i];\n                const marketId = this.safeString (entry, 'symbol');\n                const symbol = this.safeSymbol (marketId);\n                const brackets = this.safeValue (entry, 'brackets');\n                const result = [];\n                for (let j = 0; j < brackets.length; j++) {\n                    const bracket = brackets[j];\n                    // we use floats here internally on purpose\n                    const floorValue = this.safeFloat2 (bracket, 'notionalFloor', 'qtyFloor');\n                    const maintenanceMarginPercentage = this.safeString (bracket, 'maintMarginRatio');\n                    result.push ([ floorValue, maintenanceMarginPercentage ]);\n                }\n                this.options['leverageBrackets'][symbol] = result;\n            }\n        }\n        return this.options['leverageBrackets'];\n    }\n\n    async fetchPositions (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadLeverageBrackets ();\n        let method = undefined;\n        const defaultType = this.safeString2 (this.options, 'fetchPositions', 'defaultType', 'future');\n        const type = this.safeString (params, 'type', defaultType);\n        const query = this.omit (params, 'type');\n        if (type === 'future') {\n            method = 'fapiPrivateGetAccount';\n        } else if (type === 'delivery') {\n            method = 'dapiPrivateGetAccount';\n        }\n        const account = await this[method] (query);\n        const result = this.parseAccountPositions (account);\n        return this.filterByArray (result, 'symbol', symbols, false);\n    }\n\n    async fetchIsolatedPositions (symbol = undefined, params = {}) {\n        // only supported in usdm futures\n        await this.loadMarkets ();\n        await this.loadLeverageBrackets ();\n        const request = {};\n        let market = undefined;\n        let method = undefined;\n        let defaultType = 'future';\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            if (market['linear']) {\n                defaultType = 'future';\n            } else if (market['inverse']) {\n                defaultType = 'delivery';\n            } else {\n                throw NotSupported (this.id + ' fetchIsolatedPositions() supports linear and inverse contracts only');\n            }\n        }\n        defaultType = this.safeString2 (this.options, 'fetchIsolatedPositions', 'defaultType', defaultType);\n        const type = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        if ((type === 'future') || (type === 'linear')) {\n            method = 'fapiPrivateGetPositionRisk';\n        } else if ((type === 'delivery') || (type === 'inverse')) {\n            method = 'dapiPrivateGetPositionRisk';\n        } else {\n            throw NotSupported (this.id + ' fetchIsolatedPositions() supports linear and inverse contracts only');\n        }\n        const response = await this[method] (this.extend (request, params));\n        if (symbol === undefined) {\n            const result = [];\n            for (let i = 0; i < response.length; i++) {\n                const parsed = this.parsePositionRisk (response[i], market);\n                if (parsed['marginType'] === 'isolated') {\n                    result.push (parsed);\n                }\n            }\n            return result;\n        } else {\n            return this.parsePositionRisk (this.safeValue (response, 0), market);\n        }\n    }\n\n    async fetchFundingHistory (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let method = undefined;\n        let defaultType = 'future';\n        const request = {\n            'incomeType': 'FUNDING_FEE', // \"TRANSFER\"，\"WELCOME_BONUS\", \"REALIZED_PNL\"，\"FUNDING_FEE\", \"COMMISSION\" and \"INSURANCE_CLEAR\"\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            if (market['linear']) {\n                defaultType = 'future';\n            } else if (market['inverse']) {\n                defaultType = 'delivery';\n            } else {\n                throw NotSupported (this.id + ' fetchFundingHistory() supports linear and inverse contracts only');\n            }\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        defaultType = this.safeString2 (this.options, 'fetchFundingHistory', 'defaultType', defaultType);\n        const type = this.safeString (params, 'type', defaultType);\n        params = this.omit (params, 'type');\n        if ((type === 'future') || (type === 'linear')) {\n            method = 'fapiPrivateGetIncome';\n        } else if ((type === 'delivery') || (type === 'inverse')) {\n            method = 'dapiPrivateGetIncome';\n        } else {\n            throw NotSupported (this.id + ' fetchFundingHistory() supports linear and inverse contracts only');\n        }\n        const response = await this[method] (this.extend (request, params));\n        return this.parseIncomes (response, market, since, limit);\n    }\n\n    async setLeverage (symbol, leverage, params = {}) {\n        // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS\n        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS\n        if ((leverage < 1) || (leverage > 125)) {\n            throw new BadRequest (this.id + ' leverage should be between 1 and 125');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let method = undefined;\n        if (market['linear']) {\n            method = 'fapiPrivatePostLeverage';\n        } else if (market['inverse']) {\n            method = 'dapiPrivatePostLeverage';\n        } else {\n            throw NotSupported (this.id + ' setLeverage() supports linear and inverse contracts only');\n        }\n        const request = {\n            'symbol': market['id'],\n            'leverage': leverage,\n        };\n        return await this[method] (this.extend (request, params));\n    }\n\n    async setMarginMode (symbol, marginType, params = {}) {\n        //\n        // { \"code\": -4048 , \"msg\": \"Margin type cannot be changed if there exists position.\" }\n        //\n        // or\n        //\n        // { \"code\": 200, \"msg\": \"success\" }\n        //\n        marginType = marginType.toUpperCase ();\n        if ((marginType !== 'ISOLATED') && (marginType !== 'CROSSED')) {\n            throw new BadRequest (this.id + ' marginType must be either isolated or crossed');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let method = undefined;\n        if (market['linear']) {\n            method = 'fapiPrivatePostMarginType';\n        } else if (market['inverse']) {\n            method = 'dapiPrivatePostMarginType';\n        } else {\n            throw NotSupported (this.id + ' setMarginMode() supports linear and inverse contracts only');\n        }\n        const request = {\n            'symbol': market['id'],\n            'marginType': marginType,\n        };\n        return await this[method] (this.extend (request, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        if (!(api in this.urls['api'])) {\n            throw new NotSupported (this.id + ' does not have a testnet/sandbox URL for ' + api + ' endpoints');\n        }\n        let url = this.urls['api'][api];\n        url += '/' + path;\n        if (api === 'wapi') {\n            url += '.html';\n        }\n        if (path === 'historicalTrades') {\n            if (this.apiKey) {\n                headers = {\n                    'X-MBX-APIKEY': this.apiKey,\n                };\n            } else {\n                throw new AuthenticationError (this.id + ' historicalTrades endpoint requires `apiKey` credential');\n            }\n        }\n        const userDataStream = (path === 'userDataStream') || (path === 'listenKey');\n        if (userDataStream) {\n            if (this.apiKey) {\n                // v1 special case for userDataStream\n                headers = {\n                    'X-MBX-APIKEY': this.apiKey,\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                };\n                if (method !== 'GET') {\n                    body = this.urlencode (params);\n                }\n            } else {\n                throw new AuthenticationError (this.id + ' userDataStream endpoint requires `apiKey` credential');\n            }\n        } else if ((api === 'private') || (api === 'sapi') || (api === 'wapi' && path !== 'systemStatus') || (api === 'dapiPrivate') || (api === 'dapiPrivateV2') || (api === 'fapiPrivate') || (api === 'fapiPrivateV2')) {\n            this.checkRequiredCredentials ();\n            let query = undefined;\n            const recvWindow = this.safeInteger (this.options, 'recvWindow', 5000);\n            if ((api === 'sapi') && (path === 'asset/dust')) {\n                query = this.urlencodeWithArrayRepeat (this.extend ({\n                    'timestamp': this.nonce (),\n                    'recvWindow': recvWindow,\n                }, params));\n            } else if ((path === 'batchOrders') || (path.indexOf ('sub-account') >= 0)) {\n                query = this.rawencode (this.extend ({\n                    'timestamp': this.nonce (),\n                    'recvWindow': recvWindow,\n                }, params));\n            } else {\n                query = this.urlencode (this.extend ({\n                    'timestamp': this.nonce (),\n                    'recvWindow': recvWindow,\n                }, params));\n            }\n            const signature = this.hmac (this.encode (query), this.encode (this.secret));\n            query += '&' + 'signature=' + signature;\n            headers = {\n                'X-MBX-APIKEY': this.apiKey,\n            };\n            if ((method === 'GET') || (method === 'DELETE') || (api === 'wapi')) {\n                url += '?' + query;\n            } else {\n                body = query;\n                headers['Content-Type'] = 'application/x-www-form-urlencoded';\n            }\n        } else {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if ((code === 418) || (code === 429)) {\n            throw new DDoSProtection (this.id + ' ' + code.toString () + ' ' + reason + ' ' + body);\n        }\n        // error response in a form: { \"code\": -1013, \"msg\": \"Invalid quantity.\" }\n        // following block cointains legacy checks against message patterns in \"msg\" property\n        // will switch \"code\" checks eventually, when we know all of them\n        if (code >= 400) {\n            if (body.indexOf ('Price * QTY is zero or less') >= 0) {\n                throw new InvalidOrder (this.id + ' order cost = amount * price is zero or less ' + body);\n            }\n            if (body.indexOf ('LOT_SIZE') >= 0) {\n                throw new InvalidOrder (this.id + ' order amount should be evenly divisible by lot size ' + body);\n            }\n            if (body.indexOf ('PRICE_FILTER') >= 0) {\n                throw new InvalidOrder (this.id + ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use this.priceToPrecision (symbol, amount) ' + body);\n            }\n        }\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        // check success value for wapi endpoints\n        // response in format {'msg': 'The coin does not exist.', 'success': true/false}\n        const success = this.safeValue (response, 'success', true);\n        if (!success) {\n            const message = this.safeString (response, 'msg');\n            let parsedMessage = undefined;\n            if (message !== undefined) {\n                try {\n                    parsedMessage = JSON.parse (message);\n                } catch (e) {\n                    // do nothing\n                    parsedMessage = undefined;\n                }\n                if (parsedMessage !== undefined) {\n                    response = parsedMessage;\n                }\n            }\n        }\n        const message = this.safeString (response, 'msg');\n        if (message !== undefined) {\n            this.throwExactlyMatchedException (this.exceptions, message, this.id + ' ' + message);\n        }\n        // checks against error codes\n        const error = this.safeString (response, 'code');\n        if (error !== undefined) {\n            // https://github.com/ccxt/ccxt/issues/6501\n            // https://github.com/ccxt/ccxt/issues/7742\n            if ((error === '200') || (error === '0')) {\n                return;\n            }\n            // a workaround for {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}\n            // despite that their message is very confusing, it is raised by Binance\n            // on a temporary ban, the API key is valid, but disabled for a while\n            if ((error === '-2015') && this.options['hasAlreadyAuthenticatedSuccessfully']) {\n                throw new DDoSProtection (this.id + ' temporary banned: ' + body);\n            }\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions, error, feedback);\n            throw new ExchangeError (feedback);\n        }\n        if (!success) {\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        // a workaround for {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}\n        if ((api === 'private') || (api === 'wapi')) {\n            this.options['hasAlreadyAuthenticatedSuccessfully'] = true;\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}