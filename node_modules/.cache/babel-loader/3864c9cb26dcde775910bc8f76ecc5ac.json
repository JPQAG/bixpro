{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import _objectSpread from\"C:/Users/James Price/Documents/VS Code/bixpro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import{Card,Button,Row,Col}from'react-bootstrap';import{Field,reduxForm}from'redux-form';var validate=function validate(values){var errors={};if(!values.username){errors.username='Required';}if(!values.password){errors.password='Required';}return errors;};var sleep=function sleep(ms){return new Promise(function(resolve){return setTimeout(resolve,ms);});};var asyncValidate=function asyncValidate(values/*, dispatch */){return sleep(1000).then(function(){// simulate server latency\nif(['john','paul','george','ringo'].includes(values.username)){// eslint-disable-next-line\nthrow{username:'That username is taken'};}});};var renderField=function renderField(_ref){var input=_ref.input,label=_ref.label,type=_ref.type,_ref$meta=_ref.meta,asyncValidating=_ref$meta.asyncValidating,touched=_ref$meta.touched,error=_ref$meta.error;return/*#__PURE__*/_jsxs(Row,{className:\"my-3\",children:[/*#__PURE__*/_jsx(Col,{sm:3,children:/*#__PURE__*/_jsx(\"label\",{className:\"label-control\",children:label})}),/*#__PURE__*/_jsxs(Col,{sm:9,className:asyncValidating?'async-validating':'',children:[/*#__PURE__*/_jsx(\"input\",_objectSpread(_objectSpread({},input),{},{placeholder:label,type:type,className:\"form-control\"})),touched&&error&&/*#__PURE__*/_jsxs(\"span\",{className:\"text-c-red\",children:[\"* \",error,\" \"]})]})]});};var AsyncValidationForm=function AsyncValidationForm(props){var handleSubmit=props.handleSubmit,pristine=props.pristine,reset=props.reset,submitting=props.submitting;return/*#__PURE__*/_jsx(\"form\",{onSubmit:handleSubmit,children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(Card.Header,{children:/*#__PURE__*/_jsx(Card.Title,{as:\"h5\",children:\"Asynchronous Validation\"})}),/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Field,{name:\"username\",type:\"text\",component:renderField,label:\"Username\"}),/*#__PURE__*/_jsx(Field,{name:\"password\",type:\"password\",component:renderField,label:\"Password\"})]}),/*#__PURE__*/_jsxs(Card.Footer,{children:[/*#__PURE__*/_jsx(Button,{type:\"button\",variant:\"danger\",className:\"float-right\",disabled:pristine||submitting,onClick:reset,children:\"Clear Values\"}),/*#__PURE__*/_jsx(Button,{type:\"submit\",className:\"mr-1 float-right\",disabled:submitting,children:\"Sign Up\"})]})]})});};export default reduxForm({form:'asyncValidation',// a unique identifier for this form\nvalidate:validate,asyncValidate:asyncValidate,asyncChangeFields:['username']})(AsyncValidationForm);","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/src/views/forms/form-validation/AsyncValidationForm.js"],"names":["React","Card","Button","Row","Col","Field","reduxForm","validate","values","errors","username","password","sleep","ms","Promise","resolve","setTimeout","asyncValidate","then","includes","renderField","input","label","type","meta","asyncValidating","touched","error","AsyncValidationForm","props","handleSubmit","pristine","reset","submitting","form","asyncChangeFields"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Card, Button, Row, Col } from 'react-bootstrap';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nconst validate = values => {\r\n    const errors = {}\r\n    if (!values.username) {\r\n      errors.username = 'Required'\r\n    }\r\n    if (!values.password) {\r\n      errors.password = 'Required'\r\n    }\r\n    return errors\r\n  }\r\n\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nconst asyncValidate = (values /*, dispatch */) => {\r\n  return sleep(1000).then(() => {\r\n    // simulate server latency\r\n    if (['john', 'paul', 'george', 'ringo'].includes(values.username)) {\r\n        // eslint-disable-next-line\r\n      throw { username: 'That username is taken' }\r\n    }\r\n  })\r\n}\r\n\r\nconst renderField = ({\r\n    input,\r\n    label,\r\n    type,\r\n    meta: { asyncValidating, touched, error }\r\n  }) => (\r\n    <Row className='my-3'>\r\n        <Col sm={3}>\r\n            <label className='label-control'>{label}</label>\r\n        </Col>\r\n        <Col sm={9} className={asyncValidating ? 'async-validating' : ''}>\r\n            <input {...input} placeholder={label} type={type} className='form-control' />\r\n            {touched && error && <span className='text-c-red'>* {error} </span>}\r\n        </Col>\r\n    </Row>\r\n  );\r\n  \r\n  const AsyncValidationForm = props => {\r\n    const { handleSubmit, pristine, reset, submitting } = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Card>\r\n                <Card.Header>\r\n                    <Card.Title as='h5'>Asynchronous Validation</Card.Title>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Field name=\"username\" type=\"text\" component={renderField} label=\"Username\" />\r\n                    <Field name=\"password\" type=\"password\" component={renderField} label=\"Password\" />\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <Button type=\"button\" variant='danger' className='float-right' disabled={pristine || submitting} onClick={reset}>Clear Values</Button>\r\n                    <Button type=\"submit\" className='mr-1 float-right' disabled={submitting}>Sign Up</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n        </form>\r\n    )\r\n  }\r\n  \r\n  export default reduxForm({\r\n    form: 'asyncValidation', // a unique identifier for this form\r\n    validate,\r\n    asyncValidate,\r\n    asyncChangeFields: ['username']\r\n  })(AsyncValidationForm)"]},"metadata":{},"sourceType":"module"}