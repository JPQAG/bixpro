{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  ExchangeNotAvailable,\n  InsufficientFunds,\n  OrderNotFound,\n  InvalidOrder,\n  AccountSuspended,\n  InvalidNonce,\n  NotSupported,\n  BadRequest,\n  AuthenticationError,\n  BadSymbol,\n  RateLimitExceeded,\n  PermissionDenied\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class kucoin extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'kucoin',\n      'name': 'KuCoin',\n      'countries': ['SC'],\n      'rateLimit': 334,\n      'version': 'v2',\n      'certified': false,\n      'pro': true,\n      'comment': 'Platform 2.0',\n      'has': {\n        'CORS': false,\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createDepositAddress': true,\n        'createOrder': true,\n        'fetchAccounts': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchFundingFee': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchStatus': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'withdraw': true,\n        'transfer': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg',\n        'referral': 'https://www.kucoin.com/?rcode=E5wkqe',\n        'api': {\n          'public': 'https://openapi-v2.kucoin.com',\n          'private': 'https://openapi-v2.kucoin.com',\n          'futuresPrivate': 'https://api-futures.kucoin.com',\n          'futuresPublic': 'https://api-futures.kucoin.com'\n        },\n        'test': {\n          'public': 'https://openapi-sandbox.kucoin.com',\n          'private': 'https://openapi-sandbox.kucoin.com',\n          'futuresPrivate': 'https://api-sandbox-futures.kucoin.com',\n          'futuresPublic': 'https://api-sandbox-futures.kucoin.com'\n        },\n        'www': 'https://www.kucoin.com',\n        'doc': ['https://docs.kucoin.com']\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'password': true\n      },\n      'api': {\n        'public': {\n          'get': ['timestamp', 'status', 'symbols', 'markets', 'market/allTickers', 'market/orderbook/level{level}_{limit}', 'market/orderbook/level2_20', 'market/orderbook/level2_100', 'market/histories', 'market/candles', 'market/stats', 'currencies', 'currencies/{currency}', 'prices', 'mark-price/{symbol}/current', 'margin/config'],\n          'post': ['bullet-public']\n        },\n        'private': {\n          'get': ['market/orderbook/level{level}', 'market/orderbook/level2', 'market/orderbook/level3', 'accounts', 'accounts/{accountId}', 'accounts/{accountId}/ledgers', 'accounts/{accountId}/holds', 'accounts/transferable', 'sub/user', 'sub-accounts', 'sub-accounts/{subUserId}', 'deposit-addresses', 'deposits', 'hist-deposits', 'hist-orders', 'hist-withdrawals', 'withdrawals', 'withdrawals/quotas', 'orders', 'order/client-order/{clientOid}', 'orders/{orderId}', 'limit/orders', 'fills', 'limit/fills', 'margin/account', 'margin/borrow', 'margin/borrow/outstanding', 'margin/borrow/borrow/repaid', 'margin/lend/active', 'margin/lend/done', 'margin/lend/trade/unsettled', 'margin/lend/trade/settled', 'margin/lend/assets', 'margin/market', 'margin/trade/last', 'stop-order/{orderId}', 'stop-order', 'stop-order/queryOrderByClientOid'],\n          'post': ['accounts', 'accounts/inner-transfer', 'accounts/sub-transfer', 'deposit-addresses', 'withdrawals', 'orders', 'orders/multi', 'margin/borrow', 'margin/order', 'margin/repay/all', 'margin/repay/single', 'margin/lend', 'margin/toggle-auto-lend', 'bullet-private', 'stop-order'],\n          'delete': ['withdrawals/{withdrawalId}', 'orders', 'orders/client-order/{clientOid}', 'orders/{orderId}', 'margin/lend/{orderId}', 'stop-order/cancelOrderByClientOid', 'stop-order/{orderId}', 'stop-order/cancel']\n        },\n        'futuresPublic': {\n          'get': ['contracts/active', 'contracts/{symbol}', 'ticker', 'level2/snapshot', 'level2/depth20', 'level2/depth100', 'level2/message/query', 'level3/message/query', // deprecated，level3/snapshot is suggested\n          'level3/snapshot', // v2\n          'trade/history', 'interest/query', 'index/query', 'mark-price/{symbol}/current', 'premium/query', 'funding-rate/{symbol}/current', 'timestamp', 'status', 'kline/query'],\n          'post': ['bullet-public']\n        },\n        'futuresPrivate': {\n          'get': ['account-overview', 'transaction-history', 'deposit-address', 'deposit-list', 'withdrawals/quotas', 'withdrawal-list', 'transfer-list', 'orders', 'stopOrders', 'recentDoneOrders', 'orders/{order-id}', // ?clientOid={client-order-id} // get order by orderId\n          'orders/byClientOid', // ?clientOid=eresc138b21023a909e5ad59 // get order by clientOid\n          'fills', 'recentFills', 'openOrderStatistics', 'position', 'positions', 'funding-history'],\n          'post': ['withdrawals', 'transfer-out', // v2\n          'orders', 'position/margin/auto-deposit-status', 'position/margin/deposit-margin', 'bullet-private'],\n          'delete': ['withdrawals/{withdrawalId}', 'cancel/transfer-out', 'orders/{order-id}', 'orders', 'stopOrders']\n        }\n      },\n      'timeframes': {\n        '1m': '1min',\n        '3m': '3min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '1hour',\n        '2h': '2hour',\n        '4h': '4hour',\n        '6h': '6hour',\n        '8h': '8hour',\n        '12h': '12hour',\n        '1d': '1day',\n        '1w': '1week'\n      },\n      'exceptions': {\n        'exact': {\n          'order not exist': OrderNotFound,\n          'order not exist.': OrderNotFound,\n          // duplicated error temporarily\n          'order_not_exist': OrderNotFound,\n          // {\"code\":\"order_not_exist\",\"msg\":\"order_not_exist\"} ¯\\_(ツ)_/¯\n          'order_not_exist_or_not_allow_to_cancel': InvalidOrder,\n          // {\"code\":\"400100\",\"msg\":\"order_not_exist_or_not_allow_to_cancel\"}\n          'Order size below the minimum requirement.': InvalidOrder,\n          // {\"code\":\"400100\",\"msg\":\"Order size below the minimum requirement.\"}\n          'The withdrawal amount is below the minimum requirement.': ExchangeError,\n          // {\"code\":\"400100\",\"msg\":\"The withdrawal amount is below the minimum requirement.\"}\n          'Unsuccessful! Exceeded the max. funds out-transfer limit': InsufficientFunds,\n          // {\"code\":\"200000\",\"msg\":\"Unsuccessful! Exceeded the max. funds out-transfer limit\"}\n          '400': BadRequest,\n          '401': AuthenticationError,\n          '403': NotSupported,\n          '404': NotSupported,\n          '405': NotSupported,\n          '429': RateLimitExceeded,\n          '500': ExchangeNotAvailable,\n          // Internal Server Error -- We had a problem with our server. Try again later.\n          '503': ExchangeNotAvailable,\n          '101030': PermissionDenied,\n          // {\"code\":\"101030\",\"msg\":\"You haven't yet enabled the margin trading\"}\n          '200004': InsufficientFunds,\n          '230003': InsufficientFunds,\n          // {\"code\":\"230003\",\"msg\":\"Balance insufficient!\"}\n          '260100': InsufficientFunds,\n          // {\"code\":\"260100\",\"msg\":\"account.noBalance\"}\n          '300000': InvalidOrder,\n          '400000': BadSymbol,\n          '400001': AuthenticationError,\n          '400002': InvalidNonce,\n          '400003': AuthenticationError,\n          '400004': AuthenticationError,\n          '400005': AuthenticationError,\n          '400006': AuthenticationError,\n          '400007': AuthenticationError,\n          '400008': NotSupported,\n          '400100': BadRequest,\n          '411100': AccountSuspended,\n          '415000': BadRequest,\n          // {\"code\":\"415000\",\"msg\":\"Unsupported Media Type\"}\n          '500000': ExchangeError\n        },\n        'broad': {\n          'Exceeded the access frequency': RateLimitExceeded,\n          'require more permission': PermissionDenied\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.001,\n          'maker': 0.001\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {},\n          'deposit': {}\n        }\n      },\n      'commonCurrencies': {\n        'HOT': 'HOTNOW',\n        'EDGE': 'DADI',\n        // https://github.com/ccxt/ccxt/issues/5756\n        'WAX': 'WAXP',\n        'TRY': 'Trias',\n        'VAI': 'VAIOT'\n      },\n      'options': {\n        'version': 'v1',\n        'symbolSeparator': '-',\n        'fetchMyTradesMethod': 'private_get_fills',\n        'fetchBalance': 'trade',\n        // endpoint versions\n        'versions': {\n          'public': {\n            'GET': {\n              'status': 'v1',\n              'market/orderbook/level2_20': 'v1',\n              'market/orderbook/level2_100': 'v1',\n              'market/orderbook/level{level}_{limit}': 'v1'\n            }\n          },\n          'private': {\n            'GET': {\n              'market/orderbook/level2': 'v3',\n              'market/orderbook/level3': 'v3',\n              'market/orderbook/level{level}': 'v3'\n            },\n            'POST': {\n              'accounts/inner-transfer': 'v2',\n              'accounts/sub-transfer': 'v2'\n            }\n          },\n          'futuresPrivate': {\n            'GET': {\n              'account-overview': 'v1',\n              'positions': 'v1'\n            },\n            'POST': {\n              'transfer-out': 'v2'\n            }\n          },\n          'futuresPublic': {\n            'GET': {\n              'level3/snapshot': 'v2'\n            }\n          }\n        },\n        'accountsByType': {\n          'trade': 'trade',\n          'trading': 'trade',\n          'margin': 'margin',\n          'main': 'main',\n          'futures': 'contract',\n          'contract': 'contract',\n          'pool': 'pool',\n          'pool-x': 'pool'\n        }\n      }\n    });\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  async loadTimeDifference(params = {}) {\n    const response = await this.publicGetTimestamp(params);\n    const after = this.milliseconds();\n    const kucoinTime = this.safeInteger(response, 'data');\n    this.options['timeDifference'] = parseInt(after - kucoinTime);\n    return this.options['timeDifference'];\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetTimestamp(params); //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"msg\":\"success\",\n    //         \"data\":1546837113087\n    //     }\n    //\n\n    return this.safeInteger(response, 'data');\n  }\n\n  async fetchStatus(params = {}) {\n    const response = await this.publicGetStatus(params); //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"data\":{\n    //             \"msg\":\"\",\n    //             \"status\":\"open\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    let status = this.safeValue(data, 'status');\n\n    if (status !== undefined) {\n      status = status === 'open' ? 'ok' : 'maintenance';\n      this.status = this.extend(this.status, {\n        'status': status,\n        'updated': this.milliseconds()\n      });\n    }\n\n    return this.status;\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetSymbols(params); //\n    //     {\n    //         quoteCurrency: 'BTC',\n    //         symbol: 'KCS-BTC',\n    //         quoteMaxSize: '9999999',\n    //         quoteIncrement: '0.000001',\n    //         baseMinSize: '0.01',\n    //         quoteMinSize: '0.00001',\n    //         enableTrading: true,\n    //         priceIncrement: '0.00000001',\n    //         name: 'KCS-BTC',\n    //         baseIncrement: '0.01',\n    //         baseMaxSize: '9999999',\n    //         baseCurrency: 'KCS'\n    //     }\n    //\n\n    const data = response['data'];\n    const result = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const market = data[i];\n      const id = this.safeString(market, 'symbol');\n      const [baseId, quoteId] = id.split('-');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const active = this.safeValue(market, 'enableTrading');\n      const baseMaxSize = this.safeNumber(market, 'baseMaxSize');\n      const baseMinSizeString = this.safeString(market, 'baseMinSize');\n      const quoteMaxSizeString = this.safeString(market, 'quoteMaxSize');\n      const baseMinSize = this.parseNumber(baseMinSizeString);\n      const quoteMaxSize = this.parseNumber(quoteMaxSizeString);\n      const quoteMinSize = this.safeNumber(market, 'quoteMinSize'); // const quoteIncrement = this.safeNumber (market, 'quoteIncrement');\n\n      const precision = {\n        'amount': this.precisionFromString(this.safeString(market, 'baseIncrement')),\n        'price': this.precisionFromString(this.safeString(market, 'priceIncrement'))\n      };\n      const limits = {\n        'amount': {\n          'min': baseMinSize,\n          'max': baseMaxSize\n        },\n        'price': {\n          'min': this.safeNumber(market, 'priceIncrement'),\n          'max': this.parseNumber(Precise.stringDiv(quoteMaxSizeString, baseMinSizeString))\n        },\n        'cost': {\n          'min': quoteMinSize,\n          'max': quoteMaxSize\n        }\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'base': base,\n        'quote': quote,\n        'active': active,\n        'precision': precision,\n        'limits': limits,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCurrencies(params); //\n    //     {\n    //         \"currency\": \"OMG\",\n    //         \"name\": \"OMG\",\n    //         \"fullName\": \"OmiseGO\",\n    //         \"precision\": 8,\n    //         \"confirms\": 12,\n    //         \"withdrawalMinSize\": \"4\",\n    //         \"withdrawalMinFee\": \"1.25\",\n    //         \"isWithdrawEnabled\": false,\n    //         \"isDepositEnabled\": false,\n    //         \"isMarginEnabled\": false,\n    //         \"isDebitEnabled\": false\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const entry = data[i];\n      const id = this.safeString(entry, 'currency');\n      const name = this.safeString(entry, 'fullName');\n      const code = this.safeCurrencyCode(id);\n      const precision = this.safeInteger(entry, 'precision');\n      const isWithdrawEnabled = this.safeValue(entry, 'isWithdrawEnabled', false);\n      const isDepositEnabled = this.safeValue(entry, 'isDepositEnabled', false);\n      const fee = this.safeNumber(entry, 'withdrawalMinFee');\n      const active = isWithdrawEnabled && isDepositEnabled;\n      result[code] = {\n        'id': id,\n        'name': name,\n        'code': code,\n        'precision': precision,\n        'info': entry,\n        'active': active,\n        'fee': fee,\n        'limits': this.limits\n      };\n    }\n\n    return result;\n  }\n\n  async fetchAccounts(params = {}) {\n    const response = await this.privateGetAccounts(params); //\n    //     {\n    //         code: \"200000\",\n    //         data: [\n    //             {\n    //                 balance: \"0.00009788\",\n    //                 available: \"0.00009788\",\n    //                 holds: \"0\",\n    //                 currency: \"BTC\",\n    //                 id: \"5c6a4fd399a1d81c4f9cc4d0\",\n    //                 type: \"trade\"\n    //             },\n    //             {\n    //                 balance: \"0.00000001\",\n    //                 available: \"0.00000001\",\n    //                 holds: \"0\",\n    //                 currency: \"ETH\",\n    //                 id: \"5c6a49ec99a1d819392e8e9f\",\n    //                 type: \"trade\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const result = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const account = data[i];\n      const accountId = this.safeString(account, 'id');\n      const currencyId = this.safeString(account, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const type = this.safeString(account, 'type'); // main or trade\n\n      result.push({\n        'id': accountId,\n        'type': type,\n        'currency': code,\n        'info': account\n      });\n    }\n\n    return result;\n  }\n\n  async fetchFundingFee(code, params = {}) {\n    const currencyId = this.currencyId(code);\n    const request = {\n      'currency': currencyId\n    };\n    const response = await this.privateGetWithdrawalsQuotas(this.extend(request, params));\n    const data = response['data'];\n    const withdrawFees = {};\n    withdrawFees[code] = this.safeNumber(data, 'withdrawMinFee');\n    return {\n      'info': response,\n      'withdraw': withdrawFees,\n      'deposit': {}\n    };\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         symbol: \"ETH-BTC\",\n    //         high: \"0.019518\",\n    //         vol: \"7997.82836194\",\n    //         last: \"0.019329\",\n    //         low: \"0.019\",\n    //         buy: \"0.019329\",\n    //         sell: \"0.01933\",\n    //         changePrice: \"-0.000139\",\n    //         time:  1580553706304,\n    //         averagePrice: \"0.01926386\",\n    //         changeRate: \"-0.0071\",\n    //         volValue: \"154.40791568183474\"\n    //     }\n    //\n    //     {\n    //         \"trading\": true,\n    //         \"symbol\": \"KCS-BTC\",\n    //         \"buy\": 0.00011,\n    //         \"sell\": 0.00012,\n    //         \"sort\": 100,\n    //         \"volValue\": 3.13851792584,   //total\n    //         \"baseCurrency\": \"KCS\",\n    //         \"market\": \"BTC\",\n    //         \"quoteCurrency\": \"BTC\",\n    //         \"symbolCode\": \"KCS-BTC\",\n    //         \"datetime\": 1548388122031,\n    //         \"high\": 0.00013,\n    //         \"vol\": 27514.34842,\n    //         \"low\": 0.0001,\n    //         \"changePrice\": -1.0e-5,\n    //         \"changeRate\": -0.0769,\n    //         \"lastTradedPrice\": 0.00012,\n    //         \"board\": 0,\n    //         \"mark\": 0\n    //     }\n    //\n    let percentage = this.safeNumber(ticker, 'changeRate');\n\n    if (percentage !== undefined) {\n      percentage = percentage * 100;\n    }\n\n    const last = this.safeNumber2(ticker, 'last', 'lastTradedPrice');\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const baseVolume = this.safeNumber(ticker, 'vol');\n    const quoteVolume = this.safeNumber(ticker, 'volValue');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    const timestamp = this.safeInteger2(ticker, 'time', 'datetime');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': this.safeNumber(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': this.safeNumber(ticker, 'changePrice'),\n      'percentage': percentage,\n      'average': this.safeNumber(ticker, 'averagePrice'),\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetMarketAllTickers(params); //\n    //     {\n    //         \"code\": \"200000\",\n    //         \"data\": {\n    //             \"date\": 1550661940645,\n    //             \"ticker\": [\n    //                 'buy': '0.00001168',\n    //                 'changePrice': '-0.00000018',\n    //                 'changeRate': '-0.0151',\n    //                 'datetime': 1550661146316,\n    //                 'high': '0.0000123',\n    //                 'last': '0.00001169',\n    //                 'low': '0.00001159',\n    //                 'sell': '0.00001182',\n    //                 'symbol': 'LOOM-BTC',\n    //                 'vol': '44399.5669'\n    //             },\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const tickers = this.safeValue(data, 'ticker', []);\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = this.parseTicker(tickers[i]);\n      const symbol = this.safeString(ticker, 'symbol');\n\n      if (symbol !== undefined) {\n        result[symbol] = ticker;\n      }\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetMarketStats(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"200000\",\n    //         \"data\": {\n    //             'buy': '0.00001168',\n    //             'changePrice': '-0.00000018',\n    //             'changeRate': '-0.0151',\n    //             'datetime': 1550661146316,\n    //             'high': '0.0000123',\n    //             'last': '0.00001169',\n    //             'low': '0.00001159',\n    //             'sell': '0.00001182',\n    //             'symbol': 'LOOM-BTC',\n    //             'vol': '44399.5669'\n    //         },\n    //     }\n    //\n\n    return this.parseTicker(response['data'], market);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         \"1545904980\",             // Start time of the candle cycle\n    //         \"0.058\",                  // opening price\n    //         \"0.049\",                  // closing price\n    //         \"0.058\",                  // highest price\n    //         \"0.049\",                  // lowest price\n    //         \"0.018\",                  // base volume\n    //         \"0.000945\",               // quote volume\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '15m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const marketId = market['id'];\n    const request = {\n      'symbol': marketId,\n      'type': this.timeframes[timeframe]\n    };\n    const duration = this.parseTimeframe(timeframe) * 1000;\n    let endAt = this.milliseconds(); // required param\n\n    if (since !== undefined) {\n      request['startAt'] = parseInt(Math.floor(since / 1000));\n\n      if (limit === undefined) {\n        // https://docs.kucoin.com/#get-klines\n        // https://docs.kucoin.com/#details\n        // For each query, the system would return at most 1500 pieces of data.\n        // To obtain more data, please page the data by time.\n        limit = this.safeInteger(this.options, 'fetchOHLCVLimit', 1500);\n      }\n\n      endAt = this.sum(since, limit * duration);\n    } else if (limit !== undefined) {\n      since = endAt - limit * duration;\n      request['startAt'] = parseInt(Math.floor(since / 1000));\n    }\n\n    request['endAt'] = parseInt(Math.floor(endAt / 1000));\n    const response = await this.publicGetMarketCandles(this.extend(request, params)); //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"data\":[\n    //             [\"1591517700\",\"0.025078\",\"0.025069\",\"0.025084\",\"0.025064\",\"18.9883256\",\"0.4761861079404\"],\n    //             [\"1591516800\",\"0.025089\",\"0.025079\",\"0.025089\",\"0.02506\",\"99.4716622\",\"2.494143499081\"],\n    //             [\"1591515900\",\"0.025079\",\"0.02509\",\"0.025091\",\"0.025068\",\"59.83701271\",\"1.50060885172798\"],\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currencyId = this.currencyId(code);\n    const request = {\n      'currency': currencyId\n    };\n    const response = await this.privatePostDepositAddresses(this.extend(request, params)); // BCH {\"code\":\"200000\",\"data\":{\"address\":\"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z\",\"memo\":\"\"}}\n    // BTC {\"code\":\"200000\",\"data\":{\"address\":\"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE\",\"memo\":\"\"}}\n\n    const data = this.safeValue(response, 'data', {});\n    let address = this.safeString(data, 'address'); // BCH/BSV is returned with a \"bitcoincash:\" prefix, which we cut off here and only keep the address\n\n    if (address !== undefined) {\n      address = address.replace('bitcoincash:', '');\n    }\n\n    const tag = this.safeString(data, 'memo');\n\n    if (code !== 'NIM') {\n      // contains spaces\n      this.checkAddress(address);\n    }\n\n    return {\n      'info': response,\n      'currency': code,\n      'address': address,\n      'tag': tag\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currencyId = this.currencyId(code);\n    const request = {\n      'currency': currencyId\n    };\n    const response = await this.privateGetDepositAddresses(this.extend(request, params)); // BCH {\"code\":\"200000\",\"data\":{\"address\":\"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z\",\"memo\":\"\"}}\n    // BTC {\"code\":\"200000\",\"data\":{\"address\":\"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE\",\"memo\":\"\"}}\n\n    const data = this.safeValue(response, 'data', {});\n    const address = this.safeString(data, 'address');\n    const tag = this.safeString(data, 'memo');\n\n    if (code !== 'NIM') {\n      // contains spaces\n      this.checkAddress(address);\n    }\n\n    return {\n      'info': response,\n      'currency': code,\n      'address': address,\n      'tag': tag\n    };\n  }\n\n  async fetchL3OrderBook(symbol, limit = undefined, params = {}) {\n    return await this.fetchOrderBook(symbol, limit, {\n      'level': 3\n    });\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const marketId = this.marketId(symbol);\n    const level = this.safeInteger(params, 'level', 2);\n    const request = {\n      'symbol': marketId,\n      'level': level\n    };\n    let method = 'privateGetMarketOrderbookLevelLevel';\n\n    if (level === 2) {\n      if (limit !== undefined) {\n        if (limit === 20 || limit === 100) {\n          request['limit'] = limit;\n          method = 'publicGetMarketOrderbookLevelLevelLimit';\n        } else {\n          throw new ExchangeError(this.id + ' fetchOrderBook limit argument must be undefined, 20 or 100');\n        }\n      }\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // 'market/orderbook/level2'\n    // 'market/orderbook/level2_20'\n    // 'market/orderbook/level2_100'\n    //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"data\":{\n    //             \"sequence\":\"1583235112106\",\n    //             \"asks\":[\n    //                 // ...\n    //                 [\"0.023197\",\"12.5067468\"],\n    //                 [\"0.023194\",\"1.8\"],\n    //                 [\"0.023191\",\"8.1069672\"]\n    //             ],\n    //             \"bids\":[\n    //                 [\"0.02319\",\"1.6000002\"],\n    //                 [\"0.023189\",\"2.2842325\"],\n    //             ],\n    //             \"time\":1586584067274\n    //         }\n    //     }\n    //\n    // 'market/orderbook/level3'\n    //\n    //     {\n    //         \"code\":\"200000\",\n    //         \"data\":{\n    //             \"sequence\":\"1583731857120\",\n    //             \"asks\":[\n    //                 // id, price, size, timestamp in nanoseconds\n    //                 [\"5e915f8acd26670009675300\",\"6925.7\",\"0.2\",\"1586585482194286069\"],\n    //                 [\"5e915f8ace35a200090bba48\",\"6925.7\",\"0.001\",\"1586585482229569826\"],\n    //                 [\"5e915f8a8857740009ca7d33\",\"6926\",\"0.00001819\",\"1586585482149148621\"],\n    //             ],\n    //             \"bids\":[\n    //                 [\"5e915f8acca406000ac88194\",\"6925.6\",\"0.05\",\"1586585482384384842\"],\n    //                 [\"5e915f93cd26670009676075\",\"6925.6\",\"0.08\",\"1586585491334914600\"],\n    //                 [\"5e915f906aa6e200099b49f6\",\"6925.4\",\"0.2\",\"1586585488941126340\"],\n    //             ],\n    //             \"time\":1586585492487\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const timestamp = this.safeInteger(data, 'time');\n    const orderbook = this.parseOrderBook(data, symbol, timestamp, 'bids', 'asks', level - 2, level - 1);\n    orderbook['nonce'] = this.safeInteger(data, 'sequence');\n    return orderbook;\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const marketId = this.marketId(symbol); // required param, cannot be used twice\n\n    const clientOrderId = this.safeString2(params, 'clientOid', 'clientOrderId', this.uuid());\n    params = this.omit(params, ['clientOid', 'clientOrderId']);\n    const request = {\n      'clientOid': clientOrderId,\n      'side': side,\n      'symbol': marketId,\n      'type': type // limit or market\n      // 'remark': '', // optional remark for the order, length cannot exceed 100 utf8 characters\n      // 'stp': '', // self trade prevention, CN, CO, CB or DC\n      // To improve the system performance and to accelerate order placing and processing, KuCoin has added a new interface for margin orders\n      // The current one will no longer accept margin orders by May 1st, 2021 (UTC)\n      // At the time, KuCoin will notify users via the announcement, please pay attention to it\n      // 'tradeType': 'TRADE', // TRADE, MARGIN_TRADE // not used with margin orders\n      // limit orders ---------------------------------------------------\n      // 'timeInForce': 'GTC', // GTC, GTT, IOC, or FOK (default is GTC), limit orders only\n      // 'cancelAfter': long, // cancel after n seconds, requires timeInForce to be GTT\n      // 'postOnly': false, // Post only flag, invalid when timeInForce is IOC or FOK\n      // 'hidden': false, // Order will not be displayed in the order book\n      // 'iceberg': false, // Only a portion of the order is displayed in the order book\n      // 'visibleSize': this.amountToPrecision (symbol, visibleSize), // The maximum visible size of an iceberg order\n      // market orders --------------------------------------------------\n      // 'size': this.amountToPrecision (symbol, amount), // Amount in base currency\n      // 'funds': this.costToPrecision (symbol, cost), // Amount of quote currency to use\n      // stop orders ----------------------------------------------------\n      // 'stop': 'loss', // loss or entry, the default is loss, requires stopPrice\n      // 'stopPrice': this.priceToPrecision (symbol, amount), // need to be defined if stop is specified\n      // margin orders --------------------------------------------------\n      // 'marginMode': 'cross', // cross (cross mode) and isolated (isolated mode), set to cross by default, the isolated mode will be released soon, stay tuned\n      // 'autoBorrow': false, // The system will first borrow you funds at the optimal interest rate and then place an order for you\n\n    };\n    const quoteAmount = this.safeNumber2(params, 'cost', 'funds');\n\n    if (type === 'market') {\n      if (quoteAmount !== undefined) {\n        params = this.omit(params, ['cost', 'funds']); // kucoin uses base precision even for quote values\n\n        request['funds'] = this.amountToPrecision(symbol, quoteAmount);\n      } else {\n        request['size'] = this.amountToPrecision(symbol, amount);\n      }\n    } else {\n      request['price'] = this.priceToPrecision(symbol, price);\n      request['size'] = this.amountToPrecision(symbol, amount);\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //     {\n    //         code: '200000',\n    //         data: {\n    //             \"orderId\": \"5bd6e9286d99522a52e458de\"\n    //         }\n    //    }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const timestamp = this.milliseconds();\n    const id = this.safeString(data, 'orderId');\n    const order = {\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'info': data,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': undefined,\n      'cost': undefined,\n      'average': undefined,\n      'filled': undefined,\n      'remaining': undefined,\n      'status': undefined,\n      'fee': undefined,\n      'trades': undefined\n    };\n\n    if (quoteAmount === undefined) {\n      order['amount'] = amount;\n    } else {\n      order['cost'] = quoteAmount;\n    }\n\n    return order;\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const clientOrderId = this.safeString2(params, 'clientOid', 'clientOrderId');\n    let method = 'privateDeleteOrdersOrderId';\n\n    if (clientOrderId !== undefined) {\n      request['clientOid'] = clientOrderId;\n      method = 'privateDeleteOrdersClientOrderClientOid';\n    } else {\n      request['orderId'] = id;\n    }\n\n    params = this.omit(params, ['clientOid', 'clientOrderId']);\n    return await this[method](this.extend(request, params));\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'symbol': market['id'],\n      // 'tradeType': 'TRADE', // default is to cancel the spot trading order\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    return await this.privateDeleteOrders(this.extend(request, params));\n  }\n\n  async fetchOrdersByStatus(status, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'status': status\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['startAt'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params)); //\n    //     {\n    //         code: '200000',\n    //         data: {\n    //             \"currentPage\": 1,\n    //             \"pageSize\": 1,\n    //             \"totalNum\": 153408,\n    //             \"totalPage\": 153408,\n    //             \"items\": [\n    //                 {\n    //                     \"id\": \"5c35c02703aa673ceec2a168\",   //orderid\n    //                     \"symbol\": \"BTC-USDT\",   //symbol\n    //                     \"opType\": \"DEAL\",      // operation type,deal is pending order,cancel is cancel order\n    //                     \"type\": \"limit\",       // order type,e.g. limit,markrt,stop_limit.\n    //                     \"side\": \"buy\",         // transaction direction,include buy and sell\n    //                     \"price\": \"10\",         // order price\n    //                     \"size\": \"2\",           // order quantity\n    //                     \"funds\": \"0\",          // order funds\n    //                     \"dealFunds\": \"0.166\",  // deal funds\n    //                     \"dealSize\": \"2\",       // deal quantity\n    //                     \"fee\": \"0\",            // fee\n    //                     \"feeCurrency\": \"USDT\", // charge fee currency\n    //                     \"stp\": \"\",             // self trade prevention,include CN,CO,DC,CB\n    //                     \"stop\": \"\",            // stop type\n    //                     \"stopTriggered\": false,  // stop order is triggered\n    //                     \"stopPrice\": \"0\",      // stop price\n    //                     \"timeInForce\": \"GTC\",  // time InForce,include GTC,GTT,IOC,FOK\n    //                     \"postOnly\": false,     // postOnly\n    //                     \"hidden\": false,       // hidden order\n    //                     \"iceberg\": false,      // iceberg order\n    //                     \"visibleSize\": \"0\",    // display quantity for iceberg order\n    //                     \"cancelAfter\": 0,      // cancel orders time，requires timeInForce to be GTT\n    //                     \"channel\": \"IOS\",      // order source\n    //                     \"clientOid\": \"\",       // user-entered order unique mark\n    //                     \"remark\": \"\",          // remark\n    //                     \"tags\": \"\",            // tag order source\n    //                     \"isActive\": false,     // status before unfilled or uncancelled\n    //                     \"cancelExist\": false,   // order cancellation transaction record\n    //                     \"createdAt\": 1547026471000  // time\n    //                 },\n    //             ]\n    //         }\n    //    }\n\n    const responseData = this.safeValue(response, 'data', {});\n    const orders = this.safeValue(responseData, 'items', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByStatus('done', symbol, since, limit, params);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByStatus('active', symbol, since, limit, params);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    const clientOrderId = this.safeString2(params, 'clientOid', 'clientOrderId');\n    let method = 'privateGetOrdersOrderId';\n\n    if (clientOrderId !== undefined) {\n      request['clientOid'] = clientOrderId;\n      method = 'privateGetOrdersClientOrderClientOid';\n    } else {\n      // a special case for undefined ids\n      // otherwise a wrong endpoint for all orders will be triggered\n      // https://github.com/ccxt/ccxt/issues/7234\n      if (id === undefined) {\n        throw new InvalidOrder(this.id + ' fetchOrder() requires an order id');\n      }\n\n      request['orderId'] = id;\n    }\n\n    params = this.omit(params, ['clientOid', 'clientOrderId']);\n    const response = await this[method](this.extend(request, params));\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const responseData = this.safeValue(response, 'data');\n    return this.parseOrder(responseData, market);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"id\": \"5c35c02703aa673ceec2a168\",   //orderid\n    //         \"symbol\": \"BTC-USDT\",   //symbol\n    //         \"opType\": \"DEAL\",      // operation type,deal is pending order,cancel is cancel order\n    //         \"type\": \"limit\",       // order type,e.g. limit,markrt,stop_limit.\n    //         \"side\": \"buy\",         // transaction direction,include buy and sell\n    //         \"price\": \"10\",         // order price\n    //         \"size\": \"2\",           // order quantity\n    //         \"funds\": \"0\",          // order funds\n    //         \"dealFunds\": \"0.166\",  // deal funds\n    //         \"dealSize\": \"2\",       // deal quantity\n    //         \"fee\": \"0\",            // fee\n    //         \"feeCurrency\": \"USDT\", // charge fee currency\n    //         \"stp\": \"\",             // self trade prevention,include CN,CO,DC,CB\n    //         \"stop\": \"\",            // stop type\n    //         \"stopTriggered\": false,  // stop order is triggered\n    //         \"stopPrice\": \"0\",      // stop price\n    //         \"timeInForce\": \"GTC\",  // time InForce,include GTC,GTT,IOC,FOK\n    //         \"postOnly\": false,     // postOnly\n    //         \"hidden\": false,       // hidden order\n    //         \"iceberg\": false,      // iceberg order\n    //         \"visibleSize\": \"0\",    // display quantity for iceberg order\n    //         \"cancelAfter\": 0,      // cancel orders time，requires timeInForce to be GTT\n    //         \"channel\": \"IOS\",      // order source\n    //         \"clientOid\": \"\",       // user-entered order unique mark\n    //         \"remark\": \"\",          // remark\n    //         \"tags\": \"\",            // tag order source\n    //         \"isActive\": false,     // status before unfilled or uncancelled\n    //         \"cancelExist\": false,   // order cancellation transaction record\n    //         \"createdAt\": 1547026471000  // time\n    //     }\n    //\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const orderId = this.safeString(order, 'id');\n    const type = this.safeString(order, 'type');\n    const timestamp = this.safeInteger(order, 'createdAt');\n    const datetime = this.iso8601(timestamp);\n    let price = this.safeNumber(order, 'price');\n\n    if (price === 0.0) {\n      // market orders\n      price = undefined;\n    }\n\n    const side = this.safeString(order, 'side');\n    const feeCurrencyId = this.safeString(order, 'feeCurrency');\n    const feeCurrency = this.safeCurrencyCode(feeCurrencyId);\n    const feeCost = this.safeNumber(order, 'fee');\n    const amount = this.safeNumber(order, 'size');\n    const filled = this.safeNumber(order, 'dealSize');\n    const cost = this.safeNumber(order, 'dealFunds'); // bool\n\n    const isActive = this.safeValue(order, 'isActive', false);\n    const cancelExist = this.safeValue(order, 'cancelExist', false);\n    let status = isActive ? 'open' : 'closed';\n    status = cancelExist ? 'canceled' : status;\n    const fee = {\n      'currency': feeCurrency,\n      'cost': feeCost\n    };\n    const clientOrderId = this.safeString(order, 'clientOid');\n    const timeInForce = this.safeString(order, 'timeInForce');\n    const stopPrice = this.safeNumber(order, 'stopPrice');\n    const postOnly = this.safeValue(order, 'postOnly');\n    return this.safeOrder({\n      'id': orderId,\n      'clientOrderId': clientOrderId,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'amount': amount,\n      'price': price,\n      'stopPrice': stopPrice,\n      'cost': cost,\n      'filled': filled,\n      'remaining': undefined,\n      'timestamp': timestamp,\n      'datetime': datetime,\n      'fee': fee,\n      'status': status,\n      'info': order,\n      'lastTradeTimestamp': undefined,\n      'average': undefined,\n      'trades': undefined\n    });\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const method = this.options['fetchMyTradesMethod'];\n    let parseResponseData = false;\n\n    if (method === 'private_get_fills') {\n      // does not return trades earlier than 2019-02-18T00:00:00Z\n      if (since !== undefined) {\n        // only returns trades up to one week after the since param\n        request['startAt'] = since;\n      }\n    } else if (method === 'private_get_limit_fills') {\n      // does not return trades earlier than 2019-02-18T00:00:00Z\n      // takes no params\n      // only returns first 1000 trades (not only \"in the last 24 hours\" as stated in the docs)\n      parseResponseData = true;\n    } else if (method === 'private_get_hist_orders') {\n      // despite that this endpoint is called `HistOrders`\n      // it returns historical trades instead of orders\n      // returns trades earlier than 2019-02-18T00:00:00Z only\n      if (since !== undefined) {\n        request['startAt'] = parseInt(since / 1000);\n      }\n    } else {\n      throw new ExchangeError(this.id + ' invalid fetchClosedOrder method');\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"currentPage\": 1,\n    //         \"pageSize\": 50,\n    //         \"totalNum\": 1,\n    //         \"totalPage\": 1,\n    //         \"items\": [\n    //             {\n    //                 \"symbol\":\"BTC-USDT\",       // symbol\n    //                 \"tradeId\":\"5c35c02709e4f67d5266954e\",        // trade id\n    //                 \"orderId\":\"5c35c02703aa673ceec2a168\",        // order id\n    //                 \"counterOrderId\":\"5c1ab46003aa676e487fa8e3\", // counter order id\n    //                 \"side\":\"buy\",              // transaction direction,include buy and sell\n    //                 \"liquidity\":\"taker\",       // include taker and maker\n    //                 \"forceTaker\":true,         // forced to become taker\n    //                 \"price\":\"0.083\",           // order price\n    //                 \"size\":\"0.8424304\",        // order quantity\n    //                 \"funds\":\"0.0699217232\",    // order funds\n    //                 \"fee\":\"0\",                 // fee\n    //                 \"feeRate\":\"0\",             // fee rate\n    //                 \"feeCurrency\":\"USDT\",      // charge fee currency\n    //                 \"stop\":\"\",                 // stop type\n    //                 \"type\":\"limit\",            // order type, e.g. limit, market, stop_limit.\n    //                 \"createdAt\":1547026472000  // time\n    //             },\n    //             //------------------------------------------------------\n    //             // v1 (historical) trade response structure\n    //             {\n    //                 \"symbol\": \"SNOV-ETH\",\n    //                 \"dealPrice\": \"0.0000246\",\n    //                 \"dealValue\": \"0.018942\",\n    //                 \"amount\": \"770\",\n    //                 \"fee\": \"0.00001137\",\n    //                 \"side\": \"sell\",\n    //                 \"createdAt\": 1540080199\n    //                 \"id\":\"5c4d389e4c8c60413f78e2e5\",\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    let trades = undefined;\n\n    if (parseResponseData) {\n      trades = data;\n    } else {\n      trades = this.safeValue(data, 'items', []);\n    }\n\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['startAt'] = Math.floor(since / 1000);\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const response = await this.publicGetMarketHistories(this.extend(request, params)); //\n    //     {\n    //         \"code\": \"200000\",\n    //         \"data\": [\n    //             {\n    //                 \"sequence\": \"1548764654235\",\n    //                 \"side\": \"sell\",\n    //                 \"size\":\"0.6841354\",\n    //                 \"price\":\"0.03202\",\n    //                 \"time\":1548848575203567174\n    //             }\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'data', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"sequence\": \"1548764654235\",\n    //         \"side\": \"sell\",\n    //         \"size\":\"0.6841354\",\n    //         \"price\":\"0.03202\",\n    //         \"time\":1548848575203567174\n    //     }\n    //\n    //     {\n    //         sequence: '1568787654360',\n    //         symbol: 'BTC-USDT',\n    //         side: 'buy',\n    //         size: '0.00536577',\n    //         price: '9345',\n    //         takerOrderId: '5e356c4a9f1a790008f8d921',\n    //         time: '1580559434436443257',\n    //         type: 'match',\n    //         makerOrderId: '5e356bffedf0010008fa5d7f',\n    //         tradeId: '5e356c4aeefabd62c62a1ece'\n    //     }\n    //\n    // fetchMyTrades (private) v2\n    //\n    //     {\n    //         \"symbol\":\"BTC-USDT\",\n    //         \"tradeId\":\"5c35c02709e4f67d5266954e\",\n    //         \"orderId\":\"5c35c02703aa673ceec2a168\",\n    //         \"counterOrderId\":\"5c1ab46003aa676e487fa8e3\",\n    //         \"side\":\"buy\",\n    //         \"liquidity\":\"taker\",\n    //         \"forceTaker\":true,\n    //         \"price\":\"0.083\",\n    //         \"size\":\"0.8424304\",\n    //         \"funds\":\"0.0699217232\",\n    //         \"fee\":\"0\",\n    //         \"feeRate\":\"0\",\n    //         \"feeCurrency\":\"USDT\",\n    //         \"stop\":\"\",\n    //         \"type\":\"limit\",\n    //         \"createdAt\":1547026472000\n    //     }\n    //\n    // fetchMyTrades v2 alternative format since 2019-05-21 https://github.com/ccxt/ccxt/pull/5162\n    //\n    //     {\n    //         symbol: \"OPEN-BTC\",\n    //         forceTaker:  false,\n    //         orderId: \"5ce36420054b4663b1fff2c9\",\n    //         fee: \"0\",\n    //         feeCurrency: \"\",\n    //         type: \"\",\n    //         feeRate: \"0\",\n    //         createdAt: 1558417615000,\n    //         size: \"12.8206\",\n    //         stop: \"\",\n    //         price: \"0\",\n    //         funds: \"0\",\n    //         tradeId: \"5ce390cf6e0db23b861c6e80\"\n    //     }\n    //\n    // fetchMyTrades (private) v1 (historical)\n    //\n    //     {\n    //         \"symbol\": \"SNOV-ETH\",\n    //         \"dealPrice\": \"0.0000246\",\n    //         \"dealValue\": \"0.018942\",\n    //         \"amount\": \"770\",\n    //         \"fee\": \"0.00001137\",\n    //         \"side\": \"sell\",\n    //         \"createdAt\": 1540080199\n    //         \"id\":\"5c4d389e4c8c60413f78e2e5\",\n    //     }\n    //\n    const marketId = this.safeString(trade, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const id = this.safeString2(trade, 'tradeId', 'id');\n    const orderId = this.safeString(trade, 'orderId');\n    const takerOrMaker = this.safeString(trade, 'liquidity');\n    let timestamp = this.safeInteger(trade, 'time');\n\n    if (timestamp !== undefined) {\n      timestamp = parseInt(timestamp / 1000000);\n    } else {\n      timestamp = this.safeInteger(trade, 'createdAt'); // if it's a historical v1 trade, the exchange returns timestamp in seconds\n\n      if ('dealValue' in trade && timestamp !== undefined) {\n        timestamp = timestamp * 1000;\n      }\n    }\n\n    const priceString = this.safeString2(trade, 'price', 'dealPrice');\n    const amountString = this.safeString2(trade, 'size', 'amount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const side = this.safeString(trade, 'side');\n    let fee = undefined;\n    const feeCost = this.safeNumber(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'feeCurrency');\n      let feeCurrency = this.safeCurrencyCode(feeCurrencyId);\n\n      if (feeCurrency === undefined) {\n        if (market !== undefined) {\n          feeCurrency = side === 'sell' ? market['quote'] : market['base'];\n        }\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrency,\n        'rate': this.safeNumber(trade, 'feeRate')\n      };\n    }\n\n    let type = this.safeString(trade, 'type');\n\n    if (type === 'match') {\n      type = undefined;\n    }\n\n    let cost = this.safeNumber2(trade, 'funds', 'dealValue');\n\n    if (cost === undefined) {\n      cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'takerOrMaker': takerOrMaker,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    await this.loadMarkets();\n    this.checkAddress(address);\n    const currency = this.currencyId(code);\n    const request = {\n      'currency': currency,\n      'address': address,\n      'amount': amount\n    };\n\n    if (tag !== undefined) {\n      request['memo'] = tag;\n    }\n\n    const response = await this.privatePostWithdrawals(this.extend(request, params)); //\n    // https://github.com/ccxt/ccxt/issues/5558\n    //\n    //     {\n    //         \"code\":  200000,\n    //         \"data\": {\n    //             \"withdrawalId\":  \"abcdefghijklmnopqrstuvwxyz\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return {\n      'id': this.safeString(data, 'withdrawalId'),\n      'info': response\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'SUCCESS': 'ok',\n      'PROCESSING': 'ok',\n      'FAILURE': 'failed'\n    };\n    return this.safeString(statuses, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"address\": \"0x5f047b29041bcfdbf0e4478cdfa753a336ba6989\",\n    //         \"memo\": \"5c247c8a03aa677cea2a251d\",\n    //         \"amount\": 1,\n    //         \"fee\": 0.0001,\n    //         \"currency\": \"KCS\",\n    //         \"isInner\": false,\n    //         \"walletTxId\": \"5bbb57386d99522d9f954c5a@test004\",\n    //         \"status\": \"SUCCESS\",\n    //         \"createdAt\": 1544178843000,\n    //         \"updatedAt\": 1544178891000\n    //         \"remark\":\"foobar\"\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"id\": \"5c2dc64e03aa675aa263f1ac\",\n    //         \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\",\n    //         \"memo\": \"\",\n    //         \"currency\": \"ETH\",\n    //         \"amount\": 1.0000000,\n    //         \"fee\": 0.0100000,\n    //         \"walletTxId\": \"3e2414d82acce78d38be7fe9\",\n    //         \"isInner\": false,\n    //         \"status\": \"FAILURE\",\n    //         \"createdAt\": 1546503758000,\n    //         \"updatedAt\": 1546504603000\n    //         \"remark\":\"foobar\"\n    //     }\n    //\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    let address = this.safeString(transaction, 'address');\n    const amount = this.safeNumber(transaction, 'amount');\n    let txid = this.safeString(transaction, 'walletTxId');\n\n    if (txid !== undefined) {\n      const txidParts = txid.split('@');\n      const numTxidParts = txidParts.length;\n\n      if (numTxidParts > 1) {\n        if (address === undefined) {\n          if (txidParts[1].length > 1) {\n            address = txidParts[1];\n          }\n        }\n      }\n\n      txid = txidParts[0];\n    }\n\n    let type = txid === undefined ? 'withdrawal' : 'deposit';\n    const rawStatus = this.safeString(transaction, 'status');\n    const status = this.parseTransactionStatus(rawStatus);\n    let fee = undefined;\n    const feeCost = this.safeNumber(transaction, 'fee');\n\n    if (feeCost !== undefined) {\n      let rate = undefined;\n\n      if (amount !== undefined) {\n        rate = feeCost / amount;\n      }\n\n      fee = {\n        'cost': feeCost,\n        'rate': rate,\n        'currency': code\n      };\n    }\n\n    const tag = this.safeString(transaction, 'memo');\n    let timestamp = this.safeInteger2(transaction, 'createdAt', 'createAt');\n    const id = this.safeString(transaction, 'id');\n    let updated = this.safeInteger(transaction, 'updatedAt');\n    const isV1 = !('createdAt' in transaction); // if it's a v1 structure\n\n    if (isV1) {\n      type = 'address' in transaction ? 'withdrawal' : 'deposit';\n\n      if (timestamp !== undefined) {\n        timestamp = timestamp * 1000;\n      }\n\n      if (updated !== undefined) {\n        updated = updated * 1000;\n      }\n    }\n\n    const comment = this.safeString(transaction, 'remark');\n    return {\n      'id': id,\n      'info': transaction,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'addressTo': address,\n      'addressFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'tagFrom': undefined,\n      'currency': code,\n      'amount': amount,\n      'txid': txid,\n      'type': type,\n      'status': status,\n      'comment': comment,\n      'fee': fee,\n      'updated': updated\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    let method = 'privateGetDeposits';\n\n    if (since !== undefined) {\n      // if since is earlier than 2019-02-18T00:00:00Z\n      if (since < 1550448000000) {\n        request['startAt'] = parseInt(since / 1000);\n        method = 'privateGetHistDeposits';\n      } else {\n        request['startAt'] = since;\n      }\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         code: '200000',\n    //         data: {\n    //             \"currentPage\": 1,\n    //             \"pageSize\": 5,\n    //             \"totalNum\": 2,\n    //             \"totalPage\": 1,\n    //             \"items\": [\n    //                 //--------------------------------------------------\n    //                 // version 2 deposit response structure\n    //                 {\n    //                     \"address\": \"0x5f047b29041bcfdbf0e4478cdfa753a336ba6989\",\n    //                     \"memo\": \"5c247c8a03aa677cea2a251d\",\n    //                     \"amount\": 1,\n    //                     \"fee\": 0.0001,\n    //                     \"currency\": \"KCS\",\n    //                     \"isInner\": false,\n    //                     \"walletTxId\": \"5bbb57386d99522d9f954c5a@test004\",\n    //                     \"status\": \"SUCCESS\",\n    //                     \"createdAt\": 1544178843000,\n    //                     \"updatedAt\": 1544178891000\n    //                     \"remark\":\"foobar\"\n    //                 },\n    //                 //--------------------------------------------------\n    //                 // version 1 (historical) deposit response structure\n    //                 {\n    //                     \"currency\": \"BTC\",\n    //                     \"createAt\": 1528536998,\n    //                     \"amount\": \"0.03266638\",\n    //                     \"walletTxId\": \"55c643bc2c68d6f17266383ac1be9e454038864b929ae7cee0bc408cc5c869e8@12ffGWmMMD1zA1WbFm7Ho3JZ1w6NYXjpFk@234\",\n    //                     \"isInner\": false,\n    //                     \"status\": \"SUCCESS\",\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const responseData = response['data']['items'];\n    return this.parseTransactions(responseData, currency, since, limit, {\n      'type': 'deposit'\n    });\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    let method = 'privateGetWithdrawals';\n\n    if (since !== undefined) {\n      // if since is earlier than 2019-02-18T00:00:00Z\n      if (since < 1550448000000) {\n        request['startAt'] = parseInt(since / 1000);\n        method = 'privateGetHistWithdrawals';\n      } else {\n        request['startAt'] = since;\n      }\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         code: '200000',\n    //         data: {\n    //             \"currentPage\": 1,\n    //             \"pageSize\": 5,\n    //             \"totalNum\": 2,\n    //             \"totalPage\": 1,\n    //             \"items\": [\n    //                 //--------------------------------------------------\n    //                 // version 2 withdrawal response structure\n    //                 {\n    //                     \"id\": \"5c2dc64e03aa675aa263f1ac\",\n    //                     \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\",\n    //                     \"memo\": \"\",\n    //                     \"currency\": \"ETH\",\n    //                     \"amount\": 1.0000000,\n    //                     \"fee\": 0.0100000,\n    //                     \"walletTxId\": \"3e2414d82acce78d38be7fe9\",\n    //                     \"isInner\": false,\n    //                     \"status\": \"FAILURE\",\n    //                     \"createdAt\": 1546503758000,\n    //                     \"updatedAt\": 1546504603000\n    //                 },\n    //                 //--------------------------------------------------\n    //                 // version 1 (historical) withdrawal response structure\n    //                 {\n    //                     \"currency\": \"BTC\",\n    //                     \"createAt\": 1526723468,\n    //                     \"amount\": \"0.534\",\n    //                     \"address\": \"33xW37ZSW4tQvg443Pc7NLCAs167Yc2XUV\",\n    //                     \"walletTxId\": \"aeacea864c020acf58e51606169240e96774838dcd4f7ce48acf38e3651323f4\",\n    //                     \"isInner\": false,\n    //                     \"status\": \"SUCCESS\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const responseData = response['data']['items'];\n    return this.parseTransactions(responseData, currency, since, limit, {\n      'type': 'withdrawal'\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString2(this.options, 'fetchBalance', 'defaultType', 'trade');\n    const requestedType = this.safeString(params, 'type', defaultType);\n    const accountsByType = this.safeValue(this.options, 'accountsByType');\n    const type = this.safeString(accountsByType, requestedType);\n\n    if (type === undefined) {\n      const keys = Object.keys(accountsByType);\n      throw new ExchangeError(this.id + ' type must be one of ' + keys.join(', '));\n    }\n\n    params = this.omit(params, 'type');\n\n    if (type === 'contract') {\n      // futures api requires a futures apiKey\n      // only fetches one balance at a time\n      // by default it will only fetch the BTC balance of the futures account\n      // you can send 'currency' in params to fetch other currencies\n      // fetchBalance ({ 'type': 'futures', 'currency': 'USDT' })\n      const response = await this.futuresPrivateGetAccountOverview(params); //\n      //     {\n      //         code: '200000',\n      //         data: {\n      //             accountEquity: 0.00005,\n      //             unrealisedPNL: 0,\n      //             marginBalance: 0.00005,\n      //             positionMargin: 0,\n      //             orderMargin: 0,\n      //             frozenFunds: 0,\n      //             availableBalance: 0.00005,\n      //             currency: 'XBT'\n      //         }\n      //     }\n      //\n\n      const result = {\n        'info': response,\n        'timestamp': undefined,\n        'datetime': undefined\n      };\n      const data = this.safeValue(response, 'data');\n      const currencyId = this.safeString(data, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeString(data, 'availableBalance');\n      account['total'] = this.safeString(data, 'accountEquity');\n      result[code] = account;\n      return this.parseBalance(result, false);\n    } else {\n      const request = {\n        'type': type\n      };\n      const response = await this.privateGetAccounts(this.extend(request, params)); //\n      //     {\n      //         \"code\":\"200000\",\n      //         \"data\":[\n      //             {\"balance\":\"0.00009788\",\"available\":\"0.00009788\",\"holds\":\"0\",\"currency\":\"BTC\",\"id\":\"5c6a4fd399a1d81c4f9cc4d0\",\"type\":\"trade\"},\n      //             {\"balance\":\"3.41060034\",\"available\":\"3.41060034\",\"holds\":\"0\",\"currency\":\"SOUL\",\"id\":\"5c6a4d5d99a1d8182d37046d\",\"type\":\"trade\"},\n      //             {\"balance\":\"0.01562641\",\"available\":\"0.01562641\",\"holds\":\"0\",\"currency\":\"NEO\",\"id\":\"5c6a4f1199a1d8165a99edb1\",\"type\":\"trade\"},\n      //         ]\n      //     }\n      //\n\n      const data = this.safeValue(response, 'data', []);\n      const result = {\n        'info': response,\n        'timestamp': undefined,\n        'datetime': undefined\n      };\n\n      for (let i = 0; i < data.length; i++) {\n        const balance = data[i];\n        const balanceType = this.safeString(balance, 'type');\n\n        if (balanceType === type) {\n          const currencyId = this.safeString(balance, 'currency');\n          const code = this.safeCurrencyCode(currencyId);\n          const account = this.account();\n          account['total'] = this.safeString(balance, 'balance');\n          account['free'] = this.safeString(balance, 'available');\n          account['used'] = this.safeString(balance, 'holds');\n          result[code] = account;\n        }\n      }\n\n      return this.parseBalance(result, false);\n    }\n  }\n\n  async transfer(code, amount, fromAccount, toAccount, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const requestedAmount = this.currencyToPrecision(code, amount);\n    const accountsById = this.safeValue(this.options, 'accountsByType', {});\n    const fromId = this.safeString(accountsById, fromAccount);\n\n    if (fromId === undefined) {\n      const keys = Object.keys(accountsById);\n      throw new ExchangeError(this.id + ' fromAccount must be one of ' + keys.join(', '));\n    }\n\n    const toId = this.safeString(accountsById, toAccount);\n\n    if (toId === undefined) {\n      const keys = Object.keys(accountsById);\n      throw new ExchangeError(this.id + ' toAccount must be one of ' + keys.join(', '));\n    }\n\n    if (fromId === 'contract') {\n      if (toId !== 'main') {\n        throw new ExchangeError(this.id + ' only supports transferring from futures account to main account');\n      }\n\n      const request = {\n        'currency': currency['id'],\n        'amount': requestedAmount\n      };\n\n      if (!('bizNo' in params)) {\n        // it doesn't like more than 24 characters\n        request['bizNo'] = this.uuid22();\n      }\n\n      const response = await this.futuresPrivatePostTransferOut(this.extend(request, params)); //\n      //     {\n      //         code: '200000',\n      //         data: {\n      //             applyId: '605a87217dff1500063d485d',\n      //             bizNo: 'bcd6e5e1291f4905af84dc',\n      //             payAccountType: 'CONTRACT',\n      //             payTag: 'DEFAULT',\n      //             remark: '',\n      //             recAccountType: 'MAIN',\n      //             recTag: 'DEFAULT',\n      //             recRemark: '',\n      //             recSystem: 'KUCOIN',\n      //             status: 'PROCESSING',\n      //             currency: 'XBT',\n      //             amount: '0.00001',\n      //             fee: '0',\n      //             sn: '573688685663948',\n      //             reason: '',\n      //             createdAt: 1616545569000,\n      //             updatedAt: 1616545569000\n      //         }\n      //     }\n      //\n\n      const data = this.safeValue(response, 'data');\n      const timestamp = this.safeInteger(data, 'createdAt');\n      const id = this.safeString(data, 'applyId');\n      const currencyId = this.safeString(data, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const amount = this.safeNumber(data, 'amount');\n      const rawStatus = this.safeString(data, 'status');\n      let status = undefined;\n\n      if (rawStatus === 'PROCESSING') {\n        status = 'pending';\n      }\n\n      return {\n        'info': response,\n        'currency': code,\n        'timestamp': timestamp,\n        'datetime': this.iso8601(timestamp),\n        'amount': amount,\n        'fromAccount': fromId,\n        'toAccount': toId,\n        'id': id,\n        'status': status\n      };\n    } else {\n      const request = {\n        'currency': currency['id'],\n        'from': fromId,\n        'to': toId,\n        'amount': requestedAmount\n      };\n\n      if (!('clientOid' in params)) {\n        request['clientOid'] = this.uuid();\n      }\n\n      const response = await this.privatePostAccountsInnerTransfer(this.extend(request, params)); // { code: '200000', data: { orderId: '605a6211e657f00006ad0ad6' } }\n\n      const data = this.safeValue(response, 'data');\n      const id = this.safeString(data, 'orderId');\n      return {\n        'info': response,\n        'id': id,\n        'timestamp': undefined,\n        'datetime': undefined,\n        'currency': code,\n        'amount': requestedAmount,\n        'fromAccount': fromId,\n        'toAccount': toId,\n        'status': undefined\n      };\n    }\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchLedger() requires a code param');\n    }\n\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const currency = this.currency(code);\n    let accountId = this.safeString(params, 'accountId');\n\n    if (accountId === undefined) {\n      for (let i = 0; i < this.accounts.length; i++) {\n        const account = this.accounts[i];\n\n        if (account['currency'] === code && account['type'] === 'main') {\n          accountId = account['id'];\n          break;\n        }\n      }\n    }\n\n    if (accountId === undefined) {\n      throw new ExchangeError(this.id + ' ' + code + 'main account is not loaded in loadAccounts');\n    }\n\n    const request = {\n      'accountId': accountId\n    };\n\n    if (since !== undefined) {\n      request['startAt'] = Math.floor(since / 1000);\n    }\n\n    const response = await this.privateGetAccountsAccountIdLedgers(this.extend(request, params)); //\n    //     {\n    //         code: '200000',\n    //         data: {\n    //             totalNum: 1,\n    //             totalPage: 1,\n    //             pageSize: 50,\n    //             currentPage: 1,\n    //             items: [\n    //                 {\n    //                     createdAt: 1561897880000,\n    //                     amount: '0.0111123',\n    //                     bizType: 'Exchange',\n    //                     balance: '0.13224427',\n    //                     fee: '0.0000111',\n    //                     context: '{\"symbol\":\"KCS-ETH\",\"orderId\":\"5d18ab98c788c6426188296f\",\"tradeId\":\"5d18ab9818996813f539a806\"}',\n    //                     currency: 'ETH',\n    //                     direction: 'out'\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const items = response['data']['items'];\n    return this.parseLedger(items, currency, since, limit);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    // trade\n    //\n    //     {\n    //         createdAt: 1561897880000,\n    //         amount: '0.0111123',\n    //         bizType: 'Exchange',\n    //         balance: '0.13224427',\n    //         fee: '0.0000111',\n    //         context: '{\"symbol\":\"KCS-ETH\",\"orderId\":\"5d18ab98c788c6426188296f\",\"tradeId\":\"5d18ab9818996813f539a806\"}',\n    //         currency: 'ETH',\n    //         direction: 'out'\n    //     }\n    //\n    // withdrawal\n    //\n    //     {\n    //         createdAt: 1561900264000,\n    //         amount: '0.14333217',\n    //         bizType: 'Withdrawal',\n    //         balance: '0',\n    //         fee: '0.01',\n    //         context: '{\"orderId\":\"5d18b4e687111437cf1c48b9\",\"txId\":\"0x1d136ee065c5c4c5caa293faa90d43e213c953d7cdd575c89ed0b54eb87228b8\"}',\n    //         currency: 'ETH',\n    //         direction: 'out'\n    //     }\n    //\n    const currencyId = this.safeString(item, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const fee = {\n      'cost': this.safeNumber(item, 'fee'),\n      'code': code\n    };\n    const amount = this.safeNumber(item, 'amount');\n    const after = this.safeNumber(item, 'balance');\n    const direction = this.safeString(item, 'direction');\n    let before = undefined;\n\n    if (after !== undefined && amount !== undefined) {\n      const difference = direction === 'out' ? amount : -amount;\n      before = this.sum(after, difference);\n    }\n\n    const timestamp = this.safeInteger(item, 'createdAt');\n    const type = this.parseLedgerEntryType(this.safeString(item, 'bizType'));\n    const contextString = this.safeString(item, 'context');\n    let id = undefined;\n    let referenceId = undefined;\n\n    if (this.isJsonEncodedObject(contextString)) {\n      const context = this.parseJson(contextString);\n      id = this.safeString(context, 'orderId');\n\n      if (type === 'trade') {\n        referenceId = this.safeString(context, 'tradeId');\n      } else if (type === 'transaction') {\n        referenceId = this.safeString(context, 'txId');\n      }\n    }\n\n    return {\n      'id': id,\n      'currency': code,\n      'account': undefined,\n      'referenceAccount': undefined,\n      'referenceId': referenceId,\n      'status': undefined,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'fee': fee,\n      'direction': direction,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'type': type,\n      'info': item\n    };\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'Exchange': 'trade',\n      'Withdrawal': 'transaction',\n      'Deposit': 'transaction',\n      'Transfer': 'transfer'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  async fetchPositions(symbols = undefined, params = {}) {\n    const response = await this.futuresPrivateGetPositions(params); //\n    //     {\n    //         code: '200000',\n    //         data: [\n    //             {\n    //                 id: '605a9772a229ab0006408258',\n    //                 symbol: 'XBTUSDTM',\n    //                 autoDeposit: false,\n    //                 maintMarginReq: 0.005,\n    //                 riskLimit: 200,\n    //                 realLeverage: 0,\n    //                 crossMode: false,\n    //                 delevPercentage: 0,\n    //                 currentTimestamp: 1616549746099,\n    //                 currentQty: 0,\n    //                 currentCost: 0,\n    //                 currentComm: 0,\n    //                 unrealisedCost: 0,\n    //                 realisedGrossCost: 0,\n    //                 realisedCost: 0,\n    //                 isOpen: false,\n    //                 markPrice: 54371.92,\n    //                 markValue: 0,\n    //                 posCost: 0,\n    //                 posCross: 0,\n    //                 posInit: 0,\n    //                 posComm: 0,\n    //                 posLoss: 0,\n    //                 posMargin: 0,\n    //                 posMaint: 0,\n    //                 maintMargin: 0,\n    //                 realisedGrossPnl: 0,\n    //                 realisedPnl: 0,\n    //                 unrealisedPnl: 0,\n    //                 unrealisedPnlPcnt: 0,\n    //                 unrealisedRoePcnt: 0,\n    //                 avgEntryPrice: 0,\n    //                 liquidationPrice: 0,\n    //                 bankruptPrice: 0,\n    //                 settleCurrency: 'USDT',\n    //                 isInverse: false\n    //             },\n    //             {\n    //                 id: '605a9772026ac900066550df',\n    //                 symbol: 'XBTUSDM',\n    //                 autoDeposit: false,\n    //                 maintMarginReq: 0.005,\n    //                 riskLimit: 200,\n    //                 realLeverage: 0,\n    //                 crossMode: false,\n    //                 delevPercentage: 0,\n    //                 currentTimestamp: 1616549746110,\n    //                 currentQty: 0,\n    //                 currentCost: 0,\n    //                 currentComm: 0,\n    //                 unrealisedCost: 0,\n    //                 realisedGrossCost: 0,\n    //                 realisedCost: 0,\n    //                 isOpen: false,\n    //                 markPrice: 54354.76,\n    //                 markValue: 0,\n    //                 posCost: 0,\n    //                 posCross: 0,\n    //                 posInit: 0,\n    //                 posComm: 0,\n    //                 posLoss: 0,\n    //                 posMargin: 0,\n    //                 posMaint: 0,\n    //                 maintMargin: 0,\n    //                 realisedGrossPnl: 0,\n    //                 realisedPnl: 0,\n    //                 unrealisedPnl: 0,\n    //                 unrealisedPnlPcnt: 0,\n    //                 unrealisedRoePcnt: 0,\n    //                 avgEntryPrice: 0,\n    //                 liquidationPrice: 0,\n    //                 bankruptPrice: 0,\n    //                 settleCurrency: 'XBT',\n    //                 isInverse: true\n    //             }\n    //         ]\n    //     }\n    //\n\n    return this.safeValue(response, 'data', response);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    //\n    // the v2 URL is https://openapi-v2.kucoin.com/api/v1/endpoint\n    //                                †                 ↑\n    //\n    const versions = this.safeValue(this.options, 'versions', {});\n    const apiVersions = this.safeValue(versions, api, {});\n    const methodVersions = this.safeValue(apiVersions, method, {});\n    const defaultVersion = this.safeString(methodVersions, path, this.options['version']);\n    const version = this.safeString(params, 'version', defaultVersion);\n    params = this.omit(params, 'version');\n    let endpoint = '/api/' + version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n    let endpart = '';\n    headers = headers !== undefined ? headers : {};\n\n    if (Object.keys(query).length) {\n      if (method === 'GET' || method === 'DELETE') {\n        endpoint += '?' + this.urlencode(query);\n      } else {\n        body = this.json(query);\n        endpart = body;\n        headers['Content-Type'] = 'application/json';\n      }\n    }\n\n    const url = this.urls['api'][api] + endpoint;\n\n    if (api === 'private' || api === 'futuresPrivate') {\n      this.checkRequiredCredentials();\n      const timestamp = this.nonce().toString();\n      headers = this.extend({\n        'KC-API-KEY-VERSION': '2',\n        'KC-API-KEY': this.apiKey,\n        'KC-API-TIMESTAMP': timestamp\n      }, headers);\n      const apiKeyVersion = this.safeString(headers, 'KC-API-KEY-VERSION');\n\n      if (apiKeyVersion === '2') {\n        const passphrase = this.hmac(this.encode(this.password), this.encode(this.secret), 'sha256', 'base64');\n        headers['KC-API-PASSPHRASE'] = passphrase;\n      } else {\n        headers['KC-API-PASSPHRASE'] = this.password;\n      }\n\n      const payload = timestamp + method + endpoint + endpart;\n      const signature = this.hmac(this.encode(payload), this.encode(this.secret), 'sha256', 'base64');\n      headers['KC-API-SIGN'] = signature;\n      const partner = this.safeValue(this.options, 'partner', {});\n      const partnerId = this.safeString(partner, 'id');\n      const partnerSecret = this.safeString(partner, 'secret');\n\n      if (partnerId !== undefined && partnerSecret !== undefined) {\n        const partnerPayload = timestamp + partnerId + this.apiKey;\n        const partnerSignature = this.hmac(this.encode(partnerPayload), this.encode(partnerSecret), 'sha256', 'base64');\n        headers['KC-API-PARTNER-SIGN'] = partnerSignature;\n        headers['KC-API-PARTNER'] = partnerId;\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (!response) {\n      this.throwBroadlyMatchedException(this.exceptions['broad'], body, body);\n      return;\n    } //\n    // bad\n    //     { \"code\": \"400100\", \"msg\": \"validation.createOrder.clientOidIsRequired\" }\n    // good\n    //     { code: '200000', data: { ... }}\n    //\n\n\n    const errorCode = this.safeString(response, 'code');\n    const message = this.safeString(response, 'msg', '');\n    this.throwExactlyMatchedException(this.exceptions['exact'], message, this.id + ' ' + message);\n    this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, this.id + ' ' + message);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/kucoin.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","ExchangeNotAvailable","InsufficientFunds","OrderNotFound","InvalidOrder","AccountSuspended","InvalidNonce","NotSupported","BadRequest","AuthenticationError","BadSymbol","RateLimitExceeded","PermissionDenied","Precise","module","exports","kucoin","describe","deepExtend","nonce","milliseconds","loadTimeDifference","params","response","publicGetTimestamp","after","kucoinTime","safeInteger","options","parseInt","fetchTime","fetchStatus","publicGetStatus","data","safeValue","status","undefined","extend","fetchMarkets","publicGetSymbols","result","i","length","market","id","safeString","baseId","quoteId","split","base","safeCurrencyCode","quote","symbol","active","baseMaxSize","safeNumber","baseMinSizeString","quoteMaxSizeString","baseMinSize","parseNumber","quoteMaxSize","quoteMinSize","precision","precisionFromString","limits","stringDiv","push","fetchCurrencies","publicGetCurrencies","entry","name","code","isWithdrawEnabled","isDepositEnabled","fee","fetchAccounts","privateGetAccounts","account","accountId","currencyId","type","fetchFundingFee","request","privateGetWithdrawalsQuotas","withdrawFees","parseTicker","ticker","percentage","last","safeNumber2","marketId","safeSymbol","baseVolume","quoteVolume","vwap","timestamp","safeInteger2","iso8601","fetchTickers","symbols","loadMarkets","publicGetMarketAllTickers","tickers","filterByArray","fetchTicker","publicGetMarketStats","parseOHLCV","ohlcv","safeTimestamp","fetchOHLCV","timeframe","since","limit","timeframes","duration","parseTimeframe","endAt","Math","floor","sum","publicGetMarketCandles","parseOHLCVs","createDepositAddress","privatePostDepositAddresses","address","replace","tag","checkAddress","fetchDepositAddress","privateGetDepositAddresses","fetchL3OrderBook","fetchOrderBook","level","method","orderbook","parseOrderBook","createOrder","side","amount","price","clientOrderId","safeString2","uuid","omit","quoteAmount","amountToPrecision","priceToPrecision","privatePostOrders","order","cancelOrder","cancelAllOrders","privateDeleteOrders","fetchOrdersByStatus","privateGetOrders","responseData","orders","parseOrders","fetchClosedOrders","fetchOpenOrders","fetchOrder","parseOrder","orderId","datetime","feeCurrencyId","feeCurrency","feeCost","filled","cost","isActive","cancelExist","timeInForce","stopPrice","postOnly","safeOrder","fetchMyTrades","parseResponseData","trades","parseTrades","fetchTrades","publicGetMarketHistories","parseTrade","trade","takerOrMaker","priceString","amountString","stringMul","withdraw","currency","privatePostWithdrawals","parseTransactionStatus","statuses","parseTransaction","transaction","txid","txidParts","numTxidParts","rawStatus","rate","updated","isV1","comment","fetchDeposits","parseTransactions","fetchWithdrawals","fetchBalance","defaultType","requestedType","accountsByType","keys","Object","join","futuresPrivateGetAccountOverview","parseBalance","balance","balanceType","transfer","fromAccount","toAccount","requestedAmount","currencyToPrecision","accountsById","fromId","toId","uuid22","futuresPrivatePostTransferOut","privatePostAccountsInnerTransfer","fetchLedger","loadAccounts","accounts","privateGetAccountsAccountIdLedgers","items","parseLedger","parseLedgerEntry","item","direction","before","difference","parseLedgerEntryType","contextString","referenceId","isJsonEncodedObject","context","parseJson","types","fetchPositions","futuresPrivateGetPositions","sign","path","api","headers","body","versions","apiVersions","methodVersions","defaultVersion","version","endpoint","implodeParams","query","extractParams","endpart","urlencode","json","url","urls","checkRequiredCredentials","toString","apiKey","apiKeyVersion","passphrase","hmac","encode","password","secret","payload","signature","partner","partnerId","partnerSecret","partnerPayload","partnerSignature","handleErrors","reason","requestHeaders","requestBody","throwBroadlyMatchedException","exceptions","errorCode","message","throwExactlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, ExchangeNotAvailable, InsufficientFunds, OrderNotFound, InvalidOrder, AccountSuspended, InvalidNonce, NotSupported, BadRequest, AuthenticationError, BadSymbol, RateLimitExceeded, PermissionDenied } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class kucoin extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'kucoin',\n            'name': 'KuCoin',\n            'countries': [ 'SC' ],\n            'rateLimit': 334,\n            'version': 'v2',\n            'certified': false,\n            'pro': true,\n            'comment': 'Platform 2.0',\n            'has': {\n                'CORS': false,\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createDepositAddress': true,\n                'createOrder': true,\n                'fetchAccounts': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchFundingFee': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchStatus': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n                'transfer': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg',\n                'referral': 'https://www.kucoin.com/?rcode=E5wkqe',\n                'api': {\n                    'public': 'https://openapi-v2.kucoin.com',\n                    'private': 'https://openapi-v2.kucoin.com',\n                    'futuresPrivate': 'https://api-futures.kucoin.com',\n                    'futuresPublic': 'https://api-futures.kucoin.com',\n                },\n                'test': {\n                    'public': 'https://openapi-sandbox.kucoin.com',\n                    'private': 'https://openapi-sandbox.kucoin.com',\n                    'futuresPrivate': 'https://api-sandbox-futures.kucoin.com',\n                    'futuresPublic': 'https://api-sandbox-futures.kucoin.com',\n                },\n                'www': 'https://www.kucoin.com',\n                'doc': [\n                    'https://docs.kucoin.com',\n                ],\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'password': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'timestamp',\n                        'status',\n                        'symbols',\n                        'markets',\n                        'market/allTickers',\n                        'market/orderbook/level{level}_{limit}',\n                        'market/orderbook/level2_20',\n                        'market/orderbook/level2_100',\n                        'market/histories',\n                        'market/candles',\n                        'market/stats',\n                        'currencies',\n                        'currencies/{currency}',\n                        'prices',\n                        'mark-price/{symbol}/current',\n                        'margin/config',\n                    ],\n                    'post': [\n                        'bullet-public',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'market/orderbook/level{level}',\n                        'market/orderbook/level2',\n                        'market/orderbook/level3',\n                        'accounts',\n                        'accounts/{accountId}',\n                        'accounts/{accountId}/ledgers',\n                        'accounts/{accountId}/holds',\n                        'accounts/transferable',\n                        'sub/user',\n                        'sub-accounts',\n                        'sub-accounts/{subUserId}',\n                        'deposit-addresses',\n                        'deposits',\n                        'hist-deposits',\n                        'hist-orders',\n                        'hist-withdrawals',\n                        'withdrawals',\n                        'withdrawals/quotas',\n                        'orders',\n                        'order/client-order/{clientOid}',\n                        'orders/{orderId}',\n                        'limit/orders',\n                        'fills',\n                        'limit/fills',\n                        'margin/account',\n                        'margin/borrow',\n                        'margin/borrow/outstanding',\n                        'margin/borrow/borrow/repaid',\n                        'margin/lend/active',\n                        'margin/lend/done',\n                        'margin/lend/trade/unsettled',\n                        'margin/lend/trade/settled',\n                        'margin/lend/assets',\n                        'margin/market',\n                        'margin/trade/last',\n                        'stop-order/{orderId}',\n                        'stop-order',\n                        'stop-order/queryOrderByClientOid',\n                    ],\n                    'post': [\n                        'accounts',\n                        'accounts/inner-transfer',\n                        'accounts/sub-transfer',\n                        'deposit-addresses',\n                        'withdrawals',\n                        'orders',\n                        'orders/multi',\n                        'margin/borrow',\n                        'margin/order',\n                        'margin/repay/all',\n                        'margin/repay/single',\n                        'margin/lend',\n                        'margin/toggle-auto-lend',\n                        'bullet-private',\n                        'stop-order',\n                    ],\n                    'delete': [\n                        'withdrawals/{withdrawalId}',\n                        'orders',\n                        'orders/client-order/{clientOid}',\n                        'orders/{orderId}',\n                        'margin/lend/{orderId}',\n                        'stop-order/cancelOrderByClientOid',\n                        'stop-order/{orderId}',\n                        'stop-order/cancel',\n                    ],\n                },\n                'futuresPublic': {\n                    'get': [\n                        'contracts/active',\n                        'contracts/{symbol}',\n                        'ticker',\n                        'level2/snapshot',\n                        'level2/depth20',\n                        'level2/depth100',\n                        'level2/message/query',\n                        'level3/message/query', // deprecated，level3/snapshot is suggested\n                        'level3/snapshot', // v2\n                        'trade/history',\n                        'interest/query',\n                        'index/query',\n                        'mark-price/{symbol}/current',\n                        'premium/query',\n                        'funding-rate/{symbol}/current',\n                        'timestamp',\n                        'status',\n                        'kline/query',\n                    ],\n                    'post': [\n                        'bullet-public',\n                    ],\n                },\n                'futuresPrivate': {\n                    'get': [\n                        'account-overview',\n                        'transaction-history',\n                        'deposit-address',\n                        'deposit-list',\n                        'withdrawals/quotas',\n                        'withdrawal-list',\n                        'transfer-list',\n                        'orders',\n                        'stopOrders',\n                        'recentDoneOrders',\n                        'orders/{order-id}', // ?clientOid={client-order-id} // get order by orderId\n                        'orders/byClientOid', // ?clientOid=eresc138b21023a909e5ad59 // get order by clientOid\n                        'fills',\n                        'recentFills',\n                        'openOrderStatistics',\n                        'position',\n                        'positions',\n                        'funding-history',\n                    ],\n                    'post': [\n                        'withdrawals',\n                        'transfer-out', // v2\n                        'orders',\n                        'position/margin/auto-deposit-status',\n                        'position/margin/deposit-margin',\n                        'bullet-private',\n                    ],\n                    'delete': [\n                        'withdrawals/{withdrawalId}',\n                        'cancel/transfer-out',\n                        'orders/{order-id}',\n                        'orders',\n                        'stopOrders',\n                    ],\n                },\n            },\n            'timeframes': {\n                '1m': '1min',\n                '3m': '3min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '1hour',\n                '2h': '2hour',\n                '4h': '4hour',\n                '6h': '6hour',\n                '8h': '8hour',\n                '12h': '12hour',\n                '1d': '1day',\n                '1w': '1week',\n            },\n            'exceptions': {\n                'exact': {\n                    'order not exist': OrderNotFound,\n                    'order not exist.': OrderNotFound, // duplicated error temporarily\n                    'order_not_exist': OrderNotFound, // {\"code\":\"order_not_exist\",\"msg\":\"order_not_exist\"} ¯\\_(ツ)_/¯\n                    'order_not_exist_or_not_allow_to_cancel': InvalidOrder, // {\"code\":\"400100\",\"msg\":\"order_not_exist_or_not_allow_to_cancel\"}\n                    'Order size below the minimum requirement.': InvalidOrder, // {\"code\":\"400100\",\"msg\":\"Order size below the minimum requirement.\"}\n                    'The withdrawal amount is below the minimum requirement.': ExchangeError, // {\"code\":\"400100\",\"msg\":\"The withdrawal amount is below the minimum requirement.\"}\n                    'Unsuccessful! Exceeded the max. funds out-transfer limit': InsufficientFunds, // {\"code\":\"200000\",\"msg\":\"Unsuccessful! Exceeded the max. funds out-transfer limit\"}\n                    '400': BadRequest,\n                    '401': AuthenticationError,\n                    '403': NotSupported,\n                    '404': NotSupported,\n                    '405': NotSupported,\n                    '429': RateLimitExceeded,\n                    '500': ExchangeNotAvailable, // Internal Server Error -- We had a problem with our server. Try again later.\n                    '503': ExchangeNotAvailable,\n                    '101030': PermissionDenied, // {\"code\":\"101030\",\"msg\":\"You haven't yet enabled the margin trading\"}\n                    '200004': InsufficientFunds,\n                    '230003': InsufficientFunds, // {\"code\":\"230003\",\"msg\":\"Balance insufficient!\"}\n                    '260100': InsufficientFunds, // {\"code\":\"260100\",\"msg\":\"account.noBalance\"}\n                    '300000': InvalidOrder,\n                    '400000': BadSymbol,\n                    '400001': AuthenticationError,\n                    '400002': InvalidNonce,\n                    '400003': AuthenticationError,\n                    '400004': AuthenticationError,\n                    '400005': AuthenticationError,\n                    '400006': AuthenticationError,\n                    '400007': AuthenticationError,\n                    '400008': NotSupported,\n                    '400100': BadRequest,\n                    '411100': AccountSuspended,\n                    '415000': BadRequest, // {\"code\":\"415000\",\"msg\":\"Unsupported Media Type\"}\n                    '500000': ExchangeError,\n                },\n                'broad': {\n                    'Exceeded the access frequency': RateLimitExceeded,\n                    'require more permission': PermissionDenied,\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.001,\n                    'maker': 0.001,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {},\n                    'deposit': {},\n                },\n            },\n            'commonCurrencies': {\n                'HOT': 'HOTNOW',\n                'EDGE': 'DADI', // https://github.com/ccxt/ccxt/issues/5756\n                'WAX': 'WAXP',\n                'TRY': 'Trias',\n                'VAI': 'VAIOT',\n            },\n            'options': {\n                'version': 'v1',\n                'symbolSeparator': '-',\n                'fetchMyTradesMethod': 'private_get_fills',\n                'fetchBalance': 'trade',\n                // endpoint versions\n                'versions': {\n                    'public': {\n                        'GET': {\n                            'status': 'v1',\n                            'market/orderbook/level2_20': 'v1',\n                            'market/orderbook/level2_100': 'v1',\n                            'market/orderbook/level{level}_{limit}': 'v1',\n                        },\n                    },\n                    'private': {\n                        'GET': {\n                            'market/orderbook/level2': 'v3',\n                            'market/orderbook/level3': 'v3',\n                            'market/orderbook/level{level}': 'v3',\n                        },\n                        'POST': {\n                            'accounts/inner-transfer': 'v2',\n                            'accounts/sub-transfer': 'v2',\n                        },\n                    },\n                    'futuresPrivate': {\n                        'GET': {\n                            'account-overview': 'v1',\n                            'positions': 'v1',\n                        },\n                        'POST': {\n                            'transfer-out': 'v2',\n                        },\n                    },\n                    'futuresPublic': {\n                        'GET': {\n                            'level3/snapshot': 'v2',\n                        },\n                    },\n                },\n                'accountsByType': {\n                    'trade': 'trade',\n                    'trading': 'trade',\n                    'margin': 'margin',\n                    'main': 'main',\n                    'futures': 'contract',\n                    'contract': 'contract',\n                    'pool': 'pool',\n                    'pool-x': 'pool',\n                },\n            },\n        });\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    async loadTimeDifference (params = {}) {\n        const response = await this.publicGetTimestamp (params);\n        const after = this.milliseconds ();\n        const kucoinTime = this.safeInteger (response, 'data');\n        this.options['timeDifference'] = parseInt (after - kucoinTime);\n        return this.options['timeDifference'];\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetTimestamp (params);\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"msg\":\"success\",\n        //         \"data\":1546837113087\n        //     }\n        //\n        return this.safeInteger (response, 'data');\n    }\n\n    async fetchStatus (params = {}) {\n        const response = await this.publicGetStatus (params);\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"data\":{\n        //             \"msg\":\"\",\n        //             \"status\":\"open\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        let status = this.safeValue (data, 'status');\n        if (status !== undefined) {\n            status = (status === 'open') ? 'ok' : 'maintenance';\n            this.status = this.extend (this.status, {\n                'status': status,\n                'updated': this.milliseconds (),\n            });\n        }\n        return this.status;\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetSymbols (params);\n        //\n        //     {\n        //         quoteCurrency: 'BTC',\n        //         symbol: 'KCS-BTC',\n        //         quoteMaxSize: '9999999',\n        //         quoteIncrement: '0.000001',\n        //         baseMinSize: '0.01',\n        //         quoteMinSize: '0.00001',\n        //         enableTrading: true,\n        //         priceIncrement: '0.00000001',\n        //         name: 'KCS-BTC',\n        //         baseIncrement: '0.01',\n        //         baseMaxSize: '9999999',\n        //         baseCurrency: 'KCS'\n        //     }\n        //\n        const data = response['data'];\n        const result = [];\n        for (let i = 0; i < data.length; i++) {\n            const market = data[i];\n            const id = this.safeString (market, 'symbol');\n            const [ baseId, quoteId ] = id.split ('-');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const active = this.safeValue (market, 'enableTrading');\n            const baseMaxSize = this.safeNumber (market, 'baseMaxSize');\n            const baseMinSizeString = this.safeString (market, 'baseMinSize');\n            const quoteMaxSizeString = this.safeString (market, 'quoteMaxSize');\n            const baseMinSize = this.parseNumber (baseMinSizeString);\n            const quoteMaxSize = this.parseNumber (quoteMaxSizeString);\n            const quoteMinSize = this.safeNumber (market, 'quoteMinSize');\n            // const quoteIncrement = this.safeNumber (market, 'quoteIncrement');\n            const precision = {\n                'amount': this.precisionFromString (this.safeString (market, 'baseIncrement')),\n                'price': this.precisionFromString (this.safeString (market, 'priceIncrement')),\n            };\n            const limits = {\n                'amount': {\n                    'min': baseMinSize,\n                    'max': baseMaxSize,\n                },\n                'price': {\n                    'min': this.safeNumber (market, 'priceIncrement'),\n                    'max': this.parseNumber (Precise.stringDiv (quoteMaxSizeString, baseMinSizeString)),\n                },\n                'cost': {\n                    'min': quoteMinSize,\n                    'max': quoteMaxSize,\n                },\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'base': base,\n                'quote': quote,\n                'active': active,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCurrencies (params);\n        //\n        //     {\n        //         \"currency\": \"OMG\",\n        //         \"name\": \"OMG\",\n        //         \"fullName\": \"OmiseGO\",\n        //         \"precision\": 8,\n        //         \"confirms\": 12,\n        //         \"withdrawalMinSize\": \"4\",\n        //         \"withdrawalMinFee\": \"1.25\",\n        //         \"isWithdrawEnabled\": false,\n        //         \"isDepositEnabled\": false,\n        //         \"isMarginEnabled\": false,\n        //         \"isDebitEnabled\": false\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = {};\n        for (let i = 0; i < data.length; i++) {\n            const entry = data[i];\n            const id = this.safeString (entry, 'currency');\n            const name = this.safeString (entry, 'fullName');\n            const code = this.safeCurrencyCode (id);\n            const precision = this.safeInteger (entry, 'precision');\n            const isWithdrawEnabled = this.safeValue (entry, 'isWithdrawEnabled', false);\n            const isDepositEnabled = this.safeValue (entry, 'isDepositEnabled', false);\n            const fee = this.safeNumber (entry, 'withdrawalMinFee');\n            const active = (isWithdrawEnabled && isDepositEnabled);\n            result[code] = {\n                'id': id,\n                'name': name,\n                'code': code,\n                'precision': precision,\n                'info': entry,\n                'active': active,\n                'fee': fee,\n                'limits': this.limits,\n            };\n        }\n        return result;\n    }\n\n    async fetchAccounts (params = {}) {\n        const response = await this.privateGetAccounts (params);\n        //\n        //     {\n        //         code: \"200000\",\n        //         data: [\n        //             {\n        //                 balance: \"0.00009788\",\n        //                 available: \"0.00009788\",\n        //                 holds: \"0\",\n        //                 currency: \"BTC\",\n        //                 id: \"5c6a4fd399a1d81c4f9cc4d0\",\n        //                 type: \"trade\"\n        //             },\n        //             {\n        //                 balance: \"0.00000001\",\n        //                 available: \"0.00000001\",\n        //                 holds: \"0\",\n        //                 currency: \"ETH\",\n        //                 id: \"5c6a49ec99a1d819392e8e9f\",\n        //                 type: \"trade\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const result = [];\n        for (let i = 0; i < data.length; i++) {\n            const account = data[i];\n            const accountId = this.safeString (account, 'id');\n            const currencyId = this.safeString (account, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const type = this.safeString (account, 'type');  // main or trade\n            result.push ({\n                'id': accountId,\n                'type': type,\n                'currency': code,\n                'info': account,\n            });\n        }\n        return result;\n    }\n\n    async fetchFundingFee (code, params = {}) {\n        const currencyId = this.currencyId (code);\n        const request = {\n            'currency': currencyId,\n        };\n        const response = await this.privateGetWithdrawalsQuotas (this.extend (request, params));\n        const data = response['data'];\n        const withdrawFees = {};\n        withdrawFees[code] = this.safeNumber (data, 'withdrawMinFee');\n        return {\n            'info': response,\n            'withdraw': withdrawFees,\n            'deposit': {},\n        };\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         symbol: \"ETH-BTC\",\n        //         high: \"0.019518\",\n        //         vol: \"7997.82836194\",\n        //         last: \"0.019329\",\n        //         low: \"0.019\",\n        //         buy: \"0.019329\",\n        //         sell: \"0.01933\",\n        //         changePrice: \"-0.000139\",\n        //         time:  1580553706304,\n        //         averagePrice: \"0.01926386\",\n        //         changeRate: \"-0.0071\",\n        //         volValue: \"154.40791568183474\"\n        //     }\n        //\n        //     {\n        //         \"trading\": true,\n        //         \"symbol\": \"KCS-BTC\",\n        //         \"buy\": 0.00011,\n        //         \"sell\": 0.00012,\n        //         \"sort\": 100,\n        //         \"volValue\": 3.13851792584,   //total\n        //         \"baseCurrency\": \"KCS\",\n        //         \"market\": \"BTC\",\n        //         \"quoteCurrency\": \"BTC\",\n        //         \"symbolCode\": \"KCS-BTC\",\n        //         \"datetime\": 1548388122031,\n        //         \"high\": 0.00013,\n        //         \"vol\": 27514.34842,\n        //         \"low\": 0.0001,\n        //         \"changePrice\": -1.0e-5,\n        //         \"changeRate\": -0.0769,\n        //         \"lastTradedPrice\": 0.00012,\n        //         \"board\": 0,\n        //         \"mark\": 0\n        //     }\n        //\n        let percentage = this.safeNumber (ticker, 'changeRate');\n        if (percentage !== undefined) {\n            percentage = percentage * 100;\n        }\n        const last = this.safeNumber2 (ticker, 'last', 'lastTradedPrice');\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const baseVolume = this.safeNumber (ticker, 'vol');\n        const quoteVolume = this.safeNumber (ticker, 'volValue');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        const timestamp = this.safeInteger2 (ticker, 'time', 'datetime');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': this.safeNumber (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': this.safeNumber (ticker, 'changePrice'),\n            'percentage': percentage,\n            'average': this.safeNumber (ticker, 'averagePrice'),\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetMarketAllTickers (params);\n        //\n        //     {\n        //         \"code\": \"200000\",\n        //         \"data\": {\n        //             \"date\": 1550661940645,\n        //             \"ticker\": [\n        //                 'buy': '0.00001168',\n        //                 'changePrice': '-0.00000018',\n        //                 'changeRate': '-0.0151',\n        //                 'datetime': 1550661146316,\n        //                 'high': '0.0000123',\n        //                 'last': '0.00001169',\n        //                 'low': '0.00001159',\n        //                 'sell': '0.00001182',\n        //                 'symbol': 'LOOM-BTC',\n        //                 'vol': '44399.5669'\n        //             },\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const tickers = this.safeValue (data, 'ticker', []);\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = this.parseTicker (tickers[i]);\n            const symbol = this.safeString (ticker, 'symbol');\n            if (symbol !== undefined) {\n                result[symbol] = ticker;\n            }\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetMarketStats (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"200000\",\n        //         \"data\": {\n        //             'buy': '0.00001168',\n        //             'changePrice': '-0.00000018',\n        //             'changeRate': '-0.0151',\n        //             'datetime': 1550661146316,\n        //             'high': '0.0000123',\n        //             'last': '0.00001169',\n        //             'low': '0.00001159',\n        //             'sell': '0.00001182',\n        //             'symbol': 'LOOM-BTC',\n        //             'vol': '44399.5669'\n        //         },\n        //     }\n        //\n        return this.parseTicker (response['data'], market);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         \"1545904980\",             // Start time of the candle cycle\n        //         \"0.058\",                  // opening price\n        //         \"0.049\",                  // closing price\n        //         \"0.058\",                  // highest price\n        //         \"0.049\",                  // lowest price\n        //         \"0.018\",                  // base volume\n        //         \"0.000945\",               // quote volume\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.safeNumber (ohlcv, 1),\n            this.safeNumber (ohlcv, 3),\n            this.safeNumber (ohlcv, 4),\n            this.safeNumber (ohlcv, 2),\n            this.safeNumber (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '15m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const marketId = market['id'];\n        const request = {\n            'symbol': marketId,\n            'type': this.timeframes[timeframe],\n        };\n        const duration = this.parseTimeframe (timeframe) * 1000;\n        let endAt = this.milliseconds (); // required param\n        if (since !== undefined) {\n            request['startAt'] = parseInt (Math.floor (since / 1000));\n            if (limit === undefined) {\n                // https://docs.kucoin.com/#get-klines\n                // https://docs.kucoin.com/#details\n                // For each query, the system would return at most 1500 pieces of data.\n                // To obtain more data, please page the data by time.\n                limit = this.safeInteger (this.options, 'fetchOHLCVLimit', 1500);\n            }\n            endAt = this.sum (since, limit * duration);\n        } else if (limit !== undefined) {\n            since = endAt - limit * duration;\n            request['startAt'] = parseInt (Math.floor (since / 1000));\n        }\n        request['endAt'] = parseInt (Math.floor (endAt / 1000));\n        const response = await this.publicGetMarketCandles (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"data\":[\n        //             [\"1591517700\",\"0.025078\",\"0.025069\",\"0.025084\",\"0.025064\",\"18.9883256\",\"0.4761861079404\"],\n        //             [\"1591516800\",\"0.025089\",\"0.025079\",\"0.025089\",\"0.02506\",\"99.4716622\",\"2.494143499081\"],\n        //             [\"1591515900\",\"0.025079\",\"0.02509\",\"0.025091\",\"0.025068\",\"59.83701271\",\"1.50060885172798\"],\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currencyId = this.currencyId (code);\n        const request = { 'currency': currencyId };\n        const response = await this.privatePostDepositAddresses (this.extend (request, params));\n        // BCH {\"code\":\"200000\",\"data\":{\"address\":\"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z\",\"memo\":\"\"}}\n        // BTC {\"code\":\"200000\",\"data\":{\"address\":\"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE\",\"memo\":\"\"}}\n        const data = this.safeValue (response, 'data', {});\n        let address = this.safeString (data, 'address');\n        // BCH/BSV is returned with a \"bitcoincash:\" prefix, which we cut off here and only keep the address\n        if (address !== undefined) {\n            address = address.replace ('bitcoincash:', '');\n        }\n        const tag = this.safeString (data, 'memo');\n        if (code !== 'NIM') {\n            // contains spaces\n            this.checkAddress (address);\n        }\n        return {\n            'info': response,\n            'currency': code,\n            'address': address,\n            'tag': tag,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currencyId = this.currencyId (code);\n        const request = { 'currency': currencyId };\n        const response = await this.privateGetDepositAddresses (this.extend (request, params));\n        // BCH {\"code\":\"200000\",\"data\":{\"address\":\"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z\",\"memo\":\"\"}}\n        // BTC {\"code\":\"200000\",\"data\":{\"address\":\"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE\",\"memo\":\"\"}}\n        const data = this.safeValue (response, 'data', {});\n        const address = this.safeString (data, 'address');\n        const tag = this.safeString (data, 'memo');\n        if (code !== 'NIM') {\n            // contains spaces\n            this.checkAddress (address);\n        }\n        return {\n            'info': response,\n            'currency': code,\n            'address': address,\n            'tag': tag,\n        };\n    }\n\n    async fetchL3OrderBook (symbol, limit = undefined, params = {}) {\n        return await this.fetchOrderBook (symbol, limit, { 'level': 3 });\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const marketId = this.marketId (symbol);\n        const level = this.safeInteger (params, 'level', 2);\n        const request = { 'symbol': marketId, 'level': level };\n        let method = 'privateGetMarketOrderbookLevelLevel';\n        if (level === 2) {\n            if (limit !== undefined) {\n                if ((limit === 20) || (limit === 100)) {\n                    request['limit'] = limit;\n                    method = 'publicGetMarketOrderbookLevelLevelLimit';\n                } else {\n                    throw new ExchangeError (this.id + ' fetchOrderBook limit argument must be undefined, 20 or 100');\n                }\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // 'market/orderbook/level2'\n        // 'market/orderbook/level2_20'\n        // 'market/orderbook/level2_100'\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"data\":{\n        //             \"sequence\":\"1583235112106\",\n        //             \"asks\":[\n        //                 // ...\n        //                 [\"0.023197\",\"12.5067468\"],\n        //                 [\"0.023194\",\"1.8\"],\n        //                 [\"0.023191\",\"8.1069672\"]\n        //             ],\n        //             \"bids\":[\n        //                 [\"0.02319\",\"1.6000002\"],\n        //                 [\"0.023189\",\"2.2842325\"],\n        //             ],\n        //             \"time\":1586584067274\n        //         }\n        //     }\n        //\n        // 'market/orderbook/level3'\n        //\n        //     {\n        //         \"code\":\"200000\",\n        //         \"data\":{\n        //             \"sequence\":\"1583731857120\",\n        //             \"asks\":[\n        //                 // id, price, size, timestamp in nanoseconds\n        //                 [\"5e915f8acd26670009675300\",\"6925.7\",\"0.2\",\"1586585482194286069\"],\n        //                 [\"5e915f8ace35a200090bba48\",\"6925.7\",\"0.001\",\"1586585482229569826\"],\n        //                 [\"5e915f8a8857740009ca7d33\",\"6926\",\"0.00001819\",\"1586585482149148621\"],\n        //             ],\n        //             \"bids\":[\n        //                 [\"5e915f8acca406000ac88194\",\"6925.6\",\"0.05\",\"1586585482384384842\"],\n        //                 [\"5e915f93cd26670009676075\",\"6925.6\",\"0.08\",\"1586585491334914600\"],\n        //                 [\"5e915f906aa6e200099b49f6\",\"6925.4\",\"0.2\",\"1586585488941126340\"],\n        //             ],\n        //             \"time\":1586585492487\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const timestamp = this.safeInteger (data, 'time');\n        const orderbook = this.parseOrderBook (data, symbol, timestamp, 'bids', 'asks', level - 2, level - 1);\n        orderbook['nonce'] = this.safeInteger (data, 'sequence');\n        return orderbook;\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const marketId = this.marketId (symbol);\n        // required param, cannot be used twice\n        const clientOrderId = this.safeString2 (params, 'clientOid', 'clientOrderId', this.uuid ());\n        params = this.omit (params, [ 'clientOid', 'clientOrderId' ]);\n        const request = {\n            'clientOid': clientOrderId,\n            'side': side,\n            'symbol': marketId,\n            'type': type, // limit or market\n            // 'remark': '', // optional remark for the order, length cannot exceed 100 utf8 characters\n            // 'stp': '', // self trade prevention, CN, CO, CB or DC\n            // To improve the system performance and to accelerate order placing and processing, KuCoin has added a new interface for margin orders\n            // The current one will no longer accept margin orders by May 1st, 2021 (UTC)\n            // At the time, KuCoin will notify users via the announcement, please pay attention to it\n            // 'tradeType': 'TRADE', // TRADE, MARGIN_TRADE // not used with margin orders\n            // limit orders ---------------------------------------------------\n            // 'timeInForce': 'GTC', // GTC, GTT, IOC, or FOK (default is GTC), limit orders only\n            // 'cancelAfter': long, // cancel after n seconds, requires timeInForce to be GTT\n            // 'postOnly': false, // Post only flag, invalid when timeInForce is IOC or FOK\n            // 'hidden': false, // Order will not be displayed in the order book\n            // 'iceberg': false, // Only a portion of the order is displayed in the order book\n            // 'visibleSize': this.amountToPrecision (symbol, visibleSize), // The maximum visible size of an iceberg order\n            // market orders --------------------------------------------------\n            // 'size': this.amountToPrecision (symbol, amount), // Amount in base currency\n            // 'funds': this.costToPrecision (symbol, cost), // Amount of quote currency to use\n            // stop orders ----------------------------------------------------\n            // 'stop': 'loss', // loss or entry, the default is loss, requires stopPrice\n            // 'stopPrice': this.priceToPrecision (symbol, amount), // need to be defined if stop is specified\n            // margin orders --------------------------------------------------\n            // 'marginMode': 'cross', // cross (cross mode) and isolated (isolated mode), set to cross by default, the isolated mode will be released soon, stay tuned\n            // 'autoBorrow': false, // The system will first borrow you funds at the optimal interest rate and then place an order for you\n        };\n        const quoteAmount = this.safeNumber2 (params, 'cost', 'funds');\n        if (type === 'market') {\n            if (quoteAmount !== undefined) {\n                params = this.omit (params, [ 'cost', 'funds' ]);\n                // kucoin uses base precision even for quote values\n                request['funds'] = this.amountToPrecision (symbol, quoteAmount);\n            } else {\n                request['size'] = this.amountToPrecision (symbol, amount);\n            }\n        } else {\n            request['price'] = this.priceToPrecision (symbol, price);\n            request['size'] = this.amountToPrecision (symbol, amount);\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //     {\n        //         code: '200000',\n        //         data: {\n        //             \"orderId\": \"5bd6e9286d99522a52e458de\"\n        //         }\n        //    }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const timestamp = this.milliseconds ();\n        const id = this.safeString (data, 'orderId');\n        const order = {\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'info': data,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': undefined,\n            'cost': undefined,\n            'average': undefined,\n            'filled': undefined,\n            'remaining': undefined,\n            'status': undefined,\n            'fee': undefined,\n            'trades': undefined,\n        };\n        if (quoteAmount === undefined) {\n            order['amount'] = amount;\n        } else {\n            order['cost'] = quoteAmount;\n        }\n        return order;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const clientOrderId = this.safeString2 (params, 'clientOid', 'clientOrderId');\n        let method = 'privateDeleteOrdersOrderId';\n        if (clientOrderId !== undefined) {\n            request['clientOid'] = clientOrderId;\n            method = 'privateDeleteOrdersClientOrderClientOid';\n        } else {\n            request['orderId'] = id;\n        }\n        params = this.omit (params, [ 'clientOid', 'clientOrderId' ]);\n        return await this[method] (this.extend (request, params));\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'symbol': market['id'],\n            // 'tradeType': 'TRADE', // default is to cancel the spot trading order\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        return await this.privateDeleteOrders (this.extend (request, params));\n    }\n\n    async fetchOrdersByStatus (status, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'status': status,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['startAt'] = since;\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        //\n        //     {\n        //         code: '200000',\n        //         data: {\n        //             \"currentPage\": 1,\n        //             \"pageSize\": 1,\n        //             \"totalNum\": 153408,\n        //             \"totalPage\": 153408,\n        //             \"items\": [\n        //                 {\n        //                     \"id\": \"5c35c02703aa673ceec2a168\",   //orderid\n        //                     \"symbol\": \"BTC-USDT\",   //symbol\n        //                     \"opType\": \"DEAL\",      // operation type,deal is pending order,cancel is cancel order\n        //                     \"type\": \"limit\",       // order type,e.g. limit,markrt,stop_limit.\n        //                     \"side\": \"buy\",         // transaction direction,include buy and sell\n        //                     \"price\": \"10\",         // order price\n        //                     \"size\": \"2\",           // order quantity\n        //                     \"funds\": \"0\",          // order funds\n        //                     \"dealFunds\": \"0.166\",  // deal funds\n        //                     \"dealSize\": \"2\",       // deal quantity\n        //                     \"fee\": \"0\",            // fee\n        //                     \"feeCurrency\": \"USDT\", // charge fee currency\n        //                     \"stp\": \"\",             // self trade prevention,include CN,CO,DC,CB\n        //                     \"stop\": \"\",            // stop type\n        //                     \"stopTriggered\": false,  // stop order is triggered\n        //                     \"stopPrice\": \"0\",      // stop price\n        //                     \"timeInForce\": \"GTC\",  // time InForce,include GTC,GTT,IOC,FOK\n        //                     \"postOnly\": false,     // postOnly\n        //                     \"hidden\": false,       // hidden order\n        //                     \"iceberg\": false,      // iceberg order\n        //                     \"visibleSize\": \"0\",    // display quantity for iceberg order\n        //                     \"cancelAfter\": 0,      // cancel orders time，requires timeInForce to be GTT\n        //                     \"channel\": \"IOS\",      // order source\n        //                     \"clientOid\": \"\",       // user-entered order unique mark\n        //                     \"remark\": \"\",          // remark\n        //                     \"tags\": \"\",            // tag order source\n        //                     \"isActive\": false,     // status before unfilled or uncancelled\n        //                     \"cancelExist\": false,   // order cancellation transaction record\n        //                     \"createdAt\": 1547026471000  // time\n        //                 },\n        //             ]\n        //         }\n        //    }\n        const responseData = this.safeValue (response, 'data', {});\n        const orders = this.safeValue (responseData, 'items', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByStatus ('done', symbol, since, limit, params);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByStatus ('active', symbol, since, limit, params);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        const clientOrderId = this.safeString2 (params, 'clientOid', 'clientOrderId');\n        let method = 'privateGetOrdersOrderId';\n        if (clientOrderId !== undefined) {\n            request['clientOid'] = clientOrderId;\n            method = 'privateGetOrdersClientOrderClientOid';\n        } else {\n            // a special case for undefined ids\n            // otherwise a wrong endpoint for all orders will be triggered\n            // https://github.com/ccxt/ccxt/issues/7234\n            if (id === undefined) {\n                throw new InvalidOrder (this.id + ' fetchOrder() requires an order id');\n            }\n            request['orderId'] = id;\n        }\n        params = this.omit (params, [ 'clientOid', 'clientOrderId' ]);\n        const response = await this[method] (this.extend (request, params));\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const responseData = this.safeValue (response, 'data');\n        return this.parseOrder (responseData, market);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"id\": \"5c35c02703aa673ceec2a168\",   //orderid\n        //         \"symbol\": \"BTC-USDT\",   //symbol\n        //         \"opType\": \"DEAL\",      // operation type,deal is pending order,cancel is cancel order\n        //         \"type\": \"limit\",       // order type,e.g. limit,markrt,stop_limit.\n        //         \"side\": \"buy\",         // transaction direction,include buy and sell\n        //         \"price\": \"10\",         // order price\n        //         \"size\": \"2\",           // order quantity\n        //         \"funds\": \"0\",          // order funds\n        //         \"dealFunds\": \"0.166\",  // deal funds\n        //         \"dealSize\": \"2\",       // deal quantity\n        //         \"fee\": \"0\",            // fee\n        //         \"feeCurrency\": \"USDT\", // charge fee currency\n        //         \"stp\": \"\",             // self trade prevention,include CN,CO,DC,CB\n        //         \"stop\": \"\",            // stop type\n        //         \"stopTriggered\": false,  // stop order is triggered\n        //         \"stopPrice\": \"0\",      // stop price\n        //         \"timeInForce\": \"GTC\",  // time InForce,include GTC,GTT,IOC,FOK\n        //         \"postOnly\": false,     // postOnly\n        //         \"hidden\": false,       // hidden order\n        //         \"iceberg\": false,      // iceberg order\n        //         \"visibleSize\": \"0\",    // display quantity for iceberg order\n        //         \"cancelAfter\": 0,      // cancel orders time，requires timeInForce to be GTT\n        //         \"channel\": \"IOS\",      // order source\n        //         \"clientOid\": \"\",       // user-entered order unique mark\n        //         \"remark\": \"\",          // remark\n        //         \"tags\": \"\",            // tag order source\n        //         \"isActive\": false,     // status before unfilled or uncancelled\n        //         \"cancelExist\": false,   // order cancellation transaction record\n        //         \"createdAt\": 1547026471000  // time\n        //     }\n        //\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const orderId = this.safeString (order, 'id');\n        const type = this.safeString (order, 'type');\n        const timestamp = this.safeInteger (order, 'createdAt');\n        const datetime = this.iso8601 (timestamp);\n        let price = this.safeNumber (order, 'price');\n        if (price === 0.0) {\n            // market orders\n            price = undefined;\n        }\n        const side = this.safeString (order, 'side');\n        const feeCurrencyId = this.safeString (order, 'feeCurrency');\n        const feeCurrency = this.safeCurrencyCode (feeCurrencyId);\n        const feeCost = this.safeNumber (order, 'fee');\n        const amount = this.safeNumber (order, 'size');\n        const filled = this.safeNumber (order, 'dealSize');\n        const cost = this.safeNumber (order, 'dealFunds');\n        // bool\n        const isActive = this.safeValue (order, 'isActive', false);\n        const cancelExist = this.safeValue (order, 'cancelExist', false);\n        let status = isActive ? 'open' : 'closed';\n        status = cancelExist ? 'canceled' : status;\n        const fee = {\n            'currency': feeCurrency,\n            'cost': feeCost,\n        };\n        const clientOrderId = this.safeString (order, 'clientOid');\n        const timeInForce = this.safeString (order, 'timeInForce');\n        const stopPrice = this.safeNumber (order, 'stopPrice');\n        const postOnly = this.safeValue (order, 'postOnly');\n        return this.safeOrder ({\n            'id': orderId,\n            'clientOrderId': clientOrderId,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'amount': amount,\n            'price': price,\n            'stopPrice': stopPrice,\n            'cost': cost,\n            'filled': filled,\n            'remaining': undefined,\n            'timestamp': timestamp,\n            'datetime': datetime,\n            'fee': fee,\n            'status': status,\n            'info': order,\n            'lastTradeTimestamp': undefined,\n            'average': undefined,\n            'trades': undefined,\n        });\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const method = this.options['fetchMyTradesMethod'];\n        let parseResponseData = false;\n        if (method === 'private_get_fills') {\n            // does not return trades earlier than 2019-02-18T00:00:00Z\n            if (since !== undefined) {\n                // only returns trades up to one week after the since param\n                request['startAt'] = since;\n            }\n        } else if (method === 'private_get_limit_fills') {\n            // does not return trades earlier than 2019-02-18T00:00:00Z\n            // takes no params\n            // only returns first 1000 trades (not only \"in the last 24 hours\" as stated in the docs)\n            parseResponseData = true;\n        } else if (method === 'private_get_hist_orders') {\n            // despite that this endpoint is called `HistOrders`\n            // it returns historical trades instead of orders\n            // returns trades earlier than 2019-02-18T00:00:00Z only\n            if (since !== undefined) {\n                request['startAt'] = parseInt (since / 1000);\n            }\n        } else {\n            throw new ExchangeError (this.id + ' invalid fetchClosedOrder method');\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"currentPage\": 1,\n        //         \"pageSize\": 50,\n        //         \"totalNum\": 1,\n        //         \"totalPage\": 1,\n        //         \"items\": [\n        //             {\n        //                 \"symbol\":\"BTC-USDT\",       // symbol\n        //                 \"tradeId\":\"5c35c02709e4f67d5266954e\",        // trade id\n        //                 \"orderId\":\"5c35c02703aa673ceec2a168\",        // order id\n        //                 \"counterOrderId\":\"5c1ab46003aa676e487fa8e3\", // counter order id\n        //                 \"side\":\"buy\",              // transaction direction,include buy and sell\n        //                 \"liquidity\":\"taker\",       // include taker and maker\n        //                 \"forceTaker\":true,         // forced to become taker\n        //                 \"price\":\"0.083\",           // order price\n        //                 \"size\":\"0.8424304\",        // order quantity\n        //                 \"funds\":\"0.0699217232\",    // order funds\n        //                 \"fee\":\"0\",                 // fee\n        //                 \"feeRate\":\"0\",             // fee rate\n        //                 \"feeCurrency\":\"USDT\",      // charge fee currency\n        //                 \"stop\":\"\",                 // stop type\n        //                 \"type\":\"limit\",            // order type, e.g. limit, market, stop_limit.\n        //                 \"createdAt\":1547026472000  // time\n        //             },\n        //             //------------------------------------------------------\n        //             // v1 (historical) trade response structure\n        //             {\n        //                 \"symbol\": \"SNOV-ETH\",\n        //                 \"dealPrice\": \"0.0000246\",\n        //                 \"dealValue\": \"0.018942\",\n        //                 \"amount\": \"770\",\n        //                 \"fee\": \"0.00001137\",\n        //                 \"side\": \"sell\",\n        //                 \"createdAt\": 1540080199\n        //                 \"id\":\"5c4d389e4c8c60413f78e2e5\",\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        let trades = undefined;\n        if (parseResponseData) {\n            trades = data;\n        } else {\n            trades = this.safeValue (data, 'items', []);\n        }\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['startAt'] = Math.floor (since / 1000);\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const response = await this.publicGetMarketHistories (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": \"200000\",\n        //         \"data\": [\n        //             {\n        //                 \"sequence\": \"1548764654235\",\n        //                 \"side\": \"sell\",\n        //                 \"size\":\"0.6841354\",\n        //                 \"price\":\"0.03202\",\n        //                 \"time\":1548848575203567174\n        //             }\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, 'data', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"sequence\": \"1548764654235\",\n        //         \"side\": \"sell\",\n        //         \"size\":\"0.6841354\",\n        //         \"price\":\"0.03202\",\n        //         \"time\":1548848575203567174\n        //     }\n        //\n        //     {\n        //         sequence: '1568787654360',\n        //         symbol: 'BTC-USDT',\n        //         side: 'buy',\n        //         size: '0.00536577',\n        //         price: '9345',\n        //         takerOrderId: '5e356c4a9f1a790008f8d921',\n        //         time: '1580559434436443257',\n        //         type: 'match',\n        //         makerOrderId: '5e356bffedf0010008fa5d7f',\n        //         tradeId: '5e356c4aeefabd62c62a1ece'\n        //     }\n        //\n        // fetchMyTrades (private) v2\n        //\n        //     {\n        //         \"symbol\":\"BTC-USDT\",\n        //         \"tradeId\":\"5c35c02709e4f67d5266954e\",\n        //         \"orderId\":\"5c35c02703aa673ceec2a168\",\n        //         \"counterOrderId\":\"5c1ab46003aa676e487fa8e3\",\n        //         \"side\":\"buy\",\n        //         \"liquidity\":\"taker\",\n        //         \"forceTaker\":true,\n        //         \"price\":\"0.083\",\n        //         \"size\":\"0.8424304\",\n        //         \"funds\":\"0.0699217232\",\n        //         \"fee\":\"0\",\n        //         \"feeRate\":\"0\",\n        //         \"feeCurrency\":\"USDT\",\n        //         \"stop\":\"\",\n        //         \"type\":\"limit\",\n        //         \"createdAt\":1547026472000\n        //     }\n        //\n        // fetchMyTrades v2 alternative format since 2019-05-21 https://github.com/ccxt/ccxt/pull/5162\n        //\n        //     {\n        //         symbol: \"OPEN-BTC\",\n        //         forceTaker:  false,\n        //         orderId: \"5ce36420054b4663b1fff2c9\",\n        //         fee: \"0\",\n        //         feeCurrency: \"\",\n        //         type: \"\",\n        //         feeRate: \"0\",\n        //         createdAt: 1558417615000,\n        //         size: \"12.8206\",\n        //         stop: \"\",\n        //         price: \"0\",\n        //         funds: \"0\",\n        //         tradeId: \"5ce390cf6e0db23b861c6e80\"\n        //     }\n        //\n        // fetchMyTrades (private) v1 (historical)\n        //\n        //     {\n        //         \"symbol\": \"SNOV-ETH\",\n        //         \"dealPrice\": \"0.0000246\",\n        //         \"dealValue\": \"0.018942\",\n        //         \"amount\": \"770\",\n        //         \"fee\": \"0.00001137\",\n        //         \"side\": \"sell\",\n        //         \"createdAt\": 1540080199\n        //         \"id\":\"5c4d389e4c8c60413f78e2e5\",\n        //     }\n        //\n        const marketId = this.safeString (trade, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const id = this.safeString2 (trade, 'tradeId', 'id');\n        const orderId = this.safeString (trade, 'orderId');\n        const takerOrMaker = this.safeString (trade, 'liquidity');\n        let timestamp = this.safeInteger (trade, 'time');\n        if (timestamp !== undefined) {\n            timestamp = parseInt (timestamp / 1000000);\n        } else {\n            timestamp = this.safeInteger (trade, 'createdAt');\n            // if it's a historical v1 trade, the exchange returns timestamp in seconds\n            if (('dealValue' in trade) && (timestamp !== undefined)) {\n                timestamp = timestamp * 1000;\n            }\n        }\n        const priceString = this.safeString2 (trade, 'price', 'dealPrice');\n        const amountString = this.safeString2 (trade, 'size', 'amount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const side = this.safeString (trade, 'side');\n        let fee = undefined;\n        const feeCost = this.safeNumber (trade, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'feeCurrency');\n            let feeCurrency = this.safeCurrencyCode (feeCurrencyId);\n            if (feeCurrency === undefined) {\n                if (market !== undefined) {\n                    feeCurrency = (side === 'sell') ? market['quote'] : market['base'];\n                }\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrency,\n                'rate': this.safeNumber (trade, 'feeRate'),\n            };\n        }\n        let type = this.safeString (trade, 'type');\n        if (type === 'match') {\n            type = undefined;\n        }\n        let cost = this.safeNumber2 (trade, 'funds', 'dealValue');\n        if (cost === undefined) {\n            cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'takerOrMaker': takerOrMaker,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        await this.loadMarkets ();\n        this.checkAddress (address);\n        const currency = this.currencyId (code);\n        const request = {\n            'currency': currency,\n            'address': address,\n            'amount': amount,\n        };\n        if (tag !== undefined) {\n            request['memo'] = tag;\n        }\n        const response = await this.privatePostWithdrawals (this.extend (request, params));\n        //\n        // https://github.com/ccxt/ccxt/issues/5558\n        //\n        //     {\n        //         \"code\":  200000,\n        //         \"data\": {\n        //             \"withdrawalId\":  \"abcdefghijklmnopqrstuvwxyz\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return {\n            'id': this.safeString (data, 'withdrawalId'),\n            'info': response,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'SUCCESS': 'ok',\n            'PROCESSING': 'ok',\n            'FAILURE': 'failed',\n        };\n        return this.safeString (statuses, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"address\": \"0x5f047b29041bcfdbf0e4478cdfa753a336ba6989\",\n        //         \"memo\": \"5c247c8a03aa677cea2a251d\",\n        //         \"amount\": 1,\n        //         \"fee\": 0.0001,\n        //         \"currency\": \"KCS\",\n        //         \"isInner\": false,\n        //         \"walletTxId\": \"5bbb57386d99522d9f954c5a@test004\",\n        //         \"status\": \"SUCCESS\",\n        //         \"createdAt\": 1544178843000,\n        //         \"updatedAt\": 1544178891000\n        //         \"remark\":\"foobar\"\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"id\": \"5c2dc64e03aa675aa263f1ac\",\n        //         \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\",\n        //         \"memo\": \"\",\n        //         \"currency\": \"ETH\",\n        //         \"amount\": 1.0000000,\n        //         \"fee\": 0.0100000,\n        //         \"walletTxId\": \"3e2414d82acce78d38be7fe9\",\n        //         \"isInner\": false,\n        //         \"status\": \"FAILURE\",\n        //         \"createdAt\": 1546503758000,\n        //         \"updatedAt\": 1546504603000\n        //         \"remark\":\"foobar\"\n        //     }\n        //\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        let address = this.safeString (transaction, 'address');\n        const amount = this.safeNumber (transaction, 'amount');\n        let txid = this.safeString (transaction, 'walletTxId');\n        if (txid !== undefined) {\n            const txidParts = txid.split ('@');\n            const numTxidParts = txidParts.length;\n            if (numTxidParts > 1) {\n                if (address === undefined) {\n                    if (txidParts[1].length > 1) {\n                        address = txidParts[1];\n                    }\n                }\n            }\n            txid = txidParts[0];\n        }\n        let type = (txid === undefined) ? 'withdrawal' : 'deposit';\n        const rawStatus = this.safeString (transaction, 'status');\n        const status = this.parseTransactionStatus (rawStatus);\n        let fee = undefined;\n        const feeCost = this.safeNumber (transaction, 'fee');\n        if (feeCost !== undefined) {\n            let rate = undefined;\n            if (amount !== undefined) {\n                rate = feeCost / amount;\n            }\n            fee = {\n                'cost': feeCost,\n                'rate': rate,\n                'currency': code,\n            };\n        }\n        const tag = this.safeString (transaction, 'memo');\n        let timestamp = this.safeInteger2 (transaction, 'createdAt', 'createAt');\n        const id = this.safeString (transaction, 'id');\n        let updated = this.safeInteger (transaction, 'updatedAt');\n        const isV1 = !('createdAt' in transaction);\n        // if it's a v1 structure\n        if (isV1) {\n            type = ('address' in transaction) ? 'withdrawal' : 'deposit';\n            if (timestamp !== undefined) {\n                timestamp = timestamp * 1000;\n            }\n            if (updated !== undefined) {\n                updated = updated * 1000;\n            }\n        }\n        const comment = this.safeString (transaction, 'remark');\n        return {\n            'id': id,\n            'info': transaction,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'addressTo': address,\n            'addressFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'tagFrom': undefined,\n            'currency': code,\n            'amount': amount,\n            'txid': txid,\n            'type': type,\n            'status': status,\n            'comment': comment,\n            'fee': fee,\n            'updated': updated,\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        let method = 'privateGetDeposits';\n        if (since !== undefined) {\n            // if since is earlier than 2019-02-18T00:00:00Z\n            if (since < 1550448000000) {\n                request['startAt'] = parseInt (since / 1000);\n                method = 'privateGetHistDeposits';\n            } else {\n                request['startAt'] = since;\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         code: '200000',\n        //         data: {\n        //             \"currentPage\": 1,\n        //             \"pageSize\": 5,\n        //             \"totalNum\": 2,\n        //             \"totalPage\": 1,\n        //             \"items\": [\n        //                 //--------------------------------------------------\n        //                 // version 2 deposit response structure\n        //                 {\n        //                     \"address\": \"0x5f047b29041bcfdbf0e4478cdfa753a336ba6989\",\n        //                     \"memo\": \"5c247c8a03aa677cea2a251d\",\n        //                     \"amount\": 1,\n        //                     \"fee\": 0.0001,\n        //                     \"currency\": \"KCS\",\n        //                     \"isInner\": false,\n        //                     \"walletTxId\": \"5bbb57386d99522d9f954c5a@test004\",\n        //                     \"status\": \"SUCCESS\",\n        //                     \"createdAt\": 1544178843000,\n        //                     \"updatedAt\": 1544178891000\n        //                     \"remark\":\"foobar\"\n        //                 },\n        //                 //--------------------------------------------------\n        //                 // version 1 (historical) deposit response structure\n        //                 {\n        //                     \"currency\": \"BTC\",\n        //                     \"createAt\": 1528536998,\n        //                     \"amount\": \"0.03266638\",\n        //                     \"walletTxId\": \"55c643bc2c68d6f17266383ac1be9e454038864b929ae7cee0bc408cc5c869e8@12ffGWmMMD1zA1WbFm7Ho3JZ1w6NYXjpFk@234\",\n        //                     \"isInner\": false,\n        //                     \"status\": \"SUCCESS\",\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const responseData = response['data']['items'];\n        return this.parseTransactions (responseData, currency, since, limit, { 'type': 'deposit' });\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        let method = 'privateGetWithdrawals';\n        if (since !== undefined) {\n            // if since is earlier than 2019-02-18T00:00:00Z\n            if (since < 1550448000000) {\n                request['startAt'] = parseInt (since / 1000);\n                method = 'privateGetHistWithdrawals';\n            } else {\n                request['startAt'] = since;\n            }\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         code: '200000',\n        //         data: {\n        //             \"currentPage\": 1,\n        //             \"pageSize\": 5,\n        //             \"totalNum\": 2,\n        //             \"totalPage\": 1,\n        //             \"items\": [\n        //                 //--------------------------------------------------\n        //                 // version 2 withdrawal response structure\n        //                 {\n        //                     \"id\": \"5c2dc64e03aa675aa263f1ac\",\n        //                     \"address\": \"0x5bedb060b8eb8d823e2414d82acce78d38be7fe9\",\n        //                     \"memo\": \"\",\n        //                     \"currency\": \"ETH\",\n        //                     \"amount\": 1.0000000,\n        //                     \"fee\": 0.0100000,\n        //                     \"walletTxId\": \"3e2414d82acce78d38be7fe9\",\n        //                     \"isInner\": false,\n        //                     \"status\": \"FAILURE\",\n        //                     \"createdAt\": 1546503758000,\n        //                     \"updatedAt\": 1546504603000\n        //                 },\n        //                 //--------------------------------------------------\n        //                 // version 1 (historical) withdrawal response structure\n        //                 {\n        //                     \"currency\": \"BTC\",\n        //                     \"createAt\": 1526723468,\n        //                     \"amount\": \"0.534\",\n        //                     \"address\": \"33xW37ZSW4tQvg443Pc7NLCAs167Yc2XUV\",\n        //                     \"walletTxId\": \"aeacea864c020acf58e51606169240e96774838dcd4f7ce48acf38e3651323f4\",\n        //                     \"isInner\": false,\n        //                     \"status\": \"SUCCESS\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const responseData = response['data']['items'];\n        return this.parseTransactions (responseData, currency, since, limit, { 'type': 'withdrawal' });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString2 (this.options, 'fetchBalance', 'defaultType', 'trade');\n        const requestedType = this.safeString (params, 'type', defaultType);\n        const accountsByType = this.safeValue (this.options, 'accountsByType');\n        const type = this.safeString (accountsByType, requestedType);\n        if (type === undefined) {\n            const keys = Object.keys (accountsByType);\n            throw new ExchangeError (this.id + ' type must be one of ' + keys.join (', '));\n        }\n        params = this.omit (params, 'type');\n        if (type === 'contract') {\n            // futures api requires a futures apiKey\n            // only fetches one balance at a time\n            // by default it will only fetch the BTC balance of the futures account\n            // you can send 'currency' in params to fetch other currencies\n            // fetchBalance ({ 'type': 'futures', 'currency': 'USDT' })\n            const response = await this.futuresPrivateGetAccountOverview (params);\n            //\n            //     {\n            //         code: '200000',\n            //         data: {\n            //             accountEquity: 0.00005,\n            //             unrealisedPNL: 0,\n            //             marginBalance: 0.00005,\n            //             positionMargin: 0,\n            //             orderMargin: 0,\n            //             frozenFunds: 0,\n            //             availableBalance: 0.00005,\n            //             currency: 'XBT'\n            //         }\n            //     }\n            //\n            const result = {\n                'info': response,\n                'timestamp': undefined,\n                'datetime': undefined,\n            };\n            const data = this.safeValue (response, 'data');\n            const currencyId = this.safeString (data, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeString (data, 'availableBalance');\n            account['total'] = this.safeString (data, 'accountEquity');\n            result[code] = account;\n            return this.parseBalance (result, false);\n        } else {\n            const request = {\n                'type': type,\n            };\n            const response = await this.privateGetAccounts (this.extend (request, params));\n            //\n            //     {\n            //         \"code\":\"200000\",\n            //         \"data\":[\n            //             {\"balance\":\"0.00009788\",\"available\":\"0.00009788\",\"holds\":\"0\",\"currency\":\"BTC\",\"id\":\"5c6a4fd399a1d81c4f9cc4d0\",\"type\":\"trade\"},\n            //             {\"balance\":\"3.41060034\",\"available\":\"3.41060034\",\"holds\":\"0\",\"currency\":\"SOUL\",\"id\":\"5c6a4d5d99a1d8182d37046d\",\"type\":\"trade\"},\n            //             {\"balance\":\"0.01562641\",\"available\":\"0.01562641\",\"holds\":\"0\",\"currency\":\"NEO\",\"id\":\"5c6a4f1199a1d8165a99edb1\",\"type\":\"trade\"},\n            //         ]\n            //     }\n            //\n            const data = this.safeValue (response, 'data', []);\n            const result = {\n                'info': response,\n                'timestamp': undefined,\n                'datetime': undefined,\n            };\n            for (let i = 0; i < data.length; i++) {\n                const balance = data[i];\n                const balanceType = this.safeString (balance, 'type');\n                if (balanceType === type) {\n                    const currencyId = this.safeString (balance, 'currency');\n                    const code = this.safeCurrencyCode (currencyId);\n                    const account = this.account ();\n                    account['total'] = this.safeString (balance, 'balance');\n                    account['free'] = this.safeString (balance, 'available');\n                    account['used'] = this.safeString (balance, 'holds');\n                    result[code] = account;\n                }\n            }\n            return this.parseBalance (result, false);\n        }\n    }\n\n    async transfer (code, amount, fromAccount, toAccount, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const requestedAmount = this.currencyToPrecision (code, amount);\n        const accountsById = this.safeValue (this.options, 'accountsByType', {});\n        const fromId = this.safeString (accountsById, fromAccount);\n        if (fromId === undefined) {\n            const keys = Object.keys (accountsById);\n            throw new ExchangeError (this.id + ' fromAccount must be one of ' + keys.join (', '));\n        }\n        const toId = this.safeString (accountsById, toAccount);\n        if (toId === undefined) {\n            const keys = Object.keys (accountsById);\n            throw new ExchangeError (this.id + ' toAccount must be one of ' + keys.join (', '));\n        }\n        if (fromId === 'contract') {\n            if (toId !== 'main') {\n                throw new ExchangeError (this.id + ' only supports transferring from futures account to main account');\n            }\n            const request = {\n                'currency': currency['id'],\n                'amount': requestedAmount,\n            };\n            if (!('bizNo' in params)) {\n                // it doesn't like more than 24 characters\n                request['bizNo'] = this.uuid22 ();\n            }\n            const response = await this.futuresPrivatePostTransferOut (this.extend (request, params));\n            //\n            //     {\n            //         code: '200000',\n            //         data: {\n            //             applyId: '605a87217dff1500063d485d',\n            //             bizNo: 'bcd6e5e1291f4905af84dc',\n            //             payAccountType: 'CONTRACT',\n            //             payTag: 'DEFAULT',\n            //             remark: '',\n            //             recAccountType: 'MAIN',\n            //             recTag: 'DEFAULT',\n            //             recRemark: '',\n            //             recSystem: 'KUCOIN',\n            //             status: 'PROCESSING',\n            //             currency: 'XBT',\n            //             amount: '0.00001',\n            //             fee: '0',\n            //             sn: '573688685663948',\n            //             reason: '',\n            //             createdAt: 1616545569000,\n            //             updatedAt: 1616545569000\n            //         }\n            //     }\n            //\n            const data = this.safeValue (response, 'data');\n            const timestamp = this.safeInteger (data, 'createdAt');\n            const id = this.safeString (data, 'applyId');\n            const currencyId = this.safeString (data, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const amount = this.safeNumber (data, 'amount');\n            const rawStatus = this.safeString (data, 'status');\n            let status = undefined;\n            if (rawStatus === 'PROCESSING') {\n                status = 'pending';\n            }\n            return {\n                'info': response,\n                'currency': code,\n                'timestamp': timestamp,\n                'datetime': this.iso8601 (timestamp),\n                'amount': amount,\n                'fromAccount': fromId,\n                'toAccount': toId,\n                'id': id,\n                'status': status,\n            };\n        } else {\n            const request = {\n                'currency': currency['id'],\n                'from': fromId,\n                'to': toId,\n                'amount': requestedAmount,\n            };\n            if (!('clientOid' in params)) {\n                request['clientOid'] = this.uuid ();\n            }\n            const response = await this.privatePostAccountsInnerTransfer (this.extend (request, params));\n            // { code: '200000', data: { orderId: '605a6211e657f00006ad0ad6' } }\n            const data = this.safeValue (response, 'data');\n            const id = this.safeString (data, 'orderId');\n            return {\n                'info': response,\n                'id': id,\n                'timestamp': undefined,\n                'datetime': undefined,\n                'currency': code,\n                'amount': requestedAmount,\n                'fromAccount': fromId,\n                'toAccount': toId,\n                'status': undefined,\n            };\n        }\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchLedger() requires a code param');\n        }\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const currency = this.currency (code);\n        let accountId = this.safeString (params, 'accountId');\n        if (accountId === undefined) {\n            for (let i = 0; i < this.accounts.length; i++) {\n                const account = this.accounts[i];\n                if (account['currency'] === code && account['type'] === 'main') {\n                    accountId = account['id'];\n                    break;\n                }\n            }\n        }\n        if (accountId === undefined) {\n            throw new ExchangeError (this.id + ' ' + code + 'main account is not loaded in loadAccounts');\n        }\n        const request = {\n            'accountId': accountId,\n        };\n        if (since !== undefined) {\n            request['startAt'] = Math.floor (since / 1000);\n        }\n        const response = await this.privateGetAccountsAccountIdLedgers (this.extend (request, params));\n        //\n        //     {\n        //         code: '200000',\n        //         data: {\n        //             totalNum: 1,\n        //             totalPage: 1,\n        //             pageSize: 50,\n        //             currentPage: 1,\n        //             items: [\n        //                 {\n        //                     createdAt: 1561897880000,\n        //                     amount: '0.0111123',\n        //                     bizType: 'Exchange',\n        //                     balance: '0.13224427',\n        //                     fee: '0.0000111',\n        //                     context: '{\"symbol\":\"KCS-ETH\",\"orderId\":\"5d18ab98c788c6426188296f\",\"tradeId\":\"5d18ab9818996813f539a806\"}',\n        //                     currency: 'ETH',\n        //                     direction: 'out'\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const items = response['data']['items'];\n        return this.parseLedger (items, currency, since, limit);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        // trade\n        //\n        //     {\n        //         createdAt: 1561897880000,\n        //         amount: '0.0111123',\n        //         bizType: 'Exchange',\n        //         balance: '0.13224427',\n        //         fee: '0.0000111',\n        //         context: '{\"symbol\":\"KCS-ETH\",\"orderId\":\"5d18ab98c788c6426188296f\",\"tradeId\":\"5d18ab9818996813f539a806\"}',\n        //         currency: 'ETH',\n        //         direction: 'out'\n        //     }\n        //\n        // withdrawal\n        //\n        //     {\n        //         createdAt: 1561900264000,\n        //         amount: '0.14333217',\n        //         bizType: 'Withdrawal',\n        //         balance: '0',\n        //         fee: '0.01',\n        //         context: '{\"orderId\":\"5d18b4e687111437cf1c48b9\",\"txId\":\"0x1d136ee065c5c4c5caa293faa90d43e213c953d7cdd575c89ed0b54eb87228b8\"}',\n        //         currency: 'ETH',\n        //         direction: 'out'\n        //     }\n        //\n        const currencyId = this.safeString (item, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const fee = {\n            'cost': this.safeNumber (item, 'fee'),\n            'code': code,\n        };\n        const amount = this.safeNumber (item, 'amount');\n        const after = this.safeNumber (item, 'balance');\n        const direction = this.safeString (item, 'direction');\n        let before = undefined;\n        if (after !== undefined && amount !== undefined) {\n            const difference = (direction === 'out') ? amount : -amount;\n            before = this.sum (after, difference);\n        }\n        const timestamp = this.safeInteger (item, 'createdAt');\n        const type = this.parseLedgerEntryType (this.safeString (item, 'bizType'));\n        const contextString = this.safeString (item, 'context');\n        let id = undefined;\n        let referenceId = undefined;\n        if (this.isJsonEncodedObject (contextString)) {\n            const context = this.parseJson (contextString);\n            id = this.safeString (context, 'orderId');\n            if (type === 'trade') {\n                referenceId = this.safeString (context, 'tradeId');\n            } else if (type === 'transaction') {\n                referenceId = this.safeString (context, 'txId');\n            }\n        }\n        return {\n            'id': id,\n            'currency': code,\n            'account': undefined,\n            'referenceAccount': undefined,\n            'referenceId': referenceId,\n            'status': undefined,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'fee': fee,\n            'direction': direction,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'type': type,\n            'info': item,\n        };\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'Exchange': 'trade',\n            'Withdrawal': 'transaction',\n            'Deposit': 'transaction',\n            'Transfer': 'transfer',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    async fetchPositions (symbols = undefined, params = {}) {\n        const response = await this.futuresPrivateGetPositions (params);\n        //\n        //     {\n        //         code: '200000',\n        //         data: [\n        //             {\n        //                 id: '605a9772a229ab0006408258',\n        //                 symbol: 'XBTUSDTM',\n        //                 autoDeposit: false,\n        //                 maintMarginReq: 0.005,\n        //                 riskLimit: 200,\n        //                 realLeverage: 0,\n        //                 crossMode: false,\n        //                 delevPercentage: 0,\n        //                 currentTimestamp: 1616549746099,\n        //                 currentQty: 0,\n        //                 currentCost: 0,\n        //                 currentComm: 0,\n        //                 unrealisedCost: 0,\n        //                 realisedGrossCost: 0,\n        //                 realisedCost: 0,\n        //                 isOpen: false,\n        //                 markPrice: 54371.92,\n        //                 markValue: 0,\n        //                 posCost: 0,\n        //                 posCross: 0,\n        //                 posInit: 0,\n        //                 posComm: 0,\n        //                 posLoss: 0,\n        //                 posMargin: 0,\n        //                 posMaint: 0,\n        //                 maintMargin: 0,\n        //                 realisedGrossPnl: 0,\n        //                 realisedPnl: 0,\n        //                 unrealisedPnl: 0,\n        //                 unrealisedPnlPcnt: 0,\n        //                 unrealisedRoePcnt: 0,\n        //                 avgEntryPrice: 0,\n        //                 liquidationPrice: 0,\n        //                 bankruptPrice: 0,\n        //                 settleCurrency: 'USDT',\n        //                 isInverse: false\n        //             },\n        //             {\n        //                 id: '605a9772026ac900066550df',\n        //                 symbol: 'XBTUSDM',\n        //                 autoDeposit: false,\n        //                 maintMarginReq: 0.005,\n        //                 riskLimit: 200,\n        //                 realLeverage: 0,\n        //                 crossMode: false,\n        //                 delevPercentage: 0,\n        //                 currentTimestamp: 1616549746110,\n        //                 currentQty: 0,\n        //                 currentCost: 0,\n        //                 currentComm: 0,\n        //                 unrealisedCost: 0,\n        //                 realisedGrossCost: 0,\n        //                 realisedCost: 0,\n        //                 isOpen: false,\n        //                 markPrice: 54354.76,\n        //                 markValue: 0,\n        //                 posCost: 0,\n        //                 posCross: 0,\n        //                 posInit: 0,\n        //                 posComm: 0,\n        //                 posLoss: 0,\n        //                 posMargin: 0,\n        //                 posMaint: 0,\n        //                 maintMargin: 0,\n        //                 realisedGrossPnl: 0,\n        //                 realisedPnl: 0,\n        //                 unrealisedPnl: 0,\n        //                 unrealisedPnlPcnt: 0,\n        //                 unrealisedRoePcnt: 0,\n        //                 avgEntryPrice: 0,\n        //                 liquidationPrice: 0,\n        //                 bankruptPrice: 0,\n        //                 settleCurrency: 'XBT',\n        //                 isInverse: true\n        //             }\n        //         ]\n        //     }\n        //\n        return this.safeValue (response, 'data', response);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        //\n        // the v2 URL is https://openapi-v2.kucoin.com/api/v1/endpoint\n        //                                †                 ↑\n        //\n        const versions = this.safeValue (this.options, 'versions', {});\n        const apiVersions = this.safeValue (versions, api, {});\n        const methodVersions = this.safeValue (apiVersions, method, {});\n        const defaultVersion = this.safeString (methodVersions, path, this.options['version']);\n        const version = this.safeString (params, 'version', defaultVersion);\n        params = this.omit (params, 'version');\n        let endpoint = '/api/' + version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        let endpart = '';\n        headers = (headers !== undefined) ? headers : {};\n        if (Object.keys (query).length) {\n            if ((method === 'GET') || (method === 'DELETE')) {\n                endpoint += '?' + this.urlencode (query);\n            } else {\n                body = this.json (query);\n                endpart = body;\n                headers['Content-Type'] = 'application/json';\n            }\n        }\n        const url = this.urls['api'][api] + endpoint;\n        if ((api === 'private') || (api === 'futuresPrivate')) {\n            this.checkRequiredCredentials ();\n            const timestamp = this.nonce ().toString ();\n            headers = this.extend ({\n                'KC-API-KEY-VERSION': '2',\n                'KC-API-KEY': this.apiKey,\n                'KC-API-TIMESTAMP': timestamp,\n            }, headers);\n            const apiKeyVersion = this.safeString (headers, 'KC-API-KEY-VERSION');\n            if (apiKeyVersion === '2') {\n                const passphrase = this.hmac (this.encode (this.password), this.encode (this.secret), 'sha256', 'base64');\n                headers['KC-API-PASSPHRASE'] = passphrase;\n            } else {\n                headers['KC-API-PASSPHRASE'] = this.password;\n            }\n            const payload = timestamp + method + endpoint + endpart;\n            const signature = this.hmac (this.encode (payload), this.encode (this.secret), 'sha256', 'base64');\n            headers['KC-API-SIGN'] = signature;\n            const partner = this.safeValue (this.options, 'partner', {});\n            const partnerId = this.safeString (partner, 'id');\n            const partnerSecret = this.safeString (partner, 'secret');\n            if ((partnerId !== undefined) && (partnerSecret !== undefined)) {\n                const partnerPayload = timestamp + partnerId + this.apiKey;\n                const partnerSignature = this.hmac (this.encode (partnerPayload), this.encode (partnerSecret), 'sha256', 'base64');\n                headers['KC-API-PARTNER-SIGN'] = partnerSignature;\n                headers['KC-API-PARTNER'] = partnerId;\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (!response) {\n            this.throwBroadlyMatchedException (this.exceptions['broad'], body, body);\n            return;\n        }\n        //\n        // bad\n        //     { \"code\": \"400100\", \"msg\": \"validation.createOrder.clientOidIsRequired\" }\n        // good\n        //     { code: '200000', data: { ... }}\n        //\n        const errorCode = this.safeString (response, 'code');\n        const message = this.safeString (response, 'msg', '');\n        this.throwExactlyMatchedException (this.exceptions['exact'], message, this.id + ' ' + message);\n        this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, this.id + ' ' + message);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}