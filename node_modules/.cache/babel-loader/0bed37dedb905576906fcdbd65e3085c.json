{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  AuthenticationError,\n  ExchangeError,\n  PermissionDenied,\n  ExchangeNotAvailable,\n  OnMaintenance,\n  InvalidOrder,\n  OrderNotFound,\n  InsufficientFunds,\n  ArgumentsRequired,\n  BadSymbol,\n  BadRequest,\n  RequestTimeout,\n  NetworkError\n} = require('./base/errors');\n\nconst {\n  TRUNCATE\n} = require('./base/functions/number');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class huobipro extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'huobipro',\n      'name': 'Huobi Pro',\n      'countries': ['CN'],\n      'rateLimit': 2000,\n      'userAgent': this.userAgents['chrome39'],\n      'version': 'v1',\n      'accounts': undefined,\n      'accountsById': undefined,\n      'hostname': 'api.huobi.pro',\n      // api.testnet.huobi.pro\n      'pro': true,\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'cancelOrders': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingLimits': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '60min',\n        '4h': '4hour',\n        '1d': '1day',\n        '1w': '1week',\n        '1M': '1mon',\n        '1y': '1year'\n      },\n      'urls': {\n        'test': {\n          'market': 'https://api.testnet.huobi.pro',\n          'public': 'https://api.testnet.huobi.pro',\n          'private': 'https://api.testnet.huobi.pro'\n        },\n        'logo': 'https://user-images.githubusercontent.com/1294454/76137448-22748a80-604e-11ea-8069-6e389271911d.jpg',\n        'api': {\n          'market': 'https://{hostname}',\n          'public': 'https://{hostname}',\n          'private': 'https://{hostname}',\n          'v2Public': 'https://{hostname}',\n          'v2Private': 'https://{hostname}'\n        },\n        'www': 'https://www.huobi.com',\n        'referral': 'https://www.huobi.com/en-us/topic/invited/?invite_code=rwrd3',\n        'doc': 'https://huobiapi.github.io/docs/spot/v1/cn/',\n        'fees': 'https://www.huobi.com/about/fee/'\n      },\n      'api': {\n        'v2Public': {\n          'get': ['reference/currencies']\n        },\n        'v2Private': {\n          'get': ['account/ledger', 'account/withdraw/quota', 'account/withdraw/address', // 提币地址查询(限母用户可用)\n          'account/deposit/address', 'reference/transact-fee-rate', 'account/asset-valuation', // 获取账户资产估值\n          'point/account', // 点卡余额查询\n          'sub-user/user-list', // 获取子用户列表\n          'sub-user/user-state', // 获取特定子用户的用户状态\n          'sub-user/account-list', // 获取特定子用户的账户列表\n          'sub-user/deposit-address', // 子用户充币地址查询\n          'sub-user/query-deposit', // 子用户充币记录查询\n          'user/api-key' // 母子用户API key信息查询\n          ],\n          'post': ['account/transfer', 'point/transfer', // 点卡划转\n          'sub-user/management', // 冻结/解冻子用户\n          'sub-user/creation', // 子用户创建\n          'sub-user/tradable-market', // 设置子用户交易权限\n          'sub-user/transferability', // 设置子用户资产转出权限\n          'sub-user/api-key-generation', // 子用户API key创建\n          'sub-user/api-key-modification', // 修改子用户API key\n          'sub-user/api-key-deletion' // 删除子用户API key\n          ]\n        },\n        'market': {\n          'get': ['history/kline', // 获取K线数据\n          'detail/merged', // 获取聚合行情(Ticker)\n          'depth', // 获取 Market Depth 数据\n          'trade', // 获取 Trade Detail 数据\n          'history/trade', // 批量获取最近的交易记录\n          'detail', // 获取 Market Detail 24小时成交量数据\n          'tickers']\n        },\n        'public': {\n          'get': ['common/symbols', // 查询系统支持的所有交易对\n          'common/currencys', // 查询系统支持的所有币种\n          'common/timestamp', // 查询系统当前时间\n          'common/exchange', // order limits\n          'settings/currencys' // ?language=en-US\n          ]\n        },\n        'private': {\n          'get': ['account/accounts', // 查询当前用户的所有账户(即account-id)\n          'account/accounts/{id}/balance', // 查询指定账户的余额\n          'account/accounts/{sub-uid}', 'account/history', 'cross-margin/loan-info', 'margin/loan-info', // 查询借币币息率及额度\n          'fee/fee-rate/get', 'order/openOrders', 'order/orders', 'order/orders/{id}', // 查询某个订单详情\n          'order/orders/{id}/matchresults', // 查询某个订单的成交明细\n          'order/orders/getClientOrder', 'order/history', // 查询当前委托、历史委托\n          'order/matchresults', // 查询当前成交、历史成交\n          'dw/withdraw-virtual/addresses', // 查询虚拟币提现地址（Deprecated）\n          'query/deposit-withdraw', 'margin/loan-info', 'margin/loan-orders', // 借贷订单\n          'margin/accounts/balance', // 借贷账户详情\n          'cross-margin/loan-orders', // 查询借币订单\n          'cross-margin/accounts/balance', // 借币账户详情\n          'points/actions', 'points/orders', 'subuser/aggregate-balance', 'stable-coin/exchange_rate', 'stable-coin/quote'],\n          'post': ['account/transfer', // 资产划转(该节点为母用户和子用户进行资产划转的通用接口。)\n          'futures/transfer', 'order/batch-orders', 'order/orders/place', // 创建并执行一个新订单 (一步下单， 推荐使用)\n          'order/orders/submitCancelClientOrder', 'order/orders/batchCancelOpenOrders', 'order/orders', // 创建一个新的订单请求 （仅创建订单，不执行下单）\n          'order/orders/{id}/place', // 执行一个订单 （仅执行已创建的订单）\n          'order/orders/{id}/submitcancel', // 申请撤销一个订单请求\n          'order/orders/batchcancel', // 批量撤销订单\n          'dw/balance/transfer', // 资产划转\n          'dw/withdraw/api/create', // 申请提现虚拟币\n          'dw/withdraw-virtual/create', // 申请提现虚拟币\n          'dw/withdraw-virtual/{id}/place', // 确认申请虚拟币提现（Deprecated）\n          'dw/withdraw-virtual/{id}/cancel', // 申请取消提现虚拟币\n          'dw/transfer-in/margin', // 现货账户划入至借贷账户\n          'dw/transfer-out/margin', // 借贷账户划出至现货账户\n          'margin/orders', // 申请借贷\n          'margin/orders/{id}/repay', // 归还借贷\n          'cross-margin/transfer-in', // 资产划转\n          'cross-margin/transfer-out', // 资产划转\n          'cross-margin/orders', // 申请借币\n          'cross-margin/orders/{id}/repay', // 归还借币\n          'stable-coin/exchange', 'subuser/transfer']\n        }\n      },\n      'fees': {\n        'trading': {\n          'feeSide': 'get',\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.002,\n          'taker': 0.002\n        }\n      },\n      'exceptions': {\n        'broad': {\n          'contract is restricted of closing positions on API.  Please contact customer service': OnMaintenance,\n          'maintain': OnMaintenance\n        },\n        'exact': {\n          // err-code\n          'bad-request': BadRequest,\n          'base-date-limit-error': BadRequest,\n          // {\"status\":\"error\",\"err-code\":\"base-date-limit-error\",\"err-msg\":\"date less than system limit\",\"data\":null}\n          'api-not-support-temp-addr': PermissionDenied,\n          // {\"status\":\"error\",\"err-code\":\"api-not-support-temp-addr\",\"err-msg\":\"API withdrawal does not support temporary addresses\",\"data\":null}\n          'timeout': RequestTimeout,\n          // {\"ts\":1571653730865,\"status\":\"error\",\"err-code\":\"timeout\",\"err-msg\":\"Request Timeout\"}\n          'gateway-internal-error': ExchangeNotAvailable,\n          // {\"status\":\"error\",\"err-code\":\"gateway-internal-error\",\"err-msg\":\"Failed to load data. Try again later.\",\"data\":null}\n          'account-frozen-balance-insufficient-error': InsufficientFunds,\n          // {\"status\":\"error\",\"err-code\":\"account-frozen-balance-insufficient-error\",\"err-msg\":\"trade account balance is not enough, left: `0.0027`\",\"data\":null}\n          'invalid-amount': InvalidOrder,\n          // eg \"Paramemter `amount` is invalid.\"\n          'order-limitorder-amount-min-error': InvalidOrder,\n          // limit order amount error, min: `0.001`\n          'order-limitorder-amount-max-error': InvalidOrder,\n          // market order amount error, max: `1000000`\n          'order-marketorder-amount-min-error': InvalidOrder,\n          // market order amount error, min: `0.01`\n          'order-limitorder-price-min-error': InvalidOrder,\n          // limit order price error\n          'order-limitorder-price-max-error': InvalidOrder,\n          // limit order price error\n          'order-holding-limit-failed': InvalidOrder,\n          // {\"status\":\"error\",\"err-code\":\"order-holding-limit-failed\",\"err-msg\":\"Order failed, exceeded the holding limit of this currency\",\"data\":null}\n          'order-orderprice-precision-error': InvalidOrder,\n          // {\"status\":\"error\",\"err-code\":\"order-orderprice-precision-error\",\"err-msg\":\"order price precision error, scale: `4`\",\"data\":null}\n          'order-etp-nav-price-max-error': InvalidOrder,\n          // {\"status\":\"error\",\"err-code\":\"order-etp-nav-price-max-error\",\"err-msg\":\"Order price cannot be higher than 5% of NAV\",\"data\":null}\n          'order-orderstate-error': OrderNotFound,\n          // canceling an already canceled order\n          'order-queryorder-invalid': OrderNotFound,\n          // querying a non-existent order\n          'order-update-error': ExchangeNotAvailable,\n          // undocumented error\n          'api-signature-check-failed': AuthenticationError,\n          'api-signature-not-valid': AuthenticationError,\n          // {\"status\":\"error\",\"err-code\":\"api-signature-not-valid\",\"err-msg\":\"Signature not valid: Incorrect Access key [Access key错误]\",\"data\":null}\n          'base-record-invalid': OrderNotFound,\n          // https://github.com/ccxt/ccxt/issues/5750\n          'base-symbol-trade-disabled': BadSymbol,\n          // {\"status\":\"error\",\"err-code\":\"base-symbol-trade-disabled\",\"err-msg\":\"Trading is disabled for this symbol\",\"data\":null}\n          'base-symbol-error': BadSymbol,\n          // {\"status\":\"error\",\"err-code\":\"base-symbol-error\",\"err-msg\":\"The symbol is invalid\",\"data\":null}\n          'system-maintenance': OnMaintenance,\n          // {\"status\": \"error\", \"err-code\": \"system-maintenance\", \"err-msg\": \"System is in maintenance!\", \"data\": null}\n          // err-msg\n          'invalid symbol': BadSymbol,\n          // {\"ts\":1568813334794,\"status\":\"error\",\"err-code\":\"invalid-parameter\",\"err-msg\":\"invalid symbol\"}\n          'symbol trade not open now': BadSymbol // {\"ts\":1576210479343,\"status\":\"error\",\"err-code\":\"invalid-parameter\",\"err-msg\":\"symbol trade not open now\"}\n\n        }\n      },\n      'options': {\n        // https://github.com/ccxt/ccxt/issues/5376\n        'fetchOrdersByStatesMethod': 'private_get_order_orders',\n        // 'private_get_order_history' // https://github.com/ccxt/ccxt/pull/5392\n        'fetchOpenOrdersMethod': 'fetch_open_orders_v1',\n        // 'fetch_open_orders_v2' // https://github.com/ccxt/ccxt/issues/5388\n        'createMarketBuyOrderRequiresPrice': true,\n        'fetchMarketsMethod': 'publicGetCommonSymbols',\n        'fetchBalanceMethod': 'privateGetAccountAccountsIdBalance',\n        'createOrderMethod': 'privatePostOrderOrdersPlace',\n        'language': 'en-US'\n      },\n      'commonCurrencies': {\n        // https://github.com/ccxt/ccxt/issues/6081\n        // https://github.com/ccxt/ccxt/issues/3365\n        // https://github.com/ccxt/ccxt/issues/2873\n        'GET': 'Themis',\n        // conflict with GET (Guaranteed Entrance Token, GET Protocol)\n        'GTC': 'Game.com',\n        // conflict with Gitcoin and Gastrocoin\n        'HOT': 'Hydro Protocol',\n        // conflict with HOT (Holo) https://github.com/ccxt/ccxt/issues/4929\n        'NFT': 'APENFT',\n        // https://github.com/ccxt/ccxt/issues/7399\n        // https://coinmarketcap.com/currencies/pnetwork/\n        // https://coinmarketcap.com/currencies/penta/markets/\n        // https://en.cryptonomist.ch/blog/eidoo/the-edo-to-pnt-upgrade-what-you-need-to-know-updated/\n        'PNT': 'Penta',\n        'SBTC': 'Super Bitcoin',\n        'BIFI': 'Bitcoin File' // conflict with Beefy.Finance https://github.com/ccxt/ccxt/issues/8706\n\n      }\n    });\n  }\n\n  async fetchTradingLimits(symbols = undefined, params = {}) {\n    // this method should not be called directly, use loadTradingLimits () instead\n    //  by default it will try load withdrawal fees of all currencies (with separate requests)\n    //  however if you define symbols = [ 'ETH/BTC', 'LTC/BTC' ] in args it will only load those\n    await this.loadMarkets();\n\n    if (symbols === undefined) {\n      symbols = this.symbols;\n    }\n\n    const result = {};\n\n    for (let i = 0; i < symbols.length; i++) {\n      const symbol = symbols[i];\n      result[symbol] = await this.fetchTradingLimitsById(this.marketId(symbol), params);\n    }\n\n    return result;\n  }\n\n  async fetchTradingLimitsById(id, params = {}) {\n    const request = {\n      'symbol': id\n    };\n    const response = await this.publicGetCommonExchange(this.extend(request, params)); //\n    //     { status:   \"ok\",\n    //         data: {                                  symbol: \"aidocbtc\",\n    //                              'buy-limit-must-less-than':  1.1,\n    //                          'sell-limit-must-greater-than':  0.9,\n    //                         'limit-order-must-greater-than':  1,\n    //                            'limit-order-must-less-than':  5000000,\n    //                    'market-buy-order-must-greater-than':  0.0001,\n    //                       'market-buy-order-must-less-than':  100,\n    //                   'market-sell-order-must-greater-than':  1,\n    //                      'market-sell-order-must-less-than':  500000,\n    //                       'circuit-break-when-greater-than':  10000,\n    //                          'circuit-break-when-less-than':  10,\n    //                 'market-sell-order-rate-must-less-than':  0.1,\n    //                  'market-buy-order-rate-must-less-than':  0.1        } }\n    //\n\n    return this.parseTradingLimits(this.safeValue(response, 'data', {}));\n  }\n\n  parseTradingLimits(limits, symbol = undefined, params = {}) {\n    //\n    //   {                                  symbol: \"aidocbtc\",\n    //                  'buy-limit-must-less-than':  1.1,\n    //              'sell-limit-must-greater-than':  0.9,\n    //             'limit-order-must-greater-than':  1,\n    //                'limit-order-must-less-than':  5000000,\n    //        'market-buy-order-must-greater-than':  0.0001,\n    //           'market-buy-order-must-less-than':  100,\n    //       'market-sell-order-must-greater-than':  1,\n    //          'market-sell-order-must-less-than':  500000,\n    //           'circuit-break-when-greater-than':  10000,\n    //              'circuit-break-when-less-than':  10,\n    //     'market-sell-order-rate-must-less-than':  0.1,\n    //      'market-buy-order-rate-must-less-than':  0.1        }\n    //\n    return {\n      'info': limits,\n      'limits': {\n        'amount': {\n          'min': this.safeNumber(limits, 'limit-order-must-greater-than'),\n          'max': this.safeNumber(limits, 'limit-order-must-less-than')\n        }\n      }\n    };\n  }\n\n  costToPrecision(symbol, cost) {\n    return this.decimalToPrecision(cost, TRUNCATE, this.markets[symbol]['precision']['cost'], this.precisionMode);\n  }\n\n  async fetchMarkets(params = {}) {\n    const method = this.options['fetchMarketsMethod'];\n    const response = await this[method](params);\n    const markets = this.safeValue(response, 'data');\n    const numMarkets = markets.length;\n\n    if (numMarkets < 1) {\n      throw new NetworkError(this.id + ' publicGetCommonSymbols returned empty response: ' + this.json(markets));\n    }\n\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const baseId = this.safeString(market, 'base-currency');\n      const quoteId = this.safeString(market, 'quote-currency');\n      const id = baseId + quoteId;\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeInteger(market, 'amount-precision'),\n        'price': this.safeInteger(market, 'price-precision'),\n        'cost': this.safeInteger(market, 'value-precision')\n      };\n      const maker = base === 'OMG' ? 0 : 0.2 / 100;\n      const taker = base === 'OMG' ? 0 : 0.2 / 100;\n      const minAmount = this.safeNumber(market, 'min-order-amt', Math.pow(10, -precision['amount']));\n      const maxAmount = this.safeNumber(market, 'max-order-amt');\n      const minCost = this.safeNumber(market, 'min-order-value', 0);\n      const state = this.safeString(market, 'state');\n      const active = state === 'online';\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'taker': taker,\n        'maker': maker,\n        'limits': {\n          'amount': {\n            'min': minAmount,\n            'max': maxAmount\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          },\n          'cost': {\n            'min': minCost,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         \"amount\": 26228.672978342216,\n    //         \"open\": 9078.95,\n    //         \"close\": 9146.86,\n    //         \"high\": 9155.41,\n    //         \"id\": 209988544334,\n    //         \"count\": 265846,\n    //         \"low\": 8988.0,\n    //         \"version\": 209988544334,\n    //         \"ask\": [ 9146.87, 0.156134 ],\n    //         \"vol\": 2.3822168242201668E8,\n    //         \"bid\": [ 9146.86, 0.080758 ],\n    //     }\n    //\n    // fetchTickers\n    //     {\n    //         symbol: \"bhdht\",\n    //         open:  2.3938,\n    //         high:  2.4151,\n    //         low:  2.3323,\n    //         close:  2.3909,\n    //         amount:  628.992,\n    //         vol:  1493.71841095,\n    //         count:  2088,\n    //         bid:  2.3643,\n    //         bidSize:  0.7136,\n    //         ask:  2.4061,\n    //         askSize:  0.4156\n    //     }\n    //\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const timestamp = this.safeInteger(ticker, 'ts');\n    let bid = undefined;\n    let bidVolume = undefined;\n    let ask = undefined;\n    let askVolume = undefined;\n\n    if ('bid' in ticker) {\n      if (Array.isArray(ticker['bid'])) {\n        bid = this.safeNumber(ticker['bid'], 0);\n        bidVolume = this.safeNumber(ticker['bid'], 1);\n      } else {\n        bid = this.safeNumber(ticker, 'bid');\n        bidVolume = this.safeValue(ticker, 'bidSize');\n      }\n    }\n\n    if ('ask' in ticker) {\n      if (Array.isArray(ticker['ask'])) {\n        ask = this.safeNumber(ticker['ask'], 0);\n        askVolume = this.safeNumber(ticker['ask'], 1);\n      } else {\n        ask = this.safeNumber(ticker, 'ask');\n        askVolume = this.safeValue(ticker, 'askSize');\n      }\n    }\n\n    const open = this.safeNumber(ticker, 'open');\n    const close = this.safeNumber(ticker, 'close');\n    let change = undefined;\n    let percentage = undefined;\n    let average = undefined;\n\n    if (open !== undefined && close !== undefined) {\n      change = close - open;\n      average = this.sum(open, close) / 2;\n\n      if (close !== undefined && close > 0) {\n        percentage = change / open * 100;\n      }\n    }\n\n    const baseVolume = this.safeNumber(ticker, 'amount');\n    const quoteVolume = this.safeNumber(ticker, 'vol');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': bid,\n      'bidVolume': bidVolume,\n      'ask': ask,\n      'askVolume': askVolume,\n      'vwap': vwap,\n      'open': open,\n      'close': close,\n      'last': close,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'type': 'step0'\n    };\n    const response = await this.marketGetDepth(this.extend(request, params)); //\n    //     {\n    //         \"status\": \"ok\",\n    //         \"ch\": \"market.btcusdt.depth.step0\",\n    //         \"ts\": 1583474832790,\n    //         \"tick\": {\n    //             \"bids\": [\n    //                 [ 9100.290000000000000000, 0.200000000000000000 ],\n    //                 [ 9099.820000000000000000, 0.200000000000000000 ],\n    //                 [ 9099.610000000000000000, 0.205000000000000000 ],\n    //             ],\n    //             \"asks\": [\n    //                 [ 9100.640000000000000000, 0.005904000000000000 ],\n    //                 [ 9101.010000000000000000, 0.287311000000000000 ],\n    //                 [ 9101.030000000000000000, 0.012121000000000000 ],\n    //             ],\n    //             \"ts\":1583474832008,\n    //             \"version\":104999698780\n    //         }\n    //     }\n    //\n\n    if ('tick' in response) {\n      if (!response['tick']) {\n        throw new BadSymbol(this.id + ' fetchOrderBook() returned empty response: ' + this.json(response));\n      }\n\n      const tick = this.safeValue(response, 'tick');\n      const timestamp = this.safeInteger(tick, 'ts', this.safeInteger(response, 'ts'));\n      const result = this.parseOrderBook(tick, symbol, timestamp);\n      result['nonce'] = this.safeInteger(tick, 'version');\n      return result;\n    }\n\n    throw new ExchangeError(this.id + ' fetchOrderBook() returned unrecognized response: ' + this.json(response));\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.marketGetDetailMerged(this.extend(request, params)); //\n    //     {\n    //         \"status\": \"ok\",\n    //         \"ch\": \"market.btcusdt.detail.merged\",\n    //         \"ts\": 1583494336669,\n    //         \"tick\": {\n    //             \"amount\": 26228.672978342216,\n    //             \"open\": 9078.95,\n    //             \"close\": 9146.86,\n    //             \"high\": 9155.41,\n    //             \"id\": 209988544334,\n    //             \"count\": 265846,\n    //             \"low\": 8988.0,\n    //             \"version\": 209988544334,\n    //             \"ask\": [ 9146.87, 0.156134 ],\n    //             \"vol\": 2.3822168242201668E8,\n    //             \"bid\": [ 9146.86, 0.080758 ],\n    //         }\n    //     }\n    //\n\n    const ticker = this.parseTicker(response['tick'], market);\n    const timestamp = this.safeInteger(response, 'ts');\n    ticker['timestamp'] = timestamp;\n    ticker['datetime'] = this.iso8601(timestamp);\n    return ticker;\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.marketGetTickers(params);\n    const tickers = this.safeValue(response, 'data');\n    const timestamp = this.safeInteger(response, 'ts');\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const marketId = this.safeString(tickers[i], 'symbol');\n      const market = this.safeMarket(marketId);\n      const symbol = market['symbol'];\n      const ticker = this.parseTicker(tickers[i], market);\n      ticker['timestamp'] = timestamp;\n      ticker['datetime'] = this.iso8601(timestamp);\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"amount\": 0.010411000000000000,\n    //         \"trade-id\": 102090736910,\n    //         \"ts\": 1583497692182,\n    //         \"id\": 10500517034273194594947,\n    //         \"price\": 9096.050000000000000000,\n    //         \"direction\": \"sell\"\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //          'symbol': 'swftcbtc',\n    //          'fee-currency': 'swftc',\n    //          'filled-fees': '0',\n    //          'source': 'spot-api',\n    //          'id': 83789509854000,\n    //          'type': 'buy-limit',\n    //          'order-id': 83711103204909,\n    //          'filled-points': '0.005826843283532154',\n    //          'fee-deduct-currency': 'ht',\n    //          'filled-amount': '45941.53',\n    //          'price': '0.0000001401',\n    //          'created-at': 1597933260729,\n    //          'match-id': 100087455560,\n    //          'role': 'maker',\n    //          'trade-id': 100050305348\n    //     },\n    //\n    const marketId = this.safeString(trade, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.safeInteger2(trade, 'ts', 'created-at');\n    const order = this.safeString(trade, 'order-id');\n    let side = this.safeString(trade, 'direction');\n    let type = this.safeString(trade, 'type');\n\n    if (type !== undefined) {\n      const typeParts = type.split('-');\n      side = typeParts[0];\n      type = typeParts[1];\n    }\n\n    const takerOrMaker = this.safeString(trade, 'role');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString2(trade, 'filled-amount', 'amount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    let fee = undefined;\n    let feeCost = this.safeNumber(trade, 'filled-fees');\n    let feeCurrency = this.safeCurrencyCode(this.safeString(trade, 'fee-currency'));\n    const filledPoints = this.safeNumber(trade, 'filled-points');\n\n    if (filledPoints !== undefined) {\n      if (feeCost === undefined || feeCost === 0.0) {\n        feeCost = filledPoints;\n        feeCurrency = this.safeCurrencyCode(this.safeString(trade, 'fee-deduct-currency'));\n      }\n    }\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrency\n      };\n    }\n\n    const tradeId = this.safeString2(trade, 'trade-id', 'tradeId');\n    const id = this.safeString(trade, 'id', tradeId);\n    return {\n      'id': id,\n      'info': trade,\n      'order': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetOrderOrdersIdMatchresults(this.extend(request, params));\n    return this.parseTrades(response['data'], undefined, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {};\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['size'] = limit; // 1-100 orders, default is 100\n    }\n\n    if (since !== undefined) {\n      request['start-date'] = this.ymd(since); // a date within 61 days from today\n\n      request['end-date'] = this.ymd(this.sum(since, 86400000));\n    }\n\n    const response = await this.privateGetOrderMatchresults(this.extend(request, params));\n    return this.parseTrades(response['data'], market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = 1000, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    }\n\n    const response = await this.marketGetHistoryTrade(this.extend(request, params)); //\n    //     {\n    //         \"status\": \"ok\",\n    //         \"ch\": \"market.btcusdt.trade.detail\",\n    //         \"ts\": 1583497692365,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 105005170342,\n    //                 \"ts\": 1583497692182,\n    //                 \"data\": [\n    //                     {\n    //                         \"amount\": 0.010411000000000000,\n    //                         \"trade-id\": 102090736910,\n    //                         \"ts\": 1583497692182,\n    //                         \"id\": 10500517034273194594947,\n    //                         \"price\": 9096.050000000000000000,\n    //                         \"direction\": \"sell\"\n    //                     }\n    //                 ]\n    //             },\n    //             // ...\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    let result = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const trades = this.safeValue(data[i], 'data', []);\n\n      for (let j = 0; j < trades.length; j++) {\n        const trade = this.parseTrade(trades[j], market);\n        result.push(trade);\n      }\n    }\n\n    result = this.sortBy(result, 'timestamp');\n    return this.filterBySymbolSinceLimit(result, symbol, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         \"amount\":1.2082,\n    //         \"open\":0.025096,\n    //         \"close\":0.025095,\n    //         \"high\":0.025096,\n    //         \"id\":1591515300,\n    //         \"count\":6,\n    //         \"low\":0.025095,\n    //         \"vol\":0.0303205097\n    //     }\n    //\n    return [this.safeTimestamp(ohlcv, 'id'), this.safeNumber(ohlcv, 'open'), this.safeNumber(ohlcv, 'high'), this.safeNumber(ohlcv, 'low'), this.safeNumber(ohlcv, 'close'), this.safeNumber(ohlcv, 'amount')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = 1000, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'period': this.timeframes[timeframe]\n    };\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    }\n\n    const response = await this.marketGetHistoryKline(this.extend(request, params)); //\n    //     {\n    //         \"status\":\"ok\",\n    //         \"ch\":\"market.ethbtc.kline.1min\",\n    //         \"ts\":1591515374371,\n    //         \"data\":[\n    //             {\"amount\":0.0,\"open\":0.025095,\"close\":0.025095,\"high\":0.025095,\"id\":1591515360,\"count\":0,\"low\":0.025095,\"vol\":0.0},\n    //             {\"amount\":1.2082,\"open\":0.025096,\"close\":0.025095,\"high\":0.025096,\"id\":1591515300,\"count\":6,\"low\":0.025095,\"vol\":0.0303205097},\n    //             {\"amount\":0.0648,\"open\":0.025096,\"close\":0.025096,\"high\":0.025096,\"id\":1591515240,\"count\":2,\"low\":0.025096,\"vol\":0.0016262208},\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  async fetchAccounts(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetAccountAccounts(params);\n    return response['data'];\n  }\n\n  async fetchCurrencies(params = {}) {\n    const request = {\n      'language': this.options['language']\n    };\n    const response = await this.publicGetSettingsCurrencys(this.extend(request, params));\n    const currencies = this.safeValue(response, 'data');\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i]; //\n      //  {                     name: \"ctxc\",\n      //              'display-name': \"CTXC\",\n      //        'withdraw-precision':  8,\n      //             'currency-type': \"eth\",\n      //        'currency-partition': \"pro\",\n      //             'support-sites':  null,\n      //                'otc-enable':  0,\n      //        'deposit-min-amount': \"2\",\n      //       'withdraw-min-amount': \"4\",\n      //            'show-precision': \"8\",\n      //                      weight: \"2988\",\n      //                     visible:  true,\n      //              'deposit-desc': \"Please don’t deposit any other digital assets except CTXC t…\",\n      //             'withdraw-desc': \"Minimum withdrawal amount: 4 CTXC. !>_<!For security reason…\",\n      //           'deposit-enabled':  true,\n      //          'withdraw-enabled':  true,\n      //    'currency-addr-with-tag':  false,\n      //             'fast-confirms':  15,\n      //             'safe-confirms':  30                                                             }\n      //\n\n      const id = this.safeValue(currency, 'name');\n      const precision = this.safeInteger(currency, 'withdraw-precision');\n      const code = this.safeCurrencyCode(id);\n      const active = currency['visible'] && currency['deposit-enabled'] && currency['withdraw-enabled'];\n      const name = this.safeString(currency, 'display-name');\n      result[code] = {\n        'id': id,\n        'code': code,\n        'type': 'crypto',\n        // 'payin': currency['deposit-enabled'],\n        // 'payout': currency['withdraw-enabled'],\n        // 'transfer': undefined,\n        'name': name,\n        'active': active,\n        'fee': undefined,\n        // todo need to fetch from fee endpoint\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': Math.pow(10, -precision),\n            'max': Math.pow(10, precision)\n          },\n          'deposit': {\n            'min': this.safeNumber(currency, 'deposit-min-amount'),\n            'max': Math.pow(10, precision)\n          },\n          'withdraw': {\n            'min': this.safeNumber(currency, 'withdraw-min-amount'),\n            'max': Math.pow(10, precision)\n          }\n        },\n        'info': currency\n      };\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const method = this.options['fetchBalanceMethod'];\n    const request = {\n      'id': this.accounts[0]['id']\n    };\n    const response = await this[method](this.extend(request, params));\n    const balances = this.safeValue(response['data'], 'list', []);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      let account = undefined;\n\n      if (code in result) {\n        account = result[code];\n      } else {\n        account = this.account();\n      }\n\n      if (balance['type'] === 'trade') {\n        account['free'] = this.safeString(balance, 'balance');\n      }\n\n      if (balance['type'] === 'frozen') {\n        account['used'] = this.safeString(balance, 'balance');\n      }\n\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrdersByStates(states, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'states': states\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const method = this.safeString(this.options, 'fetchOrdersByStatesMethod', 'private_get_order_orders');\n    const response = await this[method](this.extend(request, params)); //\n    //     { status:   \"ok\",\n    //         data: [ {                  id:  13997833014,\n    //                                symbol: \"ethbtc\",\n    //                          'account-id':  3398321,\n    //                                amount: \"0.045000000000000000\",\n    //                                 price: \"0.034014000000000000\",\n    //                          'created-at':  1545836976871,\n    //                                  type: \"sell-limit\",\n    //                        'field-amount': \"0.045000000000000000\",\n    //                   'field-cash-amount': \"0.001530630000000000\",\n    //                          'field-fees': \"0.000003061260000000\",\n    //                         'finished-at':  1545837948214,\n    //                                source: \"spot-api\",\n    //                                 state: \"filled\",\n    //                         'canceled-at':  0                      }  ] }\n    //\n\n    return this.parseOrders(response['data'], market, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetOrderOrdersId(this.extend(request, params));\n    const order = this.safeValue(response, 'data');\n    return this.parseOrder(order);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByStates('pre-submitted,submitted,partial-filled,filled,partial-canceled,canceled', symbol, since, limit, params);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const method = this.safeString(this.options, 'fetchOpenOrdersMethod', 'fetch_open_orders_v1');\n    return await this[method](symbol, since, limit, params);\n  }\n\n  async fetchOpenOrdersV1(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrdersV1() requires a symbol argument');\n    }\n\n    return await this.fetchOrdersByStates('pre-submitted,submitted,partial-filled', symbol, since, limit, params);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByStates('filled,partial-canceled,canceled', symbol, since, limit, params);\n  }\n\n  async fetchOpenOrdersV2(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');\n    }\n\n    const market = this.market(symbol);\n    let accountId = this.safeString(params, 'account-id');\n\n    if (accountId === undefined) {\n      // pick the first account\n      await this.loadAccounts();\n\n      for (let i = 0; i < this.accounts.length; i++) {\n        const account = this.accounts[i];\n\n        if (account['type'] === 'spot') {\n          accountId = this.safeString(account, 'id');\n\n          if (accountId !== undefined) {\n            break;\n          }\n        }\n      }\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'account-id': accountId\n    };\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    }\n\n    const omitted = this.omit(params, 'account-id');\n    const response = await this.privateGetOrderOpenOrders(this.extend(request, omitted)); //\n    //     {\n    //         \"status\":\"ok\",\n    //         \"data\":[\n    //             {\n    //                 \"symbol\":\"ethusdt\",\n    //                 \"source\":\"api\",\n    //                 \"amount\":\"0.010000000000000000\",\n    //                 \"account-id\":1528640,\n    //                 \"created-at\":1561597491963,\n    //                 \"price\":\"400.000000000000000000\",\n    //                 \"filled-amount\":\"0.0\",\n    //                 \"filled-cash-amount\":\"0.0\",\n    //                 \"filled-fees\":\"0.0\",\n    //                 \"id\":38477101630,\n    //                 \"state\":\"submitted\",\n    //                 \"type\":\"sell-limit\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'partial-filled': 'open',\n      'partial-canceled': 'canceled',\n      'filled': 'closed',\n      'canceled': 'canceled',\n      'submitted': 'open'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {                  id:  13997833014,\n    //                    symbol: \"ethbtc\",\n    //              'account-id':  3398321,\n    //                    amount: \"0.045000000000000000\",\n    //                     price: \"0.034014000000000000\",\n    //              'created-at':  1545836976871,\n    //                      type: \"sell-limit\",\n    //            'field-amount': \"0.045000000000000000\", // they have fixed it for filled-amount\n    //       'field-cash-amount': \"0.001530630000000000\", // they have fixed it for filled-cash-amount\n    //              'field-fees': \"0.000003061260000000\", // they have fixed it for filled-fees\n    //             'finished-at':  1545837948214,\n    //                    source: \"spot-api\",\n    //                     state: \"filled\",\n    //             'canceled-at':  0                      }\n    //\n    //     {                  id:  20395337822,\n    //                    symbol: \"ethbtc\",\n    //              'account-id':  5685075,\n    //                    amount: \"0.001000000000000000\",\n    //                     price: \"0.0\",\n    //              'created-at':  1545831584023,\n    //                      type: \"buy-market\",\n    //            'field-amount': \"0.029100000000000000\", // they have fixed it for filled-amount\n    //       'field-cash-amount': \"0.000999788700000000\", // they have fixed it for filled-cash-amount\n    //              'field-fees': \"0.000058200000000000\", // they have fixed it for filled-fees\n    //             'finished-at':  1545831584181,\n    //                    source: \"spot-api\",\n    //                     state: \"filled\",\n    //             'canceled-at':  0                      }\n    //\n    const id = this.safeString(order, 'id');\n    let side = undefined;\n    let type = undefined;\n    let status = undefined;\n\n    if ('type' in order) {\n      const orderType = order['type'].split('-');\n      side = orderType[0];\n      type = orderType[1];\n      status = this.parseOrderStatus(this.safeString(order, 'state'));\n    }\n\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.safeInteger(order, 'created-at');\n    const amount = this.safeNumber(order, 'amount');\n    const filled = this.safeNumber2(order, 'filled-amount', 'field-amount'); // typo in their API, filled amount\n\n    let price = this.safeNumber(order, 'price');\n\n    if (price === 0.0) {\n      price = undefined;\n    }\n\n    const cost = this.safeNumber2(order, 'filled-cash-amount', 'field-cash-amount'); // same typo\n\n    const feeCost = this.safeNumber2(order, 'filled-fees', 'field-fees'); // typo in their API, filled fees\n\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      let feeCurrency = undefined;\n\n      if (market !== undefined) {\n        feeCurrency = side === 'sell' ? market['quote'] : market['base'];\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrency\n      };\n    }\n\n    return this.safeOrder({\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'average': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': undefined,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    });\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const market = this.market(symbol);\n    const request = {\n      'account-id': this.accounts[0]['id'],\n      'symbol': market['id'],\n      'type': side + '-' + type\n    };\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'client-order-id'); // must be 64 chars max and unique within 24 hours\n\n    if (clientOrderId !== undefined) {\n      request['client-order-id'] = clientOrderId;\n    }\n\n    params = this.omit(params, ['clientOrderId', 'client-order-id']);\n\n    if (type === 'market' && side === 'buy') {\n      if (this.options['createMarketBuyOrderRequiresPrice']) {\n        if (price === undefined) {\n          throw new InvalidOrder(this.id + \" market buy order requires price argument to calculate cost (total amount of quote currency to spend for buying, amount * price). To switch off this warning exception and specify cost in the amount argument, set .options['createMarketBuyOrderRequiresPrice'] = false. Make sure you know what you're doing.\");\n        } else {\n          // despite that cost = amount * price is in quote currency and should have quote precision\n          // the exchange API requires the cost supplied in 'amount' to be of base precision\n          // more about it here:\n          // https://github.com/ccxt/ccxt/pull/4395\n          // https://github.com/ccxt/ccxt/issues/7611\n          // we use amountToPrecision here because the exchange requires cost in base precision\n          request['amount'] = this.costToPrecision(symbol, parseFloat(amount) * parseFloat(price));\n        }\n      } else {\n        request['amount'] = this.costToPrecision(symbol, amount);\n      }\n    } else {\n      request['amount'] = this.amountToPrecision(symbol, amount);\n    }\n\n    if (type === 'limit' || type === 'ioc' || type === 'limit-maker') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const method = this.options['createOrderMethod'];\n    const response = await this[method](this.extend(request, params));\n    const timestamp = this.milliseconds();\n    const id = this.safeString(response, 'data');\n    return {\n      'info': response,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': undefined,\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'filled': undefined,\n      'remaining': undefined,\n      'cost': undefined,\n      'trades': undefined,\n      'fee': undefined,\n      'clientOrderId': undefined,\n      'average': undefined\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const response = await this.privatePostOrderOrdersIdSubmitcancel({\n      'id': id\n    }); //\n    //     let response = {\n    //         'status': 'ok',\n    //         'data': '10138899000',\n    //     };\n    //\n\n    return this.extend(this.parseOrder(response), {\n      'id': id,\n      'status': 'canceled'\n    });\n  }\n\n  async cancelOrders(ids, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const clientOrderIds = this.safeValue2(params, 'clientOrderIds', 'client-order-ids');\n    params = this.omit(params, ['clientOrderIds', 'client-order-ids']);\n    const request = {};\n\n    if (clientOrderIds === undefined) {\n      request['order-ids'] = ids;\n    } else {\n      request['client-order-ids'] = clientOrderIds;\n    }\n\n    const response = await this.privatePostOrderOrdersBatchcancel(this.extend(request, params)); //\n    //     {\n    //         \"status\": \"ok\",\n    //         \"data\": {\n    //             \"success\": [\n    //                 \"5983466\"\n    //             ],\n    //             \"failed\": [\n    //                 {\n    //                     \"err-msg\": \"Incorrect order state\",\n    //                     \"order-state\": 7,\n    //                     \"order-id\": \"\",\n    //                     \"err-code\": \"order-orderstate-error\",\n    //                     \"client-order-id\": \"first\"\n    //                 },\n    //                 {\n    //                     \"err-msg\": \"Incorrect order state\",\n    //                     \"order-state\": 7,\n    //                     \"order-id\": \"\",\n    //                     \"err-code\": \"order-orderstate-error\",\n    //                     \"client-order-id\": \"second\"\n    //                 },\n    //                 {\n    //                     \"err-msg\": \"The record is not found.\",\n    //                     \"order-id\": \"\",\n    //                     \"err-code\": \"base-not-found\",\n    //                     \"client-order-id\": \"third\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    return response;\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'account-id' string false NA The account id used for this cancel Refer to GET /v1/account/accounts\n      // 'symbol': market['id'], // a list of comma-separated symbols, all symbols by default\n      // 'types' 'string', buy-market, sell-market, buy-limit, sell-limit, buy-ioc, sell-ioc, buy-stop-limit, sell-stop-limit, buy-limit-fok, sell-limit-fok, buy-stop-limit-fok, sell-stop-limit-fok\n      // 'side': 'buy', // or 'sell'\n      // 'size': 100, // the number of orders to cancel 1-100\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const response = await this.privatePostOrderOrdersBatchCancelOpenOrders(this.extend(request, params)); //\n    //     {\n    //         code: 200,\n    //         data: {\n    //             \"success-count\": 2,\n    //             \"failed-count\": 0,\n    //             \"next-id\": 5454600\n    //         }\n    //     }\n    //\n\n    return response;\n  }\n\n  currencyToPrecision(currency, fee) {\n    return this.decimalToPrecision(fee, 0, this.currencies[currency]['precision']);\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    //\n    //     {\n    //         currency: \"eth\",\n    //         address: \"0xf7292eb9ba7bc50358e27f0e025a4d225a64127b\",\n    //         addressTag: \"\",\n    //         chain: \"eth\"\n    //     }\n    //\n    const address = this.safeString(depositAddress, 'address');\n    const tag = this.safeString(depositAddress, 'addressTag');\n    const currencyId = this.safeString(depositAddress, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': depositAddress\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.v2PrivateGetAccountDepositAddress(this.extend(request, params)); //\n    //     {\n    //         code: 200,\n    //         data: [\n    //             {\n    //                 currency: \"eth\",\n    //                 address: \"0xf7292eb9ba7bc50358e27f0e025a4d225a64127b\",\n    //                 addressTag: \"\",\n    //                 chain: \"eth\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseDepositAddress(this.safeValue(data, 0, {}), currency);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (limit === undefined || limit > 100) {\n      limit = 100;\n    }\n\n    await this.loadMarkets();\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const request = {\n      'type': 'deposit',\n      'from': 0 // From 'id' ... if you want to get results after a particular transaction id, pass the id in params.from\n\n    };\n\n    if (currency !== undefined) {\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['size'] = limit; // max 100\n    }\n\n    const response = await this.privateGetQueryDepositWithdraw(this.extend(request, params)); // return response\n\n    return this.parseTransactions(response['data'], currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (limit === undefined || limit > 100) {\n      limit = 100;\n    }\n\n    await this.loadMarkets();\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const request = {\n      'type': 'withdraw',\n      'from': 0 // From 'id' ... if you want to get results after a particular transaction id, pass the id in params.from\n\n    };\n\n    if (currency !== undefined) {\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['size'] = limit; // max 100\n    }\n\n    const response = await this.privateGetQueryDepositWithdraw(this.extend(request, params)); // return response\n\n    return this.parseTransactions(response['data'], currency, since, limit);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         'id': 8211029,\n    //         'type': 'deposit',\n    //         'currency': 'eth',\n    //         'chain': 'eth',\n    //         'tx-hash': 'bd315....',\n    //         'amount': 0.81162421,\n    //         'address': '4b8b....',\n    //         'address-tag': '',\n    //         'fee': 0,\n    //         'state': 'safe',\n    //         'created-at': 1542180380965,\n    //         'updated-at': 1542180788077\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         'id': 6908275,\n    //         'type': 'withdraw',\n    //         'currency': 'btc',\n    //         'chain': 'btc',\n    //         'tx-hash': 'c1a1a....',\n    //         'amount': 0.80257005,\n    //         'address': '1QR....',\n    //         'address-tag': '',\n    //         'fee': 0.0005,\n    //         'state': 'confirmed',\n    //         'created-at': 1552107295685,\n    //         'updated-at': 1552108032859\n    //     }\n    //\n    const timestamp = this.safeInteger(transaction, 'created-at');\n    const updated = this.safeInteger(transaction, 'updated-at');\n    const code = this.safeCurrencyCode(this.safeString(transaction, 'currency'));\n    let type = this.safeString(transaction, 'type');\n\n    if (type === 'withdraw') {\n      type = 'withdrawal';\n    }\n\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'state'));\n    const tag = this.safeString(transaction, 'address-tag');\n    let feeCost = this.safeNumber(transaction, 'fee');\n\n    if (feeCost !== undefined) {\n      feeCost = Math.abs(feeCost);\n    }\n\n    return {\n      'info': transaction,\n      'id': this.safeString(transaction, 'id'),\n      'txid': this.safeString(transaction, 'tx-hash'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': this.safeString(transaction, 'address'),\n      'tag': tag,\n      'type': type,\n      'amount': this.safeNumber(transaction, 'amount'),\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': {\n        'currency': code,\n        'cost': feeCost,\n        'rate': undefined\n      }\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      // deposit statuses\n      'unknown': 'failed',\n      'confirming': 'pending',\n      'confirmed': 'ok',\n      'safe': 'ok',\n      'orphan': 'failed',\n      // withdrawal statuses\n      'submitted': 'pending',\n      'canceled': 'canceled',\n      'reexamine': 'pending',\n      'reject': 'failed',\n      'pass': 'pending',\n      'wallet-reject': 'failed',\n      // 'confirmed': 'ok', // present in deposit statuses\n      'confirm-error': 'failed',\n      'repealed': 'failed',\n      'wallet-transfer': 'pending',\n      'pre-transfer': 'pending'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    await this.loadMarkets();\n    this.checkAddress(address);\n    const currency = this.currency(code);\n    const request = {\n      'address': address,\n      // only supports existing addresses in your withdraw address list\n      'amount': amount,\n      'currency': currency['id'].toLowerCase()\n    };\n\n    if (tag !== undefined) {\n      request['addr-tag'] = tag; // only for XRP?\n    }\n\n    const response = await this.privatePostDwWithdrawApiCreate(this.extend(request, params));\n    const id = this.safeString(response, 'data');\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = '/';\n\n    if (api === 'market') {\n      url += api;\n    } else if (api === 'public' || api === 'private') {\n      url += this.version;\n    } else if (api === 'v2Public' || api === 'v2Private') {\n      url += 'v2';\n    }\n\n    url += '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'private' || api === 'v2Private') {\n      this.checkRequiredCredentials();\n      const timestamp = this.ymdhms(this.milliseconds(), 'T');\n      let request = {\n        'SignatureMethod': 'HmacSHA256',\n        'SignatureVersion': '2',\n        'AccessKeyId': this.apiKey,\n        'Timestamp': timestamp\n      };\n\n      if (method !== 'POST') {\n        request = this.extend(request, query);\n      }\n\n      request = this.keysort(request);\n      let auth = this.urlencode(request); // unfortunately, PHP demands double quotes for the escaped newline symbol\n      // eslint-disable-next-line quotes\n\n      const payload = [method, this.hostname, url, auth].join(\"\\n\");\n      const signature = this.hmac(this.encode(payload), this.encode(this.secret), 'sha256', 'base64');\n      auth += '&' + this.urlencode({\n        'Signature': signature\n      });\n      url += '?' + auth;\n\n      if (method === 'POST') {\n        body = this.json(query);\n        headers = {\n          'Content-Type': 'application/json'\n        };\n      } else {\n        headers = {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n      }\n    } else {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    }\n\n    url = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    }) + url;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('status' in response) {\n      //\n      //     {\"status\":\"error\",\"err-code\":\"order-limitorder-amount-min-error\",\"err-msg\":\"limit order amount error, min: `0.001`\",\"data\":null}\n      //\n      const status = this.safeString(response, 'status');\n\n      if (status === 'error') {\n        const code = this.safeString(response, 'err-code');\n        const feedback = this.id + ' ' + body;\n        this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);\n        this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n        const message = this.safeString(response, 'err-msg');\n        this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/huobipro.js"],"names":["Exchange","require","AuthenticationError","ExchangeError","PermissionDenied","ExchangeNotAvailable","OnMaintenance","InvalidOrder","OrderNotFound","InsufficientFunds","ArgumentsRequired","BadSymbol","BadRequest","RequestTimeout","NetworkError","TRUNCATE","Precise","module","exports","huobipro","describe","deepExtend","userAgents","undefined","fetchTradingLimits","symbols","params","loadMarkets","result","i","length","symbol","fetchTradingLimitsById","marketId","id","request","response","publicGetCommonExchange","extend","parseTradingLimits","safeValue","limits","safeNumber","costToPrecision","cost","decimalToPrecision","markets","precisionMode","fetchMarkets","method","options","numMarkets","json","market","baseId","safeString","quoteId","base","safeCurrencyCode","quote","precision","safeInteger","maker","taker","minAmount","Math","pow","maxAmount","minCost","state","active","push","parseTicker","ticker","timestamp","bid","bidVolume","ask","askVolume","Array","isArray","open","close","change","percentage","average","sum","baseVolume","quoteVolume","vwap","iso8601","fetchOrderBook","limit","marketGetDepth","tick","parseOrderBook","fetchTicker","marketGetDetailMerged","fetchTickers","marketGetTickers","tickers","safeMarket","filterByArray","parseTrade","trade","safeSymbol","safeInteger2","order","side","type","typeParts","split","takerOrMaker","priceString","amountString","safeString2","price","parseNumber","amount","stringMul","fee","feeCost","feeCurrency","filledPoints","tradeId","fetchOrderTrades","since","privateGetOrderOrdersIdMatchresults","parseTrades","fetchMyTrades","ymd","privateGetOrderMatchresults","fetchTrades","marketGetHistoryTrade","data","trades","j","sortBy","filterBySymbolSinceLimit","parseOHLCV","ohlcv","safeTimestamp","fetchOHLCV","timeframe","timeframes","marketGetHistoryKline","parseOHLCVs","fetchAccounts","privateGetAccountAccounts","fetchCurrencies","publicGetSettingsCurrencys","currencies","currency","code","name","fetchBalance","loadAccounts","accounts","balances","balance","currencyId","account","parseBalance","fetchOrdersByStates","states","parseOrders","fetchOrder","privateGetOrderOrdersId","parseOrder","fetchOrders","fetchOpenOrders","fetchOpenOrdersV1","fetchClosedOrders","fetchOpenOrdersV2","accountId","omitted","omit","privateGetOrderOpenOrders","parseOrderStatus","status","statuses","orderType","filled","safeNumber2","safeOrder","createOrder","clientOrderId","parseFloat","amountToPrecision","priceToPrecision","milliseconds","cancelOrder","privatePostOrderOrdersIdSubmitcancel","cancelOrders","ids","clientOrderIds","safeValue2","privatePostOrderOrdersBatchcancel","cancelAllOrders","privatePostOrderOrdersBatchCancelOpenOrders","currencyToPrecision","parseDepositAddress","depositAddress","address","tag","checkAddress","fetchDepositAddress","v2PrivateGetAccountDepositAddress","fetchDeposits","privateGetQueryDepositWithdraw","parseTransactions","fetchWithdrawals","parseTransaction","transaction","updated","parseTransactionStatus","abs","withdraw","toLowerCase","privatePostDwWithdrawApiCreate","sign","path","api","headers","body","url","version","implodeParams","query","extractParams","checkRequiredCredentials","ymdhms","apiKey","keysort","auth","urlencode","payload","hostname","join","signature","hmac","encode","secret","Object","keys","urls","handleErrors","httpCode","reason","requestHeaders","requestBody","feedback","throwBroadlyMatchedException","exceptions","throwExactlyMatchedException","message"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAE,iBAAF,CAAxB;;AACA,MAAM;AAAEC,EAAAA,mBAAF;AAAuBC,EAAAA,aAAvB;AAAsCC,EAAAA,gBAAtC;AAAwDC,EAAAA,oBAAxD;AAA8EC,EAAAA,aAA9E;AAA6FC,EAAAA,YAA7F;AAA2GC,EAAAA,aAA3G;AAA0HC,EAAAA,iBAA1H;AAA6IC,EAAAA,iBAA7I;AAAgKC,EAAAA,SAAhK;AAA2KC,EAAAA,UAA3K;AAAuLC,EAAAA,cAAvL;AAAuMC,EAAAA;AAAvM,IAAwNb,OAAO,CAAE,eAAF,CAArO;;AACA,MAAM;AAAEc,EAAAA;AAAF,IAAed,OAAO,CAAE,yBAAF,CAA5B;;AACA,MAAMe,OAAO,GAAGf,OAAO,CAAE,gBAAF,CAAvB,C,CAEA;;;AAEAgB,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,SAAuBnB,QAAvB,CAAgC;AAC7CoB,EAAAA,QAAQ,GAAI;AACR,WAAO,KAAKC,UAAL,CAAiB,MAAMD,QAAN,EAAjB,EAAoC;AACvC,YAAM,UADiC;AAEvC,cAAQ,WAF+B;AAGvC,mBAAa,CAAE,IAAF,CAH0B;AAIvC,mBAAa,IAJ0B;AAKvC,mBAAa,KAAKE,UAAL,CAAgB,UAAhB,CAL0B;AAMvC,iBAAW,IAN4B;AAOvC,kBAAYC,SAP2B;AAQvC,sBAAgBA,SARuB;AASvC,kBAAY,eAT2B;AASV;AAC7B,aAAO,IAVgC;AAWvC,aAAO;AACH,2BAAmB,IADhB;AAEH,uBAAe,IAFZ;AAGH,wBAAgB,IAHb;AAIH,gBAAQ,KAJL;AAKH,uBAAe,IALZ;AAMH,wBAAgB,IANb;AAOH,6BAAqB,IAPlB;AAQH,2BAAmB,IARhB;AASH,+BAAuB,IATpB;AAUH,yBAAiB,IAVd;AAWH,wBAAgB,IAXb;AAYH,yBAAiB,IAZd;AAaH,sBAAc,IAbX;AAcH,2BAAmB,IAdhB;AAeH,sBAAc,IAfX;AAgBH,0BAAkB,IAhBf;AAiBH,uBAAe,IAjBZ;AAkBH,4BAAoB,IAlBjB;AAmBH,uBAAe,IAnBZ;AAoBH,wBAAgB,IApBb;AAqBH,uBAAe,IArBZ;AAsBH,8BAAsB,IAtBnB;AAuBH,4BAAoB,IAvBjB;AAwBH,oBAAY;AAxBT,OAXgC;AAqCvC,oBAAc;AACV,cAAM,MADI;AAEV,cAAM,MAFI;AAGV,eAAO,OAHG;AAIV,eAAO,OAJG;AAKV,cAAM,OALI;AAMV,cAAM,OANI;AAOV,cAAM,MAPI;AAQV,cAAM,OARI;AASV,cAAM,MATI;AAUV,cAAM;AAVI,OArCyB;AAiDvC,cAAQ;AACJ,gBAAQ;AACJ,oBAAU,+BADN;AAEJ,oBAAU,+BAFN;AAGJ,qBAAW;AAHP,SADJ;AAMJ,gBAAQ,qGANJ;AAOJ,eAAO;AACH,oBAAU,oBADP;AAEH,oBAAU,oBAFP;AAGH,qBAAW,oBAHR;AAIH,sBAAY,oBAJT;AAKH,uBAAa;AALV,SAPH;AAcJ,eAAO,uBAdH;AAeJ,oBAAY,8DAfR;AAgBJ,eAAO,6CAhBH;AAiBJ,gBAAQ;AAjBJ,OAjD+B;AAoEvC,aAAO;AACH,oBAAY;AACR,iBAAO,CACH,sBADG;AADC,SADT;AAMH,qBAAa;AACT,iBAAO,CACH,gBADG,EAEH,wBAFG,EAGH,0BAHG,EAGyB;AAC5B,mCAJG,EAKH,6BALG,EAMH,yBANG,EAMwB;AAC3B,yBAPG,EAOc;AACjB,8BARG,EAQmB;AACtB,+BATG,EASoB;AACvB,iCAVG,EAUsB;AACzB,oCAXG,EAWyB;AAC5B,kCAZG,EAYuB;AAC1B,wBAbG,CAaa;AAbb,WADE;AAgBT,kBAAQ,CACJ,kBADI,EAEJ,gBAFI,EAEc;AAClB,+BAHI,EAGmB;AACvB,6BAJI,EAIiB;AACrB,oCALI,EAKwB;AAC5B,oCANI,EAMwB;AAC5B,uCAPI,EAO2B;AAC/B,yCARI,EAQ6B;AACjC,qCATI,CASyB;AATzB;AAhBC,SANV;AAkCH,kBAAU;AACN,iBAAO,CACH,eADG,EACc;AACjB,yBAFG,EAEc;AACjB,iBAHG,EAGM;AACT,iBAJG,EAIM;AACT,yBALG,EAKc;AACjB,kBANG,EAMO;AACV,mBAPG;AADD,SAlCP;AA6CH,kBAAU;AACN,iBAAO,CACH,gBADG,EACe;AAClB,4BAFG,EAEiB;AACpB,4BAHG,EAGiB;AACpB,2BAJG,EAIgB;AACnB,8BALG,CAKmB;AALnB;AADD,SA7CP;AAsDH,mBAAW;AACP,iBAAO,CACH,kBADG,EACiB;AACpB,yCAFG,EAE8B;AACjC,sCAHG,EAIH,iBAJG,EAKH,wBALG,EAMH,kBANG,EAMiB;AACpB,4BAPG,EAQH,kBARG,EASH,cATG,EAUH,mBAVG,EAUkB;AACrB,0CAXG,EAW+B;AAClC,uCAZG,EAaH,eAbG,EAac;AACjB,8BAdG,EAcmB;AACtB,yCAfG,EAe8B;AACjC,kCAhBG,EAiBH,kBAjBG,EAkBH,oBAlBG,EAkBmB;AACtB,mCAnBG,EAmBwB;AAC3B,oCApBG,EAoByB;AAC5B,yCArBG,EAqB8B;AACjC,0BAtBG,EAuBH,eAvBG,EAwBH,2BAxBG,EAyBH,2BAzBG,EA0BH,mBA1BG,CADA;AA6BP,kBAAQ,CACJ,kBADI,EACgB;AACpB,4BAFI,EAGJ,oBAHI,EAIJ,oBAJI,EAIkB;AACtB,gDALI,EAMJ,oCANI,EAOJ,cAPI,EAOY;AAChB,mCARI,EAQuB;AAC3B,0CATI,EAS8B;AAClC,oCAVI,EAUwB;AAC5B,+BAXI,EAWmB;AACvB,kCAZI,EAYsB;AAC1B,sCAbI,EAa0B;AAC9B,0CAdI,EAc8B;AAClC,2CAfI,EAe+B;AACnC,iCAhBI,EAgBqB;AACzB,kCAjBI,EAiBsB;AAC1B,yBAlBI,EAkBa;AACjB,oCAnBI,EAmBwB;AAC5B,oCApBI,EAoBwB;AAC5B,qCArBI,EAqByB;AAC7B,+BAtBI,EAsBmB;AACvB,0CAvBI,EAuB8B;AAClC,gCAxBI,EAyBJ,kBAzBI;AA7BD;AAtDR,OApEgC;AAoLvC,cAAQ;AACJ,mBAAW;AACP,qBAAW,KADJ;AAEP,uBAAa,KAFN;AAGP,wBAAc,IAHP;AAIP,mBAAS,KAJF;AAKP,mBAAS;AALF;AADP,OApL+B;AA6LvC,oBAAc;AACV,iBAAS;AACL,kGAAwFjB,aADnF;AAEL,sBAAYA;AAFP,SADC;AAKV,iBAAS;AACL;AACA,yBAAeM,UAFV;AAGL,mCAAyBA,UAHpB;AAGgC;AACrC,uCAA6BR,gBAJxB;AAI0C;AAC/C,qBAAWS,cALN;AAKsB;AAC3B,oCAA0BR,oBANrB;AAM2C;AAChD,uDAA6CI,iBAPxC;AAO2D;AAChE,4BAAkBF,YARb;AAQ2B;AAChC,+CAAqCA,YAThC;AAS8C;AACnD,+CAAqCA,YAVhC;AAU8C;AACnD,gDAAsCA,YAXjC;AAW+C;AACpD,8CAAoCA,YAZ/B;AAY6C;AAClD,8CAAoCA,YAb/B;AAa6C;AAClD,wCAA8BA,YAdzB;AAcuC;AAC5C,8CAAoCA,YAf/B;AAe6C;AAClD,2CAAiCA,YAhB5B;AAgB0C;AAC/C,oCAA0BC,aAjBrB;AAiBoC;AACzC,sCAA4BA,aAlBvB;AAkBsC;AAC3C,gCAAsBH,oBAnBjB;AAmBuC;AAC5C,wCAA8BH,mBApBzB;AAqBL,qCAA2BA,mBArBtB;AAqB2C;AAChD,iCAAuBM,aAtBlB;AAsBiC;AACtC,wCAA8BG,SAvBzB;AAuBoC;AACzC,+BAAqBA,SAxBhB;AAwB2B;AAChC,gCAAsBL,aAzBjB;AAyBgC;AACrC;AACA,4BAAkBK,SA3Bb;AA2BwB;AAC7B,uCAA6BA,SA5BxB,CA4BmC;;AA5BnC;AALC,OA7LyB;AAiOvC,iBAAW;AACP;AACA,qCAA6B,0BAFtB;AAEkD;AACzD,iCAAyB,sBAHlB;AAG0C;AACjD,6CAAqC,IAJ9B;AAKP,8BAAsB,wBALf;AAMP,8BAAsB,oCANf;AAOP,6BAAqB,6BAPd;AAQP,oBAAY;AARL,OAjO4B;AA2OvC,0BAAoB;AAChB;AACA;AACA;AACA,eAAO,QAJS;AAIC;AACjB,eAAO,UALS;AAKG;AACnB,eAAO,gBANS;AAMS;AACzB,eAAO,QAPS;AAQhB;AACA;AACA;AACA;AACA,eAAO,OAZS;AAahB,gBAAQ,eAbQ;AAchB,gBAAQ,cAdQ,CAcQ;;AAdR;AA3OmB,KAApC,CAAP;AA4PH;;AAED,QAAMa,kBAAN,CAA0BC,OAAO,GAAGF,SAApC,EAA+CG,MAAM,GAAG,EAAxD,EAA4D;AACxD;AACA;AACA;AACA,UAAM,KAAKC,WAAL,EAAN;;AACA,QAAIF,OAAO,KAAKF,SAAhB,EAA2B;AACvBE,MAAAA,OAAO,GAAG,KAAKA,OAAf;AACH;;AACD,UAAMG,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAME,MAAM,GAAGN,OAAO,CAACI,CAAD,CAAtB;AACAD,MAAAA,MAAM,CAACG,MAAD,CAAN,GAAiB,MAAM,KAAKC,sBAAL,CAA6B,KAAKC,QAAL,CAAeF,MAAf,CAA7B,EAAqDL,MAArD,CAAvB;AACH;;AACD,WAAOE,MAAP;AACH;;AAED,QAAMI,sBAAN,CAA8BE,EAA9B,EAAkCR,MAAM,GAAG,EAA3C,EAA+C;AAC3C,UAAMS,OAAO,GAAG;AACZ,gBAAUD;AADE,KAAhB;AAGA,UAAME,QAAQ,GAAG,MAAM,KAAKC,uBAAL,CAA8B,KAAKC,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAA9B,CAAvB,CAJ2C,CAK3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,KAAKa,kBAAL,CAAyB,KAAKC,SAAL,CAAgBJ,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAzB,CAAP;AACH;;AAEDG,EAAAA,kBAAkB,CAAEE,MAAF,EAAUV,MAAM,GAAGR,SAAnB,EAA8BG,MAAM,GAAG,EAAvC,EAA2C;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO;AACH,cAAQe,MADL;AAEH,gBAAU;AACN,kBAAU;AACN,iBAAO,KAAKC,UAAL,CAAiBD,MAAjB,EAAyB,+BAAzB,CADD;AAEN,iBAAO,KAAKC,UAAL,CAAiBD,MAAjB,EAAyB,4BAAzB;AAFD;AADJ;AAFP,KAAP;AASH;;AAEDE,EAAAA,eAAe,CAAEZ,MAAF,EAAUa,IAAV,EAAgB;AAC3B,WAAO,KAAKC,kBAAL,CAAyBD,IAAzB,EAA+B7B,QAA/B,EAAyC,KAAK+B,OAAL,CAAaf,MAAb,EAAqB,WAArB,EAAkC,MAAlC,CAAzC,EAAoF,KAAKgB,aAAzF,CAAP;AACH;;AAED,QAAMC,YAAN,CAAoBtB,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAMuB,MAAM,GAAG,KAAKC,OAAL,CAAa,oBAAb,CAAf;AACA,UAAMd,QAAQ,GAAG,MAAM,KAAKa,MAAL,EAAcvB,MAAd,CAAvB;AACA,UAAMoB,OAAO,GAAG,KAAKN,SAAL,CAAgBJ,QAAhB,EAA0B,MAA1B,CAAhB;AACA,UAAMe,UAAU,GAAGL,OAAO,CAAChB,MAA3B;;AACA,QAAIqB,UAAU,GAAG,CAAjB,EAAoB;AAChB,YAAM,IAAIrC,YAAJ,CAAkB,KAAKoB,EAAL,GAAU,mDAAV,GAAgE,KAAKkB,IAAL,CAAWN,OAAX,CAAlF,CAAN;AACH;;AACD,UAAMlB,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,OAAO,CAAChB,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAMwB,MAAM,GAAGP,OAAO,CAACjB,CAAD,CAAtB;AACA,YAAMyB,MAAM,GAAG,KAAKC,UAAL,CAAiBF,MAAjB,EAAyB,eAAzB,CAAf;AACA,YAAMG,OAAO,GAAG,KAAKD,UAAL,CAAiBF,MAAjB,EAAyB,gBAAzB,CAAhB;AACA,YAAMnB,EAAE,GAAGoB,MAAM,GAAGE,OAApB;AACA,YAAMC,IAAI,GAAG,KAAKC,gBAAL,CAAuBJ,MAAvB,CAAb;AACA,YAAMK,KAAK,GAAG,KAAKD,gBAAL,CAAuBF,OAAvB,CAAd;AACA,YAAMzB,MAAM,GAAG0B,IAAI,GAAG,GAAP,GAAaE,KAA5B;AACA,YAAMC,SAAS,GAAG;AACd,kBAAU,KAAKC,WAAL,CAAkBR,MAAlB,EAA0B,kBAA1B,CADI;AAEd,iBAAS,KAAKQ,WAAL,CAAkBR,MAAlB,EAA0B,iBAA1B,CAFK;AAGd,gBAAQ,KAAKQ,WAAL,CAAkBR,MAAlB,EAA0B,iBAA1B;AAHM,OAAlB;AAKA,YAAMS,KAAK,GAAIL,IAAI,KAAK,KAAV,GAAmB,CAAnB,GAAuB,MAAM,GAA3C;AACA,YAAMM,KAAK,GAAIN,IAAI,KAAK,KAAV,GAAmB,CAAnB,GAAuB,MAAM,GAA3C;AACA,YAAMO,SAAS,GAAG,KAAKtB,UAAL,CAAiBW,MAAjB,EAAyB,eAAzB,EAA0CY,IAAI,CAACC,GAAL,CAAU,EAAV,EAAc,CAACN,SAAS,CAAC,QAAD,CAAxB,CAA1C,CAAlB;AACA,YAAMO,SAAS,GAAG,KAAKzB,UAAL,CAAiBW,MAAjB,EAAyB,eAAzB,CAAlB;AACA,YAAMe,OAAO,GAAG,KAAK1B,UAAL,CAAiBW,MAAjB,EAAyB,iBAAzB,EAA4C,CAA5C,CAAhB;AACA,YAAMgB,KAAK,GAAG,KAAKd,UAAL,CAAiBF,MAAjB,EAAyB,OAAzB,CAAd;AACA,YAAMiB,MAAM,GAAID,KAAK,KAAK,QAA1B;AACAzC,MAAAA,MAAM,CAAC2C,IAAP,CAAa;AACT,cAAMrC,EADG;AAET,kBAAUH,MAFD;AAGT,gBAAQ0B,IAHC;AAIT,iBAASE,KAJA;AAKT,kBAAUL,MALD;AAMT,mBAAWE,OANF;AAOT,kBAAUc,MAPD;AAQT,qBAAaV,SARJ;AAST,iBAASG,KATA;AAUT,iBAASD,KAVA;AAWT,kBAAU;AACN,oBAAU;AACN,mBAAOE,SADD;AAEN,mBAAOG;AAFD,WADJ;AAKN,mBAAS;AACL,mBAAOF,IAAI,CAACC,GAAL,CAAU,EAAV,EAAc,CAACN,SAAS,CAAC,OAAD,CAAxB,CADF;AAEL,mBAAOrC;AAFF,WALH;AASN,kBAAQ;AACJ,mBAAO6C,OADH;AAEJ,mBAAO7C;AAFH;AATF,SAXD;AAyBT,gBAAQ8B;AAzBC,OAAb;AA2BH;;AACD,WAAOzB,MAAP;AACH;;AAED4C,EAAAA,WAAW,CAAEC,MAAF,EAAUpB,MAAM,GAAG9B,SAAnB,EAA8B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIQ,MAAM,GAAGR,SAAb;;AACA,QAAI8B,MAAM,KAAK9B,SAAf,EAA0B;AACtBQ,MAAAA,MAAM,GAAGsB,MAAM,CAAC,QAAD,CAAf;AACH;;AACD,UAAMqB,SAAS,GAAG,KAAKb,WAAL,CAAkBY,MAAlB,EAA0B,IAA1B,CAAlB;AACA,QAAIE,GAAG,GAAGpD,SAAV;AACA,QAAIqD,SAAS,GAAGrD,SAAhB;AACA,QAAIsD,GAAG,GAAGtD,SAAV;AACA,QAAIuD,SAAS,GAAGvD,SAAhB;;AACA,QAAI,SAASkD,MAAb,EAAqB;AACjB,UAAIM,KAAK,CAACC,OAAN,CAAeP,MAAM,CAAC,KAAD,CAArB,CAAJ,EAAmC;AAC/BE,QAAAA,GAAG,GAAG,KAAKjC,UAAL,CAAiB+B,MAAM,CAAC,KAAD,CAAvB,EAAgC,CAAhC,CAAN;AACAG,QAAAA,SAAS,GAAG,KAAKlC,UAAL,CAAiB+B,MAAM,CAAC,KAAD,CAAvB,EAAgC,CAAhC,CAAZ;AACH,OAHD,MAGO;AACHE,QAAAA,GAAG,GAAG,KAAKjC,UAAL,CAAiB+B,MAAjB,EAAyB,KAAzB,CAAN;AACAG,QAAAA,SAAS,GAAG,KAAKpC,SAAL,CAAgBiC,MAAhB,EAAwB,SAAxB,CAAZ;AACH;AACJ;;AACD,QAAI,SAASA,MAAb,EAAqB;AACjB,UAAIM,KAAK,CAACC,OAAN,CAAeP,MAAM,CAAC,KAAD,CAArB,CAAJ,EAAmC;AAC/BI,QAAAA,GAAG,GAAG,KAAKnC,UAAL,CAAiB+B,MAAM,CAAC,KAAD,CAAvB,EAAgC,CAAhC,CAAN;AACAK,QAAAA,SAAS,GAAG,KAAKpC,UAAL,CAAiB+B,MAAM,CAAC,KAAD,CAAvB,EAAgC,CAAhC,CAAZ;AACH,OAHD,MAGO;AACHI,QAAAA,GAAG,GAAG,KAAKnC,UAAL,CAAiB+B,MAAjB,EAAyB,KAAzB,CAAN;AACAK,QAAAA,SAAS,GAAG,KAAKtC,SAAL,CAAgBiC,MAAhB,EAAwB,SAAxB,CAAZ;AACH;AACJ;;AACD,UAAMQ,IAAI,GAAG,KAAKvC,UAAL,CAAiB+B,MAAjB,EAAyB,MAAzB,CAAb;AACA,UAAMS,KAAK,GAAG,KAAKxC,UAAL,CAAiB+B,MAAjB,EAAyB,OAAzB,CAAd;AACA,QAAIU,MAAM,GAAG5D,SAAb;AACA,QAAI6D,UAAU,GAAG7D,SAAjB;AACA,QAAI8D,OAAO,GAAG9D,SAAd;;AACA,QAAK0D,IAAI,KAAK1D,SAAV,IAAyB2D,KAAK,KAAK3D,SAAvC,EAAmD;AAC/C4D,MAAAA,MAAM,GAAGD,KAAK,GAAGD,IAAjB;AACAI,MAAAA,OAAO,GAAG,KAAKC,GAAL,CAAUL,IAAV,EAAgBC,KAAhB,IAAyB,CAAnC;;AACA,UAAKA,KAAK,KAAK3D,SAAX,IAA0B2D,KAAK,GAAG,CAAtC,EAA0C;AACtCE,QAAAA,UAAU,GAAID,MAAM,GAAGF,IAAV,GAAkB,GAA/B;AACH;AACJ;;AACD,UAAMM,UAAU,GAAG,KAAK7C,UAAL,CAAiB+B,MAAjB,EAAyB,QAAzB,CAAnB;AACA,UAAMe,WAAW,GAAG,KAAK9C,UAAL,CAAiB+B,MAAjB,EAAyB,KAAzB,CAApB;AACA,UAAMgB,IAAI,GAAG,KAAKA,IAAL,CAAWF,UAAX,EAAuBC,WAAvB,CAAb;AACA,WAAO;AACH,gBAAUzD,MADP;AAEH,mBAAa2C,SAFV;AAGH,kBAAY,KAAKgB,OAAL,CAAchB,SAAd,CAHT;AAIH,cAAQ,KAAKhC,UAAL,CAAiB+B,MAAjB,EAAyB,MAAzB,CAJL;AAKH,aAAO,KAAK/B,UAAL,CAAiB+B,MAAjB,EAAyB,KAAzB,CALJ;AAMH,aAAOE,GANJ;AAOH,mBAAaC,SAPV;AAQH,aAAOC,GARJ;AASH,mBAAaC,SATV;AAUH,cAAQW,IAVL;AAWH,cAAQR,IAXL;AAYH,eAASC,KAZN;AAaH,cAAQA,KAbL;AAcH,uBAAiB3D,SAdd;AAeH,gBAAU4D,MAfP;AAgBH,oBAAcC,UAhBX;AAiBH,iBAAWC,OAjBR;AAkBH,oBAAcE,UAlBX;AAmBH,qBAAeC,WAnBZ;AAoBH,cAAQf;AApBL,KAAP;AAsBH;;AAED,QAAMkB,cAAN,CAAsB5D,MAAtB,EAA8B6D,KAAK,GAAGrE,SAAtC,EAAiDG,MAAM,GAAG,EAA1D,EAA8D;AAC1D,UAAM,KAAKC,WAAL,EAAN;AACA,UAAM0B,MAAM,GAAG,KAAKA,MAAL,CAAatB,MAAb,CAAf;AACA,UAAMI,OAAO,GAAG;AACZ,gBAAUkB,MAAM,CAAC,IAAD,CADJ;AAEZ,cAAQ;AAFI,KAAhB;AAIA,UAAMjB,QAAQ,GAAG,MAAM,KAAKyD,cAAL,CAAqB,KAAKvD,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAArB,CAAvB,CAP0D,CAQ1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAI,UAAUU,QAAd,EAAwB;AACpB,UAAI,CAACA,QAAQ,CAAC,MAAD,CAAb,EAAuB;AACnB,cAAM,IAAIzB,SAAJ,CAAe,KAAKuB,EAAL,GAAU,6CAAV,GAA0D,KAAKkB,IAAL,CAAWhB,QAAX,CAAzE,CAAN;AACH;;AACD,YAAM0D,IAAI,GAAG,KAAKtD,SAAL,CAAgBJ,QAAhB,EAA0B,MAA1B,CAAb;AACA,YAAMsC,SAAS,GAAG,KAAKb,WAAL,CAAkBiC,IAAlB,EAAwB,IAAxB,EAA8B,KAAKjC,WAAL,CAAkBzB,QAAlB,EAA4B,IAA5B,CAA9B,CAAlB;AACA,YAAMR,MAAM,GAAG,KAAKmE,cAAL,CAAqBD,IAArB,EAA2B/D,MAA3B,EAAmC2C,SAAnC,CAAf;AACA9C,MAAAA,MAAM,CAAC,OAAD,CAAN,GAAkB,KAAKiC,WAAL,CAAkBiC,IAAlB,EAAwB,SAAxB,CAAlB;AACA,aAAOlE,MAAP;AACH;;AACD,UAAM,IAAIzB,aAAJ,CAAmB,KAAK+B,EAAL,GAAU,oDAAV,GAAiE,KAAKkB,IAAL,CAAWhB,QAAX,CAApF,CAAN;AACH;;AAED,QAAM4D,WAAN,CAAmBjE,MAAnB,EAA2BL,MAAM,GAAG,EAApC,EAAwC;AACpC,UAAM,KAAKC,WAAL,EAAN;AACA,UAAM0B,MAAM,GAAG,KAAKA,MAAL,CAAatB,MAAb,CAAf;AACA,UAAMI,OAAO,GAAG;AACZ,gBAAUkB,MAAM,CAAC,IAAD;AADJ,KAAhB;AAGA,UAAMjB,QAAQ,GAAG,MAAM,KAAK6D,qBAAL,CAA4B,KAAK3D,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAA5B,CAAvB,CANoC,CAOpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAM+C,MAAM,GAAG,KAAKD,WAAL,CAAkBpC,QAAQ,CAAC,MAAD,CAA1B,EAAoCiB,MAApC,CAAf;AACA,UAAMqB,SAAS,GAAG,KAAKb,WAAL,CAAkBzB,QAAlB,EAA4B,IAA5B,CAAlB;AACAqC,IAAAA,MAAM,CAAC,WAAD,CAAN,GAAsBC,SAAtB;AACAD,IAAAA,MAAM,CAAC,UAAD,CAAN,GAAqB,KAAKiB,OAAL,CAAchB,SAAd,CAArB;AACA,WAAOD,MAAP;AACH;;AAED,QAAMyB,YAAN,CAAoBzE,OAAO,GAAGF,SAA9B,EAAyCG,MAAM,GAAG,EAAlD,EAAsD;AAClD,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMS,QAAQ,GAAG,MAAM,KAAK+D,gBAAL,CAAuBzE,MAAvB,CAAvB;AACA,UAAM0E,OAAO,GAAG,KAAK5D,SAAL,CAAgBJ,QAAhB,EAA0B,MAA1B,CAAhB;AACA,UAAMsC,SAAS,GAAG,KAAKb,WAAL,CAAkBzB,QAAlB,EAA4B,IAA5B,CAAlB;AACA,UAAMR,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuE,OAAO,CAACtE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAMI,QAAQ,GAAG,KAAKsB,UAAL,CAAiB6C,OAAO,CAACvE,CAAD,CAAxB,EAA6B,QAA7B,CAAjB;AACA,YAAMwB,MAAM,GAAG,KAAKgD,UAAL,CAAiBpE,QAAjB,CAAf;AACA,YAAMF,MAAM,GAAGsB,MAAM,CAAC,QAAD,CAArB;AACA,YAAMoB,MAAM,GAAG,KAAKD,WAAL,CAAkB4B,OAAO,CAACvE,CAAD,CAAzB,EAA8BwB,MAA9B,CAAf;AACAoB,MAAAA,MAAM,CAAC,WAAD,CAAN,GAAsBC,SAAtB;AACAD,MAAAA,MAAM,CAAC,UAAD,CAAN,GAAqB,KAAKiB,OAAL,CAAchB,SAAd,CAArB;AACA9C,MAAAA,MAAM,CAACG,MAAD,CAAN,GAAiB0C,MAAjB;AACH;;AACD,WAAO,KAAK6B,aAAL,CAAoB1E,MAApB,EAA4B,QAA5B,EAAsCH,OAAtC,CAAP;AACH;;AAED8E,EAAAA,UAAU,CAAEC,KAAF,EAASnD,MAAM,GAAG9B,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMU,QAAQ,GAAG,KAAKsB,UAAL,CAAiBiD,KAAjB,EAAwB,QAAxB,CAAjB;AACA,UAAMzE,MAAM,GAAG,KAAK0E,UAAL,CAAiBxE,QAAjB,EAA2BoB,MAA3B,CAAf;AACA,UAAMqB,SAAS,GAAG,KAAKgC,YAAL,CAAmBF,KAAnB,EAA0B,IAA1B,EAAgC,YAAhC,CAAlB;AACA,UAAMG,KAAK,GAAG,KAAKpD,UAAL,CAAiBiD,KAAjB,EAAwB,UAAxB,CAAd;AACA,QAAII,IAAI,GAAG,KAAKrD,UAAL,CAAiBiD,KAAjB,EAAwB,WAAxB,CAAX;AACA,QAAIK,IAAI,GAAG,KAAKtD,UAAL,CAAiBiD,KAAjB,EAAwB,MAAxB,CAAX;;AACA,QAAIK,IAAI,KAAKtF,SAAb,EAAwB;AACpB,YAAMuF,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAY,GAAZ,CAAlB;AACAH,MAAAA,IAAI,GAAGE,SAAS,CAAC,CAAD,CAAhB;AACAD,MAAAA,IAAI,GAAGC,SAAS,CAAC,CAAD,CAAhB;AACH;;AACD,UAAME,YAAY,GAAG,KAAKzD,UAAL,CAAiBiD,KAAjB,EAAwB,MAAxB,CAArB;AACA,UAAMS,WAAW,GAAG,KAAK1D,UAAL,CAAiBiD,KAAjB,EAAwB,OAAxB,CAApB;AACA,UAAMU,YAAY,GAAG,KAAKC,WAAL,CAAkBX,KAAlB,EAAyB,eAAzB,EAA0C,QAA1C,CAArB;AACA,UAAMY,KAAK,GAAG,KAAKC,WAAL,CAAkBJ,WAAlB,CAAd;AACA,UAAMK,MAAM,GAAG,KAAKD,WAAL,CAAkBH,YAAlB,CAAf;AACA,UAAMtE,IAAI,GAAG,KAAKyE,WAAL,CAAkBrG,OAAO,CAACuG,SAAR,CAAmBN,WAAnB,EAAgCC,YAAhC,CAAlB,CAAb;AACA,QAAIM,GAAG,GAAGjG,SAAV;AACA,QAAIkG,OAAO,GAAG,KAAK/E,UAAL,CAAiB8D,KAAjB,EAAwB,aAAxB,CAAd;AACA,QAAIkB,WAAW,GAAG,KAAKhE,gBAAL,CAAuB,KAAKH,UAAL,CAAiBiD,KAAjB,EAAwB,cAAxB,CAAvB,CAAlB;AACA,UAAMmB,YAAY,GAAG,KAAKjF,UAAL,CAAiB8D,KAAjB,EAAwB,eAAxB,CAArB;;AACA,QAAImB,YAAY,KAAKpG,SAArB,EAAgC;AAC5B,UAAKkG,OAAO,KAAKlG,SAAb,IAA4BkG,OAAO,KAAK,GAA5C,EAAkD;AAC9CA,QAAAA,OAAO,GAAGE,YAAV;AACAD,QAAAA,WAAW,GAAG,KAAKhE,gBAAL,CAAuB,KAAKH,UAAL,CAAiBiD,KAAjB,EAAwB,qBAAxB,CAAvB,CAAd;AACH;AACJ;;AACD,QAAIiB,OAAO,KAAKlG,SAAhB,EAA2B;AACvBiG,MAAAA,GAAG,GAAG;AACF,gBAAQC,OADN;AAEF,oBAAYC;AAFV,OAAN;AAIH;;AACD,UAAME,OAAO,GAAG,KAAKT,WAAL,CAAkBX,KAAlB,EAAyB,UAAzB,EAAqC,SAArC,CAAhB;AACA,UAAMtE,EAAE,GAAG,KAAKqB,UAAL,CAAiBiD,KAAjB,EAAwB,IAAxB,EAA8BoB,OAA9B,CAAX;AACA,WAAO;AACH,YAAM1F,EADH;AAEH,cAAQsE,KAFL;AAGH,eAASG,KAHN;AAIH,mBAAajC,SAJV;AAKH,kBAAY,KAAKgB,OAAL,CAAchB,SAAd,CALT;AAMH,gBAAU3C,MANP;AAOH,cAAQ8E,IAPL;AAQH,cAAQD,IARL;AASH,sBAAgBI,YATb;AAUH,eAASI,KAVN;AAWH,gBAAUE,MAXP;AAYH,cAAQ1E,IAZL;AAaH,aAAO4E;AAbJ,KAAP;AAeH;;AAED,QAAMK,gBAAN,CAAwB3F,EAAxB,EAA4BH,MAAM,GAAGR,SAArC,EAAgDuG,KAAK,GAAGvG,SAAxD,EAAmEqE,KAAK,GAAGrE,SAA3E,EAAsFG,MAAM,GAAG,EAA/F,EAAmG;AAC/F,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMQ,OAAO,GAAG;AACZ,YAAMD;AADM,KAAhB;AAGA,UAAME,QAAQ,GAAG,MAAM,KAAK2F,mCAAL,CAA0C,KAAKzF,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAA1C,CAAvB;AACA,WAAO,KAAKsG,WAAL,CAAkB5F,QAAQ,CAAC,MAAD,CAA1B,EAAoCb,SAApC,EAA+CuG,KAA/C,EAAsDlC,KAAtD,CAAP;AACH;;AAED,QAAMqC,aAAN,CAAqBlG,MAAM,GAAGR,SAA9B,EAAyCuG,KAAK,GAAGvG,SAAjD,EAA4DqE,KAAK,GAAGrE,SAApE,EAA+EG,MAAM,GAAG,EAAxF,EAA4F;AACxF,UAAM,KAAKC,WAAL,EAAN;AACA,QAAI0B,MAAM,GAAG9B,SAAb;AACA,UAAMY,OAAO,GAAG,EAAhB;;AACA,QAAIJ,MAAM,KAAKR,SAAf,EAA0B;AACtB8B,MAAAA,MAAM,GAAG,KAAKA,MAAL,CAAatB,MAAb,CAAT;AACAI,MAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBkB,MAAM,CAAC,IAAD,CAA1B;AACH;;AACD,QAAIuC,KAAK,KAAKrE,SAAd,EAAyB;AACrBY,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkByD,KAAlB,CADqB,CACI;AAC5B;;AACD,QAAIkC,KAAK,KAAKvG,SAAd,EAAyB;AACrBY,MAAAA,OAAO,CAAC,YAAD,CAAP,GAAwB,KAAK+F,GAAL,CAAUJ,KAAV,CAAxB,CADqB,CACqB;;AAC1C3F,MAAAA,OAAO,CAAC,UAAD,CAAP,GAAsB,KAAK+F,GAAL,CAAU,KAAK5C,GAAL,CAAUwC,KAAV,EAAiB,QAAjB,CAAV,CAAtB;AACH;;AACD,UAAM1F,QAAQ,GAAG,MAAM,KAAK+F,2BAAL,CAAkC,KAAK7F,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAAlC,CAAvB;AACA,WAAO,KAAKsG,WAAL,CAAkB5F,QAAQ,CAAC,MAAD,CAA1B,EAAoCiB,MAApC,EAA4CyE,KAA5C,EAAmDlC,KAAnD,CAAP;AACH;;AAED,QAAMwC,WAAN,CAAmBrG,MAAnB,EAA2B+F,KAAK,GAAGvG,SAAnC,EAA8CqE,KAAK,GAAG,IAAtD,EAA4DlE,MAAM,GAAG,EAArE,EAAyE;AACrE,UAAM,KAAKC,WAAL,EAAN;AACA,UAAM0B,MAAM,GAAG,KAAKA,MAAL,CAAatB,MAAb,CAAf;AACA,UAAMI,OAAO,GAAG;AACZ,gBAAUkB,MAAM,CAAC,IAAD;AADJ,KAAhB;;AAGA,QAAIuC,KAAK,KAAKrE,SAAd,EAAyB;AACrBY,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkByD,KAAlB;AACH;;AACD,UAAMxD,QAAQ,GAAG,MAAM,KAAKiG,qBAAL,CAA4B,KAAK/F,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAA5B,CAAvB,CATqE,CAUrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAM4G,IAAI,GAAG,KAAK9F,SAAL,CAAgBJ,QAAhB,EAA0B,MAA1B,CAAb;AACA,QAAIR,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyG,IAAI,CAACxG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAM0G,MAAM,GAAG,KAAK/F,SAAL,CAAgB8F,IAAI,CAACzG,CAAD,CAApB,EAAyB,MAAzB,EAAiC,EAAjC,CAAf;;AACA,WAAK,IAAI2G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAACzG,MAA3B,EAAmC0G,CAAC,EAApC,EAAwC;AACpC,cAAMhC,KAAK,GAAG,KAAKD,UAAL,CAAiBgC,MAAM,CAACC,CAAD,CAAvB,EAA4BnF,MAA5B,CAAd;AACAzB,QAAAA,MAAM,CAAC2C,IAAP,CAAaiC,KAAb;AACH;AACJ;;AACD5E,IAAAA,MAAM,GAAG,KAAK6G,MAAL,CAAa7G,MAAb,EAAqB,WAArB,CAAT;AACA,WAAO,KAAK8G,wBAAL,CAA+B9G,MAA/B,EAAuCG,MAAvC,EAA+C+F,KAA/C,EAAsDlC,KAAtD,CAAP;AACH;;AAED+C,EAAAA,UAAU,CAAEC,KAAF,EAASvF,MAAM,GAAG9B,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO,CACH,KAAKsH,aAAL,CAAoBD,KAApB,EAA2B,IAA3B,CADG,EAEH,KAAKlG,UAAL,CAAiBkG,KAAjB,EAAwB,MAAxB,CAFG,EAGH,KAAKlG,UAAL,CAAiBkG,KAAjB,EAAwB,MAAxB,CAHG,EAIH,KAAKlG,UAAL,CAAiBkG,KAAjB,EAAwB,KAAxB,CAJG,EAKH,KAAKlG,UAAL,CAAiBkG,KAAjB,EAAwB,OAAxB,CALG,EAMH,KAAKlG,UAAL,CAAiBkG,KAAjB,EAAwB,QAAxB,CANG,CAAP;AAQH;;AAED,QAAME,UAAN,CAAkB/G,MAAlB,EAA0BgH,SAAS,GAAG,IAAtC,EAA4CjB,KAAK,GAAGvG,SAApD,EAA+DqE,KAAK,GAAG,IAAvE,EAA6ElE,MAAM,GAAG,EAAtF,EAA0F;AACtF,UAAM,KAAKC,WAAL,EAAN;AACA,UAAM0B,MAAM,GAAG,KAAKA,MAAL,CAAatB,MAAb,CAAf;AACA,UAAMI,OAAO,GAAG;AACZ,gBAAUkB,MAAM,CAAC,IAAD,CADJ;AAEZ,gBAAU,KAAK2F,UAAL,CAAgBD,SAAhB;AAFE,KAAhB;;AAIA,QAAInD,KAAK,KAAKrE,SAAd,EAAyB;AACrBY,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkByD,KAAlB;AACH;;AACD,UAAMxD,QAAQ,GAAG,MAAM,KAAK6G,qBAAL,CAA4B,KAAK3G,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAA5B,CAAvB,CAVsF,CAWtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAM4G,IAAI,GAAG,KAAK9F,SAAL,CAAgBJ,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAK8G,WAAL,CAAkBZ,IAAlB,EAAwBjF,MAAxB,EAAgC0F,SAAhC,EAA2CjB,KAA3C,EAAkDlC,KAAlD,CAAP;AACH;;AAED,QAAMuD,aAAN,CAAqBzH,MAAM,GAAG,EAA9B,EAAkC;AAC9B,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMS,QAAQ,GAAG,MAAM,KAAKgH,yBAAL,CAAgC1H,MAAhC,CAAvB;AACA,WAAOU,QAAQ,CAAC,MAAD,CAAf;AACH;;AAED,QAAMiH,eAAN,CAAuB3H,MAAM,GAAG,EAAhC,EAAoC;AAChC,UAAMS,OAAO,GAAG;AACZ,kBAAY,KAAKe,OAAL,CAAa,UAAb;AADA,KAAhB;AAGA,UAAMd,QAAQ,GAAG,MAAM,KAAKkH,0BAAL,CAAiC,KAAKhH,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAAjC,CAAvB;AACA,UAAM6H,UAAU,GAAG,KAAK/G,SAAL,CAAgBJ,QAAhB,EAA0B,MAA1B,CAAnB;AACA,UAAMR,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0H,UAAU,CAACzH,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,YAAM2H,QAAQ,GAAGD,UAAU,CAAC1H,CAAD,CAA3B,CADwC,CAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAMK,EAAE,GAAG,KAAKM,SAAL,CAAgBgH,QAAhB,EAA0B,MAA1B,CAAX;AACA,YAAM5F,SAAS,GAAG,KAAKC,WAAL,CAAkB2F,QAAlB,EAA4B,oBAA5B,CAAlB;AACA,YAAMC,IAAI,GAAG,KAAK/F,gBAAL,CAAuBxB,EAAvB,CAAb;AACA,YAAMoC,MAAM,GAAGkF,QAAQ,CAAC,SAAD,CAAR,IAAuBA,QAAQ,CAAC,iBAAD,CAA/B,IAAsDA,QAAQ,CAAC,kBAAD,CAA7E;AACA,YAAME,IAAI,GAAG,KAAKnG,UAAL,CAAiBiG,QAAjB,EAA2B,cAA3B,CAAb;AACA5H,MAAAA,MAAM,CAAC6H,IAAD,CAAN,GAAe;AACX,cAAMvH,EADK;AAEX,gBAAQuH,IAFG;AAGX,gBAAQ,QAHG;AAIX;AACA;AACA;AACA,gBAAQC,IAPG;AAQX,kBAAUpF,MARC;AASX,eAAO/C,SATI;AASO;AAClB,qBAAaqC,SAVF;AAWX,kBAAU;AACN,oBAAU;AACN,mBAAOK,IAAI,CAACC,GAAL,CAAU,EAAV,EAAc,CAACN,SAAf,CADD;AAEN,mBAAOK,IAAI,CAACC,GAAL,CAAU,EAAV,EAAcN,SAAd;AAFD,WADJ;AAKN,qBAAW;AACP,mBAAO,KAAKlB,UAAL,CAAiB8G,QAAjB,EAA2B,oBAA3B,CADA;AAEP,mBAAOvF,IAAI,CAACC,GAAL,CAAU,EAAV,EAAcN,SAAd;AAFA,WALL;AASN,sBAAY;AACR,mBAAO,KAAKlB,UAAL,CAAiB8G,QAAjB,EAA2B,qBAA3B,CADC;AAER,mBAAOvF,IAAI,CAACC,GAAL,CAAU,EAAV,EAAcN,SAAd;AAFC;AATN,SAXC;AAyBX,gBAAQ4F;AAzBG,OAAf;AA2BH;;AACD,WAAO5H,MAAP;AACH;;AAED,QAAM+H,YAAN,CAAoBjI,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAM,KAAKC,WAAL,EAAN;AACA,UAAM,KAAKiI,YAAL,EAAN;AACA,UAAM3G,MAAM,GAAG,KAAKC,OAAL,CAAa,oBAAb,CAAf;AACA,UAAMf,OAAO,GAAG;AACZ,YAAM,KAAK0H,QAAL,CAAc,CAAd,EAAiB,IAAjB;AADM,KAAhB;AAGA,UAAMzH,QAAQ,GAAG,MAAM,KAAKa,MAAL,EAAc,KAAKX,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAAd,CAAvB;AACA,UAAMoI,QAAQ,GAAG,KAAKtH,SAAL,CAAgBJ,QAAQ,CAAC,MAAD,CAAxB,EAAkC,MAAlC,EAA0C,EAA1C,CAAjB;AACA,UAAMR,MAAM,GAAG;AAAE,cAAQQ;AAAV,KAAf;;AACA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiI,QAAQ,CAAChI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,YAAMkI,OAAO,GAAGD,QAAQ,CAACjI,CAAD,CAAxB;AACA,YAAMmI,UAAU,GAAG,KAAKzG,UAAL,CAAiBwG,OAAjB,EAA0B,UAA1B,CAAnB;AACA,YAAMN,IAAI,GAAG,KAAK/F,gBAAL,CAAuBsG,UAAvB,CAAb;AACA,UAAIC,OAAO,GAAG1I,SAAd;;AACA,UAAIkI,IAAI,IAAI7H,MAAZ,EAAoB;AAChBqI,QAAAA,OAAO,GAAGrI,MAAM,CAAC6H,IAAD,CAAhB;AACH,OAFD,MAEO;AACHQ,QAAAA,OAAO,GAAG,KAAKA,OAAL,EAAV;AACH;;AACD,UAAIF,OAAO,CAAC,MAAD,CAAP,KAAoB,OAAxB,EAAiC;AAC7BE,QAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAK1G,UAAL,CAAiBwG,OAAjB,EAA0B,SAA1B,CAAlB;AACH;;AACD,UAAIA,OAAO,CAAC,MAAD,CAAP,KAAoB,QAAxB,EAAkC;AAC9BE,QAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAK1G,UAAL,CAAiBwG,OAAjB,EAA0B,SAA1B,CAAlB;AACH;;AACDnI,MAAAA,MAAM,CAAC6H,IAAD,CAAN,GAAeQ,OAAf;AACH;;AACD,WAAO,KAAKC,YAAL,CAAmBtI,MAAnB,EAA2B,KAA3B,CAAP;AACH;;AAED,QAAMuI,mBAAN,CAA2BC,MAA3B,EAAmCrI,MAAM,GAAGR,SAA5C,EAAuDuG,KAAK,GAAGvG,SAA/D,EAA0EqE,KAAK,GAAGrE,SAAlF,EAA6FG,MAAM,GAAG,EAAtG,EAA0G;AACtG,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMQ,OAAO,GAAG;AACZ,gBAAUiI;AADE,KAAhB;AAGA,QAAI/G,MAAM,GAAG9B,SAAb;;AACA,QAAIQ,MAAM,KAAKR,SAAf,EAA0B;AACtB8B,MAAAA,MAAM,GAAG,KAAKA,MAAL,CAAatB,MAAb,CAAT;AACAI,MAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBkB,MAAM,CAAC,IAAD,CAA1B;AACH;;AACD,UAAMJ,MAAM,GAAG,KAAKM,UAAL,CAAiB,KAAKL,OAAtB,EAA+B,2BAA/B,EAA4D,0BAA5D,CAAf;AACA,UAAMd,QAAQ,GAAG,MAAM,KAAKa,MAAL,EAAc,KAAKX,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAAd,CAAvB,CAXsG,CAYtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,KAAK2I,WAAL,CAAkBjI,QAAQ,CAAC,MAAD,CAA1B,EAAoCiB,MAApC,EAA4CyE,KAA5C,EAAmDlC,KAAnD,CAAP;AACH;;AAED,QAAM0E,UAAN,CAAkBpI,EAAlB,EAAsBH,MAAM,GAAGR,SAA/B,EAA0CG,MAAM,GAAG,EAAnD,EAAuD;AACnD,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMQ,OAAO,GAAG;AACZ,YAAMD;AADM,KAAhB;AAGA,UAAME,QAAQ,GAAG,MAAM,KAAKmI,uBAAL,CAA8B,KAAKjI,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAA9B,CAAvB;AACA,UAAMiF,KAAK,GAAG,KAAKnE,SAAL,CAAgBJ,QAAhB,EAA0B,MAA1B,CAAd;AACA,WAAO,KAAKoI,UAAL,CAAiB7D,KAAjB,CAAP;AACH;;AAED,QAAM8D,WAAN,CAAmB1I,MAAM,GAAGR,SAA5B,EAAuCuG,KAAK,GAAGvG,SAA/C,EAA0DqE,KAAK,GAAGrE,SAAlE,EAA6EG,MAAM,GAAG,EAAtF,EAA0F;AACtF,WAAO,MAAM,KAAKyI,mBAAL,CAA0B,yEAA1B,EAAqGpI,MAArG,EAA6G+F,KAA7G,EAAoHlC,KAApH,EAA2HlE,MAA3H,CAAb;AACH;;AAED,QAAMgJ,eAAN,CAAuB3I,MAAM,GAAGR,SAAhC,EAA2CuG,KAAK,GAAGvG,SAAnD,EAA8DqE,KAAK,GAAGrE,SAAtE,EAAiFG,MAAM,GAAG,EAA1F,EAA8F;AAC1F,UAAMuB,MAAM,GAAG,KAAKM,UAAL,CAAiB,KAAKL,OAAtB,EAA+B,uBAA/B,EAAwD,sBAAxD,CAAf;AACA,WAAO,MAAM,KAAKD,MAAL,EAAclB,MAAd,EAAsB+F,KAAtB,EAA6BlC,KAA7B,EAAoClE,MAApC,CAAb;AACH;;AAED,QAAMiJ,iBAAN,CAAyB5I,MAAM,GAAGR,SAAlC,EAA6CuG,KAAK,GAAGvG,SAArD,EAAgEqE,KAAK,GAAGrE,SAAxE,EAAmFG,MAAM,GAAG,EAA5F,EAAgG;AAC5F,QAAIK,MAAM,KAAKR,SAAf,EAA0B;AACtB,YAAM,IAAIb,iBAAJ,CAAuB,KAAKwB,EAAL,GAAU,iDAAjC,CAAN;AACH;;AACD,WAAO,MAAM,KAAKiI,mBAAL,CAA0B,wCAA1B,EAAoEpI,MAApE,EAA4E+F,KAA5E,EAAmFlC,KAAnF,EAA0FlE,MAA1F,CAAb;AACH;;AAED,QAAMkJ,iBAAN,CAAyB7I,MAAM,GAAGR,SAAlC,EAA6CuG,KAAK,GAAGvG,SAArD,EAAgEqE,KAAK,GAAGrE,SAAxE,EAAmFG,MAAM,GAAG,EAA5F,EAAgG;AAC5F,WAAO,MAAM,KAAKyI,mBAAL,CAA0B,kCAA1B,EAA8DpI,MAA9D,EAAsE+F,KAAtE,EAA6ElC,KAA7E,EAAoFlE,MAApF,CAAb;AACH;;AAED,QAAMmJ,iBAAN,CAAyB9I,MAAM,GAAGR,SAAlC,EAA6CuG,KAAK,GAAGvG,SAArD,EAAgEqE,KAAK,GAAGrE,SAAxE,EAAmFG,MAAM,GAAG,EAA5F,EAAgG;AAC5F,UAAM,KAAKC,WAAL,EAAN;;AACA,QAAII,MAAM,KAAKR,SAAf,EAA0B;AACtB,YAAM,IAAIb,iBAAJ,CAAuB,KAAKwB,EAAL,GAAU,+CAAjC,CAAN;AACH;;AACD,UAAMmB,MAAM,GAAG,KAAKA,MAAL,CAAatB,MAAb,CAAf;AACA,QAAI+I,SAAS,GAAG,KAAKvH,UAAL,CAAiB7B,MAAjB,EAAyB,YAAzB,CAAhB;;AACA,QAAIoJ,SAAS,KAAKvJ,SAAlB,EAA6B;AACzB;AACA,YAAM,KAAKqI,YAAL,EAAN;;AACA,WAAK,IAAI/H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKgI,QAAL,CAAc/H,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,cAAMoI,OAAO,GAAG,KAAKJ,QAAL,CAAchI,CAAd,CAAhB;;AACA,YAAIoI,OAAO,CAAC,MAAD,CAAP,KAAoB,MAAxB,EAAgC;AAC5Ba,UAAAA,SAAS,GAAG,KAAKvH,UAAL,CAAiB0G,OAAjB,EAA0B,IAA1B,CAAZ;;AACA,cAAIa,SAAS,KAAKvJ,SAAlB,EAA6B;AACzB;AACH;AACJ;AACJ;AACJ;;AACD,UAAMY,OAAO,GAAG;AACZ,gBAAUkB,MAAM,CAAC,IAAD,CADJ;AAEZ,oBAAcyH;AAFF,KAAhB;;AAIA,QAAIlF,KAAK,KAAKrE,SAAd,EAAyB;AACrBY,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkByD,KAAlB;AACH;;AACD,UAAMmF,OAAO,GAAG,KAAKC,IAAL,CAAWtJ,MAAX,EAAmB,YAAnB,CAAhB;AACA,UAAMU,QAAQ,GAAG,MAAM,KAAK6I,yBAAL,CAAgC,KAAK3I,MAAL,CAAaH,OAAb,EAAsB4I,OAAtB,CAAhC,CAAvB,CA5B4F,CA6B5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMzC,IAAI,GAAG,KAAK9F,SAAL,CAAgBJ,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAKiI,WAAL,CAAkB/B,IAAlB,EAAwBjF,MAAxB,EAAgCyE,KAAhC,EAAuClC,KAAvC,CAAP;AACH;;AAEDsF,EAAAA,gBAAgB,CAAEC,MAAF,EAAU;AACtB,UAAMC,QAAQ,GAAG;AACb,wBAAkB,MADL;AAEb,0BAAoB,UAFP;AAGb,gBAAU,QAHG;AAIb,kBAAY,UAJC;AAKb,mBAAa;AALA,KAAjB;AAOA,WAAO,KAAK7H,UAAL,CAAiB6H,QAAjB,EAA2BD,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAEDX,EAAAA,UAAU,CAAE7D,KAAF,EAAStD,MAAM,GAAG9B,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMW,EAAE,GAAG,KAAKqB,UAAL,CAAiBoD,KAAjB,EAAwB,IAAxB,CAAX;AACA,QAAIC,IAAI,GAAGrF,SAAX;AACA,QAAIsF,IAAI,GAAGtF,SAAX;AACA,QAAI4J,MAAM,GAAG5J,SAAb;;AACA,QAAI,UAAUoF,KAAd,EAAqB;AACjB,YAAM0E,SAAS,GAAG1E,KAAK,CAAC,MAAD,CAAL,CAAcI,KAAd,CAAqB,GAArB,CAAlB;AACAH,MAAAA,IAAI,GAAGyE,SAAS,CAAC,CAAD,CAAhB;AACAxE,MAAAA,IAAI,GAAGwE,SAAS,CAAC,CAAD,CAAhB;AACAF,MAAAA,MAAM,GAAG,KAAKD,gBAAL,CAAuB,KAAK3H,UAAL,CAAiBoD,KAAjB,EAAwB,OAAxB,CAAvB,CAAT;AACH;;AACD,UAAM1E,QAAQ,GAAG,KAAKsB,UAAL,CAAiBoD,KAAjB,EAAwB,QAAxB,CAAjB;AACA,UAAM5E,MAAM,GAAG,KAAK0E,UAAL,CAAiBxE,QAAjB,EAA2BoB,MAA3B,CAAf;AACA,UAAMqB,SAAS,GAAG,KAAKb,WAAL,CAAkB8C,KAAlB,EAAyB,YAAzB,CAAlB;AACA,UAAMW,MAAM,GAAG,KAAK5E,UAAL,CAAiBiE,KAAjB,EAAwB,QAAxB,CAAf;AACA,UAAM2E,MAAM,GAAG,KAAKC,WAAL,CAAkB5E,KAAlB,EAAyB,eAAzB,EAA0C,cAA1C,CAAf,CA9CmC,CA8CuC;;AAC1E,QAAIS,KAAK,GAAG,KAAK1E,UAAL,CAAiBiE,KAAjB,EAAwB,OAAxB,CAAZ;;AACA,QAAIS,KAAK,KAAK,GAAd,EAAmB;AACfA,MAAAA,KAAK,GAAG7F,SAAR;AACH;;AACD,UAAMqB,IAAI,GAAG,KAAK2I,WAAL,CAAkB5E,KAAlB,EAAyB,oBAAzB,EAA+C,mBAA/C,CAAb,CAnDmC,CAmD+C;;AAClF,UAAMc,OAAO,GAAG,KAAK8D,WAAL,CAAkB5E,KAAlB,EAAyB,aAAzB,EAAwC,YAAxC,CAAhB,CApDmC,CAoDoC;;AACvE,QAAIa,GAAG,GAAGjG,SAAV;;AACA,QAAIkG,OAAO,KAAKlG,SAAhB,EAA2B;AACvB,UAAImG,WAAW,GAAGnG,SAAlB;;AACA,UAAI8B,MAAM,KAAK9B,SAAf,EAA0B;AACtBmG,QAAAA,WAAW,GAAId,IAAI,KAAK,MAAV,GAAoBvD,MAAM,CAAC,OAAD,CAA1B,GAAsCA,MAAM,CAAC,MAAD,CAA1D;AACH;;AACDmE,MAAAA,GAAG,GAAG;AACF,gBAAQC,OADN;AAEF,oBAAYC;AAFV,OAAN;AAIH;;AACD,WAAO,KAAK8D,SAAL,CAAgB;AACnB,cAAQ7E,KADW;AAEnB,YAAMzE,EAFa;AAGnB,uBAAiBX,SAHE;AAInB,mBAAamD,SAJM;AAKnB,kBAAY,KAAKgB,OAAL,CAAchB,SAAd,CALO;AAMnB,4BAAsBnD,SANH;AAOnB,gBAAUQ,MAPS;AAQnB,cAAQ8E,IARW;AASnB,qBAAetF,SATI;AAUnB,kBAAYA,SAVO;AAWnB,cAAQqF,IAXW;AAYnB,eAASQ,KAZU;AAanB,mBAAa7F,SAbM;AAcnB,iBAAWA,SAdQ;AAenB,cAAQqB,IAfW;AAgBnB,gBAAU0E,MAhBS;AAiBnB,gBAAUgE,MAjBS;AAkBnB,mBAAa/J,SAlBM;AAmBnB,gBAAU4J,MAnBS;AAoBnB,aAAO3D,GApBY;AAqBnB,gBAAUjG;AArBS,KAAhB,CAAP;AAuBH;;AAED,QAAMkK,WAAN,CAAmB1J,MAAnB,EAA2B8E,IAA3B,EAAiCD,IAAjC,EAAuCU,MAAvC,EAA+CF,KAAK,GAAG7F,SAAvD,EAAkEG,MAAM,GAAG,EAA3E,EAA+E;AAC3E,UAAM,KAAKC,WAAL,EAAN;AACA,UAAM,KAAKiI,YAAL,EAAN;AACA,UAAMvG,MAAM,GAAG,KAAKA,MAAL,CAAatB,MAAb,CAAf;AACA,UAAMI,OAAO,GAAG;AACZ,oBAAc,KAAK0H,QAAL,CAAc,CAAd,EAAiB,IAAjB,CADF;AAEZ,gBAAUxG,MAAM,CAAC,IAAD,CAFJ;AAGZ,cAAQuD,IAAI,GAAG,GAAP,GAAaC;AAHT,KAAhB;AAKA,UAAM6E,aAAa,GAAG,KAAKvE,WAAL,CAAkBzF,MAAlB,EAA0B,eAA1B,EAA2C,iBAA3C,CAAtB,CAT2E,CASU;;AACrF,QAAIgK,aAAa,KAAKnK,SAAtB,EAAiC;AAC7BY,MAAAA,OAAO,CAAC,iBAAD,CAAP,GAA6BuJ,aAA7B;AACH;;AACDhK,IAAAA,MAAM,GAAG,KAAKsJ,IAAL,CAAWtJ,MAAX,EAAmB,CAAE,eAAF,EAAmB,iBAAnB,CAAnB,CAAT;;AACA,QAAKmF,IAAI,KAAK,QAAV,IAAwBD,IAAI,KAAK,KAArC,EAA6C;AACzC,UAAI,KAAK1D,OAAL,CAAa,mCAAb,CAAJ,EAAuD;AACnD,YAAIkE,KAAK,KAAK7F,SAAd,EAAyB;AACrB,gBAAM,IAAIhB,YAAJ,CAAkB,KAAK2B,EAAL,GAAU,kTAA5B,CAAN;AACH,SAFD,MAEO;AACH;AACA;AACA;AACA;AACA;AACA;AACAC,UAAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAKQ,eAAL,CAAsBZ,MAAtB,EAA8B4J,UAAU,CAAErE,MAAF,CAAV,GAAsBqE,UAAU,CAAEvE,KAAF,CAA9D,CAApB;AACH;AACJ,OAZD,MAYO;AACHjF,QAAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAKQ,eAAL,CAAsBZ,MAAtB,EAA8BuF,MAA9B,CAApB;AACH;AACJ,KAhBD,MAgBO;AACHnF,MAAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAKyJ,iBAAL,CAAwB7J,MAAxB,EAAgCuF,MAAhC,CAApB;AACH;;AACD,QAAIT,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,KAA7B,IAAsCA,IAAI,KAAK,aAAnD,EAAkE;AAC9D1E,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAK0J,gBAAL,CAAuB9J,MAAvB,EAA+BqF,KAA/B,CAAnB;AACH;;AACD,UAAMnE,MAAM,GAAG,KAAKC,OAAL,CAAa,mBAAb,CAAf;AACA,UAAMd,QAAQ,GAAG,MAAM,KAAKa,MAAL,EAAc,KAAKX,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAAd,CAAvB;AACA,UAAMgD,SAAS,GAAG,KAAKoH,YAAL,EAAlB;AACA,UAAM5J,EAAE,GAAG,KAAKqB,UAAL,CAAiBnB,QAAjB,EAA2B,MAA3B,CAAX;AACA,WAAO;AACH,cAAQA,QADL;AAEH,YAAMF,EAFH;AAGH,mBAAawC,SAHV;AAIH,kBAAY,KAAKgB,OAAL,CAAchB,SAAd,CAJT;AAKH,4BAAsBnD,SALnB;AAMH,gBAAUA,SANP;AAOH,gBAAUQ,MAPP;AAQH,cAAQ8E,IARL;AASH,cAAQD,IATL;AAUH,eAASQ,KAVN;AAWH,gBAAUE,MAXP;AAYH,gBAAU/F,SAZP;AAaH,mBAAaA,SAbV;AAcH,cAAQA,SAdL;AAeH,gBAAUA,SAfP;AAgBH,aAAOA,SAhBJ;AAiBH,uBAAiBA,SAjBd;AAkBH,iBAAWA;AAlBR,KAAP;AAoBH;;AAED,QAAMwK,WAAN,CAAmB7J,EAAnB,EAAuBH,MAAM,GAAGR,SAAhC,EAA2CG,MAAM,GAAG,EAApD,EAAwD;AACpD,UAAMU,QAAQ,GAAG,MAAM,KAAK4J,oCAAL,CAA2C;AAAE,YAAM9J;AAAR,KAA3C,CAAvB,CADoD,CAEpD;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,KAAKI,MAAL,CAAa,KAAKkI,UAAL,CAAiBpI,QAAjB,CAAb,EAAyC;AAC5C,YAAMF,EADsC;AAE5C,gBAAU;AAFkC,KAAzC,CAAP;AAIH;;AAED,QAAM+J,YAAN,CAAoBC,GAApB,EAAyBnK,MAAM,GAAGR,SAAlC,EAA6CG,MAAM,GAAG,EAAtD,EAA0D;AACtD,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMwK,cAAc,GAAG,KAAKC,UAAL,CAAiB1K,MAAjB,EAAyB,gBAAzB,EAA2C,kBAA3C,CAAvB;AACAA,IAAAA,MAAM,GAAG,KAAKsJ,IAAL,CAAWtJ,MAAX,EAAmB,CAAE,gBAAF,EAAoB,kBAApB,CAAnB,CAAT;AACA,UAAMS,OAAO,GAAG,EAAhB;;AACA,QAAIgK,cAAc,KAAK5K,SAAvB,EAAkC;AAC9BY,MAAAA,OAAO,CAAC,WAAD,CAAP,GAAuB+J,GAAvB;AACH,KAFD,MAEO;AACH/J,MAAAA,OAAO,CAAC,kBAAD,CAAP,GAA8BgK,cAA9B;AACH;;AACD,UAAM/J,QAAQ,GAAG,MAAM,KAAKiK,iCAAL,CAAwC,KAAK/J,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAAxC,CAAvB,CAVsD,CAWtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAOU,QAAP;AACH;;AAED,QAAMkK,eAAN,CAAuBvK,MAAM,GAAGR,SAAhC,EAA2CG,MAAM,GAAG,EAApD,EAAwD;AACpD,UAAM,KAAKC,WAAL,EAAN;AACA,UAAMQ,OAAO,GAAG,CACZ;AACA;AACA;AACA;AACA;AALY,KAAhB;AAOA,QAAIkB,MAAM,GAAG9B,SAAb;;AACA,QAAIQ,MAAM,KAAKR,SAAf,EAA0B;AACtB8B,MAAAA,MAAM,GAAG,KAAKA,MAAL,CAAatB,MAAb,CAAT;AACAI,MAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBkB,MAAM,CAAC,IAAD,CAA1B;AACH;;AACD,UAAMjB,QAAQ,GAAG,MAAM,KAAKmK,2CAAL,CAAkD,KAAKjK,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAAlD,CAAvB,CAdoD,CAepD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAOU,QAAP;AACH;;AAEDoK,EAAAA,mBAAmB,CAAEhD,QAAF,EAAYhC,GAAZ,EAAiB;AAChC,WAAO,KAAK3E,kBAAL,CAAyB2E,GAAzB,EAA8B,CAA9B,EAAiC,KAAK+B,UAAL,CAAgBC,QAAhB,EAA0B,WAA1B,CAAjC,CAAP;AACH;;AAEDiD,EAAAA,mBAAmB,CAAEC,cAAF,EAAkBlD,QAAQ,GAAGjI,SAA7B,EAAwC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMoL,OAAO,GAAG,KAAKpJ,UAAL,CAAiBmJ,cAAjB,EAAiC,SAAjC,CAAhB;AACA,UAAME,GAAG,GAAG,KAAKrJ,UAAL,CAAiBmJ,cAAjB,EAAiC,YAAjC,CAAZ;AACA,UAAM1C,UAAU,GAAG,KAAKzG,UAAL,CAAiBmJ,cAAjB,EAAiC,UAAjC,CAAnB;AACA,UAAMjD,IAAI,GAAG,KAAK/F,gBAAL,CAAuBsG,UAAvB,CAAb;AACA,SAAK6C,YAAL,CAAmBF,OAAnB;AACA,WAAO;AACH,kBAAYlD,IADT;AAEH,iBAAWkD,OAFR;AAGH,aAAOC,GAHJ;AAIH,cAAQF;AAJL,KAAP;AAMH;;AAED,QAAMI,mBAAN,CAA2BrD,IAA3B,EAAiC/H,MAAM,GAAG,EAA1C,EAA8C;AAC1C,UAAM,KAAKC,WAAL,EAAN;AACA,UAAM6H,QAAQ,GAAG,KAAKA,QAAL,CAAeC,IAAf,CAAjB;AACA,UAAMtH,OAAO,GAAG;AACZ,kBAAYqH,QAAQ,CAAC,IAAD;AADR,KAAhB;AAGA,UAAMpH,QAAQ,GAAG,MAAM,KAAK2K,iCAAL,CAAwC,KAAKzK,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAAxC,CAAvB,CAN0C,CAO1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAM4G,IAAI,GAAG,KAAK9F,SAAL,CAAgBJ,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAKqK,mBAAL,CAA0B,KAAKjK,SAAL,CAAgB8F,IAAhB,EAAsB,CAAtB,EAAyB,EAAzB,CAA1B,EAAwDkB,QAAxD,CAAP;AACH;;AAED,QAAMwD,aAAN,CAAqBvD,IAAI,GAAGlI,SAA5B,EAAuCuG,KAAK,GAAGvG,SAA/C,EAA0DqE,KAAK,GAAGrE,SAAlE,EAA6EG,MAAM,GAAG,EAAtF,EAA0F;AACtF,QAAIkE,KAAK,KAAKrE,SAAV,IAAuBqE,KAAK,GAAG,GAAnC,EAAwC;AACpCA,MAAAA,KAAK,GAAG,GAAR;AACH;;AACD,UAAM,KAAKjE,WAAL,EAAN;AACA,QAAI6H,QAAQ,GAAGjI,SAAf;;AACA,QAAIkI,IAAI,KAAKlI,SAAb,EAAwB;AACpBiI,MAAAA,QAAQ,GAAG,KAAKA,QAAL,CAAeC,IAAf,CAAX;AACH;;AACD,UAAMtH,OAAO,GAAG;AACZ,cAAQ,SADI;AAEZ,cAAQ,CAFI,CAED;;AAFC,KAAhB;;AAIA,QAAIqH,QAAQ,KAAKjI,SAAjB,EAA4B;AACxBY,MAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBqH,QAAQ,CAAC,IAAD,CAA9B;AACH;;AACD,QAAI5D,KAAK,KAAKrE,SAAd,EAAyB;AACrBY,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkByD,KAAlB,CADqB,CACI;AAC5B;;AACD,UAAMxD,QAAQ,GAAG,MAAM,KAAK6K,8BAAL,CAAqC,KAAK3K,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAArC,CAAvB,CAnBsF,CAoBtF;;AACA,WAAO,KAAKwL,iBAAL,CAAwB9K,QAAQ,CAAC,MAAD,CAAhC,EAA0CoH,QAA1C,EAAoD1B,KAApD,EAA2DlC,KAA3D,CAAP;AACH;;AAED,QAAMuH,gBAAN,CAAwB1D,IAAI,GAAGlI,SAA/B,EAA0CuG,KAAK,GAAGvG,SAAlD,EAA6DqE,KAAK,GAAGrE,SAArE,EAAgFG,MAAM,GAAG,EAAzF,EAA6F;AACzF,QAAIkE,KAAK,KAAKrE,SAAV,IAAuBqE,KAAK,GAAG,GAAnC,EAAwC;AACpCA,MAAAA,KAAK,GAAG,GAAR;AACH;;AACD,UAAM,KAAKjE,WAAL,EAAN;AACA,QAAI6H,QAAQ,GAAGjI,SAAf;;AACA,QAAIkI,IAAI,KAAKlI,SAAb,EAAwB;AACpBiI,MAAAA,QAAQ,GAAG,KAAKA,QAAL,CAAeC,IAAf,CAAX;AACH;;AACD,UAAMtH,OAAO,GAAG;AACZ,cAAQ,UADI;AAEZ,cAAQ,CAFI,CAED;;AAFC,KAAhB;;AAIA,QAAIqH,QAAQ,KAAKjI,SAAjB,EAA4B;AACxBY,MAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBqH,QAAQ,CAAC,IAAD,CAA9B;AACH;;AACD,QAAI5D,KAAK,KAAKrE,SAAd,EAAyB;AACrBY,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkByD,KAAlB,CADqB,CACI;AAC5B;;AACD,UAAMxD,QAAQ,GAAG,MAAM,KAAK6K,8BAAL,CAAqC,KAAK3K,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAArC,CAAvB,CAnByF,CAoBzF;;AACA,WAAO,KAAKwL,iBAAL,CAAwB9K,QAAQ,CAAC,MAAD,CAAhC,EAA0CoH,QAA1C,EAAoD1B,KAApD,EAA2DlC,KAA3D,CAAP;AACH;;AAEDwH,EAAAA,gBAAgB,CAAEC,WAAF,EAAe7D,QAAQ,GAAGjI,SAA1B,EAAqC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMmD,SAAS,GAAG,KAAKb,WAAL,CAAkBwJ,WAAlB,EAA+B,YAA/B,CAAlB;AACA,UAAMC,OAAO,GAAG,KAAKzJ,WAAL,CAAkBwJ,WAAlB,EAA+B,YAA/B,CAAhB;AACA,UAAM5D,IAAI,GAAG,KAAK/F,gBAAL,CAAuB,KAAKH,UAAL,CAAiB8J,WAAjB,EAA8B,UAA9B,CAAvB,CAAb;AACA,QAAIxG,IAAI,GAAG,KAAKtD,UAAL,CAAiB8J,WAAjB,EAA8B,MAA9B,CAAX;;AACA,QAAIxG,IAAI,KAAK,UAAb,EAAyB;AACrBA,MAAAA,IAAI,GAAG,YAAP;AACH;;AACD,UAAMsE,MAAM,GAAG,KAAKoC,sBAAL,CAA6B,KAAKhK,UAAL,CAAiB8J,WAAjB,EAA8B,OAA9B,CAA7B,CAAf;AACA,UAAMT,GAAG,GAAG,KAAKrJ,UAAL,CAAiB8J,WAAjB,EAA8B,aAA9B,CAAZ;AACA,QAAI5F,OAAO,GAAG,KAAK/E,UAAL,CAAiB2K,WAAjB,EAA8B,KAA9B,CAAd;;AACA,QAAI5F,OAAO,KAAKlG,SAAhB,EAA2B;AACvBkG,MAAAA,OAAO,GAAGxD,IAAI,CAACuJ,GAAL,CAAU/F,OAAV,CAAV;AACH;;AACD,WAAO;AACH,cAAQ4F,WADL;AAEH,YAAM,KAAK9J,UAAL,CAAiB8J,WAAjB,EAA8B,IAA9B,CAFH;AAGH,cAAQ,KAAK9J,UAAL,CAAiB8J,WAAjB,EAA8B,SAA9B,CAHL;AAIH,mBAAa3I,SAJV;AAKH,kBAAY,KAAKgB,OAAL,CAAchB,SAAd,CALT;AAMH,iBAAW,KAAKnB,UAAL,CAAiB8J,WAAjB,EAA8B,SAA9B,CANR;AAOH,aAAOT,GAPJ;AAQH,cAAQ/F,IARL;AASH,gBAAU,KAAKnE,UAAL,CAAiB2K,WAAjB,EAA8B,QAA9B,CATP;AAUH,kBAAY5D,IAVT;AAWH,gBAAU0B,MAXP;AAYH,iBAAWmC,OAZR;AAaH,aAAO;AACH,oBAAY7D,IADT;AAEH,gBAAQhC,OAFL;AAGH,gBAAQlG;AAHL;AAbJ,KAAP;AAmBH;;AAEDgM,EAAAA,sBAAsB,CAAEpC,MAAF,EAAU;AAC5B,UAAMC,QAAQ,GAAG;AACb;AACA,iBAAW,QAFE;AAGb,oBAAc,SAHD;AAIb,mBAAa,IAJA;AAKb,cAAQ,IALK;AAMb,gBAAU,QANG;AAOb;AACA,mBAAa,SARA;AASb,kBAAY,UATC;AAUb,mBAAa,SAVA;AAWb,gBAAU,QAXG;AAYb,cAAQ,SAZK;AAab,uBAAiB,QAbJ;AAcb;AACA,uBAAiB,QAfJ;AAgBb,kBAAY,QAhBC;AAiBb,yBAAmB,SAjBN;AAkBb,sBAAgB;AAlBH,KAAjB;AAoBA,WAAO,KAAK7H,UAAL,CAAiB6H,QAAjB,EAA2BD,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAED,QAAMsC,QAAN,CAAgBhE,IAAhB,EAAsBnC,MAAtB,EAA8BqF,OAA9B,EAAuCC,GAAG,GAAGrL,SAA7C,EAAwDG,MAAM,GAAG,EAAjE,EAAqE;AACjE,UAAM,KAAKC,WAAL,EAAN;AACA,SAAKkL,YAAL,CAAmBF,OAAnB;AACA,UAAMnD,QAAQ,GAAG,KAAKA,QAAL,CAAeC,IAAf,CAAjB;AACA,UAAMtH,OAAO,GAAG;AACZ,iBAAWwK,OADC;AACQ;AACpB,gBAAUrF,MAFE;AAGZ,kBAAYkC,QAAQ,CAAC,IAAD,CAAR,CAAekE,WAAf;AAHA,KAAhB;;AAKA,QAAId,GAAG,KAAKrL,SAAZ,EAAuB;AACnBY,MAAAA,OAAO,CAAC,UAAD,CAAP,GAAsByK,GAAtB,CADmB,CACQ;AAC9B;;AACD,UAAMxK,QAAQ,GAAG,MAAM,KAAKuL,8BAAL,CAAqC,KAAKrL,MAAL,CAAaH,OAAb,EAAsBT,MAAtB,CAArC,CAAvB;AACA,UAAMQ,EAAE,GAAG,KAAKqB,UAAL,CAAiBnB,QAAjB,EAA2B,MAA3B,CAAX;AACA,WAAO;AACH,cAAQA,QADL;AAEH,YAAMF;AAFH,KAAP;AAIH;;AAED0L,EAAAA,IAAI,CAAEC,IAAF,EAAQC,GAAG,GAAG,QAAd,EAAwB7K,MAAM,GAAG,KAAjC,EAAwCvB,MAAM,GAAG,EAAjD,EAAqDqM,OAAO,GAAGxM,SAA/D,EAA0EyM,IAAI,GAAGzM,SAAjF,EAA4F;AAC5F,QAAI0M,GAAG,GAAG,GAAV;;AACA,QAAIH,GAAG,KAAK,QAAZ,EAAsB;AAClBG,MAAAA,GAAG,IAAIH,GAAP;AACH,KAFD,MAEO,IAAKA,GAAG,KAAK,QAAT,IAAuBA,GAAG,KAAK,SAAnC,EAA+C;AAClDG,MAAAA,GAAG,IAAI,KAAKC,OAAZ;AACH,KAFM,MAEA,IAAKJ,GAAG,KAAK,UAAT,IAAyBA,GAAG,KAAK,WAArC,EAAmD;AACtDG,MAAAA,GAAG,IAAI,IAAP;AACH;;AACDA,IAAAA,GAAG,IAAI,MAAM,KAAKE,aAAL,CAAoBN,IAApB,EAA0BnM,MAA1B,CAAb;AACA,UAAM0M,KAAK,GAAG,KAAKpD,IAAL,CAAWtJ,MAAX,EAAmB,KAAK2M,aAAL,CAAoBR,IAApB,CAAnB,CAAd;;AACA,QAAIC,GAAG,KAAK,SAAR,IAAqBA,GAAG,KAAK,WAAjC,EAA8C;AAC1C,WAAKQ,wBAAL;AACA,YAAM5J,SAAS,GAAG,KAAK6J,MAAL,CAAa,KAAKzC,YAAL,EAAb,EAAmC,GAAnC,CAAlB;AACA,UAAI3J,OAAO,GAAG;AACV,2BAAmB,YADT;AAEV,4BAAoB,GAFV;AAGV,uBAAe,KAAKqM,MAHV;AAIV,qBAAa9J;AAJH,OAAd;;AAMA,UAAIzB,MAAM,KAAK,MAAf,EAAuB;AACnBd,QAAAA,OAAO,GAAG,KAAKG,MAAL,CAAaH,OAAb,EAAsBiM,KAAtB,CAAV;AACH;;AACDjM,MAAAA,OAAO,GAAG,KAAKsM,OAAL,CAActM,OAAd,CAAV;AACA,UAAIuM,IAAI,GAAG,KAAKC,SAAL,CAAgBxM,OAAhB,CAAX,CAb0C,CAc1C;AACA;;AACA,YAAMyM,OAAO,GAAG,CAAE3L,MAAF,EAAU,KAAK4L,QAAf,EAAyBZ,GAAzB,EAA8BS,IAA9B,EAAqCI,IAArC,CAA2C,IAA3C,CAAhB;AACA,YAAMC,SAAS,GAAG,KAAKC,IAAL,CAAW,KAAKC,MAAL,CAAaL,OAAb,CAAX,EAAkC,KAAKK,MAAL,CAAa,KAAKC,MAAlB,CAAlC,EAA6D,QAA7D,EAAuE,QAAvE,CAAlB;AACAR,MAAAA,IAAI,IAAI,MAAM,KAAKC,SAAL,CAAgB;AAAE,qBAAaI;AAAf,OAAhB,CAAd;AACAd,MAAAA,GAAG,IAAI,MAAMS,IAAb;;AACA,UAAIzL,MAAM,KAAK,MAAf,EAAuB;AACnB+K,QAAAA,IAAI,GAAG,KAAK5K,IAAL,CAAWgL,KAAX,CAAP;AACAL,QAAAA,OAAO,GAAG;AACN,0BAAgB;AADV,SAAV;AAGH,OALD,MAKO;AACHA,QAAAA,OAAO,GAAG;AACN,0BAAgB;AADV,SAAV;AAGH;AACJ,KA9BD,MA8BO;AACH,UAAIoB,MAAM,CAACC,IAAP,CAAa1N,MAAb,EAAqBI,MAAzB,EAAiC;AAC7BmM,QAAAA,GAAG,IAAI,MAAM,KAAKU,SAAL,CAAgBjN,MAAhB,CAAb;AACH;AACJ;;AACDuM,IAAAA,GAAG,GAAG,KAAKE,aAAL,CAAoB,KAAKkB,IAAL,CAAU,KAAV,EAAiBvB,GAAjB,CAApB,EAA2C;AAC7C,kBAAY,KAAKe;AAD4B,KAA3C,IAEDZ,GAFL;AAGA,WAAO;AAAE,aAAOA,GAAT;AAAc,gBAAUhL,MAAxB;AAAgC,cAAQ+K,IAAxC;AAA8C,iBAAWD;AAAzD,KAAP;AACH;;AAEDuB,EAAAA,YAAY,CAAEC,QAAF,EAAYC,MAAZ,EAAoBvB,GAApB,EAAyBhL,MAAzB,EAAiC8K,OAAjC,EAA0CC,IAA1C,EAAgD5L,QAAhD,EAA0DqN,cAA1D,EAA0EC,WAA1E,EAAuF;AAC/F,QAAItN,QAAQ,KAAKb,SAAjB,EAA4B;AACxB,aADwB,CAChB;AACX;;AACD,QAAI,YAAYa,QAAhB,EAA0B;AACtB;AACA;AACA;AACA,YAAM+I,MAAM,GAAG,KAAK5H,UAAL,CAAiBnB,QAAjB,EAA2B,QAA3B,CAAf;;AACA,UAAI+I,MAAM,KAAK,OAAf,EAAwB;AACpB,cAAM1B,IAAI,GAAG,KAAKlG,UAAL,CAAiBnB,QAAjB,EAA2B,UAA3B,CAAb;AACA,cAAMuN,QAAQ,GAAG,KAAKzN,EAAL,GAAU,GAAV,GAAgB8L,IAAjC;AACA,aAAK4B,4BAAL,CAAmC,KAAKC,UAAL,CAAgB,OAAhB,CAAnC,EAA6D7B,IAA7D,EAAmE2B,QAAnE;AACA,aAAKG,4BAAL,CAAmC,KAAKD,UAAL,CAAgB,OAAhB,CAAnC,EAA6DpG,IAA7D,EAAmEkG,QAAnE;AACA,cAAMI,OAAO,GAAG,KAAKxM,UAAL,CAAiBnB,QAAjB,EAA2B,SAA3B,CAAhB;AACA,aAAK0N,4BAAL,CAAmC,KAAKD,UAAL,CAAgB,OAAhB,CAAnC,EAA6DE,OAA7D,EAAsEJ,QAAtE;AACA,cAAM,IAAIxP,aAAJ,CAAmBwP,QAAnB,CAAN;AACH;AACJ;AACJ;;AAvgD4C,CAAjD","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { AuthenticationError, ExchangeError, PermissionDenied, ExchangeNotAvailable, OnMaintenance, InvalidOrder, OrderNotFound, InsufficientFunds, ArgumentsRequired, BadSymbol, BadRequest, RequestTimeout, NetworkError } = require ('./base/errors');\nconst { TRUNCATE } = require ('./base/functions/number');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class huobipro extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'huobipro',\n            'name': 'Huobi Pro',\n            'countries': [ 'CN' ],\n            'rateLimit': 2000,\n            'userAgent': this.userAgents['chrome39'],\n            'version': 'v1',\n            'accounts': undefined,\n            'accountsById': undefined,\n            'hostname': 'api.huobi.pro', // api.testnet.huobi.pro\n            'pro': true,\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'cancelOrders': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingLimits': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '60min',\n                '4h': '4hour',\n                '1d': '1day',\n                '1w': '1week',\n                '1M': '1mon',\n                '1y': '1year',\n            },\n            'urls': {\n                'test': {\n                    'market': 'https://api.testnet.huobi.pro',\n                    'public': 'https://api.testnet.huobi.pro',\n                    'private': 'https://api.testnet.huobi.pro',\n                },\n                'logo': 'https://user-images.githubusercontent.com/1294454/76137448-22748a80-604e-11ea-8069-6e389271911d.jpg',\n                'api': {\n                    'market': 'https://{hostname}',\n                    'public': 'https://{hostname}',\n                    'private': 'https://{hostname}',\n                    'v2Public': 'https://{hostname}',\n                    'v2Private': 'https://{hostname}',\n                },\n                'www': 'https://www.huobi.com',\n                'referral': 'https://www.huobi.com/en-us/topic/invited/?invite_code=rwrd3',\n                'doc': 'https://huobiapi.github.io/docs/spot/v1/cn/',\n                'fees': 'https://www.huobi.com/about/fee/',\n            },\n            'api': {\n                'v2Public': {\n                    'get': [\n                        'reference/currencies',\n                    ],\n                },\n                'v2Private': {\n                    'get': [\n                        'account/ledger',\n                        'account/withdraw/quota',\n                        'account/withdraw/address', // 提币地址查询(限母用户可用)\n                        'account/deposit/address',\n                        'reference/transact-fee-rate',\n                        'account/asset-valuation', // 获取账户资产估值\n                        'point/account', // 点卡余额查询\n                        'sub-user/user-list', // 获取子用户列表\n                        'sub-user/user-state', // 获取特定子用户的用户状态\n                        'sub-user/account-list', // 获取特定子用户的账户列表\n                        'sub-user/deposit-address', // 子用户充币地址查询\n                        'sub-user/query-deposit', // 子用户充币记录查询\n                        'user/api-key', // 母子用户API key信息查询\n                    ],\n                    'post': [\n                        'account/transfer',\n                        'point/transfer', // 点卡划转\n                        'sub-user/management', // 冻结/解冻子用户\n                        'sub-user/creation', // 子用户创建\n                        'sub-user/tradable-market', // 设置子用户交易权限\n                        'sub-user/transferability', // 设置子用户资产转出权限\n                        'sub-user/api-key-generation', // 子用户API key创建\n                        'sub-user/api-key-modification', // 修改子用户API key\n                        'sub-user/api-key-deletion', // 删除子用户API key\n                    ],\n                },\n                'market': {\n                    'get': [\n                        'history/kline', // 获取K线数据\n                        'detail/merged', // 获取聚合行情(Ticker)\n                        'depth', // 获取 Market Depth 数据\n                        'trade', // 获取 Trade Detail 数据\n                        'history/trade', // 批量获取最近的交易记录\n                        'detail', // 获取 Market Detail 24小时成交量数据\n                        'tickers',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'common/symbols', // 查询系统支持的所有交易对\n                        'common/currencys', // 查询系统支持的所有币种\n                        'common/timestamp', // 查询系统当前时间\n                        'common/exchange', // order limits\n                        'settings/currencys', // ?language=en-US\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'account/accounts', // 查询当前用户的所有账户(即account-id)\n                        'account/accounts/{id}/balance', // 查询指定账户的余额\n                        'account/accounts/{sub-uid}',\n                        'account/history',\n                        'cross-margin/loan-info',\n                        'margin/loan-info', // 查询借币币息率及额度\n                        'fee/fee-rate/get',\n                        'order/openOrders',\n                        'order/orders',\n                        'order/orders/{id}', // 查询某个订单详情\n                        'order/orders/{id}/matchresults', // 查询某个订单的成交明细\n                        'order/orders/getClientOrder',\n                        'order/history', // 查询当前委托、历史委托\n                        'order/matchresults', // 查询当前成交、历史成交\n                        'dw/withdraw-virtual/addresses', // 查询虚拟币提现地址（Deprecated）\n                        'query/deposit-withdraw',\n                        'margin/loan-info',\n                        'margin/loan-orders', // 借贷订单\n                        'margin/accounts/balance', // 借贷账户详情\n                        'cross-margin/loan-orders', // 查询借币订单\n                        'cross-margin/accounts/balance', // 借币账户详情\n                        'points/actions',\n                        'points/orders',\n                        'subuser/aggregate-balance',\n                        'stable-coin/exchange_rate',\n                        'stable-coin/quote',\n                    ],\n                    'post': [\n                        'account/transfer', // 资产划转(该节点为母用户和子用户进行资产划转的通用接口。)\n                        'futures/transfer',\n                        'order/batch-orders',\n                        'order/orders/place', // 创建并执行一个新订单 (一步下单， 推荐使用)\n                        'order/orders/submitCancelClientOrder',\n                        'order/orders/batchCancelOpenOrders',\n                        'order/orders', // 创建一个新的订单请求 （仅创建订单，不执行下单）\n                        'order/orders/{id}/place', // 执行一个订单 （仅执行已创建的订单）\n                        'order/orders/{id}/submitcancel', // 申请撤销一个订单请求\n                        'order/orders/batchcancel', // 批量撤销订单\n                        'dw/balance/transfer', // 资产划转\n                        'dw/withdraw/api/create', // 申请提现虚拟币\n                        'dw/withdraw-virtual/create', // 申请提现虚拟币\n                        'dw/withdraw-virtual/{id}/place', // 确认申请虚拟币提现（Deprecated）\n                        'dw/withdraw-virtual/{id}/cancel', // 申请取消提现虚拟币\n                        'dw/transfer-in/margin', // 现货账户划入至借贷账户\n                        'dw/transfer-out/margin', // 借贷账户划出至现货账户\n                        'margin/orders', // 申请借贷\n                        'margin/orders/{id}/repay', // 归还借贷\n                        'cross-margin/transfer-in', // 资产划转\n                        'cross-margin/transfer-out', // 资产划转\n                        'cross-margin/orders', // 申请借币\n                        'cross-margin/orders/{id}/repay', // 归还借币\n                        'stable-coin/exchange',\n                        'subuser/transfer',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'feeSide': 'get',\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.002,\n                    'taker': 0.002,\n                },\n            },\n            'exceptions': {\n                'broad': {\n                    'contract is restricted of closing positions on API.  Please contact customer service': OnMaintenance,\n                    'maintain': OnMaintenance,\n                },\n                'exact': {\n                    // err-code\n                    'bad-request': BadRequest,\n                    'base-date-limit-error': BadRequest, // {\"status\":\"error\",\"err-code\":\"base-date-limit-error\",\"err-msg\":\"date less than system limit\",\"data\":null}\n                    'api-not-support-temp-addr': PermissionDenied, // {\"status\":\"error\",\"err-code\":\"api-not-support-temp-addr\",\"err-msg\":\"API withdrawal does not support temporary addresses\",\"data\":null}\n                    'timeout': RequestTimeout, // {\"ts\":1571653730865,\"status\":\"error\",\"err-code\":\"timeout\",\"err-msg\":\"Request Timeout\"}\n                    'gateway-internal-error': ExchangeNotAvailable, // {\"status\":\"error\",\"err-code\":\"gateway-internal-error\",\"err-msg\":\"Failed to load data. Try again later.\",\"data\":null}\n                    'account-frozen-balance-insufficient-error': InsufficientFunds, // {\"status\":\"error\",\"err-code\":\"account-frozen-balance-insufficient-error\",\"err-msg\":\"trade account balance is not enough, left: `0.0027`\",\"data\":null}\n                    'invalid-amount': InvalidOrder, // eg \"Paramemter `amount` is invalid.\"\n                    'order-limitorder-amount-min-error': InvalidOrder, // limit order amount error, min: `0.001`\n                    'order-limitorder-amount-max-error': InvalidOrder, // market order amount error, max: `1000000`\n                    'order-marketorder-amount-min-error': InvalidOrder, // market order amount error, min: `0.01`\n                    'order-limitorder-price-min-error': InvalidOrder, // limit order price error\n                    'order-limitorder-price-max-error': InvalidOrder, // limit order price error\n                    'order-holding-limit-failed': InvalidOrder, // {\"status\":\"error\",\"err-code\":\"order-holding-limit-failed\",\"err-msg\":\"Order failed, exceeded the holding limit of this currency\",\"data\":null}\n                    'order-orderprice-precision-error': InvalidOrder, // {\"status\":\"error\",\"err-code\":\"order-orderprice-precision-error\",\"err-msg\":\"order price precision error, scale: `4`\",\"data\":null}\n                    'order-etp-nav-price-max-error': InvalidOrder, // {\"status\":\"error\",\"err-code\":\"order-etp-nav-price-max-error\",\"err-msg\":\"Order price cannot be higher than 5% of NAV\",\"data\":null}\n                    'order-orderstate-error': OrderNotFound, // canceling an already canceled order\n                    'order-queryorder-invalid': OrderNotFound, // querying a non-existent order\n                    'order-update-error': ExchangeNotAvailable, // undocumented error\n                    'api-signature-check-failed': AuthenticationError,\n                    'api-signature-not-valid': AuthenticationError, // {\"status\":\"error\",\"err-code\":\"api-signature-not-valid\",\"err-msg\":\"Signature not valid: Incorrect Access key [Access key错误]\",\"data\":null}\n                    'base-record-invalid': OrderNotFound, // https://github.com/ccxt/ccxt/issues/5750\n                    'base-symbol-trade-disabled': BadSymbol, // {\"status\":\"error\",\"err-code\":\"base-symbol-trade-disabled\",\"err-msg\":\"Trading is disabled for this symbol\",\"data\":null}\n                    'base-symbol-error': BadSymbol, // {\"status\":\"error\",\"err-code\":\"base-symbol-error\",\"err-msg\":\"The symbol is invalid\",\"data\":null}\n                    'system-maintenance': OnMaintenance, // {\"status\": \"error\", \"err-code\": \"system-maintenance\", \"err-msg\": \"System is in maintenance!\", \"data\": null}\n                    // err-msg\n                    'invalid symbol': BadSymbol, // {\"ts\":1568813334794,\"status\":\"error\",\"err-code\":\"invalid-parameter\",\"err-msg\":\"invalid symbol\"}\n                    'symbol trade not open now': BadSymbol, // {\"ts\":1576210479343,\"status\":\"error\",\"err-code\":\"invalid-parameter\",\"err-msg\":\"symbol trade not open now\"}\n                },\n            },\n            'options': {\n                // https://github.com/ccxt/ccxt/issues/5376\n                'fetchOrdersByStatesMethod': 'private_get_order_orders', // 'private_get_order_history' // https://github.com/ccxt/ccxt/pull/5392\n                'fetchOpenOrdersMethod': 'fetch_open_orders_v1', // 'fetch_open_orders_v2' // https://github.com/ccxt/ccxt/issues/5388\n                'createMarketBuyOrderRequiresPrice': true,\n                'fetchMarketsMethod': 'publicGetCommonSymbols',\n                'fetchBalanceMethod': 'privateGetAccountAccountsIdBalance',\n                'createOrderMethod': 'privatePostOrderOrdersPlace',\n                'language': 'en-US',\n            },\n            'commonCurrencies': {\n                // https://github.com/ccxt/ccxt/issues/6081\n                // https://github.com/ccxt/ccxt/issues/3365\n                // https://github.com/ccxt/ccxt/issues/2873\n                'GET': 'Themis', // conflict with GET (Guaranteed Entrance Token, GET Protocol)\n                'GTC': 'Game.com', // conflict with Gitcoin and Gastrocoin\n                'HOT': 'Hydro Protocol', // conflict with HOT (Holo) https://github.com/ccxt/ccxt/issues/4929\n                'NFT': 'APENFT',\n                // https://github.com/ccxt/ccxt/issues/7399\n                // https://coinmarketcap.com/currencies/pnetwork/\n                // https://coinmarketcap.com/currencies/penta/markets/\n                // https://en.cryptonomist.ch/blog/eidoo/the-edo-to-pnt-upgrade-what-you-need-to-know-updated/\n                'PNT': 'Penta',\n                'SBTC': 'Super Bitcoin',\n                'BIFI': 'Bitcoin File', // conflict with Beefy.Finance https://github.com/ccxt/ccxt/issues/8706\n            },\n        });\n    }\n\n    async fetchTradingLimits (symbols = undefined, params = {}) {\n        // this method should not be called directly, use loadTradingLimits () instead\n        //  by default it will try load withdrawal fees of all currencies (with separate requests)\n        //  however if you define symbols = [ 'ETH/BTC', 'LTC/BTC' ] in args it will only load those\n        await this.loadMarkets ();\n        if (symbols === undefined) {\n            symbols = this.symbols;\n        }\n        const result = {};\n        for (let i = 0; i < symbols.length; i++) {\n            const symbol = symbols[i];\n            result[symbol] = await this.fetchTradingLimitsById (this.marketId (symbol), params);\n        }\n        return result;\n    }\n\n    async fetchTradingLimitsById (id, params = {}) {\n        const request = {\n            'symbol': id,\n        };\n        const response = await this.publicGetCommonExchange (this.extend (request, params));\n        //\n        //     { status:   \"ok\",\n        //         data: {                                  symbol: \"aidocbtc\",\n        //                              'buy-limit-must-less-than':  1.1,\n        //                          'sell-limit-must-greater-than':  0.9,\n        //                         'limit-order-must-greater-than':  1,\n        //                            'limit-order-must-less-than':  5000000,\n        //                    'market-buy-order-must-greater-than':  0.0001,\n        //                       'market-buy-order-must-less-than':  100,\n        //                   'market-sell-order-must-greater-than':  1,\n        //                      'market-sell-order-must-less-than':  500000,\n        //                       'circuit-break-when-greater-than':  10000,\n        //                          'circuit-break-when-less-than':  10,\n        //                 'market-sell-order-rate-must-less-than':  0.1,\n        //                  'market-buy-order-rate-must-less-than':  0.1        } }\n        //\n        return this.parseTradingLimits (this.safeValue (response, 'data', {}));\n    }\n\n    parseTradingLimits (limits, symbol = undefined, params = {}) {\n        //\n        //   {                                  symbol: \"aidocbtc\",\n        //                  'buy-limit-must-less-than':  1.1,\n        //              'sell-limit-must-greater-than':  0.9,\n        //             'limit-order-must-greater-than':  1,\n        //                'limit-order-must-less-than':  5000000,\n        //        'market-buy-order-must-greater-than':  0.0001,\n        //           'market-buy-order-must-less-than':  100,\n        //       'market-sell-order-must-greater-than':  1,\n        //          'market-sell-order-must-less-than':  500000,\n        //           'circuit-break-when-greater-than':  10000,\n        //              'circuit-break-when-less-than':  10,\n        //     'market-sell-order-rate-must-less-than':  0.1,\n        //      'market-buy-order-rate-must-less-than':  0.1        }\n        //\n        return {\n            'info': limits,\n            'limits': {\n                'amount': {\n                    'min': this.safeNumber (limits, 'limit-order-must-greater-than'),\n                    'max': this.safeNumber (limits, 'limit-order-must-less-than'),\n                },\n            },\n        };\n    }\n\n    costToPrecision (symbol, cost) {\n        return this.decimalToPrecision (cost, TRUNCATE, this.markets[symbol]['precision']['cost'], this.precisionMode);\n    }\n\n    async fetchMarkets (params = {}) {\n        const method = this.options['fetchMarketsMethod'];\n        const response = await this[method] (params);\n        const markets = this.safeValue (response, 'data');\n        const numMarkets = markets.length;\n        if (numMarkets < 1) {\n            throw new NetworkError (this.id + ' publicGetCommonSymbols returned empty response: ' + this.json (markets));\n        }\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const baseId = this.safeString (market, 'base-currency');\n            const quoteId = this.safeString (market, 'quote-currency');\n            const id = baseId + quoteId;\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeInteger (market, 'amount-precision'),\n                'price': this.safeInteger (market, 'price-precision'),\n                'cost': this.safeInteger (market, 'value-precision'),\n            };\n            const maker = (base === 'OMG') ? 0 : 0.2 / 100;\n            const taker = (base === 'OMG') ? 0 : 0.2 / 100;\n            const minAmount = this.safeNumber (market, 'min-order-amt', Math.pow (10, -precision['amount']));\n            const maxAmount = this.safeNumber (market, 'max-order-amt');\n            const minCost = this.safeNumber (market, 'min-order-value', 0);\n            const state = this.safeString (market, 'state');\n            const active = (state === 'online');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'taker': taker,\n                'maker': maker,\n                'limits': {\n                    'amount': {\n                        'min': minAmount,\n                        'max': maxAmount,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': minCost,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         \"amount\": 26228.672978342216,\n        //         \"open\": 9078.95,\n        //         \"close\": 9146.86,\n        //         \"high\": 9155.41,\n        //         \"id\": 209988544334,\n        //         \"count\": 265846,\n        //         \"low\": 8988.0,\n        //         \"version\": 209988544334,\n        //         \"ask\": [ 9146.87, 0.156134 ],\n        //         \"vol\": 2.3822168242201668E8,\n        //         \"bid\": [ 9146.86, 0.080758 ],\n        //     }\n        //\n        // fetchTickers\n        //     {\n        //         symbol: \"bhdht\",\n        //         open:  2.3938,\n        //         high:  2.4151,\n        //         low:  2.3323,\n        //         close:  2.3909,\n        //         amount:  628.992,\n        //         vol:  1493.71841095,\n        //         count:  2088,\n        //         bid:  2.3643,\n        //         bidSize:  0.7136,\n        //         ask:  2.4061,\n        //         askSize:  0.4156\n        //     }\n        //\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const timestamp = this.safeInteger (ticker, 'ts');\n        let bid = undefined;\n        let bidVolume = undefined;\n        let ask = undefined;\n        let askVolume = undefined;\n        if ('bid' in ticker) {\n            if (Array.isArray (ticker['bid'])) {\n                bid = this.safeNumber (ticker['bid'], 0);\n                bidVolume = this.safeNumber (ticker['bid'], 1);\n            } else {\n                bid = this.safeNumber (ticker, 'bid');\n                bidVolume = this.safeValue (ticker, 'bidSize');\n            }\n        }\n        if ('ask' in ticker) {\n            if (Array.isArray (ticker['ask'])) {\n                ask = this.safeNumber (ticker['ask'], 0);\n                askVolume = this.safeNumber (ticker['ask'], 1);\n            } else {\n                ask = this.safeNumber (ticker, 'ask');\n                askVolume = this.safeValue (ticker, 'askSize');\n            }\n        }\n        const open = this.safeNumber (ticker, 'open');\n        const close = this.safeNumber (ticker, 'close');\n        let change = undefined;\n        let percentage = undefined;\n        let average = undefined;\n        if ((open !== undefined) && (close !== undefined)) {\n            change = close - open;\n            average = this.sum (open, close) / 2;\n            if ((close !== undefined) && (close > 0)) {\n                percentage = (change / open) * 100;\n            }\n        }\n        const baseVolume = this.safeNumber (ticker, 'amount');\n        const quoteVolume = this.safeNumber (ticker, 'vol');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': bid,\n            'bidVolume': bidVolume,\n            'ask': ask,\n            'askVolume': askVolume,\n            'vwap': vwap,\n            'open': open,\n            'close': close,\n            'last': close,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'type': 'step0',\n        };\n        const response = await this.marketGetDepth (this.extend (request, params));\n        //\n        //     {\n        //         \"status\": \"ok\",\n        //         \"ch\": \"market.btcusdt.depth.step0\",\n        //         \"ts\": 1583474832790,\n        //         \"tick\": {\n        //             \"bids\": [\n        //                 [ 9100.290000000000000000, 0.200000000000000000 ],\n        //                 [ 9099.820000000000000000, 0.200000000000000000 ],\n        //                 [ 9099.610000000000000000, 0.205000000000000000 ],\n        //             ],\n        //             \"asks\": [\n        //                 [ 9100.640000000000000000, 0.005904000000000000 ],\n        //                 [ 9101.010000000000000000, 0.287311000000000000 ],\n        //                 [ 9101.030000000000000000, 0.012121000000000000 ],\n        //             ],\n        //             \"ts\":1583474832008,\n        //             \"version\":104999698780\n        //         }\n        //     }\n        //\n        if ('tick' in response) {\n            if (!response['tick']) {\n                throw new BadSymbol (this.id + ' fetchOrderBook() returned empty response: ' + this.json (response));\n            }\n            const tick = this.safeValue (response, 'tick');\n            const timestamp = this.safeInteger (tick, 'ts', this.safeInteger (response, 'ts'));\n            const result = this.parseOrderBook (tick, symbol, timestamp);\n            result['nonce'] = this.safeInteger (tick, 'version');\n            return result;\n        }\n        throw new ExchangeError (this.id + ' fetchOrderBook() returned unrecognized response: ' + this.json (response));\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.marketGetDetailMerged (this.extend (request, params));\n        //\n        //     {\n        //         \"status\": \"ok\",\n        //         \"ch\": \"market.btcusdt.detail.merged\",\n        //         \"ts\": 1583494336669,\n        //         \"tick\": {\n        //             \"amount\": 26228.672978342216,\n        //             \"open\": 9078.95,\n        //             \"close\": 9146.86,\n        //             \"high\": 9155.41,\n        //             \"id\": 209988544334,\n        //             \"count\": 265846,\n        //             \"low\": 8988.0,\n        //             \"version\": 209988544334,\n        //             \"ask\": [ 9146.87, 0.156134 ],\n        //             \"vol\": 2.3822168242201668E8,\n        //             \"bid\": [ 9146.86, 0.080758 ],\n        //         }\n        //     }\n        //\n        const ticker = this.parseTicker (response['tick'], market);\n        const timestamp = this.safeInteger (response, 'ts');\n        ticker['timestamp'] = timestamp;\n        ticker['datetime'] = this.iso8601 (timestamp);\n        return ticker;\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.marketGetTickers (params);\n        const tickers = this.safeValue (response, 'data');\n        const timestamp = this.safeInteger (response, 'ts');\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const marketId = this.safeString (tickers[i], 'symbol');\n            const market = this.safeMarket (marketId);\n            const symbol = market['symbol'];\n            const ticker = this.parseTicker (tickers[i], market);\n            ticker['timestamp'] = timestamp;\n            ticker['datetime'] = this.iso8601 (timestamp);\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"amount\": 0.010411000000000000,\n        //         \"trade-id\": 102090736910,\n        //         \"ts\": 1583497692182,\n        //         \"id\": 10500517034273194594947,\n        //         \"price\": 9096.050000000000000000,\n        //         \"direction\": \"sell\"\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //          'symbol': 'swftcbtc',\n        //          'fee-currency': 'swftc',\n        //          'filled-fees': '0',\n        //          'source': 'spot-api',\n        //          'id': 83789509854000,\n        //          'type': 'buy-limit',\n        //          'order-id': 83711103204909,\n        //          'filled-points': '0.005826843283532154',\n        //          'fee-deduct-currency': 'ht',\n        //          'filled-amount': '45941.53',\n        //          'price': '0.0000001401',\n        //          'created-at': 1597933260729,\n        //          'match-id': 100087455560,\n        //          'role': 'maker',\n        //          'trade-id': 100050305348\n        //     },\n        //\n        const marketId = this.safeString (trade, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.safeInteger2 (trade, 'ts', 'created-at');\n        const order = this.safeString (trade, 'order-id');\n        let side = this.safeString (trade, 'direction');\n        let type = this.safeString (trade, 'type');\n        if (type !== undefined) {\n            const typeParts = type.split ('-');\n            side = typeParts[0];\n            type = typeParts[1];\n        }\n        const takerOrMaker = this.safeString (trade, 'role');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString2 (trade, 'filled-amount', 'amount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        let fee = undefined;\n        let feeCost = this.safeNumber (trade, 'filled-fees');\n        let feeCurrency = this.safeCurrencyCode (this.safeString (trade, 'fee-currency'));\n        const filledPoints = this.safeNumber (trade, 'filled-points');\n        if (filledPoints !== undefined) {\n            if ((feeCost === undefined) || (feeCost === 0.0)) {\n                feeCost = filledPoints;\n                feeCurrency = this.safeCurrencyCode (this.safeString (trade, 'fee-deduct-currency'));\n            }\n        }\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrency,\n            };\n        }\n        const tradeId = this.safeString2 (trade, 'trade-id', 'tradeId');\n        const id = this.safeString (trade, 'id', tradeId);\n        return {\n            'id': id,\n            'info': trade,\n            'order': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetOrderOrdersIdMatchresults (this.extend (request, params));\n        return this.parseTrades (response['data'], undefined, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {};\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['size'] = limit; // 1-100 orders, default is 100\n        }\n        if (since !== undefined) {\n            request['start-date'] = this.ymd (since); // a date within 61 days from today\n            request['end-date'] = this.ymd (this.sum (since, 86400000));\n        }\n        const response = await this.privateGetOrderMatchresults (this.extend (request, params));\n        return this.parseTrades (response['data'], market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = 1000, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['size'] = limit;\n        }\n        const response = await this.marketGetHistoryTrade (this.extend (request, params));\n        //\n        //     {\n        //         \"status\": \"ok\",\n        //         \"ch\": \"market.btcusdt.trade.detail\",\n        //         \"ts\": 1583497692365,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 105005170342,\n        //                 \"ts\": 1583497692182,\n        //                 \"data\": [\n        //                     {\n        //                         \"amount\": 0.010411000000000000,\n        //                         \"trade-id\": 102090736910,\n        //                         \"ts\": 1583497692182,\n        //                         \"id\": 10500517034273194594947,\n        //                         \"price\": 9096.050000000000000000,\n        //                         \"direction\": \"sell\"\n        //                     }\n        //                 ]\n        //             },\n        //             // ...\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        let result = [];\n        for (let i = 0; i < data.length; i++) {\n            const trades = this.safeValue (data[i], 'data', []);\n            for (let j = 0; j < trades.length; j++) {\n                const trade = this.parseTrade (trades[j], market);\n                result.push (trade);\n            }\n        }\n        result = this.sortBy (result, 'timestamp');\n        return this.filterBySymbolSinceLimit (result, symbol, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         \"amount\":1.2082,\n        //         \"open\":0.025096,\n        //         \"close\":0.025095,\n        //         \"high\":0.025096,\n        //         \"id\":1591515300,\n        //         \"count\":6,\n        //         \"low\":0.025095,\n        //         \"vol\":0.0303205097\n        //     }\n        //\n        return [\n            this.safeTimestamp (ohlcv, 'id'),\n            this.safeNumber (ohlcv, 'open'),\n            this.safeNumber (ohlcv, 'high'),\n            this.safeNumber (ohlcv, 'low'),\n            this.safeNumber (ohlcv, 'close'),\n            this.safeNumber (ohlcv, 'amount'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = 1000, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'period': this.timeframes[timeframe],\n        };\n        if (limit !== undefined) {\n            request['size'] = limit;\n        }\n        const response = await this.marketGetHistoryKline (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":\"ok\",\n        //         \"ch\":\"market.ethbtc.kline.1min\",\n        //         \"ts\":1591515374371,\n        //         \"data\":[\n        //             {\"amount\":0.0,\"open\":0.025095,\"close\":0.025095,\"high\":0.025095,\"id\":1591515360,\"count\":0,\"low\":0.025095,\"vol\":0.0},\n        //             {\"amount\":1.2082,\"open\":0.025096,\"close\":0.025095,\"high\":0.025096,\"id\":1591515300,\"count\":6,\"low\":0.025095,\"vol\":0.0303205097},\n        //             {\"amount\":0.0648,\"open\":0.025096,\"close\":0.025096,\"high\":0.025096,\"id\":1591515240,\"count\":2,\"low\":0.025096,\"vol\":0.0016262208},\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    async fetchAccounts (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetAccountAccounts (params);\n        return response['data'];\n    }\n\n    async fetchCurrencies (params = {}) {\n        const request = {\n            'language': this.options['language'],\n        };\n        const response = await this.publicGetSettingsCurrencys (this.extend (request, params));\n        const currencies = this.safeValue (response, 'data');\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            //\n            //  {                     name: \"ctxc\",\n            //              'display-name': \"CTXC\",\n            //        'withdraw-precision':  8,\n            //             'currency-type': \"eth\",\n            //        'currency-partition': \"pro\",\n            //             'support-sites':  null,\n            //                'otc-enable':  0,\n            //        'deposit-min-amount': \"2\",\n            //       'withdraw-min-amount': \"4\",\n            //            'show-precision': \"8\",\n            //                      weight: \"2988\",\n            //                     visible:  true,\n            //              'deposit-desc': \"Please don’t deposit any other digital assets except CTXC t…\",\n            //             'withdraw-desc': \"Minimum withdrawal amount: 4 CTXC. !>_<!For security reason…\",\n            //           'deposit-enabled':  true,\n            //          'withdraw-enabled':  true,\n            //    'currency-addr-with-tag':  false,\n            //             'fast-confirms':  15,\n            //             'safe-confirms':  30                                                             }\n            //\n            const id = this.safeValue (currency, 'name');\n            const precision = this.safeInteger (currency, 'withdraw-precision');\n            const code = this.safeCurrencyCode (id);\n            const active = currency['visible'] && currency['deposit-enabled'] && currency['withdraw-enabled'];\n            const name = this.safeString (currency, 'display-name');\n            result[code] = {\n                'id': id,\n                'code': code,\n                'type': 'crypto',\n                // 'payin': currency['deposit-enabled'],\n                // 'payout': currency['withdraw-enabled'],\n                // 'transfer': undefined,\n                'name': name,\n                'active': active,\n                'fee': undefined, // todo need to fetch from fee endpoint\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'deposit': {\n                        'min': this.safeNumber (currency, 'deposit-min-amount'),\n                        'max': Math.pow (10, precision),\n                    },\n                    'withdraw': {\n                        'min': this.safeNumber (currency, 'withdraw-min-amount'),\n                        'max': Math.pow (10, precision),\n                    },\n                },\n                'info': currency,\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const method = this.options['fetchBalanceMethod'];\n        const request = {\n            'id': this.accounts[0]['id'],\n        };\n        const response = await this[method] (this.extend (request, params));\n        const balances = this.safeValue (response['data'], 'list', []);\n        const result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            let account = undefined;\n            if (code in result) {\n                account = result[code];\n            } else {\n                account = this.account ();\n            }\n            if (balance['type'] === 'trade') {\n                account['free'] = this.safeString (balance, 'balance');\n            }\n            if (balance['type'] === 'frozen') {\n                account['used'] = this.safeString (balance, 'balance');\n            }\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrdersByStates (states, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'states': states,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        const method = this.safeString (this.options, 'fetchOrdersByStatesMethod', 'private_get_order_orders');\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     { status:   \"ok\",\n        //         data: [ {                  id:  13997833014,\n        //                                symbol: \"ethbtc\",\n        //                          'account-id':  3398321,\n        //                                amount: \"0.045000000000000000\",\n        //                                 price: \"0.034014000000000000\",\n        //                          'created-at':  1545836976871,\n        //                                  type: \"sell-limit\",\n        //                        'field-amount': \"0.045000000000000000\",\n        //                   'field-cash-amount': \"0.001530630000000000\",\n        //                          'field-fees': \"0.000003061260000000\",\n        //                         'finished-at':  1545837948214,\n        //                                source: \"spot-api\",\n        //                                 state: \"filled\",\n        //                         'canceled-at':  0                      }  ] }\n        //\n        return this.parseOrders (response['data'], market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetOrderOrdersId (this.extend (request, params));\n        const order = this.safeValue (response, 'data');\n        return this.parseOrder (order);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByStates ('pre-submitted,submitted,partial-filled,filled,partial-canceled,canceled', symbol, since, limit, params);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const method = this.safeString (this.options, 'fetchOpenOrdersMethod', 'fetch_open_orders_v1');\n        return await this[method] (symbol, since, limit, params);\n    }\n\n    async fetchOpenOrdersV1 (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrdersV1() requires a symbol argument');\n        }\n        return await this.fetchOrdersByStates ('pre-submitted,submitted,partial-filled', symbol, since, limit, params);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByStates ('filled,partial-canceled,canceled', symbol, since, limit, params);\n    }\n\n    async fetchOpenOrdersV2 (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders() requires a symbol argument');\n        }\n        const market = this.market (symbol);\n        let accountId = this.safeString (params, 'account-id');\n        if (accountId === undefined) {\n            // pick the first account\n            await this.loadAccounts ();\n            for (let i = 0; i < this.accounts.length; i++) {\n                const account = this.accounts[i];\n                if (account['type'] === 'spot') {\n                    accountId = this.safeString (account, 'id');\n                    if (accountId !== undefined) {\n                        break;\n                    }\n                }\n            }\n        }\n        const request = {\n            'symbol': market['id'],\n            'account-id': accountId,\n        };\n        if (limit !== undefined) {\n            request['size'] = limit;\n        }\n        const omitted = this.omit (params, 'account-id');\n        const response = await this.privateGetOrderOpenOrders (this.extend (request, omitted));\n        //\n        //     {\n        //         \"status\":\"ok\",\n        //         \"data\":[\n        //             {\n        //                 \"symbol\":\"ethusdt\",\n        //                 \"source\":\"api\",\n        //                 \"amount\":\"0.010000000000000000\",\n        //                 \"account-id\":1528640,\n        //                 \"created-at\":1561597491963,\n        //                 \"price\":\"400.000000000000000000\",\n        //                 \"filled-amount\":\"0.0\",\n        //                 \"filled-cash-amount\":\"0.0\",\n        //                 \"filled-fees\":\"0.0\",\n        //                 \"id\":38477101630,\n        //                 \"state\":\"submitted\",\n        //                 \"type\":\"sell-limit\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'partial-filled': 'open',\n            'partial-canceled': 'canceled',\n            'filled': 'closed',\n            'canceled': 'canceled',\n            'submitted': 'open',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {                  id:  13997833014,\n        //                    symbol: \"ethbtc\",\n        //              'account-id':  3398321,\n        //                    amount: \"0.045000000000000000\",\n        //                     price: \"0.034014000000000000\",\n        //              'created-at':  1545836976871,\n        //                      type: \"sell-limit\",\n        //            'field-amount': \"0.045000000000000000\", // they have fixed it for filled-amount\n        //       'field-cash-amount': \"0.001530630000000000\", // they have fixed it for filled-cash-amount\n        //              'field-fees': \"0.000003061260000000\", // they have fixed it for filled-fees\n        //             'finished-at':  1545837948214,\n        //                    source: \"spot-api\",\n        //                     state: \"filled\",\n        //             'canceled-at':  0                      }\n        //\n        //     {                  id:  20395337822,\n        //                    symbol: \"ethbtc\",\n        //              'account-id':  5685075,\n        //                    amount: \"0.001000000000000000\",\n        //                     price: \"0.0\",\n        //              'created-at':  1545831584023,\n        //                      type: \"buy-market\",\n        //            'field-amount': \"0.029100000000000000\", // they have fixed it for filled-amount\n        //       'field-cash-amount': \"0.000999788700000000\", // they have fixed it for filled-cash-amount\n        //              'field-fees': \"0.000058200000000000\", // they have fixed it for filled-fees\n        //             'finished-at':  1545831584181,\n        //                    source: \"spot-api\",\n        //                     state: \"filled\",\n        //             'canceled-at':  0                      }\n        //\n        const id = this.safeString (order, 'id');\n        let side = undefined;\n        let type = undefined;\n        let status = undefined;\n        if ('type' in order) {\n            const orderType = order['type'].split ('-');\n            side = orderType[0];\n            type = orderType[1];\n            status = this.parseOrderStatus (this.safeString (order, 'state'));\n        }\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.safeInteger (order, 'created-at');\n        const amount = this.safeNumber (order, 'amount');\n        const filled = this.safeNumber2 (order, 'filled-amount', 'field-amount'); // typo in their API, filled amount\n        let price = this.safeNumber (order, 'price');\n        if (price === 0.0) {\n            price = undefined;\n        }\n        const cost = this.safeNumber2 (order, 'filled-cash-amount', 'field-cash-amount'); // same typo\n        const feeCost = this.safeNumber2 (order, 'filled-fees', 'field-fees'); // typo in their API, filled fees\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            let feeCurrency = undefined;\n            if (market !== undefined) {\n                feeCurrency = (side === 'sell') ? market['quote'] : market['base'];\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrency,\n            };\n        }\n        return this.safeOrder ({\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'average': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': undefined,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const market = this.market (symbol);\n        const request = {\n            'account-id': this.accounts[0]['id'],\n            'symbol': market['id'],\n            'type': side + '-' + type,\n        };\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'client-order-id'); // must be 64 chars max and unique within 24 hours\n        if (clientOrderId !== undefined) {\n            request['client-order-id'] = clientOrderId;\n        }\n        params = this.omit (params, [ 'clientOrderId', 'client-order-id' ]);\n        if ((type === 'market') && (side === 'buy')) {\n            if (this.options['createMarketBuyOrderRequiresPrice']) {\n                if (price === undefined) {\n                    throw new InvalidOrder (this.id + \" market buy order requires price argument to calculate cost (total amount of quote currency to spend for buying, amount * price). To switch off this warning exception and specify cost in the amount argument, set .options['createMarketBuyOrderRequiresPrice'] = false. Make sure you know what you're doing.\");\n                } else {\n                    // despite that cost = amount * price is in quote currency and should have quote precision\n                    // the exchange API requires the cost supplied in 'amount' to be of base precision\n                    // more about it here:\n                    // https://github.com/ccxt/ccxt/pull/4395\n                    // https://github.com/ccxt/ccxt/issues/7611\n                    // we use amountToPrecision here because the exchange requires cost in base precision\n                    request['amount'] = this.costToPrecision (symbol, parseFloat (amount) * parseFloat (price));\n                }\n            } else {\n                request['amount'] = this.costToPrecision (symbol, amount);\n            }\n        } else {\n            request['amount'] = this.amountToPrecision (symbol, amount);\n        }\n        if (type === 'limit' || type === 'ioc' || type === 'limit-maker') {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const method = this.options['createOrderMethod'];\n        const response = await this[method] (this.extend (request, params));\n        const timestamp = this.milliseconds ();\n        const id = this.safeString (response, 'data');\n        return {\n            'info': response,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': undefined,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'filled': undefined,\n            'remaining': undefined,\n            'cost': undefined,\n            'trades': undefined,\n            'fee': undefined,\n            'clientOrderId': undefined,\n            'average': undefined,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const response = await this.privatePostOrderOrdersIdSubmitcancel ({ 'id': id });\n        //\n        //     let response = {\n        //         'status': 'ok',\n        //         'data': '10138899000',\n        //     };\n        //\n        return this.extend (this.parseOrder (response), {\n            'id': id,\n            'status': 'canceled',\n        });\n    }\n\n    async cancelOrders (ids, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const clientOrderIds = this.safeValue2 (params, 'clientOrderIds', 'client-order-ids');\n        params = this.omit (params, [ 'clientOrderIds', 'client-order-ids' ]);\n        const request = {};\n        if (clientOrderIds === undefined) {\n            request['order-ids'] = ids;\n        } else {\n            request['client-order-ids'] = clientOrderIds;\n        }\n        const response = await this.privatePostOrderOrdersBatchcancel (this.extend (request, params));\n        //\n        //     {\n        //         \"status\": \"ok\",\n        //         \"data\": {\n        //             \"success\": [\n        //                 \"5983466\"\n        //             ],\n        //             \"failed\": [\n        //                 {\n        //                     \"err-msg\": \"Incorrect order state\",\n        //                     \"order-state\": 7,\n        //                     \"order-id\": \"\",\n        //                     \"err-code\": \"order-orderstate-error\",\n        //                     \"client-order-id\": \"first\"\n        //                 },\n        //                 {\n        //                     \"err-msg\": \"Incorrect order state\",\n        //                     \"order-state\": 7,\n        //                     \"order-id\": \"\",\n        //                     \"err-code\": \"order-orderstate-error\",\n        //                     \"client-order-id\": \"second\"\n        //                 },\n        //                 {\n        //                     \"err-msg\": \"The record is not found.\",\n        //                     \"order-id\": \"\",\n        //                     \"err-code\": \"base-not-found\",\n        //                     \"client-order-id\": \"third\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        return response;\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'account-id' string false NA The account id used for this cancel Refer to GET /v1/account/accounts\n            // 'symbol': market['id'], // a list of comma-separated symbols, all symbols by default\n            // 'types' 'string', buy-market, sell-market, buy-limit, sell-limit, buy-ioc, sell-ioc, buy-stop-limit, sell-stop-limit, buy-limit-fok, sell-limit-fok, buy-stop-limit-fok, sell-stop-limit-fok\n            // 'side': 'buy', // or 'sell'\n            // 'size': 100, // the number of orders to cancel 1-100\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        const response = await this.privatePostOrderOrdersBatchCancelOpenOrders (this.extend (request, params));\n        //\n        //     {\n        //         code: 200,\n        //         data: {\n        //             \"success-count\": 2,\n        //             \"failed-count\": 0,\n        //             \"next-id\": 5454600\n        //         }\n        //     }\n        //\n        return response;\n    }\n\n    currencyToPrecision (currency, fee) {\n        return this.decimalToPrecision (fee, 0, this.currencies[currency]['precision']);\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        //\n        //     {\n        //         currency: \"eth\",\n        //         address: \"0xf7292eb9ba7bc50358e27f0e025a4d225a64127b\",\n        //         addressTag: \"\",\n        //         chain: \"eth\"\n        //     }\n        //\n        const address = this.safeString (depositAddress, 'address');\n        const tag = this.safeString (depositAddress, 'addressTag');\n        const currencyId = this.safeString (depositAddress, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': depositAddress,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.v2PrivateGetAccountDepositAddress (this.extend (request, params));\n        //\n        //     {\n        //         code: 200,\n        //         data: [\n        //             {\n        //                 currency: \"eth\",\n        //                 address: \"0xf7292eb9ba7bc50358e27f0e025a4d225a64127b\",\n        //                 addressTag: \"\",\n        //                 chain: \"eth\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseDepositAddress (this.safeValue (data, 0, {}), currency);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (limit === undefined || limit > 100) {\n            limit = 100;\n        }\n        await this.loadMarkets ();\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const request = {\n            'type': 'deposit',\n            'from': 0, // From 'id' ... if you want to get results after a particular transaction id, pass the id in params.from\n        };\n        if (currency !== undefined) {\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['size'] = limit; // max 100\n        }\n        const response = await this.privateGetQueryDepositWithdraw (this.extend (request, params));\n        // return response\n        return this.parseTransactions (response['data'], currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (limit === undefined || limit > 100) {\n            limit = 100;\n        }\n        await this.loadMarkets ();\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const request = {\n            'type': 'withdraw',\n            'from': 0, // From 'id' ... if you want to get results after a particular transaction id, pass the id in params.from\n        };\n        if (currency !== undefined) {\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['size'] = limit; // max 100\n        }\n        const response = await this.privateGetQueryDepositWithdraw (this.extend (request, params));\n        // return response\n        return this.parseTransactions (response['data'], currency, since, limit);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         'id': 8211029,\n        //         'type': 'deposit',\n        //         'currency': 'eth',\n        //         'chain': 'eth',\n        //         'tx-hash': 'bd315....',\n        //         'amount': 0.81162421,\n        //         'address': '4b8b....',\n        //         'address-tag': '',\n        //         'fee': 0,\n        //         'state': 'safe',\n        //         'created-at': 1542180380965,\n        //         'updated-at': 1542180788077\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         'id': 6908275,\n        //         'type': 'withdraw',\n        //         'currency': 'btc',\n        //         'chain': 'btc',\n        //         'tx-hash': 'c1a1a....',\n        //         'amount': 0.80257005,\n        //         'address': '1QR....',\n        //         'address-tag': '',\n        //         'fee': 0.0005,\n        //         'state': 'confirmed',\n        //         'created-at': 1552107295685,\n        //         'updated-at': 1552108032859\n        //     }\n        //\n        const timestamp = this.safeInteger (transaction, 'created-at');\n        const updated = this.safeInteger (transaction, 'updated-at');\n        const code = this.safeCurrencyCode (this.safeString (transaction, 'currency'));\n        let type = this.safeString (transaction, 'type');\n        if (type === 'withdraw') {\n            type = 'withdrawal';\n        }\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'state'));\n        const tag = this.safeString (transaction, 'address-tag');\n        let feeCost = this.safeNumber (transaction, 'fee');\n        if (feeCost !== undefined) {\n            feeCost = Math.abs (feeCost);\n        }\n        return {\n            'info': transaction,\n            'id': this.safeString (transaction, 'id'),\n            'txid': this.safeString (transaction, 'tx-hash'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': this.safeString (transaction, 'address'),\n            'tag': tag,\n            'type': type,\n            'amount': this.safeNumber (transaction, 'amount'),\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': {\n                'currency': code,\n                'cost': feeCost,\n                'rate': undefined,\n            },\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            // deposit statuses\n            'unknown': 'failed',\n            'confirming': 'pending',\n            'confirmed': 'ok',\n            'safe': 'ok',\n            'orphan': 'failed',\n            // withdrawal statuses\n            'submitted': 'pending',\n            'canceled': 'canceled',\n            'reexamine': 'pending',\n            'reject': 'failed',\n            'pass': 'pending',\n            'wallet-reject': 'failed',\n            // 'confirmed': 'ok', // present in deposit statuses\n            'confirm-error': 'failed',\n            'repealed': 'failed',\n            'wallet-transfer': 'pending',\n            'pre-transfer': 'pending',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        await this.loadMarkets ();\n        this.checkAddress (address);\n        const currency = this.currency (code);\n        const request = {\n            'address': address, // only supports existing addresses in your withdraw address list\n            'amount': amount,\n            'currency': currency['id'].toLowerCase (),\n        };\n        if (tag !== undefined) {\n            request['addr-tag'] = tag; // only for XRP?\n        }\n        const response = await this.privatePostDwWithdrawApiCreate (this.extend (request, params));\n        const id = this.safeString (response, 'data');\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/';\n        if (api === 'market') {\n            url += api;\n        } else if ((api === 'public') || (api === 'private')) {\n            url += this.version;\n        } else if ((api === 'v2Public') || (api === 'v2Private')) {\n            url += 'v2';\n        }\n        url += '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'private' || api === 'v2Private') {\n            this.checkRequiredCredentials ();\n            const timestamp = this.ymdhms (this.milliseconds (), 'T');\n            let request = {\n                'SignatureMethod': 'HmacSHA256',\n                'SignatureVersion': '2',\n                'AccessKeyId': this.apiKey,\n                'Timestamp': timestamp,\n            };\n            if (method !== 'POST') {\n                request = this.extend (request, query);\n            }\n            request = this.keysort (request);\n            let auth = this.urlencode (request);\n            // unfortunately, PHP demands double quotes for the escaped newline symbol\n            // eslint-disable-next-line quotes\n            const payload = [ method, this.hostname, url, auth ].join (\"\\n\");\n            const signature = this.hmac (this.encode (payload), this.encode (this.secret), 'sha256', 'base64');\n            auth += '&' + this.urlencode ({ 'Signature': signature });\n            url += '?' + auth;\n            if (method === 'POST') {\n                body = this.json (query);\n                headers = {\n                    'Content-Type': 'application/json',\n                };\n            } else {\n                headers = {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                };\n            }\n        } else {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        }\n        url = this.implodeParams (this.urls['api'][api], {\n            'hostname': this.hostname,\n        }) + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if ('status' in response) {\n            //\n            //     {\"status\":\"error\",\"err-code\":\"order-limitorder-amount-min-error\",\"err-msg\":\"limit order amount error, min: `0.001`\",\"data\":null}\n            //\n            const status = this.safeString (response, 'status');\n            if (status === 'error') {\n                const code = this.safeString (response, 'err-code');\n                const feedback = this.id + ' ' + body;\n                this.throwBroadlyMatchedException (this.exceptions['broad'], body, feedback);\n                this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n                const message = this.safeString (response, 'err-msg');\n                this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}