{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  InvalidOrder,\n  OrderNotFound,\n  RateLimitExceeded,\n  InsufficientFunds\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class coinmate extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coinmate',\n      'name': 'CoinMate',\n      'countries': ['GB', 'CZ', 'EU'],\n      // UK, Czech Republic\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'fetchTransactions': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87460806-1c9f3f00-c616-11ea-8c46-a77018a8f3f4.jpg',\n        'api': 'https://coinmate.io/api',\n        'www': 'https://coinmate.io',\n        'fees': 'https://coinmate.io/fees',\n        'doc': ['https://coinmate.docs.apiary.io', 'https://coinmate.io/developers'],\n        'referral': 'https://coinmate.io?referral=YTFkM1RsOWFObVpmY1ZjMGREQmpTRnBsWjJJNVp3PT0'\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'uid': true\n      },\n      'api': {\n        'public': {\n          'get': ['orderBook', 'ticker', 'transactions', 'tradingPairs']\n        },\n        'private': {\n          'post': ['balances', 'bitcoinCashWithdrawal', 'bitcoinCashDepositAddresses', 'bitcoinDepositAddresses', 'bitcoinWithdrawal', 'bitcoinWithdrawalFees', 'buyInstant', 'buyLimit', 'cancelOrder', 'cancelOrderWithInfo', 'createVoucher', 'dashDepositAddresses', 'dashWithdrawal', 'ethereumWithdrawal', 'ethereumDepositAddresses', 'litecoinWithdrawal', 'litecoinDepositAddresses', 'openOrders', 'order', 'orderHistory', 'orderById', 'pusherAuth', 'redeemVoucher', 'replaceByBuyLimit', 'replaceByBuyInstant', 'replaceBySellLimit', 'replaceBySellInstant', 'rippleDepositAddresses', 'rippleWithdrawal', 'sellInstant', 'sellLimit', 'transactionHistory', 'traderFees', 'tradeHistory', 'transfer', 'transferHistory', 'unconfirmedBitcoinDeposits', 'unconfirmedBitcoinCashDeposits', 'unconfirmedDashDeposits', 'unconfirmedEthereumDeposits', 'unconfirmedLitecoinDeposits', 'unconfirmedRippleDeposits']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'maker': 0.12 / 100,\n          'taker': 0.25 / 100,\n          'tiers': {\n            'taker': [[0, 0.25 / 100], [10000, 0.23 / 100], [100000, 0.21 / 100], [250000, 0.20 / 100], [500000, 0.15 / 100], [1000000, 0.13 / 100], [3000000, 0.10 / 100], [15000000, 0.05 / 100]],\n            'maker': [[0, 0.12 / 100], [10000, 0.11 / 100], [1000000, 0.10 / 100], [250000, 0.08 / 100], [500000, 0.05 / 100], [1000000, 0.03 / 100], [3000000, 0.02 / 100], [15000000, 0]]\n          }\n        },\n        'promotional': {\n          'trading': {\n            'maker': 0.05 / 100,\n            'taker': 0.15 / 100,\n            'tiers': {\n              'taker': [[0, 0.15 / 100], [10000, 0.14 / 100], [100000, 0.13 / 100], [250000, 0.12 / 100], [500000, 0.11 / 100], [1000000, 0.1 / 100], [3000000, 0.08 / 100], [15000000, 0.05 / 100]],\n              'maker': [[0, 0.05 / 100], [10000, 0.04 / 100], [1000000, 0.03 / 100], [250000, 0.02 / 100], [500000, 0], [1000000, 0], [3000000, 0], [15000000, 0]]\n            }\n          }\n        }\n      },\n      'options': {\n        'promotionalMarkets': ['ETH/EUR', 'ETH/CZK', 'ETH/BTC', 'XRP/EUR', 'XRP/CZK', 'XRP/BTC', 'DASH/EUR', 'DASH/CZK', 'DASH/BTC', 'BCH/EUR', 'BCH/CZK', 'BCH/BTC']\n      },\n      'exceptions': {\n        'exact': {\n          'No order with given ID': OrderNotFound\n        },\n        'broad': {\n          'Not enough account balance available': InsufficientFunds,\n          'Incorrect order ID': InvalidOrder,\n          'Minimum Order Size ': InvalidOrder,\n          'TOO MANY REQUESTS': RateLimitExceeded\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetTradingPairs(params); //\n    //     {\n    //         \"error\":false,\n    //         \"errorMessage\":null,\n    //         \"data\": [\n    //             {\n    //                 \"name\":\"BTC_EUR\",\n    //                 \"firstCurrency\":\"BTC\",\n    //                 \"secondCurrency\":\"EUR\",\n    //                 \"priceDecimals\":2,\n    //                 \"lotDecimals\":8,\n    //                 \"minAmount\":0.0002,\n    //                 \"tradesWebSocketChannelId\":\"trades-BTC_EUR\",\n    //                 \"orderBookWebSocketChannelId\":\"order_book-BTC_EUR\",\n    //                 \"tradeStatisticsWebSocketChannelId\":\"statistics-BTC_EUR\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const result = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const market = data[i];\n      const id = this.safeString(market, 'name');\n      const baseId = this.safeString(market, 'firstCurrency');\n      const quoteId = this.safeString(market, 'secondCurrency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const promotionalMarkets = this.safeValue(this.options, 'promotionalMarkets', []);\n      let fees = this.safeValue(this.fees, 'trading');\n\n      if (this.inArray(symbol, promotionalMarkets)) {\n        const promotionalFees = this.safeValue(this.fees, 'promotional', {});\n        fees = this.safeValue(promotionalFees, 'trading', fees);\n      }\n\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': undefined,\n        'maker': fees['maker'],\n        'taker': fees['taker'],\n        'info': market,\n        'precision': {\n          'price': this.safeInteger(market, 'priceDecimals'),\n          'amount': this.safeInteger(market, 'lotDecimals')\n        },\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(market, 'minAmount'),\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostBalances(params);\n    const balances = this.safeValue(response, 'data');\n    const result = {\n      'info': response\n    };\n    const currencyIds = Object.keys(balances);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const balance = this.safeValue(balances, currencyId);\n      const account = this.account();\n      account['free'] = this.safeString(balance, 'available');\n      account['used'] = this.safeString(balance, 'reserved');\n      account['total'] = this.safeString(balance, 'balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currencyPair': this.marketId(symbol),\n      'groupByPriceLimit': 'False'\n    };\n    const response = await this.publicGetOrderBook(this.extend(request, params));\n    const orderbook = response['data'];\n    const timestamp = this.safeTimestamp(orderbook, 'timestamp');\n    return this.parseOrderBook(orderbook, symbol, timestamp, 'bids', 'asks', 'price', 'amount');\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currencyPair': this.marketId(symbol)\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const ticker = this.safeValue(response, 'data');\n    const timestamp = this.safeTimestamp(ticker, 'timestamp');\n    const last = this.safeNumber(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'ask'),\n      'vwap': undefined,\n      'askVolume': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeNumber(ticker, 'amount'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'limit': 1000\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['timestampFrom'] = since;\n    }\n\n    if (code !== undefined) {\n      request['currency'] = this.currencyId(code);\n    }\n\n    const response = await this.privatePostTransferHistory(this.extend(request, params));\n    const items = response['data'];\n    return this.parseTransactions(items, undefined, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      // any other types ?\n      'COMPLETED': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(item, currency = undefined) {\n    //\n    // deposits\n    //\n    //     {\n    //         transactionId: 1862815,\n    //         timestamp: 1516803982388,\n    //         amountCurrency: 'LTC',\n    //         amount: 1,\n    //         fee: 0,\n    //         walletType: 'LTC',\n    //         transferType: 'DEPOSIT',\n    //         transferStatus: 'COMPLETED',\n    //         txid:\n    //         'ccb9255dfa874e6c28f1a64179769164025329d65e5201849c2400abd6bce245',\n    //         destination: 'LQrtSKA6LnhcwRrEuiborQJnjFF56xqsFn',\n    //         destinationTag: null\n    //     }\n    //\n    // withdrawals\n    //\n    //     {\n    //         transactionId: 2140966,\n    //         timestamp: 1519314282976,\n    //         amountCurrency: 'EUR',\n    //         amount: 8421.7228,\n    //         fee: 16.8772,\n    //         walletType: 'BANK_WIRE',\n    //         transferType: 'WITHDRAWAL',\n    //         transferStatus: 'COMPLETED',\n    //         txid: null,\n    //         destination: null,\n    //         destinationTag: null\n    //     }\n    //\n    const timestamp = this.safeInteger(item, 'timestamp');\n    const amount = this.safeNumber(item, 'amount');\n    const fee = this.safeNumber(item, 'fee');\n    const txid = this.safeString(item, 'txid');\n    const address = this.safeString(item, 'destination');\n    const tag = this.safeString(item, 'destinationTag');\n    const currencyId = this.safeString(item, 'amountCurrency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const type = this.safeStringLower(item, 'transferType');\n    const status = this.parseTransactionStatus(this.safeString(item, 'transferStatus'));\n    const id = this.safeString(item, 'transactionId');\n    return {\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'currency': code,\n      'amount': amount,\n      'type': type,\n      'txid': txid,\n      'address': address,\n      'tag': tag,\n      'status': status,\n      'fee': {\n        'cost': fee,\n        'currency': code\n      },\n      'info': item\n    };\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (limit === undefined) {\n      limit = 1000;\n    }\n\n    const request = {\n      'limit': limit\n    };\n\n    if (symbol !== undefined) {\n      const market = this.market(symbol);\n      request['currencyPair'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['timestampFrom'] = since;\n    }\n\n    const response = await this.privatePostTradeHistory(this.extend(request, params));\n    const items = response['data'];\n    return this.parseTrades(items, undefined, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         transactionId: 2671819,\n    //         createdTimestamp: 1529649127605,\n    //         currencyPair: 'LTC_BTC',\n    //         type: 'BUY',\n    //         orderType: 'LIMIT',\n    //         orderId: 101810227,\n    //         amount: 0.01,\n    //         price: 0.01406,\n    //         fee: 0,\n    //         feeType: 'MAKER'\n    //     }\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"timestamp\":1561598833416,\n    //         \"transactionId\":\"4156303\",\n    //         \"price\":10950.41,\n    //         \"amount\":0.004,\n    //         \"currencyPair\":\"BTC_EUR\",\n    //         \"tradeType\":\"BUY\"\n    //     }\n    //\n    const marketId = this.safeString(trade, 'currencyPair');\n    market = this.safeMarket(marketId, market, '_');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'amount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    const side = this.safeStringLower2(trade, 'type', 'tradeType');\n    const type = this.safeStringLower(trade, 'orderType');\n    const orderId = this.safeString(trade, 'orderId');\n    const id = this.safeString(trade, 'transactionId');\n    const timestamp = this.safeInteger2(trade, 'timestamp', 'createdTimestamp');\n    let fee = undefined;\n    const feeCost = this.safeNumber(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': market['quote']\n      };\n    }\n\n    let takerOrMaker = this.safeString(trade, 'feeType');\n    takerOrMaker = takerOrMaker === 'MAKER' ? 'maker' : 'taker';\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': market['symbol'],\n      'type': type,\n      'side': side,\n      'order': orderId,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPair': market['id'],\n      'minutesIntoHistory': 10\n    };\n    const response = await this.publicGetTransactions(this.extend(request, params)); //\n    //     {\n    //         \"error\":false,\n    //         \"errorMessage\":null,\n    //         \"data\":[\n    //             {\n    //                 \"timestamp\":1561598833416,\n    //                 \"transactionId\":\"4156303\",\n    //                 \"price\":10950.41,\n    //                 \"amount\":0.004,\n    //                 \"currencyPair\":\"BTC_EUR\",\n    //                 \"tradeType\":\"BUY\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const response = await this.privatePostOpenOrders(this.extend({}, params));\n    const extension = {\n      'status': 'open'\n    };\n    return this.parseOrders(response['data'], undefined, since, limit, extension);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currencyPair': market['id']\n    }; // offset param that appears in other parts of the API doesn't appear to be supported here\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privatePostOrderHistory(this.extend(request, params));\n    return this.parseOrders(response['data'], market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'FILLED': 'closed',\n      'CANCELLED': 'canceled',\n      'PARTIALLY_FILLED': 'open',\n      'OPEN': 'open'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrderType(type) {\n    const types = {\n      'LIMIT': 'limit',\n      'MARKET': 'market'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // limit sell\n    //\n    //     {\n    //         id: 781246605,\n    //         timestamp: 1584480015133,\n    //         trailingUpdatedTimestamp: null,\n    //         type: 'SELL',\n    //         currencyPair: 'ETH_BTC',\n    //         price: 0.0345,\n    //         amount: 0.01,\n    //         stopPrice: null,\n    //         originalStopPrice: null,\n    //         marketPriceAtLastUpdate: null,\n    //         marketPriceAtOrderCreation: null,\n    //         orderTradeType: 'LIMIT',\n    //         hidden: false,\n    //         trailing: false,\n    //         clientOrderId: null\n    //     }\n    //\n    // limit buy\n    //\n    //     {\n    //         id: 67527001,\n    //         timestamp: 1517931722613,\n    //         trailingUpdatedTimestamp: null,\n    //         type: 'BUY',\n    //         price: 5897.24,\n    //         remainingAmount: 0.002367,\n    //         originalAmount: 0.1,\n    //         stopPrice: null,\n    //         originalStopPrice: null,\n    //         marketPriceAtLastUpdate: null,\n    //         marketPriceAtOrderCreation: null,\n    //         status: 'CANCELLED',\n    //         orderTradeType: 'LIMIT',\n    //         hidden: false,\n    //         avgPrice: null,\n    //         trailing: false,\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const timestamp = this.safeInteger(order, 'timestamp');\n    const side = this.safeStringLower(order, 'type');\n    const price = this.safeNumber(order, 'price');\n    const amount = this.safeNumber(order, 'originalAmount');\n    let remaining = this.safeNumber(order, 'remainingAmount');\n\n    if (remaining === undefined) {\n      remaining = this.safeNumber(order, 'amount');\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const type = this.parseOrderType(this.safeString(order, 'orderTradeType'));\n    const average = this.safeNumber(order, 'avgPrice');\n    const marketId = this.safeString(order, 'currencyPair');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const clientOrderId = this.safeString(order, 'clientOrderId');\n    const stopPrice = this.safeNumber(order, 'stopPrice');\n    return this.safeOrder({\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': undefined,\n      'average': average,\n      'filled': undefined,\n      'remaining': remaining,\n      'status': status,\n      'trades': undefined,\n      'info': order,\n      'fee': undefined\n    });\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    let method = 'privatePost' + this.capitalize(side);\n    const request = {\n      'currencyPair': this.marketId(symbol)\n    };\n\n    if (type === 'market') {\n      if (side === 'buy') {\n        request['total'] = this.amountToPrecision(symbol, amount); // amount in fiat\n      } else {\n        request['amount'] = this.amountToPrecision(symbol, amount); // amount in fiat\n      }\n\n      method += 'Instant';\n    } else {\n      request['amount'] = this.amountToPrecision(symbol, amount); // amount in crypto\n\n      request['price'] = this.priceToPrecision(symbol, price);\n      method += this.capitalize(type);\n    }\n\n    const response = await this[method](this.extend(request, params));\n    const id = this.safeString(response, 'data');\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'orderId': id\n    };\n    let market = undefined;\n\n    if (symbol) {\n      market = this.market(symbol);\n    }\n\n    const response = await this.privatePostOrderById(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    //   {\"error\":false,\"errorMessage\":null,\"data\":{\"success\":true,\"remainingAmount\":0.01}}\n    const request = {\n      'orderId': id\n    };\n    const response = await this.privatePostCancelOrderWithInfo(this.extend(request, params));\n    return {\n      'info': response\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + path;\n\n    if (api === 'public') {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const auth = nonce + this.uid + this.apiKey;\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n      body = this.urlencode(this.extend({\n        'clientId': this.uid,\n        'nonce': nonce,\n        'publicKey': this.apiKey,\n        'signature': signature.toUpperCase()\n      }, params));\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response !== undefined) {\n      if ('error' in response) {\n        // {\"error\":true,\"errorMessage\":\"Minimum Order Size 0.01 ETH\",\"data\":null}\n        if (response['error']) {\n          const message = this.safeString(response, 'errorMessage');\n          const feedback = this.id + ' ' + message;\n          this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n          this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n          throw new ExchangeError(this.id + ' ' + this.json(response));\n        }\n      }\n    }\n\n    if (code > 400) {\n      if (body) {\n        const feedback = this.id + ' ' + body;\n        this.throwExactlyMatchedException(this.exceptions['exact'], body, feedback);\n        this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);\n        throw new ExchangeError(feedback); // unknown message\n      }\n\n      throw new ExchangeError(this.id + ' ' + body);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/coinmate.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","InvalidOrder","OrderNotFound","RateLimitExceeded","InsufficientFunds","Precise","module","exports","coinmate","describe","deepExtend","fetchMarkets","params","response","publicGetTradingPairs","data","safeValue","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","promotionalMarkets","options","fees","inArray","promotionalFees","push","undefined","safeInteger","safeNumber","fetchBalance","loadMarkets","privatePostBalances","balances","currencyIds","Object","keys","currencyId","code","balance","account","parseBalance","fetchOrderBook","limit","request","marketId","publicGetOrderBook","extend","orderbook","timestamp","safeTimestamp","parseOrderBook","fetchTicker","publicGetTicker","ticker","last","iso8601","fetchTransactions","since","privatePostTransferHistory","items","parseTransactions","parseTransactionStatus","status","statuses","parseTransaction","item","currency","amount","fee","txid","address","tag","type","safeStringLower","fetchMyTrades","privatePostTradeHistory","parseTrades","parseTrade","trade","safeMarket","priceString","amountString","price","parseNumber","cost","stringMul","side","safeStringLower2","orderId","safeInteger2","feeCost","takerOrMaker","fetchTrades","publicGetTransactions","fetchOpenOrders","privatePostOpenOrders","extension","parseOrders","fetchOrders","privatePostOrderHistory","parseOrderStatus","parseOrderType","types","parseOrder","order","remaining","average","safeSymbol","clientOrderId","stopPrice","safeOrder","createOrder","method","capitalize","amountToPrecision","priceToPrecision","fetchOrder","privatePostOrderById","cancelOrder","privatePostCancelOrderWithInfo","nonce","milliseconds","sign","path","api","headers","body","url","urls","urlencode","checkRequiredCredentials","toString","auth","uid","apiKey","signature","hmac","encode","secret","toUpperCase","handleErrors","reason","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException","json"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAE,iBAAF,CAAxB;;AACA,MAAM;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,iBAAjB;AAAoCC,EAAAA,YAApC;AAAkDC,EAAAA,aAAlD;AAAiEC,EAAAA,iBAAjE;AAAoFC,EAAAA;AAApF,IAA0GN,OAAO,CAAE,eAAF,CAAvH;;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAE,gBAAF,CAAvB,C,CAEA;;;AAEAQ,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,SAAuBX,QAAvB,CAAgC;AAC7CY,EAAAA,QAAQ,GAAI;AACR,WAAO,KAAKC,UAAL,CAAiB,MAAMD,QAAN,EAAjB,EAAoC;AACvC,YAAM,UADiC;AAEvC,cAAQ,UAF+B;AAGvC,mBAAa,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,CAH0B;AAGJ;AACnC,mBAAa,IAJ0B;AAKvC,aAAO;AACH,uBAAe,IADZ;AAEH,gBAAQ,IAFL;AAGH,uBAAe,IAHZ;AAIH,wBAAgB,IAJb;AAKH,wBAAgB,IALb;AAMH,yBAAiB,IANd;AAOH,2BAAmB,IAPhB;AAQH,sBAAc,IARX;AASH,0BAAkB,IATf;AAUH,uBAAe,IAVZ;AAWH,uBAAe,IAXZ;AAYH,uBAAe,IAZZ;AAaH,6BAAqB;AAblB,OALgC;AAoBvC,cAAQ;AACJ,gBAAQ,sGADJ;AAEJ,eAAO,yBAFH;AAGJ,eAAO,qBAHH;AAIJ,gBAAQ,0BAJJ;AAKJ,eAAO,CACH,iCADG,EAEH,gCAFG,CALH;AASJ,oBAAY;AATR,OApB+B;AA+BvC,6BAAuB;AACnB,kBAAU,IADS;AAEnB,kBAAU,IAFS;AAGnB,eAAO;AAHY,OA/BgB;AAoCvC,aAAO;AACH,kBAAU;AACN,iBAAO,CACH,WADG,EAEH,QAFG,EAGH,cAHG,EAIH,cAJG;AADD,SADP;AASH,mBAAW;AACP,kBAAQ,CACJ,UADI,EAEJ,uBAFI,EAGJ,6BAHI,EAIJ,yBAJI,EAKJ,mBALI,EAMJ,uBANI,EAOJ,YAPI,EAQJ,UARI,EASJ,aATI,EAUJ,qBAVI,EAWJ,eAXI,EAYJ,sBAZI,EAaJ,gBAbI,EAcJ,oBAdI,EAeJ,0BAfI,EAgBJ,oBAhBI,EAiBJ,0BAjBI,EAkBJ,YAlBI,EAmBJ,OAnBI,EAoBJ,cApBI,EAqBJ,WArBI,EAsBJ,YAtBI,EAuBJ,eAvBI,EAwBJ,mBAxBI,EAyBJ,qBAzBI,EA0BJ,oBA1BI,EA2BJ,sBA3BI,EA4BJ,wBA5BI,EA6BJ,kBA7BI,EA8BJ,aA9BI,EA+BJ,WA/BI,EAgCJ,oBAhCI,EAiCJ,YAjCI,EAkCJ,cAlCI,EAmCJ,UAnCI,EAoCJ,iBApCI,EAqCJ,4BArCI,EAsCJ,gCAtCI,EAuCJ,yBAvCI,EAwCJ,6BAxCI,EAyCJ,6BAzCI,EA0CJ,2BA1CI;AADD;AATR,OApCgC;AA4FvC,cAAQ;AACJ,mBAAW;AACP,uBAAa,IADN;AAEP,wBAAc,IAFP;AAGP,mBAAS,OAAO,GAHT;AAIP,mBAAS,OAAO,GAJT;AAKP,mBAAS;AACL,qBAAS,CACL,CAAC,CAAD,EAAI,OAAO,GAAX,CADK,EAEL,CAAC,KAAD,EAAQ,OAAO,GAAf,CAFK,EAGL,CAAC,MAAD,EAAS,OAAO,GAAhB,CAHK,EAIL,CAAC,MAAD,EAAS,OAAO,GAAhB,CAJK,EAKL,CAAC,MAAD,EAAS,OAAO,GAAhB,CALK,EAML,CAAC,OAAD,EAAU,OAAO,GAAjB,CANK,EAOL,CAAC,OAAD,EAAU,OAAO,GAAjB,CAPK,EAQL,CAAC,QAAD,EAAW,OAAO,GAAlB,CARK,CADJ;AAWL,qBAAS,CACL,CAAC,CAAD,EAAI,OAAO,GAAX,CADK,EAEL,CAAC,KAAD,EAAQ,OAAO,GAAf,CAFK,EAGL,CAAC,OAAD,EAAU,OAAO,GAAjB,CAHK,EAIL,CAAC,MAAD,EAAS,OAAO,GAAhB,CAJK,EAKL,CAAC,MAAD,EAAS,OAAO,GAAhB,CALK,EAML,CAAC,OAAD,EAAU,OAAO,GAAjB,CANK,EAOL,CAAC,OAAD,EAAU,OAAO,GAAjB,CAPK,EAQL,CAAC,QAAD,EAAW,CAAX,CARK;AAXJ;AALF,SADP;AA6BJ,uBAAe;AACX,qBAAW;AACP,qBAAS,OAAO,GADT;AAEP,qBAAS,OAAO,GAFT;AAGP,qBAAS;AACL,uBAAS,CACL,CAAC,CAAD,EAAI,OAAO,GAAX,CADK,EAEL,CAAC,KAAD,EAAQ,OAAO,GAAf,CAFK,EAGL,CAAC,MAAD,EAAS,OAAO,GAAhB,CAHK,EAIL,CAAC,MAAD,EAAS,OAAO,GAAhB,CAJK,EAKL,CAAC,MAAD,EAAS,OAAO,GAAhB,CALK,EAML,CAAC,OAAD,EAAU,MAAM,GAAhB,CANK,EAOL,CAAC,OAAD,EAAU,OAAO,GAAjB,CAPK,EAQL,CAAC,QAAD,EAAW,OAAO,GAAlB,CARK,CADJ;AAWL,uBAAS,CACL,CAAC,CAAD,EAAI,OAAO,GAAX,CADK,EAEL,CAAC,KAAD,EAAQ,OAAO,GAAf,CAFK,EAGL,CAAC,OAAD,EAAU,OAAO,GAAjB,CAHK,EAIL,CAAC,MAAD,EAAS,OAAO,GAAhB,CAJK,EAKL,CAAC,MAAD,EAAS,CAAT,CALK,EAML,CAAC,OAAD,EAAU,CAAV,CANK,EAOL,CAAC,OAAD,EAAU,CAAV,CAPK,EAQL,CAAC,QAAD,EAAW,CAAX,CARK;AAXJ;AAHF;AADA;AA7BX,OA5F+B;AAsJvC,iBAAW;AACP,8BAAsB,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,SAAxD,EAAmE,UAAnE,EAA+E,UAA/E,EAA2F,UAA3F,EAAuG,SAAvG,EAAkH,SAAlH,EAA6H,SAA7H;AADf,OAtJ4B;AAyJvC,oBAAc;AACV,iBAAS;AACL,oCAA0BP;AADrB,SADC;AAIV,iBAAS;AACL,kDAAwCE,iBADnC;AAEL,gCAAsBH,YAFjB;AAGL,iCAAuBA,YAHlB;AAIL,+BAAqBE;AAJhB;AAJC;AAzJyB,KAApC,CAAP;AAqKH;;AAED,QAAMQ,YAAN,CAAoBC,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAMC,QAAQ,GAAG,MAAM,KAAKC,qBAAL,CAA4BF,MAA5B,CAAvB,CAD6B,CAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMG,IAAI,GAAG,KAAKC,SAAL,CAAgBH,QAAhB,EAA0B,MAA1B,CAAb;AACA,UAAMI,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAME,MAAM,GAAGL,IAAI,CAACG,CAAD,CAAnB;AACA,YAAMG,EAAE,GAAG,KAAKC,UAAL,CAAiBF,MAAjB,EAAyB,MAAzB,CAAX;AACA,YAAMG,MAAM,GAAG,KAAKD,UAAL,CAAiBF,MAAjB,EAAyB,eAAzB,CAAf;AACA,YAAMI,OAAO,GAAG,KAAKF,UAAL,CAAiBF,MAAjB,EAAyB,gBAAzB,CAAhB;AACA,YAAMK,IAAI,GAAG,KAAKC,gBAAL,CAAuBH,MAAvB,CAAb;AACA,YAAMI,KAAK,GAAG,KAAKD,gBAAL,CAAuBF,OAAvB,CAAd;AACA,YAAMI,MAAM,GAAGH,IAAI,GAAG,GAAP,GAAaE,KAA5B;AACA,YAAME,kBAAkB,GAAG,KAAKb,SAAL,CAAgB,KAAKc,OAArB,EAA8B,oBAA9B,EAAoD,EAApD,CAA3B;AACA,UAAIC,IAAI,GAAG,KAAKf,SAAL,CAAgB,KAAKe,IAArB,EAA2B,SAA3B,CAAX;;AACA,UAAI,KAAKC,OAAL,CAAcJ,MAAd,EAAsBC,kBAAtB,CAAJ,EAA+C;AAC3C,cAAMI,eAAe,GAAG,KAAKjB,SAAL,CAAgB,KAAKe,IAArB,EAA2B,aAA3B,EAA0C,EAA1C,CAAxB;AACAA,QAAAA,IAAI,GAAG,KAAKf,SAAL,CAAgBiB,eAAhB,EAAiC,SAAjC,EAA4CF,IAA5C,CAAP;AACH;;AACDd,MAAAA,MAAM,CAACiB,IAAP,CAAa;AACT,cAAMb,EADG;AAET,kBAAUO,MAFD;AAGT,gBAAQH,IAHC;AAIT,iBAASE,KAJA;AAKT,kBAAUJ,MALD;AAMT,mBAAWC,OANF;AAOT,kBAAUW,SAPD;AAQT,iBAASJ,IAAI,CAAC,OAAD,CARJ;AAST,iBAASA,IAAI,CAAC,OAAD,CATJ;AAUT,gBAAQX,MAVC;AAWT,qBAAa;AACT,mBAAS,KAAKgB,WAAL,CAAkBhB,MAAlB,EAA0B,eAA1B,CADA;AAET,oBAAU,KAAKgB,WAAL,CAAkBhB,MAAlB,EAA0B,aAA1B;AAFD,SAXJ;AAeT,kBAAU;AACN,oBAAU;AACN,mBAAO,KAAKiB,UAAL,CAAiBjB,MAAjB,EAAyB,WAAzB,CADD;AAEN,mBAAOe;AAFD,WADJ;AAKN,mBAAS;AACL,mBAAOA,SADF;AAEL,mBAAOA;AAFF,WALH;AASN,kBAAQ;AACJ,mBAAOA,SADH;AAEJ,mBAAOA;AAFH;AATF;AAfD,OAAb;AA8BH;;AACD,WAAOlB,MAAP;AACH;;AAED,QAAMqB,YAAN,CAAoB1B,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAM1B,QAAQ,GAAG,MAAM,KAAK2B,mBAAL,CAA0B5B,MAA1B,CAAvB;AACA,UAAM6B,QAAQ,GAAG,KAAKzB,SAAL,CAAgBH,QAAhB,EAA0B,MAA1B,CAAjB;AACA,UAAMI,MAAM,GAAG;AAAE,cAAQJ;AAAV,KAAf;AACA,UAAM6B,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAaH,QAAb,CAApB;;AACA,SAAK,IAAIvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwB,WAAW,CAACvB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,YAAM2B,UAAU,GAAGH,WAAW,CAACxB,CAAD,CAA9B;AACA,YAAM4B,IAAI,GAAG,KAAKpB,gBAAL,CAAuBmB,UAAvB,CAAb;AACA,YAAME,OAAO,GAAG,KAAK/B,SAAL,CAAgByB,QAAhB,EAA0BI,UAA1B,CAAhB;AACA,YAAMG,OAAO,GAAG,KAAKA,OAAL,EAAhB;AACAA,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAK1B,UAAL,CAAiByB,OAAjB,EAA0B,WAA1B,CAAlB;AACAC,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAK1B,UAAL,CAAiByB,OAAjB,EAA0B,UAA1B,CAAlB;AACAC,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAK1B,UAAL,CAAiByB,OAAjB,EAA0B,SAA1B,CAAnB;AACA9B,MAAAA,MAAM,CAAC6B,IAAD,CAAN,GAAeE,OAAf;AACH;;AACD,WAAO,KAAKC,YAAL,CAAmBhC,MAAnB,EAA2B,KAA3B,CAAP;AACH;;AAED,QAAMiC,cAAN,CAAsBtB,MAAtB,EAA8BuB,KAAK,GAAGhB,SAAtC,EAAiDvB,MAAM,GAAG,EAA1D,EAA8D;AAC1D,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMa,OAAO,GAAG;AACZ,sBAAgB,KAAKC,QAAL,CAAezB,MAAf,CADJ;AAEZ,2BAAqB;AAFT,KAAhB;AAIA,UAAMf,QAAQ,GAAG,MAAM,KAAKyC,kBAAL,CAAyB,KAAKC,MAAL,CAAaH,OAAb,EAAsBxC,MAAtB,CAAzB,CAAvB;AACA,UAAM4C,SAAS,GAAG3C,QAAQ,CAAC,MAAD,CAA1B;AACA,UAAM4C,SAAS,GAAG,KAAKC,aAAL,CAAoBF,SAApB,EAA+B,WAA/B,CAAlB;AACA,WAAO,KAAKG,cAAL,CAAqBH,SAArB,EAAgC5B,MAAhC,EAAwC6B,SAAxC,EAAmD,MAAnD,EAA2D,MAA3D,EAAmE,OAAnE,EAA4E,QAA5E,CAAP;AACH;;AAED,QAAMG,WAAN,CAAmBhC,MAAnB,EAA2BhB,MAAM,GAAG,EAApC,EAAwC;AACpC,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMa,OAAO,GAAG;AACZ,sBAAgB,KAAKC,QAAL,CAAezB,MAAf;AADJ,KAAhB;AAGA,UAAMf,QAAQ,GAAG,MAAM,KAAKgD,eAAL,CAAsB,KAAKN,MAAL,CAAaH,OAAb,EAAsBxC,MAAtB,CAAtB,CAAvB;AACA,UAAMkD,MAAM,GAAG,KAAK9C,SAAL,CAAgBH,QAAhB,EAA0B,MAA1B,CAAf;AACA,UAAM4C,SAAS,GAAG,KAAKC,aAAL,CAAoBI,MAApB,EAA4B,WAA5B,CAAlB;AACA,UAAMC,IAAI,GAAG,KAAK1B,UAAL,CAAiByB,MAAjB,EAAyB,MAAzB,CAAb;AACA,WAAO;AACH,gBAAUlC,MADP;AAEH,mBAAa6B,SAFV;AAGH,kBAAY,KAAKO,OAAL,CAAcP,SAAd,CAHT;AAIH,cAAQ,KAAKpB,UAAL,CAAiByB,MAAjB,EAAyB,MAAzB,CAJL;AAKH,aAAO,KAAKzB,UAAL,CAAiByB,MAAjB,EAAyB,KAAzB,CALJ;AAMH,aAAO,KAAKzB,UAAL,CAAiByB,MAAjB,EAAyB,KAAzB,CANJ;AAOH,mBAAa3B,SAPV;AAQH,aAAO,KAAKE,UAAL,CAAiByB,MAAjB,EAAyB,KAAzB,CARJ;AASH,cAAQ3B,SATL;AAUH,mBAAaA,SAVV;AAWH,cAAQA,SAXL;AAYH,eAAS4B,IAZN;AAaH,cAAQA,IAbL;AAcH,uBAAiB5B,SAdd;AAeH,gBAAUA,SAfP;AAgBH,oBAAcA,SAhBX;AAiBH,iBAAWA,SAjBR;AAkBH,oBAAc,KAAKE,UAAL,CAAiByB,MAAjB,EAAyB,QAAzB,CAlBX;AAmBH,qBAAe3B,SAnBZ;AAoBH,cAAQ2B;AApBL,KAAP;AAsBH;;AAED,QAAMG,iBAAN,CAAyBnB,IAAI,GAAGX,SAAhC,EAA2C+B,KAAK,GAAG/B,SAAnD,EAA8DgB,KAAK,GAAGhB,SAAtE,EAAiFvB,MAAM,GAAG,EAA1F,EAA8F;AAC1F,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMa,OAAO,GAAG;AACZ,eAAS;AADG,KAAhB;;AAGA,QAAID,KAAK,KAAKhB,SAAd,EAAyB;AACrBiB,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBD,KAAnB;AACH;;AACD,QAAIe,KAAK,KAAK/B,SAAd,EAAyB;AACrBiB,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA2Bc,KAA3B;AACH;;AACD,QAAIpB,IAAI,KAAKX,SAAb,EAAwB;AACpBiB,MAAAA,OAAO,CAAC,UAAD,CAAP,GAAsB,KAAKP,UAAL,CAAiBC,IAAjB,CAAtB;AACH;;AACD,UAAMjC,QAAQ,GAAG,MAAM,KAAKsD,0BAAL,CAAiC,KAAKZ,MAAL,CAAaH,OAAb,EAAsBxC,MAAtB,CAAjC,CAAvB;AACA,UAAMwD,KAAK,GAAGvD,QAAQ,CAAC,MAAD,CAAtB;AACA,WAAO,KAAKwD,iBAAL,CAAwBD,KAAxB,EAA+BjC,SAA/B,EAA0C+B,KAA1C,EAAiDf,KAAjD,CAAP;AACH;;AAEDmB,EAAAA,sBAAsB,CAAEC,MAAF,EAAU;AAC5B,UAAMC,QAAQ,GAAG;AACb;AACA,mBAAa;AAFA,KAAjB;AAIA,WAAO,KAAKlD,UAAL,CAAiBkD,QAAjB,EAA2BD,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAEDE,EAAAA,gBAAgB,CAAEC,IAAF,EAAQC,QAAQ,GAAGxC,SAAnB,EAA8B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMsB,SAAS,GAAG,KAAKrB,WAAL,CAAkBsC,IAAlB,EAAwB,WAAxB,CAAlB;AACA,UAAME,MAAM,GAAG,KAAKvC,UAAL,CAAiBqC,IAAjB,EAAuB,QAAvB,CAAf;AACA,UAAMG,GAAG,GAAG,KAAKxC,UAAL,CAAiBqC,IAAjB,EAAuB,KAAvB,CAAZ;AACA,UAAMI,IAAI,GAAG,KAAKxD,UAAL,CAAiBoD,IAAjB,EAAuB,MAAvB,CAAb;AACA,UAAMK,OAAO,GAAG,KAAKzD,UAAL,CAAiBoD,IAAjB,EAAuB,aAAvB,CAAhB;AACA,UAAMM,GAAG,GAAG,KAAK1D,UAAL,CAAiBoD,IAAjB,EAAuB,gBAAvB,CAAZ;AACA,UAAM7B,UAAU,GAAG,KAAKvB,UAAL,CAAiBoD,IAAjB,EAAuB,gBAAvB,CAAnB;AACA,UAAM5B,IAAI,GAAG,KAAKpB,gBAAL,CAAuBmB,UAAvB,EAAmC8B,QAAnC,CAAb;AACA,UAAMM,IAAI,GAAG,KAAKC,eAAL,CAAsBR,IAAtB,EAA4B,cAA5B,CAAb;AACA,UAAMH,MAAM,GAAG,KAAKD,sBAAL,CAA6B,KAAKhD,UAAL,CAAiBoD,IAAjB,EAAuB,gBAAvB,CAA7B,CAAf;AACA,UAAMrD,EAAE,GAAG,KAAKC,UAAL,CAAiBoD,IAAjB,EAAuB,eAAvB,CAAX;AACA,WAAO;AACH,YAAMrD,EADH;AAEH,mBAAaoC,SAFV;AAGH,kBAAY,KAAKO,OAAL,CAAcP,SAAd,CAHT;AAIH,kBAAYX,IAJT;AAKH,gBAAU8B,MALP;AAMH,cAAQK,IANL;AAOH,cAAQH,IAPL;AAQH,iBAAWC,OARR;AASH,aAAOC,GATJ;AAUH,gBAAUT,MAVP;AAWH,aAAO;AACH,gBAAQM,GADL;AAEH,oBAAY/B;AAFT,OAXJ;AAeH,cAAQ4B;AAfL,KAAP;AAiBH;;AAED,QAAMS,aAAN,CAAqBvD,MAAM,GAAGO,SAA9B,EAAyC+B,KAAK,GAAG/B,SAAjD,EAA4DgB,KAAK,GAAGhB,SAApE,EAA+EvB,MAAM,GAAG,EAAxF,EAA4F;AACxF,UAAM,KAAK2B,WAAL,EAAN;;AACA,QAAIY,KAAK,KAAKhB,SAAd,EAAyB;AACrBgB,MAAAA,KAAK,GAAG,IAAR;AACH;;AACD,UAAMC,OAAO,GAAG;AACZ,eAASD;AADG,KAAhB;;AAGA,QAAIvB,MAAM,KAAKO,SAAf,EAA0B;AACtB,YAAMf,MAAM,GAAG,KAAKA,MAAL,CAAaQ,MAAb,CAAf;AACAwB,MAAAA,OAAO,CAAC,cAAD,CAAP,GAA0BhC,MAAM,CAAC,IAAD,CAAhC;AACH;;AACD,QAAI8C,KAAK,KAAK/B,SAAd,EAAyB;AACrBiB,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA2Bc,KAA3B;AACH;;AACD,UAAMrD,QAAQ,GAAG,MAAM,KAAKuE,uBAAL,CAA8B,KAAK7B,MAAL,CAAaH,OAAb,EAAsBxC,MAAtB,CAA9B,CAAvB;AACA,UAAMwD,KAAK,GAAGvD,QAAQ,CAAC,MAAD,CAAtB;AACA,WAAO,KAAKwE,WAAL,CAAkBjB,KAAlB,EAAyBjC,SAAzB,EAAoC+B,KAApC,EAA2Cf,KAA3C,CAAP;AACH;;AAEDmC,EAAAA,UAAU,CAAEC,KAAF,EAASnE,MAAM,GAAGe,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMkB,QAAQ,GAAG,KAAK/B,UAAL,CAAiBiE,KAAjB,EAAwB,cAAxB,CAAjB;AACAnE,IAAAA,MAAM,GAAG,KAAKoE,UAAL,CAAiBnC,QAAjB,EAA2BjC,MAA3B,EAAmC,GAAnC,CAAT;AACA,UAAMqE,WAAW,GAAG,KAAKnE,UAAL,CAAiBiE,KAAjB,EAAwB,OAAxB,CAApB;AACA,UAAMG,YAAY,GAAG,KAAKpE,UAAL,CAAiBiE,KAAjB,EAAwB,QAAxB,CAArB;AACA,UAAMI,KAAK,GAAG,KAAKC,WAAL,CAAkBH,WAAlB,CAAd;AACA,UAAMb,MAAM,GAAG,KAAKgB,WAAL,CAAkBF,YAAlB,CAAf;AACA,UAAMG,IAAI,GAAG,KAAKD,WAAL,CAAkBvF,OAAO,CAACyF,SAAR,CAAmBL,WAAnB,EAAgCC,YAAhC,CAAlB,CAAb;AACA,UAAMK,IAAI,GAAG,KAAKC,gBAAL,CAAuBT,KAAvB,EAA8B,MAA9B,EAAsC,WAAtC,CAAb;AACA,UAAMN,IAAI,GAAG,KAAKC,eAAL,CAAsBK,KAAtB,EAA6B,WAA7B,CAAb;AACA,UAAMU,OAAO,GAAG,KAAK3E,UAAL,CAAiBiE,KAAjB,EAAwB,SAAxB,CAAhB;AACA,UAAMlE,EAAE,GAAG,KAAKC,UAAL,CAAiBiE,KAAjB,EAAwB,eAAxB,CAAX;AACA,UAAM9B,SAAS,GAAG,KAAKyC,YAAL,CAAmBX,KAAnB,EAA0B,WAA1B,EAAuC,kBAAvC,CAAlB;AACA,QAAIV,GAAG,GAAG1C,SAAV;AACA,UAAMgE,OAAO,GAAG,KAAK9D,UAAL,CAAiBkD,KAAjB,EAAwB,KAAxB,CAAhB;;AACA,QAAIY,OAAO,KAAKhE,SAAhB,EAA2B;AACvB0C,MAAAA,GAAG,GAAG;AACF,gBAAQsB,OADN;AAEF,oBAAY/E,MAAM,CAAC,OAAD;AAFhB,OAAN;AAIH;;AACD,QAAIgF,YAAY,GAAG,KAAK9E,UAAL,CAAiBiE,KAAjB,EAAwB,SAAxB,CAAnB;AACAa,IAAAA,YAAY,GAAIA,YAAY,KAAK,OAAlB,GAA6B,OAA7B,GAAuC,OAAtD;AACA,WAAO;AACH,YAAM/E,EADH;AAEH,cAAQkE,KAFL;AAGH,mBAAa9B,SAHV;AAIH,kBAAY,KAAKO,OAAL,CAAcP,SAAd,CAJT;AAKH,gBAAUrC,MAAM,CAAC,QAAD,CALb;AAMH,cAAQ6D,IANL;AAOH,cAAQc,IAPL;AAQH,eAASE,OARN;AASH,sBAAgBG,YATb;AAUH,eAAST,KAVN;AAWH,gBAAUf,MAXP;AAYH,cAAQiB,IAZL;AAaH,aAAOhB;AAbJ,KAAP;AAeH;;AAED,QAAMwB,WAAN,CAAmBzE,MAAnB,EAA2BsC,KAAK,GAAG/B,SAAnC,EAA8CgB,KAAK,GAAGhB,SAAtD,EAAiEvB,MAAM,GAAG,EAA1E,EAA8E;AAC1E,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMnB,MAAM,GAAG,KAAKA,MAAL,CAAaQ,MAAb,CAAf;AACA,UAAMwB,OAAO,GAAG;AACZ,sBAAgBhC,MAAM,CAAC,IAAD,CADV;AAEZ,4BAAsB;AAFV,KAAhB;AAIA,UAAMP,QAAQ,GAAG,MAAM,KAAKyF,qBAAL,CAA4B,KAAK/C,MAAL,CAAaH,OAAb,EAAsBxC,MAAtB,CAA5B,CAAvB,CAP0E,CAQ1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMG,IAAI,GAAG,KAAKC,SAAL,CAAgBH,QAAhB,EAA0B,MAA1B,EAAkC,EAAlC,CAAb;AACA,WAAO,KAAKwE,WAAL,CAAkBtE,IAAlB,EAAwBK,MAAxB,EAAgC8C,KAAhC,EAAuCf,KAAvC,CAAP;AACH;;AAED,QAAMoD,eAAN,CAAuB3E,MAAM,GAAGO,SAAhC,EAA2C+B,KAAK,GAAG/B,SAAnD,EAA8DgB,KAAK,GAAGhB,SAAtE,EAAiFvB,MAAM,GAAG,EAA1F,EAA8F;AAC1F,UAAMC,QAAQ,GAAG,MAAM,KAAK2F,qBAAL,CAA4B,KAAKjD,MAAL,CAAa,EAAb,EAAiB3C,MAAjB,CAA5B,CAAvB;AACA,UAAM6F,SAAS,GAAG;AAAE,gBAAU;AAAZ,KAAlB;AACA,WAAO,KAAKC,WAAL,CAAkB7F,QAAQ,CAAC,MAAD,CAA1B,EAAoCsB,SAApC,EAA+C+B,KAA/C,EAAsDf,KAAtD,EAA6DsD,SAA7D,CAAP;AACH;;AAED,QAAME,WAAN,CAAmB/E,MAAM,GAAGO,SAA5B,EAAuC+B,KAAK,GAAG/B,SAA/C,EAA0DgB,KAAK,GAAGhB,SAAlE,EAA6EvB,MAAM,GAAG,EAAtF,EAA0F;AACtF,QAAIgB,MAAM,KAAKO,SAAf,EAA0B;AACtB,YAAM,IAAInC,iBAAJ,CAAuB,KAAKqB,EAAL,GAAU,2CAAjC,CAAN;AACH;;AACD,UAAM,KAAKkB,WAAL,EAAN;AACA,UAAMnB,MAAM,GAAG,KAAKA,MAAL,CAAaQ,MAAb,CAAf;AACA,UAAMwB,OAAO,GAAG;AACZ,sBAAgBhC,MAAM,CAAC,IAAD;AADV,KAAhB,CANsF,CAStF;;AACA,QAAI+B,KAAK,KAAKhB,SAAd,EAAyB;AACrBiB,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBD,KAAnB;AACH;;AACD,UAAMtC,QAAQ,GAAG,MAAM,KAAK+F,uBAAL,CAA8B,KAAKrD,MAAL,CAAaH,OAAb,EAAsBxC,MAAtB,CAA9B,CAAvB;AACA,WAAO,KAAK8F,WAAL,CAAkB7F,QAAQ,CAAC,MAAD,CAA1B,EAAoCO,MAApC,EAA4C8C,KAA5C,EAAmDf,KAAnD,CAAP;AACH;;AAED0D,EAAAA,gBAAgB,CAAEtC,MAAF,EAAU;AACtB,UAAMC,QAAQ,GAAG;AACb,gBAAU,QADG;AAEb,mBAAa,UAFA;AAGb,0BAAoB,MAHP;AAIb,cAAQ;AAJK,KAAjB;AAMA,WAAO,KAAKlD,UAAL,CAAiBkD,QAAjB,EAA2BD,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAEDuC,EAAAA,cAAc,CAAE7B,IAAF,EAAQ;AAClB,UAAM8B,KAAK,GAAG;AACV,eAAS,OADC;AAEV,gBAAU;AAFA,KAAd;AAIA,WAAO,KAAKzF,UAAL,CAAiByF,KAAjB,EAAwB9B,IAAxB,EAA8BA,IAA9B,CAAP;AACH;;AAED+B,EAAAA,UAAU,CAAEC,KAAF,EAAS7F,MAAM,GAAGe,SAAlB,EAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMd,EAAE,GAAG,KAAKC,UAAL,CAAiB2F,KAAjB,EAAwB,IAAxB,CAAX;AACA,UAAMxD,SAAS,GAAG,KAAKrB,WAAL,CAAkB6E,KAAlB,EAAyB,WAAzB,CAAlB;AACA,UAAMlB,IAAI,GAAG,KAAKb,eAAL,CAAsB+B,KAAtB,EAA6B,MAA7B,CAAb;AACA,UAAMtB,KAAK,GAAG,KAAKtD,UAAL,CAAiB4E,KAAjB,EAAwB,OAAxB,CAAd;AACA,UAAMrC,MAAM,GAAG,KAAKvC,UAAL,CAAiB4E,KAAjB,EAAwB,gBAAxB,CAAf;AACA,QAAIC,SAAS,GAAG,KAAK7E,UAAL,CAAiB4E,KAAjB,EAAwB,iBAAxB,CAAhB;;AACA,QAAIC,SAAS,KAAK/E,SAAlB,EAA6B;AACzB+E,MAAAA,SAAS,GAAG,KAAK7E,UAAL,CAAiB4E,KAAjB,EAAwB,QAAxB,CAAZ;AACH;;AACD,UAAM1C,MAAM,GAAG,KAAKsC,gBAAL,CAAuB,KAAKvF,UAAL,CAAiB2F,KAAjB,EAAwB,QAAxB,CAAvB,CAAf;AACA,UAAMhC,IAAI,GAAG,KAAK6B,cAAL,CAAqB,KAAKxF,UAAL,CAAiB2F,KAAjB,EAAwB,gBAAxB,CAArB,CAAb;AACA,UAAME,OAAO,GAAG,KAAK9E,UAAL,CAAiB4E,KAAjB,EAAwB,UAAxB,CAAhB;AACA,UAAM5D,QAAQ,GAAG,KAAK/B,UAAL,CAAiB2F,KAAjB,EAAwB,cAAxB,CAAjB;AACA,UAAMrF,MAAM,GAAG,KAAKwF,UAAL,CAAiB/D,QAAjB,EAA2BjC,MAA3B,EAAmC,GAAnC,CAAf;AACA,UAAMiG,aAAa,GAAG,KAAK/F,UAAL,CAAiB2F,KAAjB,EAAwB,eAAxB,CAAtB;AACA,UAAMK,SAAS,GAAG,KAAKjF,UAAL,CAAiB4E,KAAjB,EAAwB,WAAxB,CAAlB;AACA,WAAO,KAAKM,SAAL,CAAgB;AACnB,YAAMlG,EADa;AAEnB,uBAAiBgG,aAFE;AAGnB,mBAAa5D,SAHM;AAInB,kBAAY,KAAKO,OAAL,CAAcP,SAAd,CAJO;AAKnB,4BAAsBtB,SALH;AAMnB,gBAAUP,MANS;AAOnB,cAAQqD,IAPW;AAQnB,qBAAe9C,SARI;AASnB,kBAAYA,SATO;AAUnB,cAAQ4D,IAVW;AAWnB,eAASJ,KAXU;AAYnB,mBAAa2B,SAZM;AAanB,gBAAU1C,MAbS;AAcnB,cAAQzC,SAdW;AAenB,iBAAWgF,OAfQ;AAgBnB,gBAAUhF,SAhBS;AAiBnB,mBAAa+E,SAjBM;AAkBnB,gBAAU3C,MAlBS;AAmBnB,gBAAUpC,SAnBS;AAoBnB,cAAQ8E,KApBW;AAqBnB,aAAO9E;AArBY,KAAhB,CAAP;AAuBH;;AAED,QAAMqF,WAAN,CAAmB5F,MAAnB,EAA2BqD,IAA3B,EAAiCc,IAAjC,EAAuCnB,MAAvC,EAA+Ce,KAAK,GAAGxD,SAAvD,EAAkEvB,MAAM,GAAG,EAA3E,EAA+E;AAC3E,UAAM,KAAK2B,WAAL,EAAN;AACA,QAAIkF,MAAM,GAAG,gBAAgB,KAAKC,UAAL,CAAiB3B,IAAjB,CAA7B;AACA,UAAM3C,OAAO,GAAG;AACZ,sBAAgB,KAAKC,QAAL,CAAezB,MAAf;AADJ,KAAhB;;AAGA,QAAIqD,IAAI,KAAK,QAAb,EAAuB;AACnB,UAAIc,IAAI,KAAK,KAAb,EAAoB;AAChB3C,QAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAKuE,iBAAL,CAAwB/F,MAAxB,EAAgCgD,MAAhC,CAAnB,CADgB,CAC4C;AAC/D,OAFD,MAEO;AACHxB,QAAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAKuE,iBAAL,CAAwB/F,MAAxB,EAAgCgD,MAAhC,CAApB,CADG,CAC0D;AAChE;;AACD6C,MAAAA,MAAM,IAAI,SAAV;AACH,KAPD,MAOO;AACHrE,MAAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAKuE,iBAAL,CAAwB/F,MAAxB,EAAgCgD,MAAhC,CAApB,CADG,CAC0D;;AAC7DxB,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAKwE,gBAAL,CAAuBhG,MAAvB,EAA+B+D,KAA/B,CAAnB;AACA8B,MAAAA,MAAM,IAAI,KAAKC,UAAL,CAAiBzC,IAAjB,CAAV;AACH;;AACD,UAAMpE,QAAQ,GAAG,MAAM,KAAK4G,MAAL,EAAc,KAAKlE,MAAL,CAAaH,OAAb,EAAsBxC,MAAtB,CAAd,CAAvB;AACA,UAAMS,EAAE,GAAG,KAAKC,UAAL,CAAiBT,QAAjB,EAA2B,MAA3B,CAAX;AACA,WAAO;AACH,cAAQA,QADL;AAEH,YAAMQ;AAFH,KAAP;AAIH;;AAED,QAAMwG,UAAN,CAAkBxG,EAAlB,EAAsBO,MAAM,GAAGO,SAA/B,EAA0CvB,MAAM,GAAG,EAAnD,EAAuD;AACnD,UAAM,KAAK2B,WAAL,EAAN;AACA,UAAMa,OAAO,GAAG;AACZ,iBAAW/B;AADC,KAAhB;AAGA,QAAID,MAAM,GAAGe,SAAb;;AACA,QAAIP,MAAJ,EAAY;AACRR,MAAAA,MAAM,GAAG,KAAKA,MAAL,CAAaQ,MAAb,CAAT;AACH;;AACD,UAAMf,QAAQ,GAAG,MAAM,KAAKiH,oBAAL,CAA2B,KAAKvE,MAAL,CAAaH,OAAb,EAAsBxC,MAAtB,CAA3B,CAAvB;AACA,UAAMG,IAAI,GAAG,KAAKC,SAAL,CAAgBH,QAAhB,EAA0B,MAA1B,CAAb;AACA,WAAO,KAAKmG,UAAL,CAAiBjG,IAAjB,EAAuBK,MAAvB,CAAP;AACH;;AAED,QAAM2G,WAAN,CAAmB1G,EAAnB,EAAuBO,MAAM,GAAGO,SAAhC,EAA2CvB,MAAM,GAAG,EAApD,EAAwD;AACpD;AACA,UAAMwC,OAAO,GAAG;AAAE,iBAAW/B;AAAb,KAAhB;AACA,UAAMR,QAAQ,GAAG,MAAM,KAAKmH,8BAAL,CAAqC,KAAKzE,MAAL,CAAaH,OAAb,EAAsBxC,MAAtB,CAArC,CAAvB;AACA,WAAO;AACH,cAAQC;AADL,KAAP;AAGH;;AAEDoH,EAAAA,KAAK,GAAI;AACL,WAAO,KAAKC,YAAL,EAAP;AACH;;AAEDC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,GAAG,GAAG,QAAd,EAAwBZ,MAAM,GAAG,KAAjC,EAAwC7G,MAAM,GAAG,EAAjD,EAAqD0H,OAAO,GAAGnG,SAA/D,EAA0EoG,IAAI,GAAGpG,SAAjF,EAA4F;AAC5F,QAAIqG,GAAG,GAAG,KAAKC,IAAL,CAAU,KAAV,IAAmB,GAAnB,GAAyBL,IAAnC;;AACA,QAAIC,GAAG,KAAK,QAAZ,EAAsB;AAClB,UAAI1F,MAAM,CAACC,IAAP,CAAahC,MAAb,EAAqBO,MAAzB,EAAiC;AAC7BqH,QAAAA,GAAG,IAAI,MAAM,KAAKE,SAAL,CAAgB9H,MAAhB,CAAb;AACH;AACJ,KAJD,MAIO;AACH,WAAK+H,wBAAL;AACA,YAAMV,KAAK,GAAG,KAAKA,KAAL,GAAcW,QAAd,EAAd;AACA,YAAMC,IAAI,GAAGZ,KAAK,GAAG,KAAKa,GAAb,GAAmB,KAAKC,MAArC;AACA,YAAMC,SAAS,GAAG,KAAKC,IAAL,CAAW,KAAKC,MAAL,CAAaL,IAAb,CAAX,EAA+B,KAAKK,MAAL,CAAa,KAAKC,MAAlB,CAA/B,CAAlB;AACAZ,MAAAA,IAAI,GAAG,KAAKG,SAAL,CAAgB,KAAKnF,MAAL,CAAa;AAChC,oBAAY,KAAKuF,GADe;AAEhC,iBAASb,KAFuB;AAGhC,qBAAa,KAAKc,MAHc;AAIhC,qBAAaC,SAAS,CAACI,WAAV;AAJmB,OAAb,EAKpBxI,MALoB,CAAhB,CAAP;AAMA0H,MAAAA,OAAO,GAAG;AACN,wBAAgB;AADV,OAAV;AAGH;;AACD,WAAO;AAAE,aAAOE,GAAT;AAAc,gBAAUf,MAAxB;AAAgC,cAAQc,IAAxC;AAA8C,iBAAWD;AAAzD,KAAP;AACH;;AAEDe,EAAAA,YAAY,CAAEvG,IAAF,EAAQwG,MAAR,EAAgBd,GAAhB,EAAqBf,MAArB,EAA6Ba,OAA7B,EAAsCC,IAAtC,EAA4C1H,QAA5C,EAAsD0I,cAAtD,EAAsEC,WAAtE,EAAmF;AAC3F,QAAI3I,QAAQ,KAAKsB,SAAjB,EAA4B;AACxB,UAAI,WAAWtB,QAAf,EAAyB;AACrB;AACA,YAAIA,QAAQ,CAAC,OAAD,CAAZ,EAAuB;AACnB,gBAAM4I,OAAO,GAAG,KAAKnI,UAAL,CAAiBT,QAAjB,EAA2B,cAA3B,CAAhB;AACA,gBAAM6I,QAAQ,GAAG,KAAKrI,EAAL,GAAU,GAAV,GAAgBoI,OAAjC;AACA,eAAKE,4BAAL,CAAmC,KAAKC,UAAL,CAAgB,OAAhB,CAAnC,EAA6DH,OAA7D,EAAsEC,QAAtE;AACA,eAAKG,4BAAL,CAAmC,KAAKD,UAAL,CAAgB,OAAhB,CAAnC,EAA6DH,OAA7D,EAAsEC,QAAtE;AACA,gBAAM,IAAI3J,aAAJ,CAAmB,KAAKsB,EAAL,GAAU,GAAV,GAAgB,KAAKyI,IAAL,CAAWjJ,QAAX,CAAnC,CAAN;AACH;AACJ;AACJ;;AACD,QAAIiC,IAAI,GAAG,GAAX,EAAgB;AACZ,UAAIyF,IAAJ,EAAU;AACN,cAAMmB,QAAQ,GAAG,KAAKrI,EAAL,GAAU,GAAV,GAAgBkH,IAAjC;AACA,aAAKoB,4BAAL,CAAmC,KAAKC,UAAL,CAAgB,OAAhB,CAAnC,EAA6DrB,IAA7D,EAAmEmB,QAAnE;AACA,aAAKG,4BAAL,CAAmC,KAAKD,UAAL,CAAgB,OAAhB,CAAnC,EAA6DrB,IAA7D,EAAmEmB,QAAnE;AACA,cAAM,IAAI3J,aAAJ,CAAmB2J,QAAnB,CAAN,CAJM,CAI8B;AACvC;;AACD,YAAM,IAAI3J,aAAJ,CAAmB,KAAKsB,EAAL,GAAU,GAAV,GAAgBkH,IAAnC,CAAN;AACH;AACJ;;AA/tB4C,CAAjD","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, InvalidOrder, OrderNotFound, RateLimitExceeded, InsufficientFunds } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinmate extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinmate',\n            'name': 'CoinMate',\n            'countries': [ 'GB', 'CZ', 'EU' ], // UK, Czech Republic\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'fetchTransactions': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87460806-1c9f3f00-c616-11ea-8c46-a77018a8f3f4.jpg',\n                'api': 'https://coinmate.io/api',\n                'www': 'https://coinmate.io',\n                'fees': 'https://coinmate.io/fees',\n                'doc': [\n                    'https://coinmate.docs.apiary.io',\n                    'https://coinmate.io/developers',\n                ],\n                'referral': 'https://coinmate.io?referral=YTFkM1RsOWFObVpmY1ZjMGREQmpTRnBsWjJJNVp3PT0',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'orderBook',\n                        'ticker',\n                        'transactions',\n                        'tradingPairs',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balances',\n                        'bitcoinCashWithdrawal',\n                        'bitcoinCashDepositAddresses',\n                        'bitcoinDepositAddresses',\n                        'bitcoinWithdrawal',\n                        'bitcoinWithdrawalFees',\n                        'buyInstant',\n                        'buyLimit',\n                        'cancelOrder',\n                        'cancelOrderWithInfo',\n                        'createVoucher',\n                        'dashDepositAddresses',\n                        'dashWithdrawal',\n                        'ethereumWithdrawal',\n                        'ethereumDepositAddresses',\n                        'litecoinWithdrawal',\n                        'litecoinDepositAddresses',\n                        'openOrders',\n                        'order',\n                        'orderHistory',\n                        'orderById',\n                        'pusherAuth',\n                        'redeemVoucher',\n                        'replaceByBuyLimit',\n                        'replaceByBuyInstant',\n                        'replaceBySellLimit',\n                        'replaceBySellInstant',\n                        'rippleDepositAddresses',\n                        'rippleWithdrawal',\n                        'sellInstant',\n                        'sellLimit',\n                        'transactionHistory',\n                        'traderFees',\n                        'tradeHistory',\n                        'transfer',\n                        'transferHistory',\n                        'unconfirmedBitcoinDeposits',\n                        'unconfirmedBitcoinCashDeposits',\n                        'unconfirmedDashDeposits',\n                        'unconfirmedEthereumDeposits',\n                        'unconfirmedLitecoinDeposits',\n                        'unconfirmedRippleDeposits',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'maker': 0.12 / 100,\n                    'taker': 0.25 / 100,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.25 / 100],\n                            [10000, 0.23 / 100],\n                            [100000, 0.21 / 100],\n                            [250000, 0.20 / 100],\n                            [500000, 0.15 / 100],\n                            [1000000, 0.13 / 100],\n                            [3000000, 0.10 / 100],\n                            [15000000, 0.05 / 100],\n                        ],\n                        'maker': [\n                            [0, 0.12 / 100],\n                            [10000, 0.11 / 100],\n                            [1000000, 0.10 / 100],\n                            [250000, 0.08 / 100],\n                            [500000, 0.05 / 100],\n                            [1000000, 0.03 / 100],\n                            [3000000, 0.02 / 100],\n                            [15000000, 0],\n                        ],\n                    },\n                },\n                'promotional': {\n                    'trading': {\n                        'maker': 0.05 / 100,\n                        'taker': 0.15 / 100,\n                        'tiers': {\n                            'taker': [\n                                [0, 0.15 / 100],\n                                [10000, 0.14 / 100],\n                                [100000, 0.13 / 100],\n                                [250000, 0.12 / 100],\n                                [500000, 0.11 / 100],\n                                [1000000, 0.1 / 100],\n                                [3000000, 0.08 / 100],\n                                [15000000, 0.05 / 100],\n                            ],\n                            'maker': [\n                                [0, 0.05 / 100],\n                                [10000, 0.04 / 100],\n                                [1000000, 0.03 / 100],\n                                [250000, 0.02 / 100],\n                                [500000, 0],\n                                [1000000, 0],\n                                [3000000, 0],\n                                [15000000, 0],\n                            ],\n                        },\n                    },\n                },\n            },\n            'options': {\n                'promotionalMarkets': ['ETH/EUR', 'ETH/CZK', 'ETH/BTC', 'XRP/EUR', 'XRP/CZK', 'XRP/BTC', 'DASH/EUR', 'DASH/CZK', 'DASH/BTC', 'BCH/EUR', 'BCH/CZK', 'BCH/BTC'],\n            },\n            'exceptions': {\n                'exact': {\n                    'No order with given ID': OrderNotFound,\n                },\n                'broad': {\n                    'Not enough account balance available': InsufficientFunds,\n                    'Incorrect order ID': InvalidOrder,\n                    'Minimum Order Size ': InvalidOrder,\n                    'TOO MANY REQUESTS': RateLimitExceeded,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetTradingPairs (params);\n        //\n        //     {\n        //         \"error\":false,\n        //         \"errorMessage\":null,\n        //         \"data\": [\n        //             {\n        //                 \"name\":\"BTC_EUR\",\n        //                 \"firstCurrency\":\"BTC\",\n        //                 \"secondCurrency\":\"EUR\",\n        //                 \"priceDecimals\":2,\n        //                 \"lotDecimals\":8,\n        //                 \"minAmount\":0.0002,\n        //                 \"tradesWebSocketChannelId\":\"trades-BTC_EUR\",\n        //                 \"orderBookWebSocketChannelId\":\"order_book-BTC_EUR\",\n        //                 \"tradeStatisticsWebSocketChannelId\":\"statistics-BTC_EUR\"\n        //             },\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const result = [];\n        for (let i = 0; i < data.length; i++) {\n            const market = data[i];\n            const id = this.safeString (market, 'name');\n            const baseId = this.safeString (market, 'firstCurrency');\n            const quoteId = this.safeString (market, 'secondCurrency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const promotionalMarkets = this.safeValue (this.options, 'promotionalMarkets', []);\n            let fees = this.safeValue (this.fees, 'trading');\n            if (this.inArray (symbol, promotionalMarkets)) {\n                const promotionalFees = this.safeValue (this.fees, 'promotional', {});\n                fees = this.safeValue (promotionalFees, 'trading', fees);\n            }\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': undefined,\n                'maker': fees['maker'],\n                'taker': fees['taker'],\n                'info': market,\n                'precision': {\n                    'price': this.safeInteger (market, 'priceDecimals'),\n                    'amount': this.safeInteger (market, 'lotDecimals'),\n                },\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (market, 'minAmount'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostBalances (params);\n        const balances = this.safeValue (response, 'data');\n        const result = { 'info': response };\n        const currencyIds = Object.keys (balances);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const balance = this.safeValue (balances, currencyId);\n            const account = this.account ();\n            account['free'] = this.safeString (balance, 'available');\n            account['used'] = this.safeString (balance, 'reserved');\n            account['total'] = this.safeString (balance, 'balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currencyPair': this.marketId (symbol),\n            'groupByPriceLimit': 'False',\n        };\n        const response = await this.publicGetOrderBook (this.extend (request, params));\n        const orderbook = response['data'];\n        const timestamp = this.safeTimestamp (orderbook, 'timestamp');\n        return this.parseOrderBook (orderbook, symbol, timestamp, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currencyPair': this.marketId (symbol),\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const ticker = this.safeValue (response, 'data');\n        const timestamp = this.safeTimestamp (ticker, 'timestamp');\n        const last = this.safeNumber (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'ask'),\n            'vwap': undefined,\n            'askVolume': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeNumber (ticker, 'amount'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'limit': 1000,\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        if (since !== undefined) {\n            request['timestampFrom'] = since;\n        }\n        if (code !== undefined) {\n            request['currency'] = this.currencyId (code);\n        }\n        const response = await this.privatePostTransferHistory (this.extend (request, params));\n        const items = response['data'];\n        return this.parseTransactions (items, undefined, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            // any other types ?\n            'COMPLETED': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (item, currency = undefined) {\n        //\n        // deposits\n        //\n        //     {\n        //         transactionId: 1862815,\n        //         timestamp: 1516803982388,\n        //         amountCurrency: 'LTC',\n        //         amount: 1,\n        //         fee: 0,\n        //         walletType: 'LTC',\n        //         transferType: 'DEPOSIT',\n        //         transferStatus: 'COMPLETED',\n        //         txid:\n        //         'ccb9255dfa874e6c28f1a64179769164025329d65e5201849c2400abd6bce245',\n        //         destination: 'LQrtSKA6LnhcwRrEuiborQJnjFF56xqsFn',\n        //         destinationTag: null\n        //     }\n        //\n        // withdrawals\n        //\n        //     {\n        //         transactionId: 2140966,\n        //         timestamp: 1519314282976,\n        //         amountCurrency: 'EUR',\n        //         amount: 8421.7228,\n        //         fee: 16.8772,\n        //         walletType: 'BANK_WIRE',\n        //         transferType: 'WITHDRAWAL',\n        //         transferStatus: 'COMPLETED',\n        //         txid: null,\n        //         destination: null,\n        //         destinationTag: null\n        //     }\n        //\n        const timestamp = this.safeInteger (item, 'timestamp');\n        const amount = this.safeNumber (item, 'amount');\n        const fee = this.safeNumber (item, 'fee');\n        const txid = this.safeString (item, 'txid');\n        const address = this.safeString (item, 'destination');\n        const tag = this.safeString (item, 'destinationTag');\n        const currencyId = this.safeString (item, 'amountCurrency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const type = this.safeStringLower (item, 'transferType');\n        const status = this.parseTransactionStatus (this.safeString (item, 'transferStatus'));\n        const id = this.safeString (item, 'transactionId');\n        return {\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'currency': code,\n            'amount': amount,\n            'type': type,\n            'txid': txid,\n            'address': address,\n            'tag': tag,\n            'status': status,\n            'fee': {\n                'cost': fee,\n                'currency': code,\n            },\n            'info': item,\n        };\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (limit === undefined) {\n            limit = 1000;\n        }\n        const request = {\n            'limit': limit,\n        };\n        if (symbol !== undefined) {\n            const market = this.market (symbol);\n            request['currencyPair'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['timestampFrom'] = since;\n        }\n        const response = await this.privatePostTradeHistory (this.extend (request, params));\n        const items = response['data'];\n        return this.parseTrades (items, undefined, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         transactionId: 2671819,\n        //         createdTimestamp: 1529649127605,\n        //         currencyPair: 'LTC_BTC',\n        //         type: 'BUY',\n        //         orderType: 'LIMIT',\n        //         orderId: 101810227,\n        //         amount: 0.01,\n        //         price: 0.01406,\n        //         fee: 0,\n        //         feeType: 'MAKER'\n        //     }\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"timestamp\":1561598833416,\n        //         \"transactionId\":\"4156303\",\n        //         \"price\":10950.41,\n        //         \"amount\":0.004,\n        //         \"currencyPair\":\"BTC_EUR\",\n        //         \"tradeType\":\"BUY\"\n        //     }\n        //\n        const marketId = this.safeString (trade, 'currencyPair');\n        market = this.safeMarket (marketId, market, '_');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'amount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        const side = this.safeStringLower2 (trade, 'type', 'tradeType');\n        const type = this.safeStringLower (trade, 'orderType');\n        const orderId = this.safeString (trade, 'orderId');\n        const id = this.safeString (trade, 'transactionId');\n        const timestamp = this.safeInteger2 (trade, 'timestamp', 'createdTimestamp');\n        let fee = undefined;\n        const feeCost = this.safeNumber (trade, 'fee');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': market['quote'],\n            };\n        }\n        let takerOrMaker = this.safeString (trade, 'feeType');\n        takerOrMaker = (takerOrMaker === 'MAKER') ? 'maker' : 'taker';\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': type,\n            'side': side,\n            'order': orderId,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPair': market['id'],\n            'minutesIntoHistory': 10,\n        };\n        const response = await this.publicGetTransactions (this.extend (request, params));\n        //\n        //     {\n        //         \"error\":false,\n        //         \"errorMessage\":null,\n        //         \"data\":[\n        //             {\n        //                 \"timestamp\":1561598833416,\n        //                 \"transactionId\":\"4156303\",\n        //                 \"price\":10950.41,\n        //                 \"amount\":0.004,\n        //                 \"currencyPair\":\"BTC_EUR\",\n        //                 \"tradeType\":\"BUY\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const response = await this.privatePostOpenOrders (this.extend ({}, params));\n        const extension = { 'status': 'open' };\n        return this.parseOrders (response['data'], undefined, since, limit, extension);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currencyPair': market['id'],\n        };\n        // offset param that appears in other parts of the API doesn't appear to be supported here\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privatePostOrderHistory (this.extend (request, params));\n        return this.parseOrders (response['data'], market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'FILLED': 'closed',\n            'CANCELLED': 'canceled',\n            'PARTIALLY_FILLED': 'open',\n            'OPEN': 'open',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrderType (type) {\n        const types = {\n            'LIMIT': 'limit',\n            'MARKET': 'market',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // limit sell\n        //\n        //     {\n        //         id: 781246605,\n        //         timestamp: 1584480015133,\n        //         trailingUpdatedTimestamp: null,\n        //         type: 'SELL',\n        //         currencyPair: 'ETH_BTC',\n        //         price: 0.0345,\n        //         amount: 0.01,\n        //         stopPrice: null,\n        //         originalStopPrice: null,\n        //         marketPriceAtLastUpdate: null,\n        //         marketPriceAtOrderCreation: null,\n        //         orderTradeType: 'LIMIT',\n        //         hidden: false,\n        //         trailing: false,\n        //         clientOrderId: null\n        //     }\n        //\n        // limit buy\n        //\n        //     {\n        //         id: 67527001,\n        //         timestamp: 1517931722613,\n        //         trailingUpdatedTimestamp: null,\n        //         type: 'BUY',\n        //         price: 5897.24,\n        //         remainingAmount: 0.002367,\n        //         originalAmount: 0.1,\n        //         stopPrice: null,\n        //         originalStopPrice: null,\n        //         marketPriceAtLastUpdate: null,\n        //         marketPriceAtOrderCreation: null,\n        //         status: 'CANCELLED',\n        //         orderTradeType: 'LIMIT',\n        //         hidden: false,\n        //         avgPrice: null,\n        //         trailing: false,\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const timestamp = this.safeInteger (order, 'timestamp');\n        const side = this.safeStringLower (order, 'type');\n        const price = this.safeNumber (order, 'price');\n        const amount = this.safeNumber (order, 'originalAmount');\n        let remaining = this.safeNumber (order, 'remainingAmount');\n        if (remaining === undefined) {\n            remaining = this.safeNumber (order, 'amount');\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const type = this.parseOrderType (this.safeString (order, 'orderTradeType'));\n        const average = this.safeNumber (order, 'avgPrice');\n        const marketId = this.safeString (order, 'currencyPair');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const clientOrderId = this.safeString (order, 'clientOrderId');\n        const stopPrice = this.safeNumber (order, 'stopPrice');\n        return this.safeOrder ({\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': undefined,\n            'average': average,\n            'filled': undefined,\n            'remaining': remaining,\n            'status': status,\n            'trades': undefined,\n            'info': order,\n            'fee': undefined,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = 'privatePost' + this.capitalize (side);\n        const request = {\n            'currencyPair': this.marketId (symbol),\n        };\n        if (type === 'market') {\n            if (side === 'buy') {\n                request['total'] = this.amountToPrecision (symbol, amount); // amount in fiat\n            } else {\n                request['amount'] = this.amountToPrecision (symbol, amount); // amount in fiat\n            }\n            method += 'Instant';\n        } else {\n            request['amount'] = this.amountToPrecision (symbol, amount); // amount in crypto\n            request['price'] = this.priceToPrecision (symbol, price);\n            method += this.capitalize (type);\n        }\n        const response = await this[method] (this.extend (request, params));\n        const id = this.safeString (response, 'data');\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'orderId': id,\n        };\n        let market = undefined;\n        if (symbol) {\n            market = this.market (symbol);\n        }\n        const response = await this.privatePostOrderById (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        //   {\"error\":false,\"errorMessage\":null,\"data\":{\"success\":true,\"remainingAmount\":0.01}}\n        const request = { 'orderId': id };\n        const response = await this.privatePostCancelOrderWithInfo (this.extend (request, params));\n        return {\n            'info': response,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + path;\n        if (api === 'public') {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const auth = nonce + this.uid + this.apiKey;\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            body = this.urlencode (this.extend ({\n                'clientId': this.uid,\n                'nonce': nonce,\n                'publicKey': this.apiKey,\n                'signature': signature.toUpperCase (),\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response !== undefined) {\n            if ('error' in response) {\n                // {\"error\":true,\"errorMessage\":\"Minimum Order Size 0.01 ETH\",\"data\":null}\n                if (response['error']) {\n                    const message = this.safeString (response, 'errorMessage');\n                    const feedback = this.id + ' ' + message;\n                    this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n                    this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n                    throw new ExchangeError (this.id + ' ' + this.json (response));\n                }\n            }\n        }\n        if (code > 400) {\n            if (body) {\n                const feedback = this.id + ' ' + body;\n                this.throwExactlyMatchedException (this.exceptions['exact'], body, feedback);\n                this.throwBroadlyMatchedException (this.exceptions['broad'], body, feedback);\n                throw new ExchangeError (feedback); // unknown message\n            }\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}