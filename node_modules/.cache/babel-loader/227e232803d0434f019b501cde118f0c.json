{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class luno extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'luno',\n      'name': 'luno',\n      'countries': ['GB', 'SG', 'ZA'],\n      'rateLimit': 1000,\n      'version': '1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchAccounts': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTradingFee': true,\n        'fetchTradingFees': true\n      },\n      'urls': {\n        'referral': 'https://www.luno.com/invite/44893A',\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg',\n        'api': {\n          'public': 'https://api.luno.com/api',\n          'private': 'https://api.luno.com/api',\n          'exchange': 'https://api.luno.com/api/exchange'\n        },\n        'www': 'https://www.luno.com',\n        'doc': ['https://www.luno.com/en/api', 'https://npmjs.org/package/bitx', 'https://github.com/bausmeier/node-bitx']\n      },\n      'api': {\n        'exchange': {\n          'get': ['markets']\n        },\n        'public': {\n          'get': ['orderbook', 'orderbook_top', 'ticker', 'tickers', 'trades']\n        },\n        'private': {\n          'get': ['accounts/{id}/pending', 'accounts/{id}/transactions', 'balance', 'beneficiaries', 'fee_info', 'funding_address', 'listorders', 'listtrades', 'orders/{id}', 'quotes/{id}', 'withdrawals', 'withdrawals/{id}', 'transfers' // GET /api/exchange/2/listorders\n          // GET /api/exchange/2/orders/{id}\n          // GET /api/exchange/3/order\n          ],\n          'post': ['accounts', 'accounts/{id}/name', 'postorder', 'marketorder', 'stoporder', 'funding_address', 'withdrawals', 'send', 'quotes', 'oauth2/grant'],\n          'put': ['accounts/{id}/name', 'quotes/{id}'],\n          'delete': ['quotes/{id}', 'withdrawals/{id}']\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.exchangeGetMarkets(params); //\n    //     {\n    //         \"markets\":[\n    //             {\n    //                 \"market_id\":\"BCHXBT\",\n    //                 \"trading_status\":\"ACTIVE\",\n    //                 \"base_currency\":\"BCH\",\n    //                 \"counter_currency\":\"XBT\",\n    //                 \"min_volume\":\"0.01\",\n    //                 \"max_volume\":\"100.00\",\n    //                 \"volume_scale\":2,\n    //                 \"min_price\":\"0.0001\",\n    //                 \"max_price\":\"1.00\",\n    //                 \"price_scale\":6,\n    //                 \"fee_scale\":8,\n    //             },\n    //         ]\n    //     }\n    //\n\n    const result = [];\n    const markets = this.safeValue(response, 'markets', []);\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'market_id');\n      const baseId = this.safeString(market, 'base_currency');\n      const quoteId = this.safeString(market, 'counter_currency');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const status = this.safeString(market, 'trading_status');\n      const active = status === 'ACTIVE';\n      const precision = {\n        'amount': this.safeInteger(market, 'volume_scale'),\n        'price': this.safeInteger(market, 'price_scale')\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(market, 'min_volume'),\n            'max': this.safeNumber(market, 'max_volume')\n          },\n          'price': {\n            'min': this.safeNumber(market, 'min_price'),\n            'max': this.safeNumber(market, 'max_price')\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchAccounts(params = {}) {\n    const response = await this.privateGetBalance(params);\n    const wallets = this.safeValue(response, 'balance', []);\n    const result = [];\n\n    for (let i = 0; i < wallets.length; i++) {\n      const account = wallets[i];\n      const accountId = this.safeString(account, 'account_id');\n      const currencyId = this.safeString(account, 'asset');\n      const code = this.safeCurrencyCode(currencyId);\n      result.push({\n        'id': accountId,\n        'type': undefined,\n        'currency': code,\n        'info': account\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalance(params); //\n    //     {\n    //         'balance': [\n    //             {'account_id': '119...1336','asset': 'XBT','balance': '0.00','reserved': '0.00','unconfirmed': '0.00'},\n    //             {'account_id': '66...289','asset': 'XBT','balance': '0.00','reserved': '0.00','unconfirmed': '0.00'},\n    //             {'account_id': '718...5300','asset': 'ETH','balance': '0.00','reserved': '0.00','unconfirmed': '0.00'},\n    //             {'account_id': '818...7072','asset': 'ZAR','balance': '0.001417','reserved': '0.00','unconfirmed': '0.00'}]}\n    //         ]\n    //     }\n    //\n\n    const wallets = this.safeValue(response, 'balance', []);\n    const result = {\n      'info': response,\n      'timestamp': undefined,\n      'datetime': undefined\n    };\n\n    for (let i = 0; i < wallets.length; i++) {\n      const wallet = wallets[i];\n      const currencyId = this.safeString(wallet, 'asset');\n      const code = this.safeCurrencyCode(currencyId);\n      const reserved = this.safeString(wallet, 'reserved');\n      const unconfirmed = this.safeString(wallet, 'unconfirmed');\n      const balance = this.safeString(wallet, 'balance');\n      const reservedUnconfirmed = Precise.stringAdd(reserved, unconfirmed);\n      const balanceUnconfirmed = Precise.stringAdd(balance, unconfirmed);\n\n      if (code in result) {\n        result[code]['used'] = Precise.stringAdd(result[code]['used'], reservedUnconfirmed);\n        result[code]['total'] = Precise.stringAdd(result[code]['total'], balanceUnconfirmed);\n      } else {\n        const account = this.account();\n        account['used'] = reservedUnconfirmed;\n        account['total'] = balanceUnconfirmed;\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let method = 'publicGetOrderbook';\n\n    if (limit !== undefined) {\n      if (limit <= 100) {\n        method += 'Top'; // get just the top of the orderbook when limit is low\n      }\n    }\n\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const response = await this[method](this.extend(request, params));\n    const timestamp = this.safeInteger(response, 'timestamp');\n    return this.parseOrderBook(response, symbol, timestamp, 'bids', 'asks', 'price', 'volume');\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      // todo add other statuses\n      'PENDING': 'open'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"base\": \"string\",\n    //         \"completed_timestamp\": \"string\",\n    //         \"counter\": \"string\",\n    //         \"creation_timestamp\": \"string\",\n    //         \"expiration_timestamp\": \"string\",\n    //         \"fee_base\": \"string\",\n    //         \"fee_counter\": \"string\",\n    //         \"limit_price\": \"string\",\n    //         \"limit_volume\": \"string\",\n    //         \"order_id\": \"string\",\n    //         \"pair\": \"string\",\n    //         \"state\": \"PENDING\",\n    //         \"type\": \"BID\"\n    //     }\n    //\n    const timestamp = this.safeInteger(order, 'creation_timestamp');\n    let status = this.parseOrderStatus(this.safeString(order, 'state'));\n    status = status === 'open' ? status : status;\n    let side = undefined;\n    const orderType = this.safeString(order, 'type');\n\n    if (orderType === 'ASK' || orderType === 'SELL') {\n      side = 'sell';\n    } else if (orderType === 'BID' || orderType === 'BUY') {\n      side = 'buy';\n    }\n\n    const marketId = this.safeString(order, 'pair');\n    const symbol = this.safeSymbol(marketId, market);\n    const price = this.safeNumber(order, 'limit_price');\n    const amount = this.safeNumber(order, 'limit_volume');\n    const quoteFee = this.safeNumber(order, 'fee_counter');\n    const baseFee = this.safeNumber(order, 'fee_base');\n    const filled = this.safeNumber(order, 'base');\n    const cost = this.safeNumber(order, 'counter');\n    const fee = {\n      'currency': undefined\n    };\n\n    if (quoteFee) {\n      fee['cost'] = quoteFee;\n\n      if (market !== undefined) {\n        fee['currency'] = market['quote'];\n      }\n    } else {\n      fee['cost'] = baseFee;\n\n      if (market !== undefined) {\n        fee['currency'] = market['base'];\n      }\n    }\n\n    const id = this.safeString(order, 'order_id');\n    return this.safeOrder({\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': undefined,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'filled': filled,\n      'cost': cost,\n      'remaining': undefined,\n      'trades': undefined,\n      'fee': fee,\n      'info': order,\n      'average': undefined\n    });\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetOrdersId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async fetchOrdersByState(state = undefined, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (state !== undefined) {\n      request['state'] = state;\n    }\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pair'] = market['id'];\n    }\n\n    const response = await this.privateGetListorders(this.extend(request, params));\n    const orders = this.safeValue(response, 'orders', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByState(undefined, symbol, since, limit, params);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByState('PENDING', symbol, since, limit, params);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByState('COMPLETE', symbol, since, limit, params);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.safeInteger(ticker, 'timestamp');\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeNumber(ticker, 'last_trade');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': undefined,\n      'low': undefined,\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeNumber(ticker, 'rolling_24_hour_volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickers(params);\n    const tickers = this.indexBy(response['tickers'], 'pair');\n    const ids = Object.keys(tickers);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = this.safeMarket(id);\n      const symbol = market['symbol'];\n      const ticker = tickers[id];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    return this.parseTicker(response, market);\n  }\n\n  parseTrade(trade, market) {\n    // For public trade data (is_buy === True) indicates 'buy' side but for private trade data\n    // is_buy indicates maker or taker. The value of \"type\" (ASK/BID) indicate sell/buy side.\n    // Private trade data includes ID field which public trade data does not.\n    const orderId = this.safeString(trade, 'order_id');\n    let takerOrMaker = undefined;\n    let side = undefined;\n\n    if (orderId !== undefined) {\n      const type = this.safeString(trade, 'type');\n\n      if (type === 'ASK' || type === 'SELL') {\n        side = 'sell';\n      } else if (type === 'BID' || type === 'BUY') {\n        side = 'buy';\n      }\n\n      if (side === 'sell' && trade['is_buy']) {\n        takerOrMaker = 'maker';\n      } else if (side === 'buy' && !trade['is_buy']) {\n        takerOrMaker = 'maker';\n      } else {\n        takerOrMaker = 'taker';\n      }\n    } else {\n      side = trade['is_buy'] ? 'buy' : 'sell';\n    }\n\n    const feeBase = this.safeNumber(trade, 'fee_base');\n    const feeCounter = this.safeNumber(trade, 'fee_counter');\n    let feeCurrency = undefined;\n    let feeCost = undefined;\n\n    if (feeBase !== undefined) {\n      if (feeBase !== 0.0) {\n        feeCurrency = market['base'];\n        feeCost = feeBase;\n      }\n    } else if (feeCounter !== undefined) {\n      if (feeCounter !== 0.0) {\n        feeCurrency = market['quote'];\n        feeCost = feeCounter;\n      }\n    }\n\n    const timestamp = this.safeInteger(trade, 'timestamp');\n    return {\n      'info': trade,\n      'id': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': market['symbol'],\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': this.safeNumber(trade, 'price'),\n      'amount': this.safeNumber(trade, 'volume'),\n      // Does not include potential fee costs\n      'cost': this.safeNumber(trade, 'counter'),\n      'fee': {\n        'cost': feeCost,\n        'currency': feeCurrency\n      }\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n\n    if (since !== undefined) {\n      request['since'] = since;\n    }\n\n    const response = await this.publicGetTrades(this.extend(request, params));\n    const trades = this.safeValue(response, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n\n    if (since !== undefined) {\n      request['since'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.privateGetListtrades(this.extend(request, params));\n    const trades = this.safeValue(response, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchTradingFees(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetFeeInfo(params);\n    return {\n      'info': response,\n      'maker': this.safeNumber(response, 'maker_fee'),\n      'taker': this.safeNumber(response, 'taker_fee')\n    };\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    let method = 'privatePost';\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n\n    if (type === 'market') {\n      method += 'Marketorder';\n      request['type'] = side.toUpperCase(); // todo add createMarketBuyOrderRequires price logic as it is implemented in the other exchanges\n\n      if (side === 'buy') {\n        request['counter_volume'] = parseFloat(this.amountToPrecision(symbol, amount));\n      } else {\n        request['base_volume'] = parseFloat(this.amountToPrecision(symbol, amount));\n      }\n    } else {\n      method += 'Postorder';\n      request['volume'] = parseFloat(this.amountToPrecision(symbol, amount));\n      request['price'] = parseFloat(this.priceToPrecision(symbol, price));\n      request['type'] = side === 'buy' ? 'BID' : 'ASK';\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['order_id']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    return await this.privatePostStoporder(this.extend(request, params));\n  }\n\n  async fetchLedgerByEntries(code = undefined, entry = -1, limit = 1, params = {}) {\n    // by default without entry number or limit number, return most recent entry\n    const since = undefined;\n    const request = {\n      'min_row': entry,\n      'max_row': this.sum(entry, limit)\n    };\n    return await this.fetchLedger(code, since, limit, this.extend(request, params));\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadAccounts();\n    let currency = undefined;\n    let id = this.safeString(params, 'id'); // account id\n\n    let min_row = this.safeValue(params, 'min_row');\n    let max_row = this.safeValue(params, 'max_row');\n\n    if (id === undefined) {\n      if (code === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchLedger() requires a currency code argument if no account id specified in params');\n      }\n\n      currency = this.currency(code);\n      const accountsByCurrencyCode = this.indexBy(this.accounts, 'currency');\n      const account = this.safeValue(accountsByCurrencyCode, code);\n\n      if (account === undefined) {\n        throw new ExchangeError(this.id + ' fetchLedger() could not find account id for ' + code);\n      }\n\n      id = account['id'];\n    }\n\n    if (min_row === undefined && max_row === undefined) {\n      max_row = 0; // Default to most recent transactions\n\n      min_row = -1000; // Maximum number of records supported\n    } else if (min_row === undefined || max_row === undefined) {\n      throw new ExchangeError(this.id + \" fetchLedger() require both params 'max_row' and 'min_row' or neither to be defined\");\n    }\n\n    if (limit !== undefined && max_row - min_row > limit) {\n      if (max_row <= 0) {\n        min_row = max_row - limit;\n      } else if (min_row > 0) {\n        max_row = min_row + limit;\n      }\n    }\n\n    if (max_row - min_row > 1000) {\n      throw new ExchangeError(this.id + \" fetchLedger() requires the params 'max_row' - 'min_row' <= 1000\");\n    }\n\n    const request = {\n      'id': id,\n      'min_row': min_row,\n      'max_row': max_row\n    };\n    const response = await this.privateGetAccountsIdTransactions(this.extend(params, request));\n    const entries = this.safeValue(response, 'transactions', []);\n    return this.parseLedger(entries, currency, since, limit);\n  }\n\n  parseLedgerComment(comment) {\n    const words = comment.split(' ');\n    const types = {\n      'Withdrawal': 'fee',\n      'Trading': 'fee',\n      'Payment': 'transaction',\n      'Sent': 'transaction',\n      'Deposit': 'transaction',\n      'Received': 'transaction',\n      'Released': 'released',\n      'Reserved': 'reserved',\n      'Sold': 'trade',\n      'Bought': 'trade',\n      'Failure': 'failed'\n    };\n    let referenceId = undefined;\n    const firstWord = this.safeString(words, 0);\n    const thirdWord = this.safeString(words, 2);\n    const fourthWord = this.safeString(words, 3);\n    let type = this.safeString(types, firstWord, undefined);\n\n    if (type === undefined && thirdWord === 'fee') {\n      type = 'fee';\n    }\n\n    if (type === 'reserved' && fourthWord === 'order') {\n      referenceId = this.safeString(words, 4);\n    }\n\n    return {\n      'type': type,\n      'referenceId': referenceId\n    };\n  }\n\n  parseLedgerEntry(entry, currency = undefined) {\n    // const details = this.safeValue (entry, 'details', {});\n    const id = this.safeString(entry, 'row_index');\n    const account_id = this.safeString(entry, 'account_id');\n    const timestamp = this.safeValue(entry, 'timestamp');\n    const currencyId = this.safeString(entry, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const available_delta = this.safeNumber(entry, 'available_delta');\n    const balance_delta = this.safeNumber(entry, 'balance_delta');\n    const after = this.safeNumber(entry, 'balance');\n    const comment = this.safeString(entry, 'description');\n    let before = after;\n    let amount = 0.0;\n    const result = this.parseLedgerComment(comment);\n    const type = result['type'];\n    const referenceId = result['referenceId'];\n    let direction = undefined;\n    let status = undefined;\n\n    if (balance_delta !== 0.0) {\n      before = after - balance_delta; // TODO: float precision\n\n      status = 'ok';\n      amount = Math.abs(balance_delta);\n    } else if (available_delta < 0.0) {\n      status = 'pending';\n      amount = Math.abs(available_delta);\n    } else if (available_delta > 0.0) {\n      status = 'canceled';\n      amount = Math.abs(available_delta);\n    }\n\n    if (balance_delta > 0 || available_delta > 0) {\n      direction = 'in';\n    } else if (balance_delta < 0 || available_delta < 0) {\n      direction = 'out';\n    }\n\n    return {\n      'id': id,\n      'direction': direction,\n      'account': account_id,\n      'referenceId': referenceId,\n      'referenceAccount': undefined,\n      'type': type,\n      'currency': code,\n      'amount': amount,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'before': before,\n      'after': after,\n      'status': status,\n      'fee': undefined,\n      'info': entry\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (Object.keys(query).length) {\n      url += '?' + this.urlencode(query);\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const auth = this.stringToBase64(this.apiKey + ':' + this.secret);\n      headers = {\n        'Authorization': 'Basic ' + this.decode(auth)\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('error' in response) {\n      throw new ExchangeError(this.id + ' ' + this.json(response));\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/luno.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","Precise","module","exports","luno","describe","deepExtend","fetchMarkets","params","response","exchangeGetMarkets","result","markets","safeValue","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","status","active","precision","safeInteger","push","safeNumber","undefined","fetchAccounts","privateGetBalance","wallets","account","accountId","currencyId","code","fetchBalance","loadMarkets","wallet","reserved","unconfirmed","balance","reservedUnconfirmed","stringAdd","balanceUnconfirmed","parseBalance","fetchOrderBook","limit","method","request","marketId","extend","timestamp","parseOrderBook","parseOrderStatus","statuses","parseOrder","order","side","orderType","safeSymbol","price","amount","quoteFee","baseFee","filled","cost","fee","safeOrder","iso8601","fetchOrder","privateGetOrdersId","fetchOrdersByState","state","since","privateGetListorders","orders","parseOrders","fetchOrders","fetchOpenOrders","fetchClosedOrders","parseTicker","ticker","last","fetchTickers","symbols","publicGetTickers","tickers","indexBy","ids","Object","keys","safeMarket","filterByArray","fetchTicker","publicGetTicker","parseTrade","trade","orderId","takerOrMaker","type","feeBase","feeCounter","feeCurrency","feeCost","fetchTrades","publicGetTrades","trades","parseTrades","fetchMyTrades","privateGetListtrades","fetchTradingFees","privateGetFeeInfo","createOrder","toUpperCase","parseFloat","amountToPrecision","priceToPrecision","cancelOrder","privatePostStoporder","fetchLedgerByEntries","entry","sum","fetchLedger","loadAccounts","currency","min_row","max_row","accountsByCurrencyCode","accounts","privateGetAccountsIdTransactions","entries","parseLedger","parseLedgerComment","comment","words","split","types","referenceId","firstWord","thirdWord","fourthWord","parseLedgerEntry","account_id","available_delta","balance_delta","after","before","direction","Math","abs","sign","path","api","headers","body","url","urls","version","implodeParams","query","omit","extractParams","urlencode","checkRequiredCredentials","auth","stringToBase64","apiKey","secret","decode","fetch2","json"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class luno extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'luno',\n            'name': 'luno',\n            'countries': [ 'GB', 'SG', 'ZA' ],\n            'rateLimit': 1000,\n            'version': '1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchAccounts': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTradingFee': true,\n                'fetchTradingFees': true,\n            },\n            'urls': {\n                'referral': 'https://www.luno.com/invite/44893A',\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg',\n                'api': {\n                    'public': 'https://api.luno.com/api',\n                    'private': 'https://api.luno.com/api',\n                    'exchange': 'https://api.luno.com/api/exchange',\n                },\n                'www': 'https://www.luno.com',\n                'doc': [\n                    'https://www.luno.com/en/api',\n                    'https://npmjs.org/package/bitx',\n                    'https://github.com/bausmeier/node-bitx',\n                ],\n            },\n            'api': {\n                'exchange': {\n                    'get': [\n                        'markets',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'orderbook',\n                        'orderbook_top',\n                        'ticker',\n                        'tickers',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts/{id}/pending',\n                        'accounts/{id}/transactions',\n                        'balance',\n                        'beneficiaries',\n                        'fee_info',\n                        'funding_address',\n                        'listorders',\n                        'listtrades',\n                        'orders/{id}',\n                        'quotes/{id}',\n                        'withdrawals',\n                        'withdrawals/{id}',\n                        'transfers',\n                        // GET /api/exchange/2/listorders\n                        // GET /api/exchange/2/orders/{id}\n                        // GET /api/exchange/3/order\n                    ],\n                    'post': [\n                        'accounts',\n                        'accounts/{id}/name',\n                        'postorder',\n                        'marketorder',\n                        'stoporder',\n                        'funding_address',\n                        'withdrawals',\n                        'send',\n                        'quotes',\n                        'oauth2/grant',\n                    ],\n                    'put': [\n                        'accounts/{id}/name',\n                        'quotes/{id}',\n                    ],\n                    'delete': [\n                        'quotes/{id}',\n                        'withdrawals/{id}',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.exchangeGetMarkets (params);\n        //\n        //     {\n        //         \"markets\":[\n        //             {\n        //                 \"market_id\":\"BCHXBT\",\n        //                 \"trading_status\":\"ACTIVE\",\n        //                 \"base_currency\":\"BCH\",\n        //                 \"counter_currency\":\"XBT\",\n        //                 \"min_volume\":\"0.01\",\n        //                 \"max_volume\":\"100.00\",\n        //                 \"volume_scale\":2,\n        //                 \"min_price\":\"0.0001\",\n        //                 \"max_price\":\"1.00\",\n        //                 \"price_scale\":6,\n        //                 \"fee_scale\":8,\n        //             },\n        //         ]\n        //     }\n        //\n        const result = [];\n        const markets = this.safeValue (response, 'markets', []);\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'market_id');\n            const baseId = this.safeString (market, 'base_currency');\n            const quoteId = this.safeString (market, 'counter_currency');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const status = this.safeString (market, 'trading_status');\n            const active = (status === 'ACTIVE');\n            const precision = {\n                'amount': this.safeInteger (market, 'volume_scale'),\n                'price': this.safeInteger (market, 'price_scale'),\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (market, 'min_volume'),\n                        'max': this.safeNumber (market, 'max_volume'),\n                    },\n                    'price': {\n                        'min': this.safeNumber (market, 'min_price'),\n                        'max': this.safeNumber (market, 'max_price'),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchAccounts (params = {}) {\n        const response = await this.privateGetBalance (params);\n        const wallets = this.safeValue (response, 'balance', []);\n        const result = [];\n        for (let i = 0; i < wallets.length; i++) {\n            const account = wallets[i];\n            const accountId = this.safeString (account, 'account_id');\n            const currencyId = this.safeString (account, 'asset');\n            const code = this.safeCurrencyCode (currencyId);\n            result.push ({\n                'id': accountId,\n                'type': undefined,\n                'currency': code,\n                'info': account,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalance (params);\n        //\n        //     {\n        //         'balance': [\n        //             {'account_id': '119...1336','asset': 'XBT','balance': '0.00','reserved': '0.00','unconfirmed': '0.00'},\n        //             {'account_id': '66...289','asset': 'XBT','balance': '0.00','reserved': '0.00','unconfirmed': '0.00'},\n        //             {'account_id': '718...5300','asset': 'ETH','balance': '0.00','reserved': '0.00','unconfirmed': '0.00'},\n        //             {'account_id': '818...7072','asset': 'ZAR','balance': '0.001417','reserved': '0.00','unconfirmed': '0.00'}]}\n        //         ]\n        //     }\n        //\n        const wallets = this.safeValue (response, 'balance', []);\n        const result = {\n            'info': response,\n            'timestamp': undefined,\n            'datetime': undefined,\n        };\n        for (let i = 0; i < wallets.length; i++) {\n            const wallet = wallets[i];\n            const currencyId = this.safeString (wallet, 'asset');\n            const code = this.safeCurrencyCode (currencyId);\n            const reserved = this.safeString (wallet, 'reserved');\n            const unconfirmed = this.safeString (wallet, 'unconfirmed');\n            const balance = this.safeString (wallet, 'balance');\n            const reservedUnconfirmed = Precise.stringAdd (reserved, unconfirmed);\n            const balanceUnconfirmed = Precise.stringAdd (balance, unconfirmed);\n            if (code in result) {\n                result[code]['used'] = Precise.stringAdd (result[code]['used'], reservedUnconfirmed);\n                result[code]['total'] = Precise.stringAdd (result[code]['total'], balanceUnconfirmed);\n            } else {\n                const account = this.account ();\n                account['used'] = reservedUnconfirmed;\n                account['total'] = balanceUnconfirmed;\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = 'publicGetOrderbook';\n        if (limit !== undefined) {\n            if (limit <= 100) {\n                method += 'Top'; // get just the top of the orderbook when limit is low\n            }\n        }\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const response = await this[method] (this.extend (request, params));\n        const timestamp = this.safeInteger (response, 'timestamp');\n        return this.parseOrderBook (response, symbol, timestamp, 'bids', 'asks', 'price', 'volume');\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            // todo add other statuses\n            'PENDING': 'open',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"base\": \"string\",\n        //         \"completed_timestamp\": \"string\",\n        //         \"counter\": \"string\",\n        //         \"creation_timestamp\": \"string\",\n        //         \"expiration_timestamp\": \"string\",\n        //         \"fee_base\": \"string\",\n        //         \"fee_counter\": \"string\",\n        //         \"limit_price\": \"string\",\n        //         \"limit_volume\": \"string\",\n        //         \"order_id\": \"string\",\n        //         \"pair\": \"string\",\n        //         \"state\": \"PENDING\",\n        //         \"type\": \"BID\"\n        //     }\n        //\n        const timestamp = this.safeInteger (order, 'creation_timestamp');\n        let status = this.parseOrderStatus (this.safeString (order, 'state'));\n        status = (status === 'open') ? status : status;\n        let side = undefined;\n        const orderType = this.safeString (order, 'type');\n        if ((orderType === 'ASK') || (orderType === 'SELL')) {\n            side = 'sell';\n        } else if ((orderType === 'BID') || (orderType === 'BUY')) {\n            side = 'buy';\n        }\n        const marketId = this.safeString (order, 'pair');\n        const symbol = this.safeSymbol (marketId, market);\n        const price = this.safeNumber (order, 'limit_price');\n        const amount = this.safeNumber (order, 'limit_volume');\n        const quoteFee = this.safeNumber (order, 'fee_counter');\n        const baseFee = this.safeNumber (order, 'fee_base');\n        const filled = this.safeNumber (order, 'base');\n        const cost = this.safeNumber (order, 'counter');\n        const fee = { 'currency': undefined };\n        if (quoteFee) {\n            fee['cost'] = quoteFee;\n            if (market !== undefined) {\n                fee['currency'] = market['quote'];\n            }\n        } else {\n            fee['cost'] = baseFee;\n            if (market !== undefined) {\n                fee['currency'] = market['base'];\n            }\n        }\n        const id = this.safeString (order, 'order_id');\n        return this.safeOrder ({\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': undefined,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'filled': filled,\n            'cost': cost,\n            'remaining': undefined,\n            'trades': undefined,\n            'fee': fee,\n            'info': order,\n            'average': undefined,\n        });\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        const response = await this.privateGetOrdersId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async fetchOrdersByState (state = undefined, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (state !== undefined) {\n            request['state'] = state;\n        }\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n        }\n        const response = await this.privateGetListorders (this.extend (request, params));\n        const orders = this.safeValue (response, 'orders', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByState (undefined, symbol, since, limit, params);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByState ('PENDING', symbol, since, limit, params);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByState ('COMPLETE', symbol, since, limit, params);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.safeInteger (ticker, 'timestamp');\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeNumber (ticker, 'last_trade');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeNumber (ticker, 'rolling_24_hour_volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickers (params);\n        const tickers = this.indexBy (response['tickers'], 'pair');\n        const ids = Object.keys (tickers);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = this.safeMarket (id);\n            const symbol = market['symbol'];\n            const ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market) {\n        // For public trade data (is_buy === True) indicates 'buy' side but for private trade data\n        // is_buy indicates maker or taker. The value of \"type\" (ASK/BID) indicate sell/buy side.\n        // Private trade data includes ID field which public trade data does not.\n        const orderId = this.safeString (trade, 'order_id');\n        let takerOrMaker = undefined;\n        let side = undefined;\n        if (orderId !== undefined) {\n            const type = this.safeString (trade, 'type');\n            if ((type === 'ASK') || (type === 'SELL')) {\n                side = 'sell';\n            } else if ((type === 'BID') || (type === 'BUY')) {\n                side = 'buy';\n            }\n            if (side === 'sell' && trade['is_buy']) {\n                takerOrMaker = 'maker';\n            } else if (side === 'buy' && !trade['is_buy']) {\n                takerOrMaker = 'maker';\n            } else {\n                takerOrMaker = 'taker';\n            }\n        } else {\n            side = trade['is_buy'] ? 'buy' : 'sell';\n        }\n        const feeBase = this.safeNumber (trade, 'fee_base');\n        const feeCounter = this.safeNumber (trade, 'fee_counter');\n        let feeCurrency = undefined;\n        let feeCost = undefined;\n        if (feeBase !== undefined) {\n            if (feeBase !== 0.0) {\n                feeCurrency = market['base'];\n                feeCost = feeBase;\n            }\n        } else if (feeCounter !== undefined) {\n            if (feeCounter !== 0.0) {\n                feeCurrency = market['quote'];\n                feeCost = feeCounter;\n            }\n        }\n        const timestamp = this.safeInteger (trade, 'timestamp');\n        return {\n            'info': trade,\n            'id': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': this.safeNumber (trade, 'price'),\n            'amount': this.safeNumber (trade, 'volume'),\n            // Does not include potential fee costs\n            'cost': this.safeNumber (trade, 'counter'),\n            'fee': {\n                'cost': feeCost,\n                'currency': feeCurrency,\n            },\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        if (since !== undefined) {\n            request['since'] = since;\n        }\n        const response = await this.publicGetTrades (this.extend (request, params));\n        const trades = this.safeValue (response, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        if (since !== undefined) {\n            request['since'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.privateGetListtrades (this.extend (request, params));\n        const trades = this.safeValue (response, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetFeeInfo (params);\n        return {\n            'info': response,\n            'maker': this.safeNumber (response, 'maker_fee'),\n            'taker': this.safeNumber (response, 'taker_fee'),\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = 'privatePost';\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        if (type === 'market') {\n            method += 'Marketorder';\n            request['type'] = side.toUpperCase ();\n            // todo add createMarketBuyOrderRequires price logic as it is implemented in the other exchanges\n            if (side === 'buy') {\n                request['counter_volume'] = parseFloat (this.amountToPrecision (symbol, amount));\n            } else {\n                request['base_volume'] = parseFloat (this.amountToPrecision (symbol, amount));\n            }\n        } else {\n            method += 'Postorder';\n            request['volume'] = parseFloat (this.amountToPrecision (symbol, amount));\n            request['price'] = parseFloat (this.priceToPrecision (symbol, price));\n            request['type'] = (side === 'buy') ? 'BID' : 'ASK';\n        }\n        const response = await this[method] (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['order_id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        return await this.privatePostStoporder (this.extend (request, params));\n    }\n\n    async fetchLedgerByEntries (code = undefined, entry = -1, limit = 1, params = {}) {\n        // by default without entry number or limit number, return most recent entry\n        const since = undefined;\n        const request = {\n            'min_row': entry,\n            'max_row': this.sum (entry, limit),\n        };\n        return await this.fetchLedger (code, since, limit, this.extend (request, params));\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        let currency = undefined;\n        let id = this.safeString (params, 'id'); // account id\n        let min_row = this.safeValue (params, 'min_row');\n        let max_row = this.safeValue (params, 'max_row');\n        if (id === undefined) {\n            if (code === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchLedger() requires a currency code argument if no account id specified in params');\n            }\n            currency = this.currency (code);\n            const accountsByCurrencyCode = this.indexBy (this.accounts, 'currency');\n            const account = this.safeValue (accountsByCurrencyCode, code);\n            if (account === undefined) {\n                throw new ExchangeError (this.id + ' fetchLedger() could not find account id for ' + code);\n            }\n            id = account['id'];\n        }\n        if (min_row === undefined && max_row === undefined) {\n            max_row = 0; // Default to most recent transactions\n            min_row = -1000; // Maximum number of records supported\n        } else if (min_row === undefined || max_row === undefined) {\n            throw new ExchangeError (this.id + \" fetchLedger() require both params 'max_row' and 'min_row' or neither to be defined\");\n        }\n        if (limit !== undefined && max_row - min_row > limit) {\n            if (max_row <= 0) {\n                min_row = max_row - limit;\n            } else if (min_row > 0) {\n                max_row = min_row + limit;\n            }\n        }\n        if (max_row - min_row > 1000) {\n            throw new ExchangeError (this.id + \" fetchLedger() requires the params 'max_row' - 'min_row' <= 1000\");\n        }\n        const request = {\n            'id': id,\n            'min_row': min_row,\n            'max_row': max_row,\n        };\n        const response = await this.privateGetAccountsIdTransactions (this.extend (params, request));\n        const entries = this.safeValue (response, 'transactions', []);\n        return this.parseLedger (entries, currency, since, limit);\n    }\n\n    parseLedgerComment (comment) {\n        const words = comment.split (' ');\n        const types = {\n            'Withdrawal': 'fee',\n            'Trading': 'fee',\n            'Payment': 'transaction',\n            'Sent': 'transaction',\n            'Deposit': 'transaction',\n            'Received': 'transaction',\n            'Released': 'released',\n            'Reserved': 'reserved',\n            'Sold': 'trade',\n            'Bought': 'trade',\n            'Failure': 'failed',\n        };\n        let referenceId = undefined;\n        const firstWord = this.safeString (words, 0);\n        const thirdWord = this.safeString (words, 2);\n        const fourthWord = this.safeString (words, 3);\n        let type = this.safeString (types, firstWord, undefined);\n        if ((type === undefined) && (thirdWord === 'fee')) {\n            type = 'fee';\n        }\n        if ((type === 'reserved') && (fourthWord === 'order')) {\n            referenceId = this.safeString (words, 4);\n        }\n        return {\n            'type': type,\n            'referenceId': referenceId,\n        };\n    }\n\n    parseLedgerEntry (entry, currency = undefined) {\n        // const details = this.safeValue (entry, 'details', {});\n        const id = this.safeString (entry, 'row_index');\n        const account_id = this.safeString (entry, 'account_id');\n        const timestamp = this.safeValue (entry, 'timestamp');\n        const currencyId = this.safeString (entry, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const available_delta = this.safeNumber (entry, 'available_delta');\n        const balance_delta = this.safeNumber (entry, 'balance_delta');\n        const after = this.safeNumber (entry, 'balance');\n        const comment = this.safeString (entry, 'description');\n        let before = after;\n        let amount = 0.0;\n        const result = this.parseLedgerComment (comment);\n        const type = result['type'];\n        const referenceId = result['referenceId'];\n        let direction = undefined;\n        let status = undefined;\n        if (balance_delta !== 0.0) {\n            before = after - balance_delta; // TODO: float precision\n            status = 'ok';\n            amount = Math.abs (balance_delta);\n        } else if (available_delta < 0.0) {\n            status = 'pending';\n            amount = Math.abs (available_delta);\n        } else if (available_delta > 0.0) {\n            status = 'canceled';\n            amount = Math.abs (available_delta);\n        }\n        if (balance_delta > 0 || available_delta > 0) {\n            direction = 'in';\n        } else if (balance_delta < 0 || available_delta < 0) {\n            direction = 'out';\n        }\n        return {\n            'id': id,\n            'direction': direction,\n            'account': account_id,\n            'referenceId': referenceId,\n            'referenceAccount': undefined,\n            'type': type,\n            'currency': code,\n            'amount': amount,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'before': before,\n            'after': after,\n            'status': status,\n            'fee': undefined,\n            'info': entry,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (Object.keys (query).length) {\n            url += '?' + this.urlencode (query);\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const auth = this.stringToBase64 (this.apiKey + ':' + this.secret);\n            headers = {\n                'Authorization': 'Basic ' + this.decode (auth),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response) {\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}