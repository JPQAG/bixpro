{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadRequest,\n  AuthenticationError,\n  NetworkError,\n  ArgumentsRequired,\n  OrderNotFound,\n  InsufficientFunds\n} = require('./base/errors');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class hollaex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'hollaex',\n      'name': 'HollaEx',\n      'countries': ['KR'],\n      'rateLimit': 333,\n      'version': 'v2',\n      'has': {\n        'CORS': false,\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createLimitBuyOrder': true,\n        'createLimitSellOrder': true,\n        'createMarketBuyOrder': true,\n        'createMarketSellOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': 'emulated',\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrder': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderBooks': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTransactions': false,\n        'fetchWithdrawals': true,\n        'withdraw': true,\n        'fetchDepositAddresses': true\n      },\n      'timeframes': {\n        '1h': '1h',\n        '1d': '1d'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/75841031-ca375180-5ddd-11ea-8417-b975674c23cb.jpg',\n        'api': 'https://api.hollaex.com',\n        'www': 'https://hollaex.com',\n        'doc': 'https://apidocs.hollaex.com',\n        'referral': 'https://pro.hollaex.com/signup?affiliation_code=QSWA6G'\n      },\n      'precisionMode': TICK_SIZE,\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true\n      },\n      'api': {\n        'public': {\n          'get': ['health', 'constants', 'kit', 'tiers', 'ticker', 'tickers', 'orderbook', 'orderbooks', 'trades', 'chart', 'charts', // TradingView\n          'udf/config', 'udf/history', 'udf/symbols']\n        },\n        'private': {\n          'get': ['user', 'user/balance', 'user/deposits', 'user/withdrawals', 'user/withdrawal/fee', 'user/trades', 'orders', 'orders/{order_id}'],\n          'post': ['user/request-withdrawal', 'order'],\n          'delete': ['order/all', 'order']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': 0.001,\n          'maker': 0.001\n        }\n      },\n      'exceptions': {\n        'broad': {\n          'Invalid token': AuthenticationError,\n          'Order not found': OrderNotFound,\n          'Insufficient balance': InsufficientFunds\n        },\n        'exact': {\n          '400': BadRequest,\n          '403': AuthenticationError,\n          '404': BadRequest,\n          '405': BadRequest,\n          '410': BadRequest,\n          '429': BadRequest,\n          '500': NetworkError,\n          '503': NetworkError\n        }\n      },\n      'options': {\n        // how many seconds before the authenticated request expires\n        'api-expires': parseInt(this.timeout / 1000)\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetConstants(params); //\n    //     {\n    //         coins: {\n    //             xmr: {\n    //                 id: 7,\n    //                 fullname: \"Monero\",\n    //                 symbol: \"xmr\",\n    //                 active: true,\n    //                 allow_deposit: true,\n    //                 allow_withdrawal: true,\n    //                 withdrawal_fee: 0.02,\n    //                 min: 0.001,\n    //                 max: 100000,\n    //                 increment_unit: 0.001,\n    //                 deposit_limits: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0 },\n    //                 withdrawal_limits: { '1': 10, '2': 15, '3': 100, '4': 100, '5': 200, '6': 300, '7': 350, '8': 400, '9': 500, '10': -1 },\n    //                 created_at: \"2019-12-09T07:14:02.720Z\",\n    //                 updated_at: \"2020-01-16T12:12:53.162Z\"\n    //             },\n    //             // ...\n    //         },\n    //         pairs: {\n    //             'btc-usdt': {\n    //                 id: 2,\n    //                 name: \"btc-usdt\",\n    //                 pair_base: \"btc\",\n    //                 pair_2: \"usdt\",\n    //                 taker_fees: { '1': 0.3, '2': 0.25, '3': 0.2, '4': 0.18, '5': 0.1, '6': 0.09, '7': 0.08, '8': 0.06, '9': 0.04, '10': 0 },\n    //                 maker_fees: { '1': 0.1, '2': 0.08, '3': 0.05, '4': 0.03, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0 },\n    //                 min_size: 0.0001,\n    //                 max_size: 1000,\n    //                 min_price: 100,\n    //                 max_price: 100000,\n    //                 increment_size: 0.0001,\n    //                 increment_price: 0.05,\n    //                 active: true,\n    //                 created_at: \"2019-12-09T07:15:54.537Z\",\n    //                 updated_at: \"2019-12-09T07:15:54.537Z\"\n    //             },\n    //         },\n    //         config: { tiers: 10 },\n    //         status: true\n    //     }\n    //\n\n    const pairs = this.safeValue(response, 'pairs', {});\n    const keys = Object.keys(pairs);\n    const result = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const market = pairs[key];\n      const id = this.safeString(market, 'name');\n      const baseId = this.safeString(market, 'pair_base');\n      const quoteId = this.safeString(market, 'pair_2');\n      const base = this.commonCurrencyCode(baseId.toUpperCase());\n      const quote = this.commonCurrencyCode(quoteId.toUpperCase());\n      const symbol = base + '/' + quote;\n      const active = this.safeValue(market, 'active');\n      const maker = this.fees['trading']['maker'];\n      const taker = this.fees['trading']['taker'];\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'precision': {\n          'price': this.safeNumber(market, 'increment_price'),\n          'amount': this.safeNumber(market, 'increment_size')\n        },\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(market, 'min_size'),\n            'max': this.safeNumber(market, 'max_size')\n          },\n          'price': {\n            'min': this.safeNumber(market, 'min_price'),\n            'max': this.safeNumber(market, 'max_price')\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'taker': taker,\n        'maker': maker,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetConstants(params);\n    const coins = this.safeValue(response, 'coins', {});\n    const keys = Object.keys(coins);\n    const result = {};\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const currency = coins[key];\n      const id = this.safeString(currency, 'symbol');\n      const numericId = this.safeInteger(currency, 'id');\n      const code = this.safeCurrencyCode(id);\n      const name = this.safeString(currency, 'fullname');\n      const active = this.safeValue(currency, 'active');\n      const fee = this.safeNumber(currency, 'withdrawal_fee');\n      const precision = this.safeNumber(currency, 'increment_unit');\n      const withdrawalLimits = this.safeValue(currency, 'withdrawal_limits', []);\n      result[code] = {\n        'id': id,\n        'numericId': numericId,\n        'code': code,\n        'info': currency,\n        'name': name,\n        'active': active,\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(currency, 'min'),\n            'max': this.safeNumber(currency, 'max')\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': this.safeValue(withdrawalLimits, 0)\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchOrderBooks(symbols = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetOrderbooks(params);\n    const result = {};\n    const marketIds = Object.keys(response);\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      const orderbook = response[marketId];\n      const symbol = this.safeSymbol(marketId, undefined, '-');\n      const timestamp = this.parse8601(this.safeString(orderbook, 'timestamp'));\n      result[symbol] = this.parseOrderBook(response[marketId], timestamp);\n    }\n\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const marketId = this.marketId(symbol);\n    const request = {\n      'symbol': marketId\n    };\n    const response = await this.publicGetOrderbooks(this.extend(request, params)); //\n    //     {\n    //         \"btc-usdt\": {\n    //             \"bids\": [\n    //                 [ 8836.4, 1.022 ],\n    //                 [ 8800, 0.0668 ],\n    //                 [ 8797.75, 0.2398 ],\n    //             ],\n    //             \"asks\": [\n    //                 [ 8839.35, 1.5334 ],\n    //                 [ 8852.6, 0.0579 ],\n    //                 [ 8860.45, 0.1815 ],\n    //             ],\n    //             \"timestamp\": \"2020-03-03T02:27:25.147Z\"\n    //         },\n    //         \"eth-usdt\": {},\n    //         // ...\n    //     }\n    //\n\n    const orderbook = this.safeValue(response, marketId);\n    const timestamp = this.parse8601(this.safeString(orderbook, 'timestamp'));\n    return this.parseOrderBook(orderbook, symbol, timestamp);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTicker(this.extend(request, params)); //\n    //     {\n    //         open: 8615.55,\n    //         close: 8841.05,\n    //         high: 8921.1,\n    //         low: 8607,\n    //         last: 8841.05,\n    //         volume: 20.2802,\n    //         timestamp: '2020-03-03T03:11:18.964Z'\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTickers(this.extend(params)); //\n    //     {\n    //         \"bch-usdt\": {\n    //             \"time\": \"2020-03-02T04:29:45.011Z\",\n    //             \"open\": 341.65,\n    //             \"close\":337.9,\n    //             \"high\":341.65,\n    //             \"low\":337.3,\n    //             \"last\":337.9,\n    //             \"volume\":0.054,\n    //             \"symbol\":\"bch-usdt\"\n    //         },\n    //         // ...\n    //     }\n    //\n\n    return this.parseTickers(response, symbols);\n  }\n\n  parseTickers(response, symbols = undefined, params = {}) {\n    const result = {};\n    const keys = Object.keys(response);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const ticker = response[key];\n      const marketId = this.safeString(ticker, 'symbol', key);\n      const market = this.safeMarket(marketId, undefined, '-');\n      const symbol = market['symbol'];\n      result[symbol] = this.extend(this.parseTicker(ticker, market), params);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         open: 8615.55,\n    //         close: 8841.05,\n    //         high: 8921.1,\n    //         low: 8607,\n    //         last: 8841.05,\n    //         volume: 20.2802,\n    //         timestamp: '2020-03-03T03:11:18.964Z',\n    //     }\n    //\n    // fetchTickers\n    //\n    //     {\n    //         \"time\": \"2020-03-02T04:29:45.011Z\",\n    //         \"open\": 341.65,\n    //         \"close\": 337.9,\n    //         \"high\": 341.65,\n    //         \"low\": 337.3,\n    //         \"last\": 337.9,\n    //         \"volume\": 0.054,\n    //         \"symbol\": \"bch-usdt\"\n    //     }\n    //\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const timestamp = this.parse8601(this.safeString2(ticker, 'time', 'timestamp'));\n    const close = this.safeNumber(ticker, 'close');\n    const result = {\n      'symbol': symbol,\n      'info': ticker,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': undefined,\n      'bidVolume': undefined,\n      'ask': undefined,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': this.safeNumber(ticker, 'open'),\n      'close': close,\n      'last': this.safeNumber(ticker, 'last', close),\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeNumber(ticker, 'volume'),\n      'quoteVolume': undefined\n    };\n    return result;\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params)); //\n    //     {\n    //         \"btc-usdt\": [\n    //             {\n    //                 \"size\": 0.5,\n    //                 \"price\": 8830,\n    //                 \"side\": \"buy\",\n    //                 \"timestamp\": \"2020-03-03T04:44:33.034Z\"\n    //             },\n    //             // ...\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, market['id'], []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"size\": 0.5,\n    //         \"price\": 8830,\n    //         \"side\": \"buy\",\n    //         \"timestamp\": \"2020-03-03T04:44:33.034Z\"\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"side\": \"buy\",\n    //         \"symbol\": \"eth-usdt\",\n    //         \"size\": 0.086,\n    //         \"price\": 226.19,\n    //         \"timestamp\": \"2020-03-03T08:03:55.459Z\",\n    //         \"fee\": 0.1\n    //     }\n    //\n    const marketId = this.safeString(trade, 'symbol');\n    market = this.safeMarket(marketId, market, '-');\n    const symbol = market['symbol'];\n    const datetime = this.safeString(trade, 'timestamp');\n    const timestamp = this.parse8601(datetime);\n    const side = this.safeString(trade, 'side');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'size');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    const feeCost = this.safeNumber(trade, 'fee');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      const quote = market['quote'];\n      const feeCurrencyCode = market !== undefined ? market['quote'] : quote;\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    return {\n      'info': trade,\n      'id': undefined,\n      'timestamp': timestamp,\n      'datetime': datetime,\n      'symbol': symbol,\n      'order': undefined,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1h', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'resolution': this.timeframes[timeframe]\n    };\n    const duration = this.parseTimeframe(timeframe);\n\n    if (since === undefined) {\n      if (limit === undefined) {\n        throw new ArgumentsRequired(this.id + \" fetchOHLCV() requires a 'since' or a 'limit' argument\");\n      } else {\n        const end = this.seconds();\n        const start = end - duration * limit;\n        request['to'] = end;\n        request['from'] = start;\n      }\n    } else {\n      if (limit === undefined) {\n        request['from'] = parseInt(since / 1000);\n        request['to'] = this.seconds();\n      } else {\n        const start = parseInt(since / 1000);\n        request['from'] = start;\n        request['to'] = this.sum(start, duration * limit);\n      }\n    }\n\n    const response = await this.publicGetChart(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"time\":\"2020-03-02T20:00:00.000Z\",\n    //             \"close\":8872.1,\n    //             \"high\":8872.1,\n    //             \"low\":8858.6,\n    //             \"open\":8858.6,\n    //             \"symbol\":\"btc-usdt\",\n    //             \"volume\":1.2922\n    //         },\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseOHLCV(response, market = undefined, timeframe = '1h', since = undefined, limit = undefined) {\n    //\n    //     {\n    //         \"time\":\"2020-03-02T20:00:00.000Z\",\n    //         \"close\":8872.1,\n    //         \"high\":8872.1,\n    //         \"low\":8858.6,\n    //         \"open\":8858.6,\n    //         \"symbol\":\"btc-usdt\",\n    //         \"volume\":1.2922\n    //     }\n    //\n    return [this.parse8601(this.safeString(response, 'time')), this.safeNumber(response, 'open'), this.safeNumber(response, 'high'), this.safeNumber(response, 'low'), this.safeNumber(response, 'close'), this.safeNumber(response, 'volume')];\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetUserBalance(params); //\n    //     {\n    //         \"updated_at\": \"2020-03-02T22:27:38.428Z\",\n    //         \"btc_balance\": 0,\n    //         \"btc_pending\": 0,\n    //         \"btc_available\": 0,\n    //         \"eth_balance\": 0,\n    //         \"eth_pending\": 0,\n    //         \"eth_available\": 0,\n    //         // ...\n    //     }\n    //\n\n    const timestamp = this.parse8601(this.safeString(response, 'updated_at'));\n    const result = {\n      'info': response,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp)\n    };\n    const currencyIds = Object.keys(this.currencies_by_id);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeString(response, currencyId + '_available');\n      account['total'] = this.safeString(response, currencyId + '_balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOpenOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privateGetOrdersOrderId(this.extend(request, params)); //\n    //     {\n    //         \"id\": \"string\",\n    //         \"side\": \"sell\",\n    //         \"symbol\": \"xht-usdt\",\n    //         \"size\": 0.1,\n    //         \"filled\": 0,\n    //         \"stop\": null,\n    //         \"fee\": 0,\n    //         \"fee_coin\": \"usdt\",\n    //         \"type\": \"limit\",\n    //         \"price\": 1.09,\n    //         \"status\": \"new\",\n    //         \"created_by\": 116,\n    //         \"created_at\": \"2021-02-17T02:32:38.910Z\",\n    //         \"updated_at\": \"2021-02-17T02:32:38.910Z\",\n    //         \"User\": {\n    //             \"id\": 116,\n    //             \"email\": \"fight@club.com\",\n    //             \"username\": \"narrator\",\n    //             \"exchange_id\": 176\n    //         }\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'open': true\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'filled'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privateGetOrders(this.extend(request, params)); //\n    //     {\n    //         \"count\": 1,\n    //         \"data\": [\n    //             {\n    //                 \"id\": \"string\",\n    //                 \"side\": \"sell\",\n    //                 \"symbol\": \"xht-usdt\",\n    //                 \"size\": 0.1,\n    //                 \"filled\": 0,\n    //                 \"stop\": null,\n    //                 \"fee\": 0,\n    //                 \"fee_coin\": \"usdt\",\n    //                 \"type\": \"limit\",\n    //                 \"price\": 1.09,\n    //                 \"status\": \"new\",\n    //                 \"created_by\": 116,\n    //                 \"created_at\": \"2021-02-17T02:32:38.910Z\",\n    //                 \"updated_at\": \"2021-02-17T02:32:38.910Z\",\n    //                 \"User\": {\n    //                     \"id\": 116,\n    //                     \"email\": \"fight@club.com\",\n    //                     \"username\": \"narrator\",\n    //                     \"exchange_id\": 176\n    //                 }\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const order = this.safeValue(data, 0);\n\n    if (order === undefined) {\n      throw new OrderNotFound(this.id + ' fetchOrder() could not find order id ' + id);\n    }\n\n    return this.parseOrder(order);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {// 'symbol': market['id'],\n      // 'side': 'buy', // 'sell'\n      // 'status': 'new', // 'filled', 'pfilled', 'canceled'\n      // 'open': true,\n      // 'limit': limit, // default 50, max 100\n      // 'page': 1,\n      // 'order_by': 'created_at', // id, ...\n      // 'order': 'asc', // 'desc'\n      // 'start_date': this.iso8601 (since),\n      // 'end_date': this.iso8601 (this.milliseconds ()),\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = this.iso8601(since);\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50, max 100\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params)); //\n    //     {\n    //         \"count\": 1,\n    //         \"data\": [\n    //             {\n    //                 \"id\": \"string\",\n    //                 \"side\": \"sell\",\n    //                 \"symbol\": \"xht-usdt\",\n    //                 \"size\": 0.1,\n    //                 \"filled\": 0,\n    //                 \"stop\": null,\n    //                 \"fee\": 0,\n    //                 \"fee_coin\": \"usdt\",\n    //                 \"type\": \"limit\",\n    //                 \"price\": 1.09,\n    //                 \"status\": \"new\",\n    //                 \"created_by\": 116,\n    //                 \"created_at\": \"2021-02-17T02:32:38.910Z\",\n    //                 \"updated_at\": \"2021-02-17T02:32:38.910Z\",\n    //                 \"User\": {\n    //                     \"id\": 116,\n    //                     \"email\": \"fight@club.com\",\n    //                     \"username\": \"narrator\",\n    //                     \"exchange_id\": 176\n    //                 }\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'new': 'open',\n      'pfilled': 'open',\n      'filled': 'closed',\n      'canceled': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder, fetchOpenOrder, fetchOpenOrders\n    //\n    //     {\n    //         \"id\": \"string\",\n    //         \"side\": \"sell\",\n    //         \"symbol\": \"xht-usdt\",\n    //         \"size\": 0.1,\n    //         \"filled\": 0,\n    //         \"stop\": null,\n    //         \"fee\": 0,\n    //         \"fee_coin\": \"usdt\",\n    //         \"type\": \"limit\",\n    //         \"price\": 1.09,\n    //         \"status\": \"new\",\n    //         \"created_by\": 116,\n    //         \"created_at\": \"2021-02-17T02:32:38.910Z\",\n    //         \"updated_at\": \"2021-02-17T02:32:38.910Z\",\n    //         \"User\": {\n    //             \"id\": 116,\n    //             \"email\": \"fight@club.com\",\n    //             \"username\": \"narrator\",\n    //             \"exchange_id\": 176\n    //         },\n    //         \"fee_structure\": {\n    //             \"maker\": 0.2,\n    //             \"taker\": 0.2\n    //         },\n    //     }\n    //\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const id = this.safeString(order, 'id');\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'side');\n    const price = this.safeNumber(order, 'price');\n    const amount = this.safeNumber(order, 'size');\n    const filled = this.safeNumber(order, 'filled');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    return this.safeOrder({\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': undefined,\n      'cost': undefined,\n      'trades': undefined,\n      'fee': undefined,\n      'info': order,\n      'average': undefined\n    });\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'side': side,\n      'size': amount,\n      'type': type // 'stop': parseFloat (this.priceToPrecision (symbol, stopPrice)),\n      // 'meta': {}, // other options such as post_only\n\n    };\n\n    if (type !== 'market') {\n      request['price'] = price;\n    }\n\n    const stopPrice = this.safeFloat2(params, 'stopPrice', 'stop');\n\n    if (stopPrice !== undefined) {\n      request['stop'] = parseFloat(this.priceToPrecision(symbol, stopPrice));\n      params = this.omit(params, ['stopPrice', 'stop']);\n    }\n\n    const response = await this.privatePostOrder(this.extend(request, params)); //\n    //     {\n    //         \"fee\": 0,\n    //         \"meta\": {},\n    //         \"symbol\": \"xht-usdt\",\n    //         \"side\": \"sell\",\n    //         \"size\": 0.1,\n    //         \"type\": \"limit\",\n    //         \"price\": 1,\n    //         \"fee_structure\": {\n    //             \"maker\": 0.2,\n    //             \"taker\": 0.2\n    //         },\n    //         \"fee_coin\": \"usdt\",\n    //         \"id\": \"string\",\n    //         \"created_by\": 116,\n    //         \"filled\": 0,\n    //         \"status\": \"new\",\n    //         \"updated_at\": \"2021-02-17T03:03:19.231Z\",\n    //         \"created_at\": \"2021-02-17T03:03:19.231Z\",\n    //         \"stop\": null\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'order_id': id\n    };\n    const response = await this.privateDeleteOrder(this.extend(request, params)); //\n    //     {\n    //         \"title\": \"string\",\n    //         \"symbol\": \"xht-usdt\",\n    //         \"side\": \"sell\",\n    //         \"size\": 1,\n    //         \"type\": \"limit\",\n    //         \"price\": 0.1,\n    //         \"id\": \"string\",\n    //         \"created_by\": 34,\n    //         \"filled\": 0\n    //     }\n    //\n\n    return this.parseOrder(response);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    const response = await this.privateDeleteOrderAll(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"title\": \"string\",\n    //             \"symbol\": \"xht-usdt\",\n    //             \"side\": \"sell\",\n    //             \"size\": 1,\n    //             \"type\": \"limit\",\n    //             \"price\": 0.1,\n    //             \"id\": \"string\",\n    //             \"created_by\": 34,\n    //             \"filled\": 0\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'symbol': market['id'],\n      // 'limit': 50, // default 50, max 100\n      // 'page': 1, // page of data to retrieve\n      // 'order_by': 'timestamp', // field to order data\n      // 'order': 'asc', // asc or desc\n      // 'start_date': 123, // starting date of queried data\n      // 'end_date': 321, // ending date of queried data\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50, max 100\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetUserTrades(this.extend(request, params)); //\n    //     {\n    //         \"count\": 1,\n    //         \"data\": [\n    //             {\n    //                 \"side\": \"buy\",\n    //                 \"symbol\": \"eth-usdt\",\n    //                 \"size\": 0.086,\n    //                 \"price\": 226.19,\n    //                 \"timestamp\": \"2020-03-03T08:03:55.459Z\",\n    //                 \"fee\": 0.1\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    //\n    //     {\n    //         \"currency\":\"usdt\",\n    //         \"address\":\"TECLD9XBH31XpyykdHU3uEAeUK7E6Lrmik\",\n    //         \"network\":\"trx\",\n    //         \"standard\":null,\n    //         \"is_valid\":true,\n    //         \"created_at\":\"2021-05-12T02:43:05.446Z\"\n    //     }\n    //\n    let address = this.safeString(depositAddress, 'address');\n    let tag = undefined;\n\n    if (address !== undefined) {\n      const parts = address.split(':');\n      address = this.safeString(parts, 0);\n      tag = this.safeString(parts, 1);\n    }\n\n    this.checkAddress(address);\n    const currencyId = this.safeString(depositAddress, 'currency');\n    currency = this.safeCurrency(currencyId, currency);\n    const network = this.safeString(depositAddress, 'network');\n    return {\n      'currency': currency['code'],\n      'address': address,\n      'tag': tag,\n      'network': network,\n      'info': depositAddress\n    };\n  }\n\n  async fetchDepositAddresses(codes = undefined, params = {}) {\n    await this.loadMarkets();\n    const network = this.safeString(params, 'network');\n    params = this.omit(params, 'network');\n    const response = await this.privateGetUser(params); //\n    //     {\n    //         \"id\":620,\n    //         \"email\":\"igor.kroitor@gmail.com\",\n    //         \"full_name\":\"\",\n    //         \"gender\":false,\n    //         \"nationality\":\"\",\n    //         \"dob\":null,\n    //         \"phone_number\":\"\",\n    //         \"address\":{\"city\":\"\",\"address\":\"\",\"country\":\"\",\"postal_code\":\"\"},\n    //         \"id_data\":{\"note\":\"\",\"type\":\"\",\"number\":\"\",\"status\":0,\"issued_date\":\"\",\"expiration_date\":\"\"},\n    //         \"bank_account\":[],\n    //         \"crypto_wallet\":{},\n    //         \"verification_level\":1,\n    //         \"email_verified\":true,\n    //         \"otp_enabled\":true,\n    //         \"activated\":true,\n    //         \"username\":\"igor.kroitor\",\n    //         \"affiliation_code\":\"QSWA6G\",\n    //         \"settings\":{\n    //             \"chat\":{\"set_username\":false},\n    //             \"risk\":{\"popup_warning\":false,\"order_portfolio_percentage\":20},\n    //             \"audio\":{\"public_trade\":false,\"order_completed\":true,\"order_partially_completed\":true},\n    //             \"language\":\"en\",\n    //             \"interface\":{\"theme\":\"white\",\"order_book_levels\":10},\n    //             \"notification\":{\"popup_order_completed\":true,\"popup_order_confirmation\":true,\"popup_order_partially_filled\":true}\n    //         },\n    //         \"affiliation_rate\":0,\n    //         \"network_id\":10620,\n    //         \"discount\":0,\n    //         \"created_at\":\"2021-03-24T02:37:57.379Z\",\n    //         \"updated_at\":\"2021-03-24T02:37:57.379Z\",\n    //         \"balance\":{\n    //             \"btc_balance\":0,\n    //             \"btc_available\":0,\n    //             \"eth_balance\":0.000914,\n    //             \"eth_available\":0.000914,\n    //             \"updated_at\":\"2020-03-04T04:03:27.174Z\n    //         \"},\n    //         \"wallet\":[\n    //             {\"currency\":\"usdt\",\"address\":\"TECLD9XBH31XpyykdHU3uEAeUK7E6Lrmik\",\"network\":\"trx\",\"standard\":null,\"is_valid\":true,\"created_at\":\"2021-05-12T02:43:05.446Z\"},\n    //             {\"currency\":\"xrp\",\"address\":\"rGcSzmuRx8qngPRnrvpCKkP9V4njeCPGCv:286741597\",\"network\":\"xrp\",\"standard\":null,\"is_valid\":true,\"created_at\":\"2021-05-12T02:49:01.273Z\"}\n    //         ]\n    //     }\n    //\n\n    const wallet = this.safeValue(response, 'wallet', []);\n    const addresses = network === undefined ? wallet : this.filterBy(wallet, 'network', network);\n    return this.parseDepositAddresses(addresses, codes);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'currency': currency['id'],\n      // 'limit': 50, // default 50, max 100\n      // 'page': 1, // page of data to retrieve\n      // 'order_by': 'timestamp', // field to order data\n      // 'order': 'asc', // asc or desc\n      // 'start_date': 123, // starting date of queried data\n      // 'end_date': 321, // ending date of queried data\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50, max 100\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetUserDeposits(this.extend(request, params)); //\n    //     {\n    //         \"count\": 1,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 539,\n    //                 \"amount\": 20,\n    //                 \"fee\": 0,\n    //                 \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n    //                 \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n    //                 \"status\": true,\n    //                 \"dismissed\": false,\n    //                 \"rejected\": false,\n    //                 \"description\": \"\",\n    //                 \"type\": \"deposit\",\n    //                 \"currency\": \"usdt\",\n    //                 \"created_at\": \"2020-03-03T07:56:36.198Z\",\n    //                 \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n    //                 \"user_id\": 620\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'currency': currency['id'],\n      // 'limit': 50, // default 50, max 100\n      // 'page': 1, // page of data to retrieve\n      // 'order_by': 'timestamp', // field to order data\n      // 'order': 'asc', // asc or desc\n      // 'start_date': 123, // starting date of queried data\n      // 'end_date': 321, // ending date of queried data\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50, max 100\n    }\n\n    if (since !== undefined) {\n      request['start_date'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetUserWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"count\": 1,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 539,\n    //                 \"amount\": 20,\n    //                 \"fee\": 0,\n    //                 \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n    //                 \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n    //                 \"status\": true,\n    //                 \"dismissed\": false,\n    //                 \"rejected\": false,\n    //                 \"description\": \"\",\n    //                 \"type\": \"withdrawal\",\n    //                 \"currency\": \"usdt\",\n    //                 \"created_at\": \"2020-03-03T07:56:36.198Z\",\n    //                 \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n    //                 \"user_id\": 620\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //     {\n    //         \"id\": 539,\n    //         \"amount\": 20,\n    //         \"fee\": 0,\n    //         \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n    //         \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n    //         \"status\": true,\n    //         \"dismissed\": false,\n    //         \"rejected\": false,\n    //         \"description\": \"\",\n    //         \"type\": \"withdrawal\",\n    //         \"currency\": \"usdt\",\n    //         \"created_at\": \"2020-03-03T07:56:36.198Z\",\n    //         \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n    //         \"user_id\": 620\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const txid = this.safeString(transaction, 'transaction_id');\n    const timestamp = this.parse8601(this.safeString(transaction, 'created_at'));\n    const updated = this.parse8601(this.safeString(transaction, 'updated_at'));\n    const type = this.safeString(transaction, 'type');\n    const amount = this.safeNumber(transaction, 'amount');\n    let address = this.safeString(transaction, 'address');\n    let addressTo = undefined;\n    const addressFrom = undefined;\n    let tag = undefined;\n    let tagTo = undefined;\n    const tagFrom = undefined;\n\n    if (address !== undefined) {\n      const parts = address.split(':');\n      address = this.safeString(parts, 0);\n      tag = this.safeString(parts, 1);\n      addressTo = address;\n      tagTo = tag;\n    }\n\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    let status = this.safeValue(transaction, 'status');\n    const dismissed = this.safeValue(transaction, 'dismissed');\n    const rejected = this.safeValue(transaction, 'rejected');\n\n    if (status) {\n      status = 'ok';\n    } else if (dismissed) {\n      status = 'canceled';\n    } else if (rejected) {\n      status = 'failed';\n    } else {\n      status = 'pending';\n    }\n\n    const fee = {\n      'currency': code,\n      'cost': this.safeNumber(transaction, 'fee')\n    };\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': addressFrom,\n      'address': address,\n      'addressTo': addressTo,\n      'tagFrom': tagFrom,\n      'tag': tag,\n      'tagTo': tagTo,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (tag !== undefined) {\n      address += ':' + tag;\n    }\n\n    const request = {\n      'currency': currency['id'],\n      'amount': amount,\n      'address': address\n    }; // one time password\n\n    let otp = this.safeString(params, 'otp_code');\n\n    if (otp !== undefined || this.twofa !== undefined) {\n      if (otp === undefined) {\n        otp = this.oath();\n      }\n\n      request['otp_code'] = otp;\n    }\n\n    const response = await this.privatePostUserRequestWithdrawal(this.extend(request, params));\n    return {\n      'info': response,\n      'id': undefined\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const query = this.omit(params, this.extractParams(path));\n    path = '/' + this.version + '/' + this.implodeParams(path, params);\n\n    if (method === 'GET' || method === 'DELETE') {\n      if (Object.keys(query).length) {\n        path += '?' + this.urlencode(query);\n      }\n    }\n\n    const url = this.urls['api'] + path;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const defaultExpires = this.safeInteger2(this.options, 'api-expires', 'expires', parseInt(this.timeout / 1000));\n      const expires = this.sum(this.seconds(), defaultExpires);\n      const expiresString = expires.toString();\n      let auth = method + path + expiresString;\n      headers = {\n        'api-key': this.encode(this.apiKey),\n        'api-expires': expiresString\n      };\n\n      if (method === 'POST') {\n        headers['Content-type'] = 'application/json';\n\n        if (Object.keys(query).length) {\n          body = this.json(query);\n          auth += body;\n        }\n      }\n\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n      headers['api-signature'] = signature;\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    }\n\n    if (code >= 400 && code <= 503) {\n      //\n      //  { \"message\": \"Invalid token\" }\n      //\n      const feedback = this.id + ' ' + body;\n      const message = this.safeString(response, 'message');\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      const status = code.toString();\n      this.throwExactlyMatchedException(this.exceptions['exact'], status, feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/hollaex.js"],"names":["Exchange","require","BadRequest","AuthenticationError","NetworkError","ArgumentsRequired","OrderNotFound","InsufficientFunds","TICK_SIZE","Precise","module","exports","hollaex","describe","deepExtend","parseInt","timeout","fetchMarkets","params","response","publicGetConstants","pairs","safeValue","keys","Object","result","i","length","key","market","id","safeString","baseId","quoteId","base","commonCurrencyCode","toUpperCase","quote","symbol","active","maker","fees","taker","push","safeNumber","undefined","fetchCurrencies","coins","currency","numericId","safeInteger","code","safeCurrencyCode","name","fee","precision","withdrawalLimits","fetchOrderBooks","symbols","limit","loadMarkets","publicGetOrderbooks","marketIds","marketId","orderbook","safeSymbol","timestamp","parse8601","parseOrderBook","fetchOrderBook","request","extend","fetchTicker","publicGetTicker","parseTicker","fetchTickers","publicGetTickers","parseTickers","ticker","safeMarket","filterByArray","safeString2","close","iso8601","fetchTrades","since","publicGetTrades","trades","parseTrades","parseTrade","trade","datetime","side","priceString","amountString","price","parseNumber","amount","cost","stringMul","feeCost","feeCurrencyCode","fetchOHLCV","timeframe","timeframes","duration","parseTimeframe","end","seconds","start","sum","publicGetChart","parseOHLCVs","parseOHLCV","fetchBalance","privateGetUserBalance","currencyIds","currencies_by_id","currencyId","account","parseBalance","fetchOpenOrder","privateGetOrdersOrderId","parseOrder","fetchOpenOrders","fetchOrders","fetchClosedOrders","fetchOrder","privateGetOrders","data","order","parseOrders","parseOrderStatus","status","statuses","type","filled","safeOrder","createOrder","stopPrice","safeFloat2","parseFloat","priceToPrecision","omit","privatePostOrder","cancelOrder","privateDeleteOrder","cancelAllOrders","privateDeleteOrderAll","fetchMyTrades","privateGetUserTrades","parseDepositAddress","depositAddress","address","tag","parts","split","checkAddress","safeCurrency","network","fetchDepositAddresses","codes","privateGetUser","wallet","addresses","filterBy","parseDepositAddresses","fetchDeposits","privateGetUserDeposits","parseTransactions","fetchWithdrawals","privateGetUserWithdrawals","parseTransaction","transaction","txid","updated","addressTo","addressFrom","tagTo","tagFrom","dismissed","rejected","withdraw","otp","twofa","oath","privatePostUserRequestWithdrawal","sign","path","api","method","headers","body","query","extractParams","version","implodeParams","urlencode","url","urls","checkRequiredCredentials","defaultExpires","safeInteger2","options","expires","expiresString","toString","auth","encode","apiKey","json","signature","hmac","secret","handleErrors","reason","requestHeaders","requestBody","feedback","message","throwBroadlyMatchedException","exceptions","throwExactlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadRequest, AuthenticationError, NetworkError, ArgumentsRequired, OrderNotFound, InsufficientFunds } = require ('./base/errors');\nconst { TICK_SIZE } = require ('./base/functions/number');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class hollaex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'hollaex',\n            'name': 'HollaEx',\n            'countries': [ 'KR' ],\n            'rateLimit': 333,\n            'version': 'v2',\n            'has': {\n                'CORS': false,\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createLimitBuyOrder': true,\n                'createLimitSellOrder': true,\n                'createMarketBuyOrder': true,\n                'createMarketSellOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': 'emulated',\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrder': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderBooks': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTransactions': false,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n                'fetchDepositAddresses': true,\n            },\n            'timeframes': {\n                '1h': '1h',\n                '1d': '1d',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/75841031-ca375180-5ddd-11ea-8417-b975674c23cb.jpg',\n                'api': 'https://api.hollaex.com',\n                'www': 'https://hollaex.com',\n                'doc': 'https://apidocs.hollaex.com',\n                'referral': 'https://pro.hollaex.com/signup?affiliation_code=QSWA6G',\n            },\n            'precisionMode': TICK_SIZE,\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'health',\n                        'constants',\n                        'kit',\n                        'tiers',\n                        'ticker',\n                        'tickers',\n                        'orderbook',\n                        'orderbooks',\n                        'trades',\n                        'chart',\n                        'charts',\n                        // TradingView\n                        'udf/config',\n                        'udf/history',\n                        'udf/symbols',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'user',\n                        'user/balance',\n                        'user/deposits',\n                        'user/withdrawals',\n                        'user/withdrawal/fee',\n                        'user/trades',\n                        'orders',\n                        'orders/{order_id}',\n                    ],\n                    'post': [\n                        'user/request-withdrawal',\n                        'order',\n                    ],\n                    'delete': [\n                        'order/all',\n                        'order',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.001,\n                    'maker': 0.001,\n                },\n            },\n            'exceptions': {\n                'broad': {\n                    'Invalid token': AuthenticationError,\n                    'Order not found': OrderNotFound,\n                    'Insufficient balance': InsufficientFunds,\n                },\n                'exact': {\n                    '400': BadRequest,\n                    '403': AuthenticationError,\n                    '404': BadRequest,\n                    '405': BadRequest,\n                    '410': BadRequest,\n                    '429': BadRequest,\n                    '500': NetworkError,\n                    '503': NetworkError,\n                },\n            },\n            'options': {\n                // how many seconds before the authenticated request expires\n                'api-expires': parseInt (this.timeout / 1000),\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetConstants (params);\n        //\n        //     {\n        //         coins: {\n        //             xmr: {\n        //                 id: 7,\n        //                 fullname: \"Monero\",\n        //                 symbol: \"xmr\",\n        //                 active: true,\n        //                 allow_deposit: true,\n        //                 allow_withdrawal: true,\n        //                 withdrawal_fee: 0.02,\n        //                 min: 0.001,\n        //                 max: 100000,\n        //                 increment_unit: 0.001,\n        //                 deposit_limits: { '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0 },\n        //                 withdrawal_limits: { '1': 10, '2': 15, '3': 100, '4': 100, '5': 200, '6': 300, '7': 350, '8': 400, '9': 500, '10': -1 },\n        //                 created_at: \"2019-12-09T07:14:02.720Z\",\n        //                 updated_at: \"2020-01-16T12:12:53.162Z\"\n        //             },\n        //             // ...\n        //         },\n        //         pairs: {\n        //             'btc-usdt': {\n        //                 id: 2,\n        //                 name: \"btc-usdt\",\n        //                 pair_base: \"btc\",\n        //                 pair_2: \"usdt\",\n        //                 taker_fees: { '1': 0.3, '2': 0.25, '3': 0.2, '4': 0.18, '5': 0.1, '6': 0.09, '7': 0.08, '8': 0.06, '9': 0.04, '10': 0 },\n        //                 maker_fees: { '1': 0.1, '2': 0.08, '3': 0.05, '4': 0.03, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0 },\n        //                 min_size: 0.0001,\n        //                 max_size: 1000,\n        //                 min_price: 100,\n        //                 max_price: 100000,\n        //                 increment_size: 0.0001,\n        //                 increment_price: 0.05,\n        //                 active: true,\n        //                 created_at: \"2019-12-09T07:15:54.537Z\",\n        //                 updated_at: \"2019-12-09T07:15:54.537Z\"\n        //             },\n        //         },\n        //         config: { tiers: 10 },\n        //         status: true\n        //     }\n        //\n        const pairs = this.safeValue (response, 'pairs', {});\n        const keys = Object.keys (pairs);\n        const result = [];\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const market = pairs[key];\n            const id = this.safeString (market, 'name');\n            const baseId = this.safeString (market, 'pair_base');\n            const quoteId = this.safeString (market, 'pair_2');\n            const base = this.commonCurrencyCode (baseId.toUpperCase ());\n            const quote = this.commonCurrencyCode (quoteId.toUpperCase ());\n            const symbol = base + '/' + quote;\n            const active = this.safeValue (market, 'active');\n            const maker = this.fees['trading']['maker'];\n            const taker = this.fees['trading']['taker'];\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'precision': {\n                    'price': this.safeNumber (market, 'increment_price'),\n                    'amount': this.safeNumber (market, 'increment_size'),\n                },\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (market, 'min_size'),\n                        'max': this.safeNumber (market, 'max_size'),\n                    },\n                    'price': {\n                        'min': this.safeNumber (market, 'min_price'),\n                        'max': this.safeNumber (market, 'max_price'),\n                    },\n                    'cost': { 'min': undefined, 'max': undefined },\n                },\n                'taker': taker,\n                'maker': maker,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetConstants (params);\n        const coins = this.safeValue (response, 'coins', {});\n        const keys = Object.keys (coins);\n        const result = {};\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const currency = coins[key];\n            const id = this.safeString (currency, 'symbol');\n            const numericId = this.safeInteger (currency, 'id');\n            const code = this.safeCurrencyCode (id);\n            const name = this.safeString (currency, 'fullname');\n            const active = this.safeValue (currency, 'active');\n            const fee = this.safeNumber (currency, 'withdrawal_fee');\n            const precision = this.safeNumber (currency, 'increment_unit');\n            const withdrawalLimits = this.safeValue (currency, 'withdrawal_limits', []);\n            result[code] = {\n                'id': id,\n                'numericId': numericId,\n                'code': code,\n                'info': currency,\n                'name': name,\n                'active': active,\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (currency, 'min'),\n                        'max': this.safeNumber (currency, 'max'),\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': this.safeValue (withdrawalLimits, 0),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchOrderBooks (symbols = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetOrderbooks (params);\n        const result = {};\n        const marketIds = Object.keys (response);\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            const orderbook = response[marketId];\n            const symbol = this.safeSymbol (marketId, undefined, '-');\n            const timestamp = this.parse8601 (this.safeString (orderbook, 'timestamp'));\n            result[symbol] = this.parseOrderBook (response[marketId], timestamp);\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const marketId = this.marketId (symbol);\n        const request = {\n            'symbol': marketId,\n        };\n        const response = await this.publicGetOrderbooks (this.extend (request, params));\n        //\n        //     {\n        //         \"btc-usdt\": {\n        //             \"bids\": [\n        //                 [ 8836.4, 1.022 ],\n        //                 [ 8800, 0.0668 ],\n        //                 [ 8797.75, 0.2398 ],\n        //             ],\n        //             \"asks\": [\n        //                 [ 8839.35, 1.5334 ],\n        //                 [ 8852.6, 0.0579 ],\n        //                 [ 8860.45, 0.1815 ],\n        //             ],\n        //             \"timestamp\": \"2020-03-03T02:27:25.147Z\"\n        //         },\n        //         \"eth-usdt\": {},\n        //         // ...\n        //     }\n        //\n        const orderbook = this.safeValue (response, marketId);\n        const timestamp = this.parse8601 (this.safeString (orderbook, 'timestamp'));\n        return this.parseOrderBook (orderbook, symbol, timestamp);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        //\n        //     {\n        //         open: 8615.55,\n        //         close: 8841.05,\n        //         high: 8921.1,\n        //         low: 8607,\n        //         last: 8841.05,\n        //         volume: 20.2802,\n        //         timestamp: '2020-03-03T03:11:18.964Z'\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTickers (this.extend (params));\n        //\n        //     {\n        //         \"bch-usdt\": {\n        //             \"time\": \"2020-03-02T04:29:45.011Z\",\n        //             \"open\": 341.65,\n        //             \"close\":337.9,\n        //             \"high\":341.65,\n        //             \"low\":337.3,\n        //             \"last\":337.9,\n        //             \"volume\":0.054,\n        //             \"symbol\":\"bch-usdt\"\n        //         },\n        //         // ...\n        //     }\n        //\n        return this.parseTickers (response, symbols);\n    }\n\n    parseTickers (response, symbols = undefined, params = {}) {\n        const result = {};\n        const keys = Object.keys (response);\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const ticker = response[key];\n            const marketId = this.safeString (ticker, 'symbol', key);\n            const market = this.safeMarket (marketId, undefined, '-');\n            const symbol = market['symbol'];\n            result[symbol] = this.extend (this.parseTicker (ticker, market), params);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         open: 8615.55,\n        //         close: 8841.05,\n        //         high: 8921.1,\n        //         low: 8607,\n        //         last: 8841.05,\n        //         volume: 20.2802,\n        //         timestamp: '2020-03-03T03:11:18.964Z',\n        //     }\n        //\n        // fetchTickers\n        //\n        //     {\n        //         \"time\": \"2020-03-02T04:29:45.011Z\",\n        //         \"open\": 341.65,\n        //         \"close\": 337.9,\n        //         \"high\": 341.65,\n        //         \"low\": 337.3,\n        //         \"last\": 337.9,\n        //         \"volume\": 0.054,\n        //         \"symbol\": \"bch-usdt\"\n        //     }\n        //\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const timestamp = this.parse8601 (this.safeString2 (ticker, 'time', 'timestamp'));\n        const close = this.safeNumber (ticker, 'close');\n        const result = {\n            'symbol': symbol,\n            'info': ticker,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': undefined,\n            'bidVolume': undefined,\n            'ask': undefined,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': this.safeNumber (ticker, 'open'),\n            'close': close,\n            'last': this.safeNumber (ticker, 'last', close),\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeNumber (ticker, 'volume'),\n            'quoteVolume': undefined,\n        };\n        return result;\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"btc-usdt\": [\n        //             {\n        //                 \"size\": 0.5,\n        //                 \"price\": 8830,\n        //                 \"side\": \"buy\",\n        //                 \"timestamp\": \"2020-03-03T04:44:33.034Z\"\n        //             },\n        //             // ...\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, market['id'], []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"size\": 0.5,\n        //         \"price\": 8830,\n        //         \"side\": \"buy\",\n        //         \"timestamp\": \"2020-03-03T04:44:33.034Z\"\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"side\": \"buy\",\n        //         \"symbol\": \"eth-usdt\",\n        //         \"size\": 0.086,\n        //         \"price\": 226.19,\n        //         \"timestamp\": \"2020-03-03T08:03:55.459Z\",\n        //         \"fee\": 0.1\n        //     }\n        //\n        const marketId = this.safeString (trade, 'symbol');\n        market = this.safeMarket (marketId, market, '-');\n        const symbol = market['symbol'];\n        const datetime = this.safeString (trade, 'timestamp');\n        const timestamp = this.parse8601 (datetime);\n        const side = this.safeString (trade, 'side');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'size');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        const feeCost = this.safeNumber (trade, 'fee');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            const quote = market['quote'];\n            const feeCurrencyCode = (market !== undefined) ? market['quote'] : quote;\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        return {\n            'info': trade,\n            'id': undefined,\n            'timestamp': timestamp,\n            'datetime': datetime,\n            'symbol': symbol,\n            'order': undefined,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1h', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'resolution': this.timeframes[timeframe],\n        };\n        const duration = this.parseTimeframe (timeframe);\n        if (since === undefined) {\n            if (limit === undefined) {\n                throw new ArgumentsRequired (this.id + \" fetchOHLCV() requires a 'since' or a 'limit' argument\");\n            } else {\n                const end = this.seconds ();\n                const start = end - duration * limit;\n                request['to'] = end;\n                request['from'] = start;\n            }\n        } else {\n            if (limit === undefined) {\n                request['from'] = parseInt (since / 1000);\n                request['to'] = this.seconds ();\n            } else {\n                const start = parseInt (since / 1000);\n                request['from'] = start;\n                request['to'] = this.sum (start, duration * limit);\n            }\n        }\n        const response = await this.publicGetChart (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"time\":\"2020-03-02T20:00:00.000Z\",\n        //             \"close\":8872.1,\n        //             \"high\":8872.1,\n        //             \"low\":8858.6,\n        //             \"open\":8858.6,\n        //             \"symbol\":\"btc-usdt\",\n        //             \"volume\":1.2922\n        //         },\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseOHLCV (response, market = undefined, timeframe = '1h', since = undefined, limit = undefined) {\n        //\n        //     {\n        //         \"time\":\"2020-03-02T20:00:00.000Z\",\n        //         \"close\":8872.1,\n        //         \"high\":8872.1,\n        //         \"low\":8858.6,\n        //         \"open\":8858.6,\n        //         \"symbol\":\"btc-usdt\",\n        //         \"volume\":1.2922\n        //     }\n        //\n        return [\n            this.parse8601 (this.safeString (response, 'time')),\n            this.safeNumber (response, 'open'),\n            this.safeNumber (response, 'high'),\n            this.safeNumber (response, 'low'),\n            this.safeNumber (response, 'close'),\n            this.safeNumber (response, 'volume'),\n        ];\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetUserBalance (params);\n        //\n        //     {\n        //         \"updated_at\": \"2020-03-02T22:27:38.428Z\",\n        //         \"btc_balance\": 0,\n        //         \"btc_pending\": 0,\n        //         \"btc_available\": 0,\n        //         \"eth_balance\": 0,\n        //         \"eth_pending\": 0,\n        //         \"eth_available\": 0,\n        //         // ...\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString (response, 'updated_at'));\n        const result = {\n            'info': response,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n        };\n        const currencyIds = Object.keys (this.currencies_by_id);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeString (response, currencyId + '_available');\n            account['total'] = this.safeString (response, currencyId + '_balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOpenOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privateGetOrdersOrderId (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": \"string\",\n        //         \"side\": \"sell\",\n        //         \"symbol\": \"xht-usdt\",\n        //         \"size\": 0.1,\n        //         \"filled\": 0,\n        //         \"stop\": null,\n        //         \"fee\": 0,\n        //         \"fee_coin\": \"usdt\",\n        //         \"type\": \"limit\",\n        //         \"price\": 1.09,\n        //         \"status\": \"new\",\n        //         \"created_by\": 116,\n        //         \"created_at\": \"2021-02-17T02:32:38.910Z\",\n        //         \"updated_at\": \"2021-02-17T02:32:38.910Z\",\n        //         \"User\": {\n        //             \"id\": 116,\n        //             \"email\": \"fight@club.com\",\n        //             \"username\": \"narrator\",\n        //             \"exchange_id\": 176\n        //         }\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'open': true,\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'filled',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privateGetOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"count\": 1,\n        //         \"data\": [\n        //             {\n        //                 \"id\": \"string\",\n        //                 \"side\": \"sell\",\n        //                 \"symbol\": \"xht-usdt\",\n        //                 \"size\": 0.1,\n        //                 \"filled\": 0,\n        //                 \"stop\": null,\n        //                 \"fee\": 0,\n        //                 \"fee_coin\": \"usdt\",\n        //                 \"type\": \"limit\",\n        //                 \"price\": 1.09,\n        //                 \"status\": \"new\",\n        //                 \"created_by\": 116,\n        //                 \"created_at\": \"2021-02-17T02:32:38.910Z\",\n        //                 \"updated_at\": \"2021-02-17T02:32:38.910Z\",\n        //                 \"User\": {\n        //                     \"id\": 116,\n        //                     \"email\": \"fight@club.com\",\n        //                     \"username\": \"narrator\",\n        //                     \"exchange_id\": 176\n        //                 }\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const order = this.safeValue (data, 0);\n        if (order === undefined) {\n            throw new OrderNotFound (this.id + ' fetchOrder() could not find order id ' + id);\n        }\n        return this.parseOrder (order);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            // 'symbol': market['id'],\n            // 'side': 'buy', // 'sell'\n            // 'status': 'new', // 'filled', 'pfilled', 'canceled'\n            // 'open': true,\n            // 'limit': limit, // default 50, max 100\n            // 'page': 1,\n            // 'order_by': 'created_at', // id, ...\n            // 'order': 'asc', // 'desc'\n            // 'start_date': this.iso8601 (since),\n            // 'end_date': this.iso8601 (this.milliseconds ()),\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['start_date'] = this.iso8601 (since);\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50, max 100\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"count\": 1,\n        //         \"data\": [\n        //             {\n        //                 \"id\": \"string\",\n        //                 \"side\": \"sell\",\n        //                 \"symbol\": \"xht-usdt\",\n        //                 \"size\": 0.1,\n        //                 \"filled\": 0,\n        //                 \"stop\": null,\n        //                 \"fee\": 0,\n        //                 \"fee_coin\": \"usdt\",\n        //                 \"type\": \"limit\",\n        //                 \"price\": 1.09,\n        //                 \"status\": \"new\",\n        //                 \"created_by\": 116,\n        //                 \"created_at\": \"2021-02-17T02:32:38.910Z\",\n        //                 \"updated_at\": \"2021-02-17T02:32:38.910Z\",\n        //                 \"User\": {\n        //                     \"id\": 116,\n        //                     \"email\": \"fight@club.com\",\n        //                     \"username\": \"narrator\",\n        //                     \"exchange_id\": 176\n        //                 }\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'new': 'open',\n            'pfilled': 'open',\n            'filled': 'closed',\n            'canceled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder, fetchOpenOrder, fetchOpenOrders\n        //\n        //     {\n        //         \"id\": \"string\",\n        //         \"side\": \"sell\",\n        //         \"symbol\": \"xht-usdt\",\n        //         \"size\": 0.1,\n        //         \"filled\": 0,\n        //         \"stop\": null,\n        //         \"fee\": 0,\n        //         \"fee_coin\": \"usdt\",\n        //         \"type\": \"limit\",\n        //         \"price\": 1.09,\n        //         \"status\": \"new\",\n        //         \"created_by\": 116,\n        //         \"created_at\": \"2021-02-17T02:32:38.910Z\",\n        //         \"updated_at\": \"2021-02-17T02:32:38.910Z\",\n        //         \"User\": {\n        //             \"id\": 116,\n        //             \"email\": \"fight@club.com\",\n        //             \"username\": \"narrator\",\n        //             \"exchange_id\": 176\n        //         },\n        //         \"fee_structure\": {\n        //             \"maker\": 0.2,\n        //             \"taker\": 0.2\n        //         },\n        //     }\n        //\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const id = this.safeString (order, 'id');\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'side');\n        const price = this.safeNumber (order, 'price');\n        const amount = this.safeNumber (order, 'size');\n        const filled = this.safeNumber (order, 'filled');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        return this.safeOrder ({\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': undefined,\n            'cost': undefined,\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n            'average': undefined,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'side': side,\n            'size': amount,\n            'type': type,\n            // 'stop': parseFloat (this.priceToPrecision (symbol, stopPrice)),\n            // 'meta': {}, // other options such as post_only\n        };\n        if (type !== 'market') {\n            request['price'] = price;\n        }\n        const stopPrice = this.safeFloat2 (params, 'stopPrice', 'stop');\n        if (stopPrice !== undefined) {\n            request['stop'] = parseFloat (this.priceToPrecision (symbol, stopPrice));\n            params = this.omit (params, [ 'stopPrice', 'stop' ]);\n        }\n        const response = await this.privatePostOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"fee\": 0,\n        //         \"meta\": {},\n        //         \"symbol\": \"xht-usdt\",\n        //         \"side\": \"sell\",\n        //         \"size\": 0.1,\n        //         \"type\": \"limit\",\n        //         \"price\": 1,\n        //         \"fee_structure\": {\n        //             \"maker\": 0.2,\n        //             \"taker\": 0.2\n        //         },\n        //         \"fee_coin\": \"usdt\",\n        //         \"id\": \"string\",\n        //         \"created_by\": 116,\n        //         \"filled\": 0,\n        //         \"status\": \"new\",\n        //         \"updated_at\": \"2021-02-17T03:03:19.231Z\",\n        //         \"created_at\": \"2021-02-17T03:03:19.231Z\",\n        //         \"stop\": null\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'order_id': id,\n        };\n        const response = await this.privateDeleteOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"title\": \"string\",\n        //         \"symbol\": \"xht-usdt\",\n        //         \"side\": \"sell\",\n        //         \"size\": 1,\n        //         \"type\": \"limit\",\n        //         \"price\": 0.1,\n        //         \"id\": \"string\",\n        //         \"created_by\": 34,\n        //         \"filled\": 0\n        //     }\n        //\n        return this.parseOrder (response);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        const response = await this.privateDeleteOrderAll (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"title\": \"string\",\n        //             \"symbol\": \"xht-usdt\",\n        //             \"side\": \"sell\",\n        //             \"size\": 1,\n        //             \"type\": \"limit\",\n        //             \"price\": 0.1,\n        //             \"id\": \"string\",\n        //             \"created_by\": 34,\n        //             \"filled\": 0\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'symbol': market['id'],\n            // 'limit': 50, // default 50, max 100\n            // 'page': 1, // page of data to retrieve\n            // 'order_by': 'timestamp', // field to order data\n            // 'order': 'asc', // asc or desc\n            // 'start_date': 123, // starting date of queried data\n            // 'end_date': 321, // ending date of queried data\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50, max 100\n        }\n        if (since !== undefined) {\n            request['start_date'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetUserTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"count\": 1,\n        //         \"data\": [\n        //             {\n        //                 \"side\": \"buy\",\n        //                 \"symbol\": \"eth-usdt\",\n        //                 \"size\": 0.086,\n        //                 \"price\": 226.19,\n        //                 \"timestamp\": \"2020-03-03T08:03:55.459Z\",\n        //                 \"fee\": 0.1\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        //\n        //     {\n        //         \"currency\":\"usdt\",\n        //         \"address\":\"TECLD9XBH31XpyykdHU3uEAeUK7E6Lrmik\",\n        //         \"network\":\"trx\",\n        //         \"standard\":null,\n        //         \"is_valid\":true,\n        //         \"created_at\":\"2021-05-12T02:43:05.446Z\"\n        //     }\n        //\n        let address = this.safeString (depositAddress, 'address');\n        let tag = undefined;\n        if (address !== undefined) {\n            const parts = address.split (':');\n            address = this.safeString (parts, 0);\n            tag = this.safeString (parts, 1);\n        }\n        this.checkAddress (address);\n        const currencyId = this.safeString (depositAddress, 'currency');\n        currency = this.safeCurrency (currencyId, currency);\n        const network = this.safeString (depositAddress, 'network');\n        return {\n            'currency': currency['code'],\n            'address': address,\n            'tag': tag,\n            'network': network,\n            'info': depositAddress,\n        };\n    }\n\n    async fetchDepositAddresses (codes = undefined, params = {}) {\n        await this.loadMarkets ();\n        const network = this.safeString (params, 'network');\n        params = this.omit (params, 'network');\n        const response = await this.privateGetUser (params);\n        //\n        //     {\n        //         \"id\":620,\n        //         \"email\":\"igor.kroitor@gmail.com\",\n        //         \"full_name\":\"\",\n        //         \"gender\":false,\n        //         \"nationality\":\"\",\n        //         \"dob\":null,\n        //         \"phone_number\":\"\",\n        //         \"address\":{\"city\":\"\",\"address\":\"\",\"country\":\"\",\"postal_code\":\"\"},\n        //         \"id_data\":{\"note\":\"\",\"type\":\"\",\"number\":\"\",\"status\":0,\"issued_date\":\"\",\"expiration_date\":\"\"},\n        //         \"bank_account\":[],\n        //         \"crypto_wallet\":{},\n        //         \"verification_level\":1,\n        //         \"email_verified\":true,\n        //         \"otp_enabled\":true,\n        //         \"activated\":true,\n        //         \"username\":\"igor.kroitor\",\n        //         \"affiliation_code\":\"QSWA6G\",\n        //         \"settings\":{\n        //             \"chat\":{\"set_username\":false},\n        //             \"risk\":{\"popup_warning\":false,\"order_portfolio_percentage\":20},\n        //             \"audio\":{\"public_trade\":false,\"order_completed\":true,\"order_partially_completed\":true},\n        //             \"language\":\"en\",\n        //             \"interface\":{\"theme\":\"white\",\"order_book_levels\":10},\n        //             \"notification\":{\"popup_order_completed\":true,\"popup_order_confirmation\":true,\"popup_order_partially_filled\":true}\n        //         },\n        //         \"affiliation_rate\":0,\n        //         \"network_id\":10620,\n        //         \"discount\":0,\n        //         \"created_at\":\"2021-03-24T02:37:57.379Z\",\n        //         \"updated_at\":\"2021-03-24T02:37:57.379Z\",\n        //         \"balance\":{\n        //             \"btc_balance\":0,\n        //             \"btc_available\":0,\n        //             \"eth_balance\":0.000914,\n        //             \"eth_available\":0.000914,\n        //             \"updated_at\":\"2020-03-04T04:03:27.174Z\n        //         \"},\n        //         \"wallet\":[\n        //             {\"currency\":\"usdt\",\"address\":\"TECLD9XBH31XpyykdHU3uEAeUK7E6Lrmik\",\"network\":\"trx\",\"standard\":null,\"is_valid\":true,\"created_at\":\"2021-05-12T02:43:05.446Z\"},\n        //             {\"currency\":\"xrp\",\"address\":\"rGcSzmuRx8qngPRnrvpCKkP9V4njeCPGCv:286741597\",\"network\":\"xrp\",\"standard\":null,\"is_valid\":true,\"created_at\":\"2021-05-12T02:49:01.273Z\"}\n        //         ]\n        //     }\n        //\n        const wallet = this.safeValue (response, 'wallet', []);\n        const addresses = (network === undefined) ? wallet : this.filterBy (wallet, 'network', network);\n        return this.parseDepositAddresses (addresses, codes);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'currency': currency['id'],\n            // 'limit': 50, // default 50, max 100\n            // 'page': 1, // page of data to retrieve\n            // 'order_by': 'timestamp', // field to order data\n            // 'order': 'asc', // asc or desc\n            // 'start_date': 123, // starting date of queried data\n            // 'end_date': 321, // ending date of queried data\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50, max 100\n        }\n        if (since !== undefined) {\n            request['start_date'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetUserDeposits (this.extend (request, params));\n        //\n        //     {\n        //         \"count\": 1,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 539,\n        //                 \"amount\": 20,\n        //                 \"fee\": 0,\n        //                 \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n        //                 \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n        //                 \"status\": true,\n        //                 \"dismissed\": false,\n        //                 \"rejected\": false,\n        //                 \"description\": \"\",\n        //                 \"type\": \"deposit\",\n        //                 \"currency\": \"usdt\",\n        //                 \"created_at\": \"2020-03-03T07:56:36.198Z\",\n        //                 \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n        //                 \"user_id\": 620\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'currency': currency['id'],\n            // 'limit': 50, // default 50, max 100\n            // 'page': 1, // page of data to retrieve\n            // 'order_by': 'timestamp', // field to order data\n            // 'order': 'asc', // asc or desc\n            // 'start_date': 123, // starting date of queried data\n            // 'end_date': 321, // ending date of queried data\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50, max 100\n        }\n        if (since !== undefined) {\n            request['start_date'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetUserWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"count\": 1,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 539,\n        //                 \"amount\": 20,\n        //                 \"fee\": 0,\n        //                 \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n        //                 \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n        //                 \"status\": true,\n        //                 \"dismissed\": false,\n        //                 \"rejected\": false,\n        //                 \"description\": \"\",\n        //                 \"type\": \"withdrawal\",\n        //                 \"currency\": \"usdt\",\n        //                 \"created_at\": \"2020-03-03T07:56:36.198Z\",\n        //                 \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n        //                 \"user_id\": 620\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //     {\n        //         \"id\": 539,\n        //         \"amount\": 20,\n        //         \"fee\": 0,\n        //         \"address\": \"0x5c0cc98270d7089408fcbcc8e2131287f5be2306\",\n        //         \"transaction_id\": \"0xd4006327a5ec2c41adbdcf566eaaba6597c3d45906abe78ea1a4a022647c2e28\",\n        //         \"status\": true,\n        //         \"dismissed\": false,\n        //         \"rejected\": false,\n        //         \"description\": \"\",\n        //         \"type\": \"withdrawal\",\n        //         \"currency\": \"usdt\",\n        //         \"created_at\": \"2020-03-03T07:56:36.198Z\",\n        //         \"updated_at\": \"2020-03-03T08:00:05.674Z\",\n        //         \"user_id\": 620\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const txid = this.safeString (transaction, 'transaction_id');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'created_at'));\n        const updated = this.parse8601 (this.safeString (transaction, 'updated_at'));\n        const type = this.safeString (transaction, 'type');\n        const amount = this.safeNumber (transaction, 'amount');\n        let address = this.safeString (transaction, 'address');\n        let addressTo = undefined;\n        const addressFrom = undefined;\n        let tag = undefined;\n        let tagTo = undefined;\n        const tagFrom = undefined;\n        if (address !== undefined) {\n            const parts = address.split (':');\n            address = this.safeString (parts, 0);\n            tag = this.safeString (parts, 1);\n            addressTo = address;\n            tagTo = tag;\n        }\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        let status = this.safeValue (transaction, 'status');\n        const dismissed = this.safeValue (transaction, 'dismissed');\n        const rejected = this.safeValue (transaction, 'rejected');\n        if (status) {\n            status = 'ok';\n        } else if (dismissed) {\n            status = 'canceled';\n        } else if (rejected) {\n            status = 'failed';\n        } else {\n            status = 'pending';\n        }\n        const fee = {\n            'currency': code,\n            'cost': this.safeNumber (transaction, 'fee'),\n        };\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': addressFrom,\n            'address': address,\n            'addressTo': addressTo,\n            'tagFrom': tagFrom,\n            'tag': tag,\n            'tagTo': tagTo,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (tag !== undefined) {\n            address += ':' + tag;\n        }\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n            'address': address,\n        };\n        // one time password\n        let otp = this.safeString (params, 'otp_code');\n        if ((otp !== undefined) || (this.twofa !== undefined)) {\n            if (otp === undefined) {\n                otp = this.oath ();\n            }\n            request['otp_code'] = otp;\n        }\n        const response = await this.privatePostUserRequestWithdrawal (this.extend (request, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const query = this.omit (params, this.extractParams (path));\n        path = '/' + this.version + '/' + this.implodeParams (path, params);\n        if ((method === 'GET') || (method === 'DELETE')) {\n            if (Object.keys (query).length) {\n                path += '?' + this.urlencode (query);\n            }\n        }\n        const url = this.urls['api'] + path;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const defaultExpires = this.safeInteger2 (this.options, 'api-expires', 'expires', parseInt (this.timeout / 1000));\n            const expires = this.sum (this.seconds (), defaultExpires);\n            const expiresString = expires.toString ();\n            let auth = method + path + expiresString;\n            headers = {\n                'api-key': this.encode (this.apiKey),\n                'api-expires': expiresString,\n            };\n            if (method === 'POST') {\n                headers['Content-type'] = 'application/json';\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    auth += body;\n                }\n            }\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            headers['api-signature'] = signature;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        if ((code >= 400) && (code <= 503)) {\n            //\n            //  { \"message\": \"Invalid token\" }\n            //\n            const feedback = this.id + ' ' + body;\n            const message = this.safeString (response, 'message');\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            const status = code.toString ();\n            this.throwExactlyMatchedException (this.exceptions['exact'], status, feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}