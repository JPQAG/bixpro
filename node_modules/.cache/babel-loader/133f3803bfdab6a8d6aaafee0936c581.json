{"ast":null,"code":"import React from'react';import{Button,Row,Col}from\"react-bootstrap\";import{Formik,Field,Form,ErrorMessage}from'formik';import*as Yup from'yup';import{Card}from'react-bootstrap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Schema=Yup.object().shape({email:Yup.string().required('This field is required')});// Async Validation\nvar sleep=function sleep(ms){return new Promise(function(resolve){return setTimeout(resolve,ms);});};var validate=function validate(values){return sleep(300).then(function(){return false;});};var isRequired=function isRequired(message){return function(value){return!!value?undefined:message;};};var CombinedValidations=function CombinedValidations(){return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(Card.Header,{children:/*#__PURE__*/_jsx(Card.Title,{as:\"h5\",children:\"Formik - Pick a Username\"})}),/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsx(Formik,{validationSchema:Schema,validate:validate,initialValues:{username:'',email:''},onSubmit:function onSubmit(values){sleep(500).then(function(){alert(JSON.stringify(values,null,2));});},render:function render(_ref){var errors=_ref.errors,touched=_ref.touched,setFieldValue=_ref.setFieldValue,setFieldTouched=_ref.setFieldTouched,validateField=_ref.validateField,validateForm=_ref.validateForm;return/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{sm:3,children:/*#__PURE__*/_jsx(\"label\",{htmlFor:\"username\",children:\"Username\"})}),/*#__PURE__*/_jsxs(Col,{sm:9,children:[/*#__PURE__*/_jsx(Field,{className:\"form-control\",name:\"username\",validate:isRequired('This field is required'),type:\"text\",placeholder:\"username\"}),/*#__PURE__*/_jsx(ErrorMessage,{className:\"text-c-red\",name:\"username\"})]})]}),/*#__PURE__*/_jsxs(Row,{className:\"my-3\",children:[/*#__PURE__*/_jsx(Col,{sm:3,children:/*#__PURE__*/_jsx(\"label\",{htmlFor:\"username\",children:\"Email\"})}),/*#__PURE__*/_jsxs(Col,{sm:9,children:[/*#__PURE__*/_jsx(Field,{className:\"form-control\",name:\"email\",validate:isRequired('This field is required'),type:\"text\",placeholder:\"email\"}),/*#__PURE__*/_jsx(ErrorMessage,{className:\"text-c-red\",name:\"email\"})]})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",children:\"Submit\"})]});}})})]});};export default CombinedValidations;","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/src/views/forms/form-validation/CombinedValidations.js"],"names":["React","Button","Row","Col","Formik","Field","Form","ErrorMessage","Yup","Card","Schema","object","shape","email","string","required","sleep","ms","Promise","resolve","setTimeout","validate","values","then","isRequired","message","value","undefined","CombinedValidations","username","alert","JSON","stringify","errors","touched","setFieldValue","setFieldTouched","validateField","validateForm"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,CAAiBC,GAAjB,CAAsBC,GAAtB,KAAiC,iBAAjC,CACA,OAASC,MAAT,CAAiBC,KAAjB,CAAwBC,IAAxB,CAA8BC,YAA9B,KAAkD,QAAlD,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,KAArB,CACA,OAASC,IAAT,KAAqB,iBAArB,C,wFAEA,GAAMC,CAAAA,MAAM,CAAGF,GAAG,CAACG,MAAJ,GAAaC,KAAb,CAAmB,CAChCC,KAAK,CAAEL,GAAG,CAACM,MAAJ,GAAaC,QAAb,CAAsB,wBAAtB,CADyB,CAAnB,CAAf,CAIA;AACA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAAAC,EAAE,QAAI,IAAIC,CAAAA,OAAJ,CAAY,SAAAC,OAAO,QAAIC,CAAAA,UAAU,CAACD,OAAD,CAAUF,EAAV,CAAd,EAAnB,CAAJ,EAAhB,CAEA,GAAMI,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,MAAM,QACrBN,CAAAA,KAAK,CAAC,GAAD,CAAL,CAAWO,IAAX,CAAgB,UAAM,CACpB,MAAO,MAAP,CACD,CAFD,CADqB,EAAvB,CAKA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAAC,OAAO,QAAI,UAAAC,KAAK,QAAK,CAAC,CAACA,KAAF,CAAUC,SAAV,CAAsBF,OAA3B,EAAT,EAA1B,CAEA,GAAMG,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,sBACxB,MAAC,IAAD,yBACI,KAAC,IAAD,CAAM,MAAN,wBACI,KAAC,IAAD,CAAM,KAAN,EAAY,EAAE,CAAC,IAAf,sCADJ,EADJ,cAII,KAAC,IAAD,CAAM,IAAN,wBACI,KAAC,MAAD,EACA,gBAAgB,CAAElB,MADlB,CAEA,QAAQ,CAAEW,QAFV,CAGA,aAAa,CAAE,CACXQ,QAAQ,CAAE,EADC,CAEXhB,KAAK,CAAE,EAFI,CAHf,CAOA,QAAQ,CAAE,kBAAAS,MAAM,CAAI,CAChBN,KAAK,CAAC,GAAD,CAAL,CAAWO,IAAX,CAAgB,UAAM,CACtBO,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeV,MAAf,CAAuB,IAAvB,CAA6B,CAA7B,CAAD,CAAL,CACC,CAFD,EAGH,CAXD,CAYA,MAAM,CAAE,yBACJW,CAAAA,MADI,MACJA,MADI,CAEJC,OAFI,MAEJA,OAFI,CAGJC,aAHI,MAGJA,aAHI,CAIJC,eAJI,MAIJA,eAJI,CAKJC,aALI,MAKJA,aALI,CAMJC,YANI,MAMJA,YANI,oBAQJ,MAAC,IAAD,yBACI,MAAC,GAAD,yBACI,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,uBACI,cAAO,OAAO,CAAC,UAAf,sBADJ,EADJ,cAII,MAAC,GAAD,EAAK,EAAE,CAAE,CAAT,wBACI,KAAC,KAAD,EAAO,SAAS,CAAC,cAAjB,CAAgC,IAAI,CAAC,UAArC,CAAgD,QAAQ,CAAEd,UAAU,CAAC,wBAAD,CAApE,CAAgG,IAAI,CAAC,MAArG,CAA4G,WAAW,CAAC,UAAxH,EADJ,cAEI,KAAC,YAAD,EAAc,SAAS,CAAC,YAAxB,CAAqC,IAAI,CAAC,UAA1C,EAFJ,GAJJ,GADJ,cAUI,MAAC,GAAD,EAAK,SAAS,CAAC,MAAf,wBACI,KAAC,GAAD,EAAK,EAAE,CAAE,CAAT,uBACI,cAAO,OAAO,CAAC,UAAf,mBADJ,EADJ,cAII,MAAC,GAAD,EAAK,EAAE,CAAE,CAAT,wBACI,KAAC,KAAD,EAAO,SAAS,CAAC,cAAjB,CAAgC,IAAI,CAAC,OAArC,CAA6C,QAAQ,CAAEA,UAAU,CAAC,wBAAD,CAAjE,CAA6F,IAAI,CAAC,MAAlG,CAAyG,WAAW,CAAC,OAArH,EADJ,cAEI,KAAC,YAAD,EAAc,SAAS,CAAC,YAAxB,CAAqC,IAAI,CAAC,OAA1C,EAFJ,GAJJ,GAVJ,cAmBI,KAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,oBAnBJ,GARI,EAZR,EADJ,EAJJ,GADwB,EAA5B,CAqDA,cAAeI,CAAAA,mBAAf","sourcesContent":["import React from 'react';\r\nimport { Button, Row, Col } from \"react-bootstrap\";\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst Schema = Yup.object().shape({\r\n  email: Yup.string().required('This field is required'),\r\n});\r\n\r\n// Async Validation\r\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\nconst validate = values =>\r\n  sleep(300).then(() => {\r\n    return false;\r\n  });\r\n\r\nconst isRequired = message => value => (!!value ? undefined : message);\r\n\r\nconst CombinedValidations = () => (\r\n    <Card>\r\n        <Card.Header>\r\n            <Card.Title as='h5'>Formik - Pick a Username</Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n            <Formik\r\n            validationSchema={Schema}\r\n            validate={validate}\r\n            initialValues={{\r\n                username: '',\r\n                email: '',\r\n            }}\r\n            onSubmit={values => {\r\n                sleep(500).then(() => {\r\n                alert(JSON.stringify(values, null, 2));\r\n                });\r\n            }}\r\n            render={({\r\n                errors,\r\n                touched,\r\n                setFieldValue,\r\n                setFieldTouched,\r\n                validateField,\r\n                validateForm,\r\n            }) => (\r\n                <Form>\r\n                    <Row>\r\n                        <Col sm={3}>\r\n                            <label htmlFor=\"username\">Username</label>\r\n                        </Col>\r\n                        <Col sm={9}>\r\n                            <Field className='form-control' name=\"username\" validate={isRequired('This field is required')} type=\"text\" placeholder=\"username\" />\r\n                            <ErrorMessage className='text-c-red' name=\"username\" />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className='my-3'>\r\n                        <Col sm={3}>\r\n                            <label htmlFor=\"username\">Email</label>\r\n                        </Col>\r\n                        <Col sm={9}>\r\n                            <Field className='form-control' name=\"email\" validate={isRequired('This field is required')} type=\"text\" placeholder=\"email\" />\r\n                            <ErrorMessage className='text-c-red' name=\"email\" />\r\n                        </Col>\r\n                    </Row>\r\n                    <Button type=\"submit\">Submit</Button>\r\n                </Form>\r\n            )}\r\n            />\r\n        </Card.Body>\r\n    </Card>\r\n);\r\n\r\nexport default CombinedValidations;"]},"metadata":{},"sourceType":"module"}