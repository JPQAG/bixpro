{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/James Price/Documents/VS Code/bixpro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/James Price/Documents/VS Code/bixpro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/James Price/Documents/VS Code/bixpro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Card}from'react-bootstrap';import{CONFIG}from'../../../config/constant';//API Configuration\n///Import for API Keys from Config\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var secretKey=CONFIG.binance.secretKey;var apiKey=CONFIG.binance.apiKey;//Binance API\nvar Binance=require('node-binance-api');var binance=new Binance().options({APIKEY:apiKey,APISECRET:secretKey});binance.options({APIKEY:apiKey,APISECRET:secretKey,useServerTime:true,recvWindow:5000,// Set a higher recvWindow to increase response timeout\nverbose:true,// Add extra output when subscribing to WebSockets, etc\nlog:function log(_log){console.log(_log);// You can create your own logger here, or disable console output\n}});//Refactor Data Function\nfunction objectParse(data){var newData=[];for(var prop in data){newData.push({symbol:prop,available:data[prop].available,onOrder:data[prop].onOrder,marketPrice:data[prop].marketPrice,marketValue:data[prop].marketPrice*data[prop].available});};return newData;};//Currency Formatter\nvar formatter=new Intl.NumberFormat('en-US',{style:'currency',currency:'USD'// These options are needed to round to whole numbers if that's what you want.\n//minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n//maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n});var TotalWalletValCard=function TotalWalletValCard(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),TotalWalletVal=_useState2[0],setTotalWalletVal=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),holdings=_useState4[0],setHoldings=_useState4[1];var getHoldings=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var ticker;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return binance.prices();case 2:ticker=_context.sent;_context.next=5;return binance.useServerTime();case 5:binance.balance(function(error,balances){if(error)return console.error(error);var totalWalletValuation=0;for(var holding in balances){if(balances[holding]['available']>-10){var symbol=holding+\"BUSD\";balances[holding]['marketPrice']=ticker[symbol];if(holding===\"ETH\"){setTotalWalletVal(formatter.format(balances[holding]['marketPrice']*balances[holding]['available']));};};if(balances[holding]['available']>0){totalWalletValuation+=balances[holding]['marketPrice']*balances[holding]['available'];}console.log('Total Wallet Val: '+totalWalletValuation);};setTotalWalletVal(formatter.format(totalWalletValuation));setHoldings(balances);return ticker;});case 6:case\"end\":return _context.stop();}}},_callee);}));return function getHoldings(){return _ref.apply(this,arguments);};}();useEffect(function(){getHoldings();var interval=setInterval(function(){getHoldings();},10000);return function(){return clearInterval(interval);};},[]);var dataOne=objectParse(holdings);var data=dataOne;return/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(Card,{className:\"bg-c-blue bitcoin-wallet\",children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(\"h5\",{className:\"text-white mb-2\",children:\"Total Wallet\"}),/*#__PURE__*/_jsx(\"h2\",{className:\"text-white mb-3 f-w-300\",children:TotalWalletVal}),/*#__PURE__*/_jsx(\"span\",{className:\"text-white d-block\",children:\"Pricing by Binance\"}),/*#__PURE__*/_jsx(\"i\",{className:\"fab fa-bitcoin f-70 text-white\"})]})})});};export default TotalWalletValCard;","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/src/components/cryptX/cards/TotalWalletVal.js"],"names":["React","useState","useEffect","Card","CONFIG","secretKey","binance","apiKey","Binance","require","options","APIKEY","APISECRET","useServerTime","recvWindow","verbose","log","console","objectParse","data","newData","prop","push","symbol","available","onOrder","marketPrice","marketValue","formatter","Intl","NumberFormat","style","currency","TotalWalletValCard","TotalWalletVal","setTotalWalletVal","holdings","setHoldings","getHoldings","prices","ticker","balance","error","balances","totalWalletValuation","holding","format","interval","setInterval","clearInterval","dataOne"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { CONFIG } from '../../../config/constant';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n};\r\n\r\n//Currency Formatter\r\nvar formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  \r\n    // These options are needed to round to whole numbers if that's what you want.\r\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\r\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\r\n});\r\n  \r\n  \r\nconst TotalWalletValCard = () => {\r\n    const [ TotalWalletVal, setTotalWalletVal ] = useState('');\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          let totalWalletValuation = 0;\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n              if (holding === \"ETH\") {\r\n                  setTotalWalletVal(\r\n                      formatter.format(balances[holding]['marketPrice'] * balances[holding]['available'])\r\n                    )\r\n              };\r\n            };\r\n            if (balances[holding]['available'] > 0) {\r\n                totalWalletValuation += (balances[holding]['marketPrice'] * balances[holding]['available']);\r\n            }\r\n            console.log('Total Wallet Val: ' + totalWalletValuation)\r\n          };\r\n          setTotalWalletVal(\r\n              formatter.format(totalWalletValuation)\r\n            );\r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const data = dataOne;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className='bg-c-blue bitcoin-wallet'>\r\n                <Card.Body>\r\n                    <h5 className=\"text-white mb-2\">Total Wallet</h5>\r\n                    <h2 className=\"text-white mb-3 f-w-300\">{TotalWalletVal}</h2>\r\n                    <span className=\"text-white d-block\">Pricing by Binance</span>\r\n                    <i className=\"fab fa-bitcoin f-70 text-white\"/>\r\n                </Card.Body>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TotalWalletValCard;"]},"metadata":{},"sourceType":"module"}