{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Price\\\\Documents\\\\VS Code\\\\bixpro\\\\src\\\\components\\\\cryptX\\\\charts\\\\chart\\\\MarketsPriceLineAreaChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Chart from 'react-google-charts';\nimport { CONFIG } from '../../../../config/constant';\nimport { Row, Col, Card, Table, Tab, Nav, Form, InputGroup, FormControl } from 'react-bootstrap';\nimport BTable from 'react-bootstrap/Table';\nimport axios from 'axios'; //Binance API Configuration\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Binance = require('node-binance-api');\n\nconst binance = new Binance().options(CONFIG.binance); //Create data for line chart\n\nfunction createBarData(data, dataTwo) {\n  const lineData = [['Date', 'Bitcoin Price']];\n  let prices = data['prices'];\n  let pricesTwo = dataTwo['prices'];\n\n  for (const day in prices) {\n    // console.log('Daily Data', prices[day])\n    let newDate = new Date(prices[day][0]);\n    prices[day][0] = newDate;\n    lineData.push(prices[day]);\n  }\n\n  ;\n  console.log('DAILY PRICES', lineData);\n  return lineData;\n}\n\nconst MarketsPriceLineAreaChart = () => {\n  _s();\n\n  const [priceDataOne, setPriceDataOne] = useState([]);\n  const [priceDataTwo, setPriceDataTwo] = useState([]);\n  const url = 'https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=365&interval=daily';\n  const urlTwo = 'https://api.coingecko.com/api/v3/coins/ethereum/market_chart?vs_currency=usd&days=365&interval=daily';\n\n  const getPriceDataOne = async () => {\n    axios.get(url).then(res => {\n      setPriceDataOne(res.data);\n    }).catch(error => console.log(error));\n  };\n\n  useEffect(() => {\n    getPriceDataOne();\n    const interval = setInterval(() => {\n      getPriceDataOne();\n    }, 60000); // console.log('PRICEDATA',priceData)\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getPriceDataTwo = async () => {\n    axios.get(urlTwo).then(res => {\n      setPriceDataTwo(res.data);\n    }).catch(error => console.log(error));\n  };\n\n  useEffect(() => {\n    getPriceDataTwo();\n    const interval = setInterval(() => {\n      getPriceDataTwo();\n    }, 60000); // console.log('PRICEDATA',priceData)\n\n    return () => clearInterval(interval);\n  }, []);\n  const data = createBarData(priceDataOne, priceDataTwo);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      width: \"100%\",\n      height: \"300px\",\n      chartType: \"AreaChart\",\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }, this) // data={[\n      //     ['Year', 'Sales', 'Expenses'],\n      //     ['2013', 1000, 400],\n      //     ['2014', 1170, 460],\n      //     ['2015', 660, 1120],\n      //     ['2016', 1030, 540],\n      // ]}\n      ,\n      data: data,\n      options: {\n        title: 'Price Performance',\n        hAxis: {\n          title: 'Year',\n          titleTextStyle: {\n            color: '#333'\n          }\n        },\n        vAxis: {\n          minValue: 0\n        },\n        colors: ['#1de9b6', '#1dc4e9']\n      },\n      rootProps: {\n        'data-testid': '1'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MarketsPriceLineAreaChart, \"lPeHiGmjtqwMxHCYxZ6VtmuyfuQ=\");\n\n_c = MarketsPriceLineAreaChart;\nexport default MarketsPriceLineAreaChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketsPriceLineAreaChart\");","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/src/components/cryptX/charts/chart/MarketsPriceLineAreaChart.js"],"names":["React","useState","useEffect","Chart","CONFIG","Row","Col","Card","Table","Tab","Nav","Form","InputGroup","FormControl","BTable","axios","Binance","require","binance","options","createBarData","data","dataTwo","lineData","prices","pricesTwo","day","newDate","Date","push","console","log","MarketsPriceLineAreaChart","priceDataOne","setPriceDataOne","priceDataTwo","setPriceDataTwo","url","urlTwo","getPriceDataOne","get","then","res","catch","error","interval","setInterval","clearInterval","getPriceDataTwo","title","hAxis","titleTextStyle","color","vAxis","minValue","colors"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\r\nimport Chart from 'react-google-charts';\r\nimport { CONFIG } from '../../../../config/constant';\r\nimport {Row, Col, Card, Table, Tab, Nav, Form, InputGroup, FormControl } from 'react-bootstrap';\r\nimport BTable from 'react-bootstrap/Table';\r\nimport axios from 'axios';\r\n\r\n//Binance API Configuration\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options(CONFIG.binance);\r\n\r\n//Create data for line chart\r\nfunction createBarData(data, dataTwo) {\r\n    const lineData = [\r\n        ['Date', 'Bitcoin Price']\r\n    ];\r\n\r\n    let prices = data['prices'];\r\n    let pricesTwo = dataTwo['prices'];\r\n\r\n    for (const day in prices) {\r\n        // console.log('Daily Data', prices[day])\r\n        let newDate = new Date(prices[day][0])\r\n        prices[day][0] = newDate;\r\n        lineData.push(prices[day]);\r\n    };\r\n\r\n    console.log('DAILY PRICES', lineData);\r\n\r\n    return lineData;\r\n}\r\n\r\nconst MarketsPriceLineAreaChart = () => {\r\n\r\n    const [ priceDataOne, setPriceDataOne ] = useState([]);\r\n    const [ priceDataTwo, setPriceDataTwo ] = useState([]);\r\n\r\n    const url = 'https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=365&interval=daily';\r\n    const urlTwo = 'https://api.coingecko.com/api/v3/coins/ethereum/market_chart?vs_currency=usd&days=365&interval=daily';\r\n\r\n    const getPriceDataOne = async () => {\r\n        axios\r\n            .get(\r\n                url\r\n            )\r\n            .then(res => {\r\n                setPriceDataOne(res.data);\r\n            })\r\n            .catch(error => console.log(error));\r\n    };\r\n    \r\n    useEffect(() => {\r\n        getPriceDataOne()\r\n\r\n        const interval=setInterval(() => {\r\n            getPriceDataOne()\r\n        }, 60000)\r\n\r\n        // console.log('PRICEDATA',priceData)\r\n\r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const getPriceDataTwo = async () => {\r\n        axios\r\n            .get(\r\n                urlTwo\r\n            )\r\n            .then(res => {\r\n                setPriceDataTwo(res.data);\r\n            })\r\n            .catch(error => console.log(error));\r\n    };\r\n    \r\n    useEffect(() => {\r\n        getPriceDataTwo()\r\n\r\n        const interval=setInterval(() => {\r\n            getPriceDataTwo()\r\n        }, 60000)\r\n\r\n        // console.log('PRICEDATA',priceData)\r\n\r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const data = createBarData(priceDataOne, priceDataTwo);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* <Select\r\n                defaultValue={[colourOptions[2], colourOptions[3]]}\r\n                isMulti\r\n                name=\"colors\"\r\n                options={colourOptions}\r\n                className=\"basic-multi-select\"\r\n                classNamePrefix=\"select\"\r\n                isSearchable\r\n            /> */}\r\n            <Chart\r\n                width='100%'\r\n                height='300px'\r\n                chartType=\"AreaChart\"\r\n                loader={<div>Loading Chart</div>}\r\n                // data={[\r\n                //     ['Year', 'Sales', 'Expenses'],\r\n                //     ['2013', 1000, 400],\r\n                //     ['2014', 1170, 460],\r\n                //     ['2015', 660, 1120],\r\n                //     ['2016', 1030, 540],\r\n                // ]}\r\n                data={ data }\r\n                options={{\r\n                    title: 'Price Performance',\r\n                    hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\r\n                    vAxis: { minValue: 0 },\r\n                    colors: ['#1de9b6', '#1dc4e9']\r\n                }}\r\n                rootProps={{ 'data-testid': '1' }}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default MarketsPriceLineAreaChart;"]},"metadata":{},"sourceType":"module"}