{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst binance = require('./binance.js');\n\nconst {\n  BadRequest\n} = require('./base/errors'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class binancecoinm extends binance {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'binancecoinm',\n      'name': 'Binance COIN-M',\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg'\n      },\n      'options': {\n        'defaultType': 'delivery',\n        'leverageBrackets': undefined\n      },\n      'has': {\n        'fetchPositions': true,\n        'fetchIsolatedPositions': true,\n        'fetchFundingRate': true,\n        'fetchFundingHistory': true,\n        'setLeverage': true,\n        'setMode': true\n      },\n      // https://www.binance.com/en/fee/deliveryFee\n      'fees': {\n        'trading': {\n          'tierBased': true,\n          'percentage': true,\n          'taker': this.parseNumber('0.000500'),\n          'maker': this.parseNumber('0.000100'),\n          'tiers': {\n            'taker': [[this.parseNumber('0'), this.parseNumber('0.000500')], [this.parseNumber('250'), this.parseNumber('0.000450')], [this.parseNumber('2500'), this.parseNumber('0.000400')], [this.parseNumber('7500'), this.parseNumber('0.000300')], [this.parseNumber('22500'), this.parseNumber('0.000250')], [this.parseNumber('50000'), this.parseNumber('0.000240')], [this.parseNumber('100000'), this.parseNumber('0.000240')], [this.parseNumber('200000'), this.parseNumber('0.000240')], [this.parseNumber('400000'), this.parseNumber('0.000240')], [this.parseNumber('750000'), this.parseNumber('0.000240')]],\n            'maker': [[this.parseNumber('0'), this.parseNumber('0.000100')], [this.parseNumber('250'), this.parseNumber('0.000080')], [this.parseNumber('2500'), this.parseNumber('0.000050')], [this.parseNumber('7500'), this.parseNumber('0.0000030')], [this.parseNumber('22500'), this.parseNumber('0')], [this.parseNumber('50000'), this.parseNumber('-0.000050')], [this.parseNumber('100000'), this.parseNumber('-0.000060')], [this.parseNumber('200000'), this.parseNumber('-0.000070')], [this.parseNumber('400000'), this.parseNumber('-0.000080')], [this.parseNumber('750000'), this.parseNumber('-0.000090')]]\n          }\n        }\n      }\n    });\n  }\n\n  async fetchTradingFees(params = {}) {\n    await this.loadMarkets();\n    const marketSymbols = Object.keys(this.markets);\n    const fees = {};\n    const accountInfo = await this.dapiPrivateGetAccount(params); //\n    // {\n    //      \"canDeposit\": true,\n    //      \"canTrade\": true,\n    //      \"canWithdraw\": true,\n    //      \"feeTier\": 2,\n    //      \"updateTime\": 0\n    //      ...\n    //  }\n    //\n\n    const feeTier = this.safeInteger(accountInfo, 'feeTier');\n    const feeTiers = this.fees['trading']['tiers'];\n    const maker = feeTiers['maker'][feeTier][1];\n    const taker = feeTiers['taker'][feeTier][1];\n\n    for (let i = 0; i < marketSymbols.length; i++) {\n      const symbol = marketSymbols[i];\n      fees[symbol] = {\n        'info': {\n          'feeTier': feeTier\n        },\n        'symbol': symbol,\n        'maker': maker,\n        'taker': taker\n      };\n    }\n\n    return fees;\n  }\n\n  async transferIn(code, amount, params = {}) {\n    // transfer from spot wallet to coinm futures wallet\n    return await this.futuresTransfer(code, amount, 3, params);\n  }\n\n  async transferOut(code, amount, params = {}) {\n    // transfer from coinm futures wallet to spot wallet\n    return await this.futuresTransfer(code, amount, 4, params);\n  }\n\n  async fetchFundingRate(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.dapiPublicGetPremiumIndex(this.extend(request, params)); //\n    //     [\n    //       {\n    //         \"symbol\": \"ETHUSD_PERP\",\n    //         \"pair\": \"ETHUSD\",\n    //         \"markPrice\": \"2452.47558343\",\n    //         \"indexPrice\": \"2454.04584679\",\n    //         \"estimatedSettlePrice\": \"2464.80622965\",\n    //         \"lastFundingRate\": \"0.00004409\",\n    //         \"interestRate\": \"0.00010000\",\n    //         \"nextFundingTime\": \"1621900800000\",\n    //         \"time\": \"1621875158012\"\n    //       }\n    //     ]\n    //\n\n    return this.parseFundingRate(response[0]);\n  }\n\n  async fetchFundingRates(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.dapiPublicGetPremiumIndex(params);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const entry = response[i];\n      const parsed = this.parseFundingRate(entry);\n      result.push(parsed);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async loadLeverageBrackets(reload = false, params = {}) {\n    await this.loadMarkets(); // by default cache the leverage bracket\n    // it contains useful stuff like the maintenance margin and initial margin for positions\n\n    if (this.options['leverageBrackets'] === undefined || reload) {\n      const response = await this.dapiPrivateV2GetLeverageBracket(params);\n      this.options['leverageBrackets'] = {};\n\n      for (let i = 0; i < response.length; i++) {\n        const entry = response[i];\n        const marketId = this.safeString(entry, 'symbol');\n        const symbol = this.safeSymbol(marketId);\n        const brackets = this.safeValue(entry, 'brackets');\n        const result = [];\n\n        for (let j = 0; j < brackets.length; j++) {\n          const bracket = brackets[j]; // we use floats here internally on purpose\n\n          const qtyFloor = this.safeFloat(bracket, 'qtyFloor');\n          const maintenanceMarginPercentage = this.safeString(bracket, 'maintMarginRatio');\n          result.push([qtyFloor, maintenanceMarginPercentage]);\n        }\n\n        this.options['leverageBrackets'][symbol] = result;\n      }\n    }\n\n    return this.options['leverageBrackets'];\n  }\n\n  async fetchPositions(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    await this.loadLeverageBrackets();\n    const account = await this.dapiPrivateGetAccount(params);\n    const result = this.parseAccountPositions(account);\n    return this.filterByArray(result, 'symbol', symbols, false);\n  }\n\n  async fetchIsolatedPositions(symbol = undefined, params = {}) {\n    // only supported in usdm futures\n    await this.loadMarkets();\n    await this.loadLeverageBrackets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol); // not the unified id here\n\n      request['pair'] = market['info']['pair'];\n    }\n\n    const response = await this.dapiPrivateGetPositionRisk(this.extend(request, params));\n\n    if (symbol === undefined) {\n      const result = [];\n\n      for (let i = 0; i < response.length; i++) {\n        const parsed = this.parsePositionRisk(response[i], market);\n\n        if (parsed['marginType'] === 'isolated') {\n          result.push(parsed);\n        }\n      }\n\n      return result;\n    } else {\n      return this.parsePositionRisk(this.safeValue(response, 0), market);\n    }\n  }\n\n  async fetchFundingHistory(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined; // \"TRANSFER\"，\"WELCOME_BONUS\", \"REALIZED_PNL\"，\"FUNDING_FEE\", \"COMMISSION\" and \"INSURANCE_CLEAR\"\n\n    const request = {\n      'incomeType': 'FUNDING_FEE'\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.dapiPrivateGetIncome(this.extend(request, params));\n    return this.parseIncomes(response, market, since, limit);\n  }\n\n  async setLeverage(symbol, leverage, params = {}) {\n    // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS\n    // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS\n    if (leverage < 1 || leverage > 125) {\n      throw new BadRequest(this.id + ' leverage should be between 1 and 125');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'leverage': leverage\n    };\n    return await this.dapiPrivatePostLeverage(this.extend(request, params));\n  }\n\n  async setMarginMode(symbol, marginType, params = {}) {\n    //\n    // { \"code\": -4048 , \"msg\": \"Margin type cannot be changed if there exists position.\" }\n    //\n    // or\n    //\n    // { \"code\": 200, \"msg\": \"success\" }\n    //\n    marginType = marginType.toUpperCase();\n\n    if (marginType !== 'ISOLATED' && marginType !== 'CROSSED') {\n      throw new BadRequest(this.id + ' marginType must be either isolated or crossed');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'marginType': marginType\n    };\n    return await this.dapiPrivatePostMarginType(this.extend(request, params));\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/binancecoinm.js"],"names":["binance","require","BadRequest","module","exports","binancecoinm","describe","deepExtend","undefined","parseNumber","fetchTradingFees","params","loadMarkets","marketSymbols","Object","keys","markets","fees","accountInfo","dapiPrivateGetAccount","feeTier","safeInteger","feeTiers","maker","taker","i","length","symbol","transferIn","code","amount","futuresTransfer","transferOut","fetchFundingRate","market","request","response","dapiPublicGetPremiumIndex","extend","parseFundingRate","fetchFundingRates","symbols","result","entry","parsed","push","filterByArray","loadLeverageBrackets","reload","options","dapiPrivateV2GetLeverageBracket","marketId","safeString","safeSymbol","brackets","safeValue","j","bracket","qtyFloor","safeFloat","maintenanceMarginPercentage","fetchPositions","account","parseAccountPositions","fetchIsolatedPositions","dapiPrivateGetPositionRisk","parsePositionRisk","fetchFundingHistory","since","limit","dapiPrivateGetIncome","parseIncomes","setLeverage","leverage","id","dapiPrivatePostLeverage","setMarginMode","marginType","toUpperCase","dapiPrivatePostMarginType"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst binance = require ('./binance.js');\nconst { BadRequest } = require ('./base/errors');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class binancecoinm extends binance {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'binancecoinm',\n            'name': 'Binance COIN-M',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg',\n            },\n            'options': {\n                'defaultType': 'delivery',\n                'leverageBrackets': undefined,\n            },\n            'has': {\n                'fetchPositions': true,\n                'fetchIsolatedPositions': true,\n                'fetchFundingRate': true,\n                'fetchFundingHistory': true,\n                'setLeverage': true,\n                'setMode': true,\n            },\n            // https://www.binance.com/en/fee/deliveryFee\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': this.parseNumber ('0.000500'),\n                    'maker': this.parseNumber ('0.000100'),\n                    'tiers': {\n                        'taker': [\n                            [ this.parseNumber ('0'), this.parseNumber ('0.000500') ],\n                            [ this.parseNumber ('250'), this.parseNumber ('0.000450') ],\n                            [ this.parseNumber ('2500'), this.parseNumber ('0.000400') ],\n                            [ this.parseNumber ('7500'), this.parseNumber ('0.000300') ],\n                            [ this.parseNumber ('22500'), this.parseNumber ('0.000250') ],\n                            [ this.parseNumber ('50000'), this.parseNumber ('0.000240') ],\n                            [ this.parseNumber ('100000'), this.parseNumber ('0.000240') ],\n                            [ this.parseNumber ('200000'), this.parseNumber ('0.000240') ],\n                            [ this.parseNumber ('400000'), this.parseNumber ('0.000240') ],\n                            [ this.parseNumber ('750000'), this.parseNumber ('0.000240') ],\n                        ],\n                        'maker': [\n                            [ this.parseNumber ('0'), this.parseNumber ('0.000100') ],\n                            [ this.parseNumber ('250'), this.parseNumber ('0.000080') ],\n                            [ this.parseNumber ('2500'), this.parseNumber ('0.000050') ],\n                            [ this.parseNumber ('7500'), this.parseNumber ('0.0000030') ],\n                            [ this.parseNumber ('22500'), this.parseNumber ('0') ],\n                            [ this.parseNumber ('50000'), this.parseNumber ('-0.000050') ],\n                            [ this.parseNumber ('100000'), this.parseNumber ('-0.000060') ],\n                            [ this.parseNumber ('200000'), this.parseNumber ('-0.000070') ],\n                            [ this.parseNumber ('400000'), this.parseNumber ('-0.000080') ],\n                            [ this.parseNumber ('750000'), this.parseNumber ('-0.000090') ],\n                        ],\n                    },\n                },\n            },\n        });\n    }\n\n    async fetchTradingFees (params = {}) {\n        await this.loadMarkets ();\n        const marketSymbols = Object.keys (this.markets);\n        const fees = {};\n        const accountInfo = await this.dapiPrivateGetAccount (params);\n        //\n        // {\n        //      \"canDeposit\": true,\n        //      \"canTrade\": true,\n        //      \"canWithdraw\": true,\n        //      \"feeTier\": 2,\n        //      \"updateTime\": 0\n        //      ...\n        //  }\n        //\n        const feeTier = this.safeInteger (accountInfo, 'feeTier');\n        const feeTiers = this.fees['trading']['tiers'];\n        const maker = feeTiers['maker'][feeTier][1];\n        const taker = feeTiers['taker'][feeTier][1];\n        for (let i = 0; i < marketSymbols.length; i++) {\n            const symbol = marketSymbols[i];\n            fees[symbol] = {\n                'info': {\n                    'feeTier': feeTier,\n                },\n                'symbol': symbol,\n                'maker': maker,\n                'taker': taker,\n            };\n        }\n        return fees;\n    }\n\n    async transferIn (code, amount, params = {}) {\n        // transfer from spot wallet to coinm futures wallet\n        return await this.futuresTransfer (code, amount, 3, params);\n    }\n\n    async transferOut (code, amount, params = {}) {\n        // transfer from coinm futures wallet to spot wallet\n        return await this.futuresTransfer (code, amount, 4, params);\n    }\n\n    async fetchFundingRate (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.dapiPublicGetPremiumIndex (this.extend (request, params));\n        //\n        //     [\n        //       {\n        //         \"symbol\": \"ETHUSD_PERP\",\n        //         \"pair\": \"ETHUSD\",\n        //         \"markPrice\": \"2452.47558343\",\n        //         \"indexPrice\": \"2454.04584679\",\n        //         \"estimatedSettlePrice\": \"2464.80622965\",\n        //         \"lastFundingRate\": \"0.00004409\",\n        //         \"interestRate\": \"0.00010000\",\n        //         \"nextFundingTime\": \"1621900800000\",\n        //         \"time\": \"1621875158012\"\n        //       }\n        //     ]\n        //\n        return this.parseFundingRate (response[0]);\n    }\n\n    async fetchFundingRates (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.dapiPublicGetPremiumIndex (params);\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const entry = response[i];\n            const parsed = this.parseFundingRate (entry);\n            result.push (parsed);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async loadLeverageBrackets (reload = false, params = {}) {\n        await this.loadMarkets ();\n        // by default cache the leverage bracket\n        // it contains useful stuff like the maintenance margin and initial margin for positions\n        if ((this.options['leverageBrackets'] === undefined) || (reload)) {\n            const response = await this.dapiPrivateV2GetLeverageBracket (params);\n            this.options['leverageBrackets'] = {};\n            for (let i = 0; i < response.length; i++) {\n                const entry = response[i];\n                const marketId = this.safeString (entry, 'symbol');\n                const symbol = this.safeSymbol (marketId);\n                const brackets = this.safeValue (entry, 'brackets');\n                const result = [];\n                for (let j = 0; j < brackets.length; j++) {\n                    const bracket = brackets[j];\n                    // we use floats here internally on purpose\n                    const qtyFloor = this.safeFloat (bracket, 'qtyFloor');\n                    const maintenanceMarginPercentage = this.safeString (bracket, 'maintMarginRatio');\n                    result.push ([ qtyFloor, maintenanceMarginPercentage ]);\n                }\n                this.options['leverageBrackets'][symbol] = result;\n            }\n        }\n        return this.options['leverageBrackets'];\n    }\n\n    async fetchPositions (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadLeverageBrackets ();\n        const account = await this.dapiPrivateGetAccount (params);\n        const result = this.parseAccountPositions (account);\n        return this.filterByArray (result, 'symbol', symbols, false);\n    }\n\n    async fetchIsolatedPositions (symbol = undefined, params = {}) {\n        // only supported in usdm futures\n        await this.loadMarkets ();\n        await this.loadLeverageBrackets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            // not the unified id here\n            request['pair'] = market['info']['pair'];\n        }\n        const response = await this.dapiPrivateGetPositionRisk (this.extend (request, params));\n        if (symbol === undefined) {\n            const result = [];\n            for (let i = 0; i < response.length; i++) {\n                const parsed = this.parsePositionRisk (response[i], market);\n                if (parsed['marginType'] === 'isolated') {\n                    result.push (parsed);\n                }\n            }\n            return result;\n        } else {\n            return this.parsePositionRisk (this.safeValue (response, 0), market);\n        }\n    }\n\n    async fetchFundingHistory (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        // \"TRANSFER\"，\"WELCOME_BONUS\", \"REALIZED_PNL\"，\"FUNDING_FEE\", \"COMMISSION\" and \"INSURANCE_CLEAR\"\n        const request = {\n            'incomeType': 'FUNDING_FEE',\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['startTime'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.dapiPrivateGetIncome (this.extend (request, params));\n        return this.parseIncomes (response, market, since, limit);\n    }\n\n    async setLeverage (symbol, leverage, params = {}) {\n        // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS\n        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS\n        if ((leverage < 1) || (leverage > 125)) {\n            throw new BadRequest (this.id + ' leverage should be between 1 and 125');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'leverage': leverage,\n        };\n        return await this.dapiPrivatePostLeverage (this.extend (request, params));\n    }\n\n    async setMarginMode (symbol, marginType, params = {}) {\n        //\n        // { \"code\": -4048 , \"msg\": \"Margin type cannot be changed if there exists position.\" }\n        //\n        // or\n        //\n        // { \"code\": 200, \"msg\": \"success\" }\n        //\n        marginType = marginType.toUpperCase ();\n        if ((marginType !== 'ISOLATED') && (marginType !== 'CROSSED')) {\n            throw new BadRequest (this.id + ' marginType must be either isolated or crossed');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'marginType': marginType,\n        };\n        return await this.dapiPrivatePostMarginType (this.extend (request, params));\n    }\n};\n"]},"metadata":{},"sourceType":"script"}