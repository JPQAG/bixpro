{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class flowbtc extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'flowbtc',\n      'name': 'flowBTC',\n      'countries': ['BR'],\n      // Brazil\n      'version': 'v1',\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87443317-01c0d080-c5fe-11ea-95c2-9ebe1a8fafd9.jpg',\n        'api': 'https://publicapi.flowbtc.com.br',\n        'www': 'https://www.flowbtc.com.br',\n        'doc': 'https://www.flowbtc.com.br/api.html'\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'uid': true\n      },\n      'api': {\n        'public': {\n          'post': ['GetTicker', 'GetTrades', 'GetTradesByDate', 'GetOrderBook', 'GetProductPairs', 'GetProducts']\n        },\n        'private': {\n          'post': ['CreateAccount', 'GetUserInfo', 'SetUserInfo', 'GetAccountInfo', 'GetAccountTrades', 'GetDepositAddresses', 'Withdraw', 'CreateOrder', 'ModifyOrder', 'CancelOrder', 'CancelAllOrders', 'GetAccountOpenOrders', 'GetOrderFee']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.0025,\n          'taker': 0.005\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicPostGetProductPairs(params);\n    const markets = this.safeValue(response, 'productPairs');\n    const result = {};\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'name');\n      const baseId = this.safeString(market, 'product1Label');\n      const quoteId = this.safeString(market, 'product2Label');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const precision = {\n        'amount': this.safeInteger(market, 'product1DecimalPlaces'),\n        'price': this.safeInteger(market, 'product2DecimalPlaces')\n      };\n      const symbol = base + '/' + quote;\n      result[symbol] = {\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': undefined,\n            'max': undefined\n          },\n          'price': {\n            'min': undefined,\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market,\n        'active': undefined\n      };\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostGetAccountInfo(params);\n    const balances = this.safeValue(response, 'currencies');\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = balance['name'];\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeString(balance, 'balance');\n      account['total'] = this.safeString(balance, 'hold');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'productPair': market['id']\n    };\n    const response = await this.publicPostGetOrderBook(this.extend(request, params));\n    return this.parseOrderBook(response, symbol, undefined, 'bids', 'asks', 'px', 'qty');\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'productPair': market['id']\n    };\n    const ticker = await this.publicPostGetTicker(this.extend(request, params));\n    const timestamp = this.milliseconds();\n    const last = this.safeNumber(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeNumber(ticker, 'volume24hr'),\n      'quoteVolume': this.safeNumber(ticker, 'volume24hrProduct2'),\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market) {\n    const timestamp = this.safeTimestamp(trade, 'unixtime');\n    const side = trade['incomingOrderSide'] === 0 ? 'buy' : 'sell';\n    const id = this.safeString(trade, 'tid');\n    const priceString = this.safeString(trade, 'px');\n    const amountString = this.safeString(trade, 'qty');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': market['symbol'],\n      'id': id,\n      'order': undefined,\n      'type': undefined,\n      'side': side,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'takerOrMaker': undefined,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'ins': market['id'],\n      'startIndex': -1\n    };\n    const response = await this.publicPostGetTrades(this.extend(request, params));\n    return this.parseTrades(response['trades'], market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const orderType = type === 'market' ? 1 : 0;\n    const request = {\n      'ins': this.marketId(symbol),\n      'side': side,\n      'orderType': orderType,\n      'qty': amount,\n      'px': this.priceToPrecision(symbol, price)\n    };\n    const response = await this.privatePostCreateOrder(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['serverOrderId']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if ('ins' in params) {\n      const request = {\n        'serverOrderId': id\n      };\n      return await this.privatePostCancelOrder(this.extend(request, params));\n    }\n\n    throw new ExchangeError(this.id + ' cancelOrder() requires an `ins` symbol parameter for cancelling an order');\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const url = this.urls['api'] + '/' + this.version + '/' + path;\n\n    if (api === 'public') {\n      if (Object.keys(params).length) {\n        body = this.json(params);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      const auth = nonce.toString() + this.uid + this.apiKey;\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n      body = this.json(this.extend({\n        'apiKey': this.apiKey,\n        'apiNonce': nonce,\n        'apiSig': signature.toUpperCase()\n      }, params));\n      headers = {\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('isAccepted' in response) {\n      if (response['isAccepted']) {\n        return response;\n      }\n    }\n\n    throw new ExchangeError(this.id + ' ' + this.json(response));\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/flowbtc.js"],"names":["Exchange","require","ExchangeError","Precise","module","exports","flowbtc","describe","deepExtend","fetchMarkets","params","response","publicPostGetProductPairs","markets","safeValue","result","i","length","market","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","precision","safeInteger","symbol","undefined","fetchBalance","loadMarkets","privatePostGetAccountInfo","balances","balance","currencyId","code","account","parseBalance","fetchOrderBook","limit","request","publicPostGetOrderBook","extend","parseOrderBook","fetchTicker","ticker","publicPostGetTicker","timestamp","milliseconds","last","safeNumber","iso8601","parseTrade","trade","safeTimestamp","side","priceString","amountString","price","parseNumber","amount","cost","stringMul","fetchTrades","since","publicPostGetTrades","parseTrades","createOrder","type","orderType","marketId","priceToPrecision","privatePostCreateOrder","cancelOrder","privatePostCancelOrder","sign","path","api","method","headers","body","url","urls","version","Object","keys","json","checkRequiredCredentials","nonce","auth","toString","uid","apiKey","signature","hmac","encode","secret","toUpperCase","fetch2"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class flowbtc extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'flowbtc',\n            'name': 'flowBTC',\n            'countries': [ 'BR' ], // Brazil\n            'version': 'v1',\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87443317-01c0d080-c5fe-11ea-95c2-9ebe1a8fafd9.jpg',\n                'api': 'https://publicapi.flowbtc.com.br',\n                'www': 'https://www.flowbtc.com.br',\n                'doc': 'https://www.flowbtc.com.br/api.html',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'post': [\n                        'GetTicker',\n                        'GetTrades',\n                        'GetTradesByDate',\n                        'GetOrderBook',\n                        'GetProductPairs',\n                        'GetProducts',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'CreateAccount',\n                        'GetUserInfo',\n                        'SetUserInfo',\n                        'GetAccountInfo',\n                        'GetAccountTrades',\n                        'GetDepositAddresses',\n                        'Withdraw',\n                        'CreateOrder',\n                        'ModifyOrder',\n                        'CancelOrder',\n                        'CancelAllOrders',\n                        'GetAccountOpenOrders',\n                        'GetOrderFee',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.0025,\n                    'taker': 0.005,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicPostGetProductPairs (params);\n        const markets = this.safeValue (response, 'productPairs');\n        const result = {};\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'name');\n            const baseId = this.safeString (market, 'product1Label');\n            const quoteId = this.safeString (market, 'product2Label');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const precision = {\n                'amount': this.safeInteger (market, 'product1DecimalPlaces'),\n                'price': this.safeInteger (market, 'product2DecimalPlaces'),\n            };\n            const symbol = base + '/' + quote;\n            result[symbol] = {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n                'active': undefined,\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostGetAccountInfo (params);\n        const balances = this.safeValue (response, 'currencies');\n        const result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = balance['name'];\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeString (balance, 'balance');\n            account['total'] = this.safeString (balance, 'hold');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'productPair': market['id'],\n        };\n        const response = await this.publicPostGetOrderBook (this.extend (request, params));\n        return this.parseOrderBook (response, symbol, undefined, 'bids', 'asks', 'px', 'qty');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'productPair': market['id'],\n        };\n        const ticker = await this.publicPostGetTicker (this.extend (request, params));\n        const timestamp = this.milliseconds ();\n        const last = this.safeNumber (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeNumber (ticker, 'volume24hr'),\n            'quoteVolume': this.safeNumber (ticker, 'volume24hrProduct2'),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        const timestamp = this.safeTimestamp (trade, 'unixtime');\n        const side = (trade['incomingOrderSide'] === 0) ? 'buy' : 'sell';\n        const id = this.safeString (trade, 'tid');\n        const priceString = this.safeString (trade, 'px');\n        const amountString = this.safeString (trade, 'qty');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': id,\n            'order': undefined,\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'takerOrMaker': undefined,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'ins': market['id'],\n            'startIndex': -1,\n        };\n        const response = await this.publicPostGetTrades (this.extend (request, params));\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const orderType = (type === 'market') ? 1 : 0;\n        const request = {\n            'ins': this.marketId (symbol),\n            'side': side,\n            'orderType': orderType,\n            'qty': amount,\n            'px': this.priceToPrecision (symbol, price),\n        };\n        const response = await this.privatePostCreateOrder (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['serverOrderId'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        if ('ins' in params) {\n            const request = {\n                'serverOrderId': id,\n            };\n            return await this.privatePostCancelOrder (this.extend (request, params));\n        }\n        throw new ExchangeError (this.id + ' cancelOrder() requires an `ins` symbol parameter for cancelling an order');\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const url = this.urls['api'] + '/' + this.version + '/' + path;\n        if (api === 'public') {\n            if (Object.keys (params).length) {\n                body = this.json (params);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            const auth = nonce.toString () + this.uid + this.apiKey;\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            body = this.json (this.extend ({\n                'apiKey': this.apiKey,\n                'apiNonce': nonce,\n                'apiSig': signature.toUpperCase (),\n            }, params));\n            headers = {\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('isAccepted' in response) {\n            if (response['isAccepted']) {\n                return response;\n            }\n        }\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n};\n"]},"metadata":{},"sourceType":"script"}