{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class paymium extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'paymium',\n      'name': 'Paymium',\n      'countries': ['FR', 'EU'],\n      'rateLimit': 2000,\n      'version': 'v1',\n      'has': {\n        'CORS': true,\n        'fetchBalance': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'fetchOrderBook': true,\n        'createOrder': true,\n        'cancelOrder': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87153930-f0f02200-c2c0-11ea-9c0a-40337375ae89.jpg',\n        'api': 'https://paymium.com/api',\n        'www': 'https://www.paymium.com',\n        'fees': 'https://www.paymium.com/page/help/fees',\n        'doc': ['https://github.com/Paymium/api-documentation', 'https://www.paymium.com/page/developers'],\n        'referral': 'https://www.paymium.com/page/sign-up?referral=eDAzPoRQFMvaAB8sf-qj'\n      },\n      'api': {\n        'public': {\n          'get': ['countries', 'data/{currency}/ticker', 'data/{currency}/trades', 'data/{currency}/depth', 'bitcoin_charts/{id}/trades', 'bitcoin_charts/{id}/depth']\n        },\n        'private': {\n          'get': ['user', 'user/addresses', 'user/addresses/{address}', 'user/orders', 'user/orders/{uuid}', 'user/price_alerts', 'merchant/get_payment/{uuid}'],\n          'post': ['user/addresses', 'user/orders', 'user/withdrawals', 'user/email_transfers', 'user/payment_requests', 'user/price_alerts', 'merchant/create_payment'],\n          'delete': ['user/orders/{uuid}', 'user/orders/{uuid}/cancel', 'user/price_alerts/{id}']\n        }\n      },\n      'markets': {\n        'BTC/EUR': {\n          'id': 'eur',\n          'symbol': 'BTC/EUR',\n          'base': 'BTC',\n          'quote': 'EUR',\n          'baseId': 'btc',\n          'quoteId': 'eur'\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.002,\n          'taker': 0.002\n        }\n      }\n    });\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetUser(params);\n    const result = {\n      'info': response\n    };\n    const currencies = Object.keys(this.currencies);\n\n    for (let i = 0; i < currencies.length; i++) {\n      const code = currencies[i];\n      const currencyId = this.currencyId(code);\n      const free = 'balance_' + currencyId;\n\n      if (free in response) {\n        const account = this.account();\n        const used = 'locked_' + currencyId;\n        account['free'] = this.safeString(response, free);\n        account['used'] = this.safeString(response, used);\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currency': this.marketId(symbol)\n    };\n    const response = await this.publicGetDataCurrencyDepth(this.extend(request, params));\n    return this.parseOrderBook(response, symbol, undefined, 'bids', 'asks', 'price', 'amount');\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'currency': this.marketId(symbol)\n    };\n    const ticker = await this.publicGetDataCurrencyTicker(this.extend(request, params));\n    const timestamp = this.safeTimestamp(ticker, 'at');\n    const vwap = this.safeNumber(ticker, 'vwap');\n    const baseVolume = this.safeNumber(ticker, 'volume');\n    let quoteVolume = undefined;\n\n    if (baseVolume !== undefined && vwap !== undefined) {\n      quoteVolume = baseVolume * vwap;\n    }\n\n    const last = this.safeNumber(ticker, 'price');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': this.safeNumber(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': this.safeNumber(ticker, 'variation'),\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market) {\n    const timestamp = this.safeTimestamp(trade, 'created_at_int');\n    const id = this.safeString(trade, 'uuid');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const side = this.safeString(trade, 'side');\n    const priceString = this.safeString(trade, 'price');\n    const amountField = 'traded_' + market['base'].toLowerCase();\n    const amountString = this.safeString(trade, amountField);\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    return {\n      'info': trade,\n      'id': id,\n      'order': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id']\n    };\n    const response = await this.publicGetDataCurrencyTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'type': this.capitalize(type) + 'Order',\n      'currency': this.marketId(symbol),\n      'direction': side,\n      'amount': amount\n    };\n\n    if (type !== 'market') {\n      request['price'] = price;\n    }\n\n    const response = await this.privatePostUserOrders(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['uuid']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'uuid': id\n    };\n    return await this.privateDeleteUserOrdersUuidCancel(this.extend(request, params));\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      let auth = nonce + url;\n      headers = {\n        'Api-Key': this.apiKey,\n        'Api-Nonce': nonce\n      };\n\n      if (method === 'POST') {\n        if (Object.keys(query).length) {\n          body = this.json(query);\n          auth += body;\n          headers['Content-Type'] = 'application/json';\n        }\n      } else {\n        if (Object.keys(query).length) {\n          const queryString = this.urlencode(query);\n          auth += queryString;\n          url += '?' + queryString;\n        }\n      }\n\n      headers['Api-Signature'] = this.hmac(this.encode(auth), this.encode(this.secret));\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('errors' in response) {\n      throw new ExchangeError(this.id + ' ' + this.json(response));\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/paymium.js"],"names":["Exchange","require","ExchangeError","Precise","module","exports","paymium","describe","deepExtend","fetchBalance","params","loadMarkets","response","privateGetUser","result","currencies","Object","keys","i","length","code","currencyId","free","account","used","safeString","parseBalance","fetchOrderBook","symbol","limit","undefined","request","marketId","publicGetDataCurrencyDepth","extend","parseOrderBook","fetchTicker","ticker","publicGetDataCurrencyTicker","timestamp","safeTimestamp","vwap","safeNumber","baseVolume","quoteVolume","last","iso8601","parseTrade","trade","market","id","side","priceString","amountField","toLowerCase","amountString","price","parseNumber","amount","cost","stringMul","fetchTrades","since","publicGetDataCurrencyTrades","parseTrades","createOrder","type","capitalize","privatePostUserOrders","cancelOrder","privateDeleteUserOrdersUuidCancel","sign","path","api","method","headers","body","url","urls","version","implodeParams","query","omit","extractParams","urlencode","checkRequiredCredentials","nonce","toString","auth","apiKey","json","queryString","hmac","encode","secret","fetch2"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class paymium extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'paymium',\n            'name': 'Paymium',\n            'countries': [ 'FR', 'EU' ],\n            'rateLimit': 2000,\n            'version': 'v1',\n            'has': {\n                'CORS': true,\n                'fetchBalance': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'fetchOrderBook': true,\n                'createOrder': true,\n                'cancelOrder': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87153930-f0f02200-c2c0-11ea-9c0a-40337375ae89.jpg',\n                'api': 'https://paymium.com/api',\n                'www': 'https://www.paymium.com',\n                'fees': 'https://www.paymium.com/page/help/fees',\n                'doc': [\n                    'https://github.com/Paymium/api-documentation',\n                    'https://www.paymium.com/page/developers',\n                ],\n                'referral': 'https://www.paymium.com/page/sign-up?referral=eDAzPoRQFMvaAB8sf-qj',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'countries',\n                        'data/{currency}/ticker',\n                        'data/{currency}/trades',\n                        'data/{currency}/depth',\n                        'bitcoin_charts/{id}/trades',\n                        'bitcoin_charts/{id}/depth',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'user',\n                        'user/addresses',\n                        'user/addresses/{address}',\n                        'user/orders',\n                        'user/orders/{uuid}',\n                        'user/price_alerts',\n                        'merchant/get_payment/{uuid}',\n                    ],\n                    'post': [\n                        'user/addresses',\n                        'user/orders',\n                        'user/withdrawals',\n                        'user/email_transfers',\n                        'user/payment_requests',\n                        'user/price_alerts',\n                        'merchant/create_payment',\n                    ],\n                    'delete': [\n                        'user/orders/{uuid}',\n                        'user/orders/{uuid}/cancel',\n                        'user/price_alerts/{id}',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/EUR': { 'id': 'eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'btc', 'quoteId': 'eur' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.002,\n                    'taker': 0.002,\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetUser (params);\n        const result = { 'info': response };\n        const currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            const code = currencies[i];\n            const currencyId = this.currencyId (code);\n            const free = 'balance_' + currencyId;\n            if (free in response) {\n                const account = this.account ();\n                const used = 'locked_' + currencyId;\n                account['free'] = this.safeString (response, free);\n                account['used'] = this.safeString (response, used);\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currency': this.marketId (symbol),\n        };\n        const response = await this.publicGetDataCurrencyDepth (this.extend (request, params));\n        return this.parseOrderBook (response, symbol, undefined, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'currency': this.marketId (symbol),\n        };\n        const ticker = await this.publicGetDataCurrencyTicker (this.extend (request, params));\n        const timestamp = this.safeTimestamp (ticker, 'at');\n        const vwap = this.safeNumber (ticker, 'vwap');\n        const baseVolume = this.safeNumber (ticker, 'volume');\n        let quoteVolume = undefined;\n        if (baseVolume !== undefined && vwap !== undefined) {\n            quoteVolume = baseVolume * vwap;\n        }\n        const last = this.safeNumber (ticker, 'price');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': this.safeNumber (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': this.safeNumber (ticker, 'variation'),\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        const timestamp = this.safeTimestamp (trade, 'created_at_int');\n        const id = this.safeString (trade, 'uuid');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const side = this.safeString (trade, 'side');\n        const priceString = this.safeString (trade, 'price');\n        const amountField = 'traded_' + market['base'].toLowerCase ();\n        const amountString = this.safeString (trade, amountField);\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        return {\n            'info': trade,\n            'id': id,\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n        };\n        const response = await this.publicGetDataCurrencyTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'type': this.capitalize (type) + 'Order',\n            'currency': this.marketId (symbol),\n            'direction': side,\n            'amount': amount,\n        };\n        if (type !== 'market') {\n            request['price'] = price;\n        }\n        const response = await this.privatePostUserOrders (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['uuid'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'uuid': id,\n        };\n        return await this.privateDeleteUserOrdersUuidCancel (this.extend (request, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            let auth = nonce + url;\n            headers = {\n                'Api-Key': this.apiKey,\n                'Api-Nonce': nonce,\n            };\n            if (method === 'POST') {\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    auth += body;\n                    headers['Content-Type'] = 'application/json';\n                }\n            } else {\n                if (Object.keys (query).length) {\n                    const queryString = this.urlencode (query);\n                    auth += queryString;\n                    url += '?' + queryString;\n                }\n            }\n            headers['Api-Signature'] = this.hmac (this.encode (auth), this.encode (this.secret));\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('errors' in response) {\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}