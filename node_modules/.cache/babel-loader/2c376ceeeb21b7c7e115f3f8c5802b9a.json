{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  AuthenticationError,\n  NullResponse,\n  InvalidOrder,\n  NotSupported,\n  InsufficientFunds,\n  InvalidNonce,\n  OrderNotFound,\n  RateLimitExceeded,\n  DDoSProtection\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class cex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'cex',\n      'name': 'CEX.IO',\n      'countries': ['GB', 'EU', 'CY', 'RU'],\n      'rateLimit': 1500,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true\n      },\n      'timeframes': {\n        '1m': '1m'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg',\n        'api': 'https://cex.io/api',\n        'www': 'https://cex.io',\n        'doc': 'https://cex.io/cex-api',\n        'fees': ['https://cex.io/fee-schedule', 'https://cex.io/limits-commissions'],\n        'referral': 'https://cex.io/r/0/up105393824/0/'\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'uid': true\n      },\n      'api': {\n        'public': {\n          'get': ['currency_profile', 'currency_limits/', 'last_price/{pair}/', 'last_prices/{currencies}/', 'ohlcv/hd/{yyyymmdd}/{pair}', 'order_book/{pair}/', 'ticker/{pair}/', 'tickers/{currencies}/', 'trade_history/{pair}/'],\n          'post': ['convert/{pair}', 'price_stats/{pair}']\n        },\n        'private': {\n          'post': ['active_orders_status/', 'archived_orders/{pair}/', 'balance/', 'cancel_order/', 'cancel_orders/{pair}/', 'cancel_replace_order/{pair}/', 'close_position/{pair}/', 'get_address/', 'get_myfee/', 'get_order/', 'get_order_tx/', 'open_orders/{pair}/', 'open_orders/', 'open_position/{pair}/', 'open_positions/{pair}/', 'place_order/{pair}/', 'raw_tx_history']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.16 / 100,\n          'taker': 0.25 / 100\n        },\n        'funding': {\n          'withdraw': {\n            // 'USD': undefined,\n            // 'EUR': undefined,\n            // 'RUB': undefined,\n            // 'GBP': undefined,\n            'BTC': 0.001,\n            'ETH': 0.01,\n            'BCH': 0.001,\n            'DASH': 0.01,\n            'BTG': 0.001,\n            'ZEC': 0.001,\n            'XRP': 0.02\n          },\n          'deposit': {\n            // 'USD': amount => amount * 0.035 + 0.25,\n            // 'EUR': amount => amount * 0.035 + 0.24,\n            // 'RUB': amount => amount * 0.05 + 15.57,\n            // 'GBP': amount => amount * 0.035 + 0.2,\n            'BTC': 0.0,\n            'ETH': 0.0,\n            'BCH': 0.0,\n            'DASH': 0.0,\n            'BTG': 0.0,\n            'ZEC': 0.0,\n            'XRP': 0.0,\n            'XLM': 0.0\n          }\n        }\n      },\n      'exceptions': {\n        'exact': {},\n        'broad': {\n          'Insufficient funds': InsufficientFunds,\n          'Nonce must be incremented': InvalidNonce,\n          'Invalid Order': InvalidOrder,\n          'Order not found': OrderNotFound,\n          'limit exceeded': RateLimitExceeded,\n          // {\"error\":\"rate limit exceeded\"}\n          'Invalid API key': AuthenticationError,\n          'There was an error while placing your order': InvalidOrder,\n          'Sorry, too many clients already': DDoSProtection\n        }\n      },\n      'options': {\n        'fetchOHLCVWarning': true,\n        'createMarketBuyOrderRequiresPrice': true,\n        'order': {\n          'status': {\n            'c': 'canceled',\n            'd': 'closed',\n            'cd': 'canceled',\n            'a': 'open'\n          }\n        }\n      }\n    });\n  }\n\n  async fetchCurrenciesFromCache(params = {}) {\n    // this method is now redundant\n    // currencies are now fetched before markets\n    const options = this.safeValue(this.options, 'fetchCurrencies', {});\n    const timestamp = this.safeInteger(options, 'timestamp');\n    const expires = this.safeInteger(options, 'expires', 1000);\n    const now = this.milliseconds();\n\n    if (timestamp === undefined || now - timestamp > expires) {\n      const response = await this.publicGetCurrencyProfile(params);\n      this.options['fetchCurrencies'] = this.extend(options, {\n        'response': response,\n        'timestamp': now\n      });\n    }\n\n    return this.safeValue(this.options['fetchCurrencies'], 'response');\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.fetchCurrenciesFromCache(params);\n    this.options['currencies'] = {\n      'timestamp': this.milliseconds(),\n      'response': response\n    }; //\n    //     {\n    //         \"e\":\"currency_profile\",\n    //         \"ok\":\"ok\",\n    //         \"data\":{\n    //             \"symbols\":[\n    //                 {\n    //                     \"code\":\"GHS\",\n    //                     \"contract\":true,\n    //                     \"commodity\":true,\n    //                     \"fiat\":false,\n    //                     \"description\":\"CEX.IO doesn't provide cloud mining services anymore.\",\n    //                     \"precision\":8,\n    //                     \"scale\":0,\n    //                     \"minimumCurrencyAmount\":\"0.00000001\",\n    //                     \"minimalWithdrawalAmount\":-1\n    //                 },\n    //                 {\n    //                     \"code\":\"BTC\",\n    //                     \"contract\":false,\n    //                     \"commodity\":false,\n    //                     \"fiat\":false,\n    //                     \"description\":\"\",\n    //                     \"precision\":8,\n    //                     \"scale\":0,\n    //                     \"minimumCurrencyAmount\":\"0.00000001\",\n    //                     \"minimalWithdrawalAmount\":0.002\n    //                 },\n    //                 {\n    //                     \"code\":\"ETH\",\n    //                     \"contract\":false,\n    //                     \"commodity\":false,\n    //                     \"fiat\":false,\n    //                     \"description\":\"\",\n    //                     \"precision\":8,\n    //                     \"scale\":2,\n    //                     \"minimumCurrencyAmount\":\"0.00000100\",\n    //                     \"minimalWithdrawalAmount\":0.01\n    //                 }\n    //             ],\n    //             \"pairs\":[\n    //                 {\n    //                     \"symbol1\":\"BTC\",\n    //                     \"symbol2\":\"USD\",\n    //                     \"pricePrecision\":1,\n    //                     \"priceScale\":\"/1000000\",\n    //                     \"minLotSize\":0.002,\n    //                     \"minLotSizeS2\":20\n    //                 },\n    //                 {\n    //                     \"symbol1\":\"ETH\",\n    //                     \"symbol2\":\"USD\",\n    //                     \"pricePrecision\":2,\n    //                     \"priceScale\":\"/10000\",\n    //                     \"minLotSize\":0.1,\n    //                     \"minLotSizeS2\":20\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const currencies = this.safeValue(data, 'symbols', []);\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'code');\n      const code = this.safeCurrencyCode(id);\n      const precision = this.safeInteger(currency, 'precision');\n      const active = true;\n      result[code] = {\n        'id': id,\n        'code': code,\n        'name': id,\n        'active': active,\n        'precision': precision,\n        'fee': undefined,\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(currency, 'minimumCurrencyAmount'),\n            'max': undefined\n          },\n          'withdraw': {\n            'min': this.safeNumber(currency, 'minimalWithdrawalAmount'),\n            'max': undefined\n          }\n        },\n        'info': currency\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const currenciesResponse = await this.fetchCurrenciesFromCache(params);\n    const currenciesData = this.safeValue(currenciesResponse, 'data', {});\n    const currencies = this.safeValue(currenciesData, 'symbols', []);\n    const currenciesById = this.indexBy(currencies, 'code');\n    const pairs = this.safeValue(currenciesData, 'pairs', []);\n    const response = await this.publicGetCurrencyLimits(params); //\n    //     {\n    //         \"e\":\"currency_limits\",\n    //         \"ok\":\"ok\",\n    //         \"data\": {\n    //             \"pairs\":[\n    //                 {\n    //                     \"symbol1\":\"BTC\",\n    //                     \"symbol2\":\"USD\",\n    //                     \"minLotSize\":0.002,\n    //                     \"minLotSizeS2\":20,\n    //                     \"maxLotSize\":30,\n    //                     \"minPrice\":\"1500\",\n    //                     \"maxPrice\":\"35000\"\n    //                 },\n    //                 {\n    //                     \"symbol1\":\"BCH\",\n    //                     \"symbol2\":\"EUR\",\n    //                     \"minLotSize\":0.1,\n    //                     \"minLotSizeS2\":20,\n    //                     \"maxLotSize\":null,\n    //                     \"minPrice\":\"25\",\n    //                     \"maxPrice\":\"8192\"\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const result = [];\n    const markets = this.safeValue(response['data'], 'pairs');\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const baseId = this.safeString(market, 'symbol1');\n      const quoteId = this.safeString(market, 'symbol2');\n      const id = baseId + '/' + quoteId;\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const baseCurrency = this.safeValue(currenciesById, baseId, {});\n      const quoteCurrency = this.safeValue(currenciesById, quoteId, {});\n      let pricePrecision = this.safeInteger(quoteCurrency, 'precision', 8);\n\n      for (let j = 0; j < pairs.length; j++) {\n        const pair = pairs[j];\n\n        if (pair['symbol1'] === baseId && pair['symbol2'] === quoteId) {\n          // we might need to account for `priceScale` here\n          pricePrecision = this.safeInteger(pair, 'pricePrecision', pricePrecision);\n        }\n      }\n\n      const baseCcyPrecision = this.safeInteger(baseCurrency, 'precision', 8);\n      const baseCcyScale = this.safeInteger(baseCurrency, 'scale', 0);\n      const amountPrecision = baseCcyPrecision - baseCcyScale;\n      const precision = {\n        'amount': amountPrecision,\n        'price': pricePrecision\n      };\n      result.push({\n        'id': id,\n        'info': market,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(market, 'minLotSize'),\n            'max': this.safeNumber(market, 'maxLotSize')\n          },\n          'price': {\n            'min': this.safeNumber(market, 'minPrice'),\n            'max': this.safeNumber(market, 'maxPrice')\n          },\n          'cost': {\n            'min': this.safeNumber(market, 'minLotSizeS2'),\n            'max': undefined\n          }\n        },\n        'active': undefined\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostBalance(params);\n    const result = {\n      'info': response\n    };\n    const ommited = ['username', 'timestamp'];\n    const balances = this.omit(response, ommited);\n    const currencyIds = Object.keys(balances);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const balance = this.safeValue(balances, currencyId, {});\n      const account = this.account();\n      account['free'] = this.safeString(balance, 'available'); // https://github.com/ccxt/ccxt/issues/5484\n\n      account['used'] = this.safeString(balance, 'orders', '0');\n      const code = this.safeCurrencyCode(currencyId);\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n\n    if (limit !== undefined) {\n      request['depth'] = limit;\n    }\n\n    const response = await this.publicGetOrderBookPair(this.extend(request, params));\n    const timestamp = this.safeTimestamp(response, 'timestamp');\n    return this.parseOrderBook(response, symbol, timestamp);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1591403940,\n    //         0.024972,\n    //         0.024972,\n    //         0.024969,\n    //         0.024969,\n    //         0.49999900\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (since === undefined) {\n      since = this.milliseconds() - 86400000; // yesterday\n    } else {\n      if (this.options['fetchOHLCVWarning']) {\n        throw new ExchangeError(this.id + \" fetchOHLCV warning: CEX can return historical candles for a certain date only, this might produce an empty or null reply. Set exchange.options['fetchOHLCVWarning'] = false or add ({ 'options': { 'fetchOHLCVWarning': false }}) to constructor params to suppress this warning message.\");\n      }\n    }\n\n    let ymd = this.ymd(since);\n    ymd = ymd.split('-');\n    ymd = ymd.join('');\n    const request = {\n      'pair': market['id'],\n      'yyyymmdd': ymd\n    };\n\n    try {\n      const response = await this.publicGetOhlcvHdYyyymmddPair(this.extend(request, params)); //\n      //     {\n      //         \"time\":20200606,\n      //         \"data1m\":\"[[1591403940,0.024972,0.024972,0.024969,0.024969,0.49999900]]\",\n      //     }\n      //\n\n      const key = 'data' + this.timeframes[timeframe];\n      const data = this.safeString(response, key);\n      const ohlcvs = JSON.parse(data);\n      return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);\n    } catch (e) {\n      if (e instanceof NullResponse) {\n        return [];\n      }\n    }\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.safeTimestamp(ticker, 'timestamp');\n    const volume = this.safeNumber(ticker, 'volume');\n    const high = this.safeNumber(ticker, 'high');\n    const low = this.safeNumber(ticker, 'low');\n    const bid = this.safeNumber(ticker, 'bid');\n    const ask = this.safeNumber(ticker, 'ask');\n    const last = this.safeNumber(ticker, 'last');\n    let symbol = undefined;\n\n    if (market) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': high,\n      'low': low,\n      'bid': bid,\n      'bidVolume': undefined,\n      'ask': ask,\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': volume,\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const currencies = Object.keys(this.currencies);\n    const request = {\n      'currencies': currencies.join('/')\n    };\n    const response = await this.publicGetTickersCurrencies(this.extend(request, params));\n    const tickers = response['data'];\n    const result = {};\n\n    for (let t = 0; t < tickers.length; t++) {\n      const ticker = tickers[t];\n      const symbol = ticker['pair'].replace(':', '/');\n      const market = this.markets[symbol];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const ticker = await this.publicGetTickerPair(this.extend(request, params));\n    return this.parseTicker(ticker, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    const id = this.safeString(trade, 'tid');\n    const type = undefined;\n    const side = this.safeString(trade, 'type');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'amount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': type,\n      'side': side,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this.publicGetTradeHistoryPair(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    // for market buy it requires the amount of quote currency to spend\n    if (type === 'market' && side === 'buy') {\n      if (this.options['createMarketBuyOrderRequiresPrice']) {\n        if (price === undefined) {\n          throw new InvalidOrder(this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the amount argument (the exchange-specific behaviour)\");\n        } else {\n          amount = amount * price;\n        }\n      }\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol),\n      'type': side,\n      'amount': amount\n    };\n\n    if (type === 'limit') {\n      request['price'] = price;\n    } else {\n      request['order_type'] = type;\n    }\n\n    const response = await this.privatePostPlaceOrderPair(this.extend(request, params)); //\n    //     {\n    //         \"id\": \"12978363524\",\n    //         \"time\": 1586610022259,\n    //         \"type\": \"buy\",\n    //         \"price\": \"0.033934\",\n    //         \"amount\": \"0.10722802\",\n    //         \"pending\": \"0.10722802\",\n    //         \"complete\": false\n    //     }\n    //\n\n    const placedAmount = this.safeNumber(response, 'amount');\n    const remaining = this.safeNumber(response, 'pending');\n    const timestamp = this.safeValue(response, 'time');\n    const complete = this.safeValue(response, 'complete');\n    const status = complete ? 'closed' : 'open';\n    let filled = undefined;\n\n    if (placedAmount !== undefined && remaining !== undefined) {\n      filled = Math.max(placedAmount - remaining, 0);\n    }\n\n    return {\n      'id': this.safeString(response, 'id'),\n      'info': response,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'type': type,\n      'side': this.safeString(response, 'type'),\n      'symbol': symbol,\n      'status': status,\n      'price': this.safeNumber(response, 'price'),\n      'amount': placedAmount,\n      'cost': undefined,\n      'average': undefined,\n      'remaining': remaining,\n      'filled': filled,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  parseOrder(order, market = undefined) {\n    // Depending on the call, 'time' can be a unix int, unix string or ISO string\n    // Yes, really\n    let timestamp = this.safeValue(order, 'time');\n\n    if (typeof timestamp === 'string' && timestamp.indexOf('T') >= 0) {\n      // ISO8601 string\n      timestamp = this.parse8601(timestamp);\n    } else {\n      // either integer or string integer\n      timestamp = parseInt(timestamp);\n    }\n\n    let symbol = undefined;\n\n    if (market === undefined) {\n      const baseId = this.safeString(order, 'symbol1');\n      const quoteId = this.safeString(order, 'symbol2');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      symbol = base + '/' + quote;\n\n      if (symbol in this.markets) {\n        market = this.market(symbol);\n      }\n    }\n\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const price = this.safeNumber(order, 'price');\n    let amount = this.safeNumber(order, 'amount'); // sell orders can have a negative amount\n    // https://github.com/ccxt/ccxt/issues/5338\n\n    if (amount !== undefined) {\n      amount = Math.abs(amount);\n    }\n\n    const remaining = this.safeNumber2(order, 'pending', 'remains');\n    const filled = amount - remaining;\n    let fee = undefined;\n    let cost = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n      const taCost = this.safeNumber(order, 'ta:' + market['quote']);\n      const ttaCost = this.safeNumber(order, 'tta:' + market['quote']);\n      cost = this.sum(taCost, ttaCost);\n      const baseFee = 'fa:' + market['base'];\n      const baseTakerFee = 'tfa:' + market['base'];\n      const quoteFee = 'fa:' + market['quote'];\n      const quoteTakerFee = 'tfa:' + market['quote'];\n      let feeRate = this.safeNumber(order, 'tradingFeeMaker');\n\n      if (!feeRate) {\n        feeRate = this.safeNumber(order, 'tradingFeeTaker', feeRate);\n      }\n\n      if (feeRate) {\n        feeRate /= 100.0; // convert to mathematically-correct percentage coefficients: 1.0 = 100%\n      }\n\n      if (baseFee in order || baseTakerFee in order) {\n        const baseFeeCost = this.safeNumber2(order, baseFee, baseTakerFee);\n        fee = {\n          'currency': market['base'],\n          'rate': feeRate,\n          'cost': baseFeeCost\n        };\n      } else if (quoteFee in order || quoteTakerFee in order) {\n        const quoteFeeCost = this.safeNumber2(order, quoteFee, quoteTakerFee);\n        fee = {\n          'currency': market['quote'],\n          'rate': feeRate,\n          'cost': quoteFeeCost\n        };\n      }\n    }\n\n    if (!cost) {\n      cost = price * filled;\n    }\n\n    const side = order['type'];\n    let trades = undefined;\n    const orderId = order['id'];\n\n    if ('vtx' in order) {\n      trades = [];\n\n      for (let i = 0; i < order['vtx'].length; i++) {\n        const item = order['vtx'][i];\n        const tradeSide = this.safeString(item, 'type');\n\n        if (tradeSide === 'cancel') {\n          // looks like this might represent the cancelled part of an order\n          //   { id: '4426729543',\n          //     type: 'cancel',\n          //     time: '2017-09-22T00:24:30.476Z',\n          //     user: 'up106404164',\n          //     c: 'user:up106404164:a:BCH',\n          //     d: 'order:4426728375:a:BCH',\n          //     a: '0.09935956',\n          //     amount: '0.09935956',\n          //     balance: '0.42580261',\n          //     symbol: 'BCH',\n          //     order: '4426728375',\n          //     buy: null,\n          //     sell: null,\n          //     pair: null,\n          //     pos: null,\n          //     cs: '0.42580261',\n          //     ds: 0 }\n          continue;\n        }\n\n        const tradePrice = this.safeNumber(item, 'price');\n\n        if (tradePrice === undefined) {\n          // this represents the order\n          //   {\n          //     \"a\": \"0.47000000\",\n          //     \"c\": \"user:up106404164:a:EUR\",\n          //     \"d\": \"order:6065499239:a:EUR\",\n          //     \"cs\": \"1432.93\",\n          //     \"ds\": \"476.72\",\n          //     \"id\": \"6065499249\",\n          //     \"buy\": null,\n          //     \"pos\": null,\n          //     \"pair\": null,\n          //     \"sell\": null,\n          //     \"time\": \"2018-04-22T13:07:22.152Z\",\n          //     \"type\": \"buy\",\n          //     \"user\": \"up106404164\",\n          //     \"order\": \"6065499239\",\n          //     \"amount\": \"-715.97000000\",\n          //     \"symbol\": \"EUR\",\n          //     \"balance\": \"1432.93000000\" }\n          continue;\n        } // todo: deal with these\n\n\n        if (tradeSide === 'costsNothing') {\n          continue;\n        } // --\n        // if (side !== tradeSide)\n        //     throw new Error (JSON.stringify (order, null, 2));\n        // if (orderId !== item['order'])\n        //     throw new Error (JSON.stringify (order, null, 2));\n        // --\n        // partial buy trade\n        //   {\n        //     \"a\": \"0.01589885\",\n        //     \"c\": \"user:up106404164:a:BTC\",\n        //     \"d\": \"order:6065499239:a:BTC\",\n        //     \"cs\": \"0.36300000\",\n        //     \"ds\": 0,\n        //     \"id\": \"6067991213\",\n        //     \"buy\": \"6065499239\",\n        //     \"pos\": null,\n        //     \"pair\": null,\n        //     \"sell\": \"6067991206\",\n        //     \"time\": \"2018-04-22T23:09:11.773Z\",\n        //     \"type\": \"buy\",\n        //     \"user\": \"up106404164\",\n        //     \"order\": \"6065499239\",\n        //     \"price\": 7146.5,\n        //     \"amount\": \"0.01589885\",\n        //     \"symbol\": \"BTC\",\n        //     \"balance\": \"0.36300000\",\n        //     \"symbol2\": \"EUR\",\n        //     \"fee_amount\": \"0.19\" }\n        // --\n        // trade with zero amount, but non-zero fee\n        //   {\n        //     \"a\": \"0.00000000\",\n        //     \"c\": \"user:up106404164:a:EUR\",\n        //     \"d\": \"order:5840654423:a:EUR\",\n        //     \"cs\": 559744,\n        //     \"ds\": 0,\n        //     \"id\": \"5840654429\",\n        //     \"buy\": \"5807238573\",\n        //     \"pos\": null,\n        //     \"pair\": null,\n        //     \"sell\": \"5840654423\",\n        //     \"time\": \"2018-03-15T03:20:14.010Z\",\n        //     \"type\": \"sell\",\n        //     \"user\": \"up106404164\",\n        //     \"order\": \"5840654423\",\n        //     \"price\": 730,\n        //     \"amount\": \"0.00000000\",\n        //     \"symbol\": \"EUR\",\n        //     \"balance\": \"5597.44000000\",\n        //     \"symbol2\": \"BCH\",\n        //     \"fee_amount\": \"0.01\" }\n        // --\n        // trade which should have an amount of exactly 0.002BTC\n        //   {\n        //     \"a\": \"16.70000000\",\n        //     \"c\": \"user:up106404164:a:GBP\",\n        //     \"d\": \"order:9927386681:a:GBP\",\n        //     \"cs\": \"86.90\",\n        //     \"ds\": 0,\n        //     \"id\": \"9927401610\",\n        //     \"buy\": \"9927401601\",\n        //     \"pos\": null,\n        //     \"pair\": null,\n        //     \"sell\": \"9927386681\",\n        //     \"time\": \"2019-08-21T15:25:37.777Z\",\n        //     \"type\": \"sell\",\n        //     \"user\": \"up106404164\",\n        //     \"order\": \"9927386681\",\n        //     \"price\": 8365,\n        //     \"amount\": \"16.70000000\",\n        //     \"office\": \"UK\",\n        //     \"symbol\": \"GBP\",\n        //     \"balance\": \"86.90000000\",\n        //     \"symbol2\": \"BTC\",\n        //     \"fee_amount\": \"0.03\"\n        //   }\n\n\n        const tradeTimestamp = this.parse8601(this.safeString(item, 'time'));\n        const tradeAmount = this.safeNumber(item, 'amount');\n        const feeCost = this.safeNumber(item, 'fee_amount');\n        let absTradeAmount = tradeAmount < 0 ? -tradeAmount : tradeAmount;\n        let tradeCost = undefined;\n\n        if (tradeSide === 'sell') {\n          tradeCost = absTradeAmount;\n          absTradeAmount = this.sum(feeCost, tradeCost) / tradePrice;\n        } else {\n          tradeCost = absTradeAmount * tradePrice;\n        }\n\n        trades.push({\n          'id': this.safeString(item, 'id'),\n          'timestamp': tradeTimestamp,\n          'datetime': this.iso8601(tradeTimestamp),\n          'order': orderId,\n          'symbol': symbol,\n          'price': tradePrice,\n          'amount': absTradeAmount,\n          'cost': tradeCost,\n          'side': tradeSide,\n          'fee': {\n            'cost': feeCost,\n            'currency': market['quote']\n          },\n          'info': item,\n          'type': undefined,\n          'takerOrMaker': undefined\n        });\n      }\n    }\n\n    return {\n      'id': orderId,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': price === undefined ? 'market' : 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': trades,\n      'fee': fee,\n      'info': order,\n      'average': undefined\n    };\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let method = 'privatePostOpenOrders';\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pair'] = market['id'];\n      method += 'Pair';\n    }\n\n    const orders = await this[method](this.extend(request, params));\n\n    for (let i = 0; i < orders.length; i++) {\n      orders[i] = this.extend(orders[i], {\n        'status': 'open'\n      });\n    }\n\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const method = 'privatePostArchivedOrdersPair';\n\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchClosedOrders() requires a symbol argument');\n    }\n\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    const response = await this[method](this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id.toString()\n    };\n    const response = await this.privatePostGetOrderTx(this.extend(request, params));\n    const data = this.safeValue(response, 'data', {}); //\n    //     {\n    //         \"id\": \"5442731603\",\n    //         \"type\": \"sell\",\n    //         \"time\": 1516132358071,\n    //         \"lastTxTime\": 1516132378452,\n    //         \"lastTx\": \"5442734452\",\n    //         \"pos\": null,\n    //         \"user\": \"up106404164\",\n    //         \"status\": \"d\",\n    //         \"symbol1\": \"ETH\",\n    //         \"symbol2\": \"EUR\",\n    //         \"amount\": \"0.50000000\",\n    //         \"kind\": \"api\",\n    //         \"price\": \"923.3386\",\n    //         \"tfacf\": \"1\",\n    //         \"fa:EUR\": \"0.55\",\n    //         \"ta:EUR\": \"369.77\",\n    //         \"remains\": \"0.00000000\",\n    //         \"tfa:EUR\": \"0.22\",\n    //         \"tta:EUR\": \"91.95\",\n    //         \"a:ETH:cds\": \"0.50000000\",\n    //         \"a:EUR:cds\": \"461.72\",\n    //         \"f:EUR:cds\": \"0.77\",\n    //         \"tradingFeeMaker\": \"0.15\",\n    //         \"tradingFeeTaker\": \"0.23\",\n    //         \"tradingFeeStrategy\": \"userVolumeAmount\",\n    //         \"tradingFeeUserVolumeAmount\": \"2896912572\",\n    //         \"orderId\": \"5442731603\",\n    //         \"next\": false,\n    //         \"vtx\": [\n    //             {\n    //                 \"id\": \"5442734452\",\n    //                 \"type\": \"sell\",\n    //                 \"time\": \"2018-01-16T19:52:58.452Z\",\n    //                 \"user\": \"up106404164\",\n    //                 \"c\": \"user:up106404164:a:EUR\",\n    //                 \"d\": \"order:5442731603:a:EUR\",\n    //                 \"a\": \"104.53000000\",\n    //                 \"amount\": \"104.53000000\",\n    //                 \"balance\": \"932.71000000\",\n    //                 \"symbol\": \"EUR\",\n    //                 \"order\": \"5442731603\",\n    //                 \"buy\": \"5442734443\",\n    //                 \"sell\": \"5442731603\",\n    //                 \"pair\": null,\n    //                 \"pos\": null,\n    //                 \"office\": null,\n    //                 \"cs\": \"932.71\",\n    //                 \"ds\": 0,\n    //                 \"price\": 923.3386,\n    //                 \"symbol2\": \"ETH\",\n    //                 \"fee_amount\": \"0.16\"\n    //             },\n    //             {\n    //                 \"id\": \"5442731609\",\n    //                 \"type\": \"sell\",\n    //                 \"time\": \"2018-01-16T19:52:38.071Z\",\n    //                 \"user\": \"up106404164\",\n    //                 \"c\": \"user:up106404164:a:EUR\",\n    //                 \"d\": \"order:5442731603:a:EUR\",\n    //                 \"a\": \"91.73000000\",\n    //                 \"amount\": \"91.73000000\",\n    //                 \"balance\": \"563.49000000\",\n    //                 \"symbol\": \"EUR\",\n    //                 \"order\": \"5442731603\",\n    //                 \"buy\": \"5442618127\",\n    //                 \"sell\": \"5442731603\",\n    //                 \"pair\": null,\n    //                 \"pos\": null,\n    //                 \"office\": null,\n    //                 \"cs\": \"563.49\",\n    //                 \"ds\": 0,\n    //                 \"price\": 924.0092,\n    //                 \"symbol2\": \"ETH\",\n    //                 \"fee_amount\": \"0.22\"\n    //             },\n    //             {\n    //                 \"id\": \"5442731604\",\n    //                 \"type\": \"sell\",\n    //                 \"time\": \"2018-01-16T19:52:38.071Z\",\n    //                 \"user\": \"up106404164\",\n    //                 \"c\": \"order:5442731603:a:ETH\",\n    //                 \"d\": \"user:up106404164:a:ETH\",\n    //                 \"a\": \"0.50000000\",\n    //                 \"amount\": \"-0.50000000\",\n    //                 \"balance\": \"15.80995000\",\n    //                 \"symbol\": \"ETH\",\n    //                 \"order\": \"5442731603\",\n    //                 \"buy\": null,\n    //                 \"sell\": null,\n    //                 \"pair\": null,\n    //                 \"pos\": null,\n    //                 \"office\": null,\n    //                 \"cs\": \"0.50000000\",\n    //                 \"ds\": \"15.80995000\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    return this.parseOrder(data);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'limit': limit,\n      'pair': market['id'],\n      'dateFrom': since\n    };\n    const response = await this.privatePostArchivedOrdersPair(this.extend(request, params));\n    const results = [];\n\n    for (let i = 0; i < response.length; i++) {\n      // cancelled (unfilled):\n      //    { id: '4005785516',\n      //     type: 'sell',\n      //     time: '2017-07-18T19:08:34.223Z',\n      //     lastTxTime: '2017-07-18T19:08:34.396Z',\n      //     lastTx: '4005785522',\n      //     pos: null,\n      //     status: 'c',\n      //     symbol1: 'ETH',\n      //     symbol2: 'GBP',\n      //     amount: '0.20000000',\n      //     price: '200.5625',\n      //     remains: '0.20000000',\n      //     'a:ETH:cds': '0.20000000',\n      //     tradingFeeMaker: '0',\n      //     tradingFeeTaker: '0.16',\n      //     tradingFeeUserVolumeAmount: '10155061217',\n      //     orderId: '4005785516' }\n      // --\n      // cancelled (partially filled buy):\n      //    { id: '4084911657',\n      //     type: 'buy',\n      //     time: '2017-08-05T03:18:39.596Z',\n      //     lastTxTime: '2019-03-19T17:37:46.404Z',\n      //     lastTx: '8459265833',\n      //     pos: null,\n      //     status: 'cd',\n      //     symbol1: 'BTC',\n      //     symbol2: 'GBP',\n      //     amount: '0.05000000',\n      //     price: '2241.4692',\n      //     tfacf: '1',\n      //     remains: '0.03910535',\n      //     'tfa:GBP': '0.04',\n      //     'tta:GBP': '24.39',\n      //     'a:BTC:cds': '0.01089465',\n      //     'a:GBP:cds': '112.26',\n      //     'f:GBP:cds': '0.04',\n      //     tradingFeeMaker: '0',\n      //     tradingFeeTaker: '0.16',\n      //     tradingFeeUserVolumeAmount: '13336396963',\n      //     orderId: '4084911657' }\n      // --\n      // cancelled (partially filled sell):\n      //    { id: '4426728375',\n      //     type: 'sell',\n      //     time: '2017-09-22T00:24:20.126Z',\n      //     lastTxTime: '2017-09-22T00:24:30.476Z',\n      //     lastTx: '4426729543',\n      //     pos: null,\n      //     status: 'cd',\n      //     symbol1: 'BCH',\n      //     symbol2: 'BTC',\n      //     amount: '0.10000000',\n      //     price: '0.11757182',\n      //     tfacf: '1',\n      //     remains: '0.09935956',\n      //     'tfa:BTC': '0.00000014',\n      //     'tta:BTC': '0.00007537',\n      //     'a:BCH:cds': '0.10000000',\n      //     'a:BTC:cds': '0.00007537',\n      //     'f:BTC:cds': '0.00000014',\n      //     tradingFeeMaker: '0',\n      //     tradingFeeTaker: '0.18',\n      //     tradingFeeUserVolumeAmount: '3466715450',\n      //     orderId: '4426728375' }\n      // --\n      // filled:\n      //    { id: '5342275378',\n      //     type: 'sell',\n      //     time: '2018-01-04T00:28:12.992Z',\n      //     lastTxTime: '2018-01-04T00:28:12.992Z',\n      //     lastTx: '5342275393',\n      //     pos: null,\n      //     status: 'd',\n      //     symbol1: 'BCH',\n      //     symbol2: 'BTC',\n      //     amount: '0.10000000',\n      //     kind: 'api',\n      //     price: '0.17',\n      //     remains: '0.00000000',\n      //     'tfa:BTC': '0.00003902',\n      //     'tta:BTC': '0.01699999',\n      //     'a:BCH:cds': '0.10000000',\n      //     'a:BTC:cds': '0.01699999',\n      //     'f:BTC:cds': '0.00003902',\n      //     tradingFeeMaker: '0.15',\n      //     tradingFeeTaker: '0.23',\n      //     tradingFeeUserVolumeAmount: '1525951128',\n      //     orderId: '5342275378' }\n      // --\n      // market order (buy):\n      //    { \"id\": \"6281946200\",\n      //     \"pos\": null,\n      //     \"time\": \"2018-05-23T11:55:43.467Z\",\n      //     \"type\": \"buy\",\n      //     \"amount\": \"0.00000000\",\n      //     \"lastTx\": \"6281946210\",\n      //     \"status\": \"d\",\n      //     \"amount2\": \"20.00\",\n      //     \"orderId\": \"6281946200\",\n      //     \"remains\": \"0.00000000\",\n      //     \"symbol1\": \"ETH\",\n      //     \"symbol2\": \"EUR\",\n      //     \"tfa:EUR\": \"0.05\",\n      //     \"tta:EUR\": \"19.94\",\n      //     \"a:ETH:cds\": \"0.03764100\",\n      //     \"a:EUR:cds\": \"20.00\",\n      //     \"f:EUR:cds\": \"0.05\",\n      //     \"lastTxTime\": \"2018-05-23T11:55:43.467Z\",\n      //     \"tradingFeeTaker\": \"0.25\",\n      //     \"tradingFeeUserVolumeAmount\": \"55998097\" }\n      // --\n      // market order (sell):\n      //   { \"id\": \"6282200948\",\n      //     \"pos\": null,\n      //     \"time\": \"2018-05-23T12:42:58.315Z\",\n      //     \"type\": \"sell\",\n      //     \"amount\": \"-0.05000000\",\n      //     \"lastTx\": \"6282200958\",\n      //     \"status\": \"d\",\n      //     \"orderId\": \"6282200948\",\n      //     \"remains\": \"0.00000000\",\n      //     \"symbol1\": \"ETH\",\n      //     \"symbol2\": \"EUR\",\n      //     \"tfa:EUR\": \"0.07\",\n      //     \"tta:EUR\": \"26.49\",\n      //     \"a:ETH:cds\": \"0.05000000\",\n      //     \"a:EUR:cds\": \"26.49\",\n      //     \"f:EUR:cds\": \"0.07\",\n      //     \"lastTxTime\": \"2018-05-23T12:42:58.315Z\",\n      //     \"tradingFeeTaker\": \"0.25\",\n      //     \"tradingFeeUserVolumeAmount\": \"56294576\" }\n      const order = response[i];\n      const status = this.parseOrderStatus(this.safeString(order, 'status'));\n      const baseId = this.safeString(order, 'symbol1');\n      const quoteId = this.safeString(order, 'symbol2');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const side = this.safeString(order, 'type');\n      const baseAmount = this.safeNumber(order, 'a:' + baseId + ':cds');\n      const quoteAmount = this.safeNumber(order, 'a:' + quoteId + ':cds');\n      const fee = this.safeNumber(order, 'f:' + quoteId + ':cds');\n      const amount = this.safeNumber(order, 'amount');\n      const price = this.safeNumber(order, 'price');\n      const remaining = this.safeNumber(order, 'remains');\n      const filled = amount - remaining;\n      let orderAmount = undefined;\n      let cost = undefined;\n      let average = undefined;\n      let type = undefined;\n\n      if (!price) {\n        type = 'market';\n        orderAmount = baseAmount;\n        cost = quoteAmount;\n        average = orderAmount / cost;\n      } else {\n        const ta = this.safeNumber(order, 'ta:' + quoteId, 0);\n        const tta = this.safeNumber(order, 'tta:' + quoteId, 0);\n        const fa = this.safeNumber(order, 'fa:' + quoteId, 0);\n        const tfa = this.safeNumber(order, 'tfa:' + quoteId, 0);\n\n        if (side === 'sell') {\n          cost = this.sum(this.sum(ta, tta), this.sum(fa, tfa));\n        } else {\n          cost = this.sum(ta, tta) - this.sum(fa, tfa);\n        }\n\n        type = 'limit';\n        orderAmount = amount;\n        average = cost / filled;\n      }\n\n      const time = this.safeString(order, 'time');\n      const lastTxTime = this.safeString(order, 'lastTxTime');\n      const timestamp = this.parse8601(time);\n      results.push({\n        'id': this.safeString(order, 'id'),\n        'timestamp': timestamp,\n        'datetime': this.iso8601(timestamp),\n        'lastUpdated': this.parse8601(lastTxTime),\n        'status': status,\n        'symbol': symbol,\n        'side': side,\n        'price': price,\n        'amount': orderAmount,\n        'average': average,\n        'type': type,\n        'filled': filled,\n        'cost': cost,\n        'remaining': remaining,\n        'fee': {\n          'cost': fee,\n          'currency': quote\n        },\n        'info': order\n      });\n    }\n\n    return results;\n  }\n\n  parseOrderStatus(status) {\n    return this.safeString(this.options['order']['status'], status, status);\n  }\n\n  async editOrder(id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n    if (amount === undefined) {\n      throw new ArgumentsRequired(this.id + ' editOrder() requires a amount argument');\n    }\n\n    if (price === undefined) {\n      throw new ArgumentsRequired(this.id + ' editOrder() requires a price argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol); // see: https://cex.io/rest-api#/definitions/CancelReplaceOrderRequest\n\n    const request = {\n      'pair': market['id'],\n      'type': side,\n      'amount': amount,\n      'price': price,\n      'order_id': id\n    };\n    const response = await this.privatePostCancelReplaceOrderPair(this.extend(request, params));\n    return this.parseOrder(response, market);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    if (code === 'XRP' || code === 'XLM') {\n      // https://github.com/ccxt/ccxt/pull/2327#issuecomment-375204856\n      throw new NotSupported(this.id + ' fetchDepositAddress does not support XRP and XLM addresses yet (awaiting docs from CEX.io)');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privatePostGetAddress(this.extend(request, params));\n    const address = this.safeString(response, 'data');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': undefined,\n      'info': response\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const auth = nonce + this.uid + this.apiKey;\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n      body = this.json(this.extend({\n        'key': this.apiKey,\n        'signature': signature.toUpperCase(),\n        'nonce': nonce\n      }, query));\n      headers = {\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (Array.isArray(response)) {\n      return response; // public endpoints may return []-arrays\n    }\n\n    if (body === 'true') {\n      return;\n    }\n\n    if (response === undefined) {\n      throw new NullResponse(this.id + ' returned ' + this.json(response));\n    }\n\n    if ('e' in response) {\n      if ('ok' in response) {\n        if (response['ok'] === 'ok') {\n          return;\n        }\n      }\n    }\n\n    if ('error' in response) {\n      const message = this.safeString(response, 'error');\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/cex.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","AuthenticationError","NullResponse","InvalidOrder","NotSupported","InsufficientFunds","InvalidNonce","OrderNotFound","RateLimitExceeded","DDoSProtection","Precise","module","exports","cex","describe","deepExtend","fetchCurrenciesFromCache","params","options","safeValue","timestamp","safeInteger","expires","now","milliseconds","undefined","response","publicGetCurrencyProfile","extend","fetchCurrencies","data","currencies","result","i","length","currency","id","safeString","code","safeCurrencyCode","precision","active","safeNumber","fetchMarkets","currenciesResponse","currenciesData","currenciesById","indexBy","pairs","publicGetCurrencyLimits","markets","market","baseId","quoteId","base","quote","symbol","baseCurrency","quoteCurrency","pricePrecision","j","pair","baseCcyPrecision","baseCcyScale","amountPrecision","push","fetchBalance","loadMarkets","privatePostBalance","ommited","balances","omit","currencyIds","Object","keys","currencyId","balance","account","parseBalance","fetchOrderBook","limit","request","marketId","publicGetOrderBookPair","safeTimestamp","parseOrderBook","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","ymd","split","join","publicGetOhlcvHdYyyymmddPair","key","timeframes","ohlcvs","JSON","parse","parseOHLCVs","e","parseTicker","ticker","volume","high","low","bid","ask","last","iso8601","fetchTickers","symbols","publicGetTickersCurrencies","tickers","t","replace","filterByArray","fetchTicker","publicGetTickerPair","parseTrade","trade","type","side","priceString","amountString","price","parseNumber","amount","cost","stringMul","fetchTrades","publicGetTradeHistoryPair","parseTrades","createOrder","privatePostPlaceOrderPair","placedAmount","remaining","complete","status","filled","Math","max","cancelOrder","privatePostCancelOrder","parseOrder","order","indexOf","parse8601","parseInt","parseOrderStatus","abs","safeNumber2","fee","taCost","ttaCost","sum","baseFee","baseTakerFee","quoteFee","quoteTakerFee","feeRate","baseFeeCost","quoteFeeCost","trades","orderId","item","tradeSide","tradePrice","tradeTimestamp","tradeAmount","feeCost","absTradeAmount","tradeCost","fetchOpenOrders","method","orders","parseOrders","fetchClosedOrders","fetchOrder","toString","privatePostGetOrderTx","fetchOrders","privatePostArchivedOrdersPair","results","baseAmount","quoteAmount","orderAmount","average","ta","tta","fa","tfa","time","lastTxTime","editOrder","privatePostCancelReplaceOrderPair","fetchDepositAddress","privatePostGetAddress","address","checkAddress","nonce","sign","path","api","headers","body","url","urls","implodeParams","query","extractParams","urlencode","checkRequiredCredentials","auth","uid","apiKey","signature","hmac","encode","secret","json","toUpperCase","handleErrors","reason","requestHeaders","requestBody","Array","isArray","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, AuthenticationError, NullResponse, InvalidOrder, NotSupported, InsufficientFunds, InvalidNonce, OrderNotFound, RateLimitExceeded, DDoSProtection } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class cex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'cex',\n            'name': 'CEX.IO',\n            'countries': [ 'GB', 'EU', 'CY', 'RU' ],\n            'rateLimit': 1500,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg',\n                'api': 'https://cex.io/api',\n                'www': 'https://cex.io',\n                'doc': 'https://cex.io/cex-api',\n                'fees': [\n                    'https://cex.io/fee-schedule',\n                    'https://cex.io/limits-commissions',\n                ],\n                'referral': 'https://cex.io/r/0/up105393824/0/',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currency_profile',\n                        'currency_limits/',\n                        'last_price/{pair}/',\n                        'last_prices/{currencies}/',\n                        'ohlcv/hd/{yyyymmdd}/{pair}',\n                        'order_book/{pair}/',\n                        'ticker/{pair}/',\n                        'tickers/{currencies}/',\n                        'trade_history/{pair}/',\n                    ],\n                    'post': [\n                        'convert/{pair}',\n                        'price_stats/{pair}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'active_orders_status/',\n                        'archived_orders/{pair}/',\n                        'balance/',\n                        'cancel_order/',\n                        'cancel_orders/{pair}/',\n                        'cancel_replace_order/{pair}/',\n                        'close_position/{pair}/',\n                        'get_address/',\n                        'get_myfee/',\n                        'get_order/',\n                        'get_order_tx/',\n                        'open_orders/{pair}/',\n                        'open_orders/',\n                        'open_position/{pair}/',\n                        'open_positions/{pair}/',\n                        'place_order/{pair}/',\n                        'raw_tx_history',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.16 / 100,\n                    'taker': 0.25 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        // 'USD': undefined,\n                        // 'EUR': undefined,\n                        // 'RUB': undefined,\n                        // 'GBP': undefined,\n                        'BTC': 0.001,\n                        'ETH': 0.01,\n                        'BCH': 0.001,\n                        'DASH': 0.01,\n                        'BTG': 0.001,\n                        'ZEC': 0.001,\n                        'XRP': 0.02,\n                    },\n                    'deposit': {\n                        // 'USD': amount => amount * 0.035 + 0.25,\n                        // 'EUR': amount => amount * 0.035 + 0.24,\n                        // 'RUB': amount => amount * 0.05 + 15.57,\n                        // 'GBP': amount => amount * 0.035 + 0.2,\n                        'BTC': 0.0,\n                        'ETH': 0.0,\n                        'BCH': 0.0,\n                        'DASH': 0.0,\n                        'BTG': 0.0,\n                        'ZEC': 0.0,\n                        'XRP': 0.0,\n                        'XLM': 0.0,\n                    },\n                },\n            },\n            'exceptions': {\n                'exact': {},\n                'broad': {\n                    'Insufficient funds': InsufficientFunds,\n                    'Nonce must be incremented': InvalidNonce,\n                    'Invalid Order': InvalidOrder,\n                    'Order not found': OrderNotFound,\n                    'limit exceeded': RateLimitExceeded, // {\"error\":\"rate limit exceeded\"}\n                    'Invalid API key': AuthenticationError,\n                    'There was an error while placing your order': InvalidOrder,\n                    'Sorry, too many clients already': DDoSProtection,\n                },\n            },\n            'options': {\n                'fetchOHLCVWarning': true,\n                'createMarketBuyOrderRequiresPrice': true,\n                'order': {\n                    'status': {\n                        'c': 'canceled',\n                        'd': 'closed',\n                        'cd': 'canceled',\n                        'a': 'open',\n                    },\n                },\n            },\n        });\n    }\n\n    async fetchCurrenciesFromCache (params = {}) {\n        // this method is now redundant\n        // currencies are now fetched before markets\n        const options = this.safeValue (this.options, 'fetchCurrencies', {});\n        const timestamp = this.safeInteger (options, 'timestamp');\n        const expires = this.safeInteger (options, 'expires', 1000);\n        const now = this.milliseconds ();\n        if ((timestamp === undefined) || ((now - timestamp) > expires)) {\n            const response = await this.publicGetCurrencyProfile (params);\n            this.options['fetchCurrencies'] = this.extend (options, {\n                'response': response,\n                'timestamp': now,\n            });\n        }\n        return this.safeValue (this.options['fetchCurrencies'], 'response');\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.fetchCurrenciesFromCache (params);\n        this.options['currencies'] = {\n            'timestamp': this.milliseconds (),\n            'response': response,\n        };\n        //\n        //     {\n        //         \"e\":\"currency_profile\",\n        //         \"ok\":\"ok\",\n        //         \"data\":{\n        //             \"symbols\":[\n        //                 {\n        //                     \"code\":\"GHS\",\n        //                     \"contract\":true,\n        //                     \"commodity\":true,\n        //                     \"fiat\":false,\n        //                     \"description\":\"CEX.IO doesn't provide cloud mining services anymore.\",\n        //                     \"precision\":8,\n        //                     \"scale\":0,\n        //                     \"minimumCurrencyAmount\":\"0.00000001\",\n        //                     \"minimalWithdrawalAmount\":-1\n        //                 },\n        //                 {\n        //                     \"code\":\"BTC\",\n        //                     \"contract\":false,\n        //                     \"commodity\":false,\n        //                     \"fiat\":false,\n        //                     \"description\":\"\",\n        //                     \"precision\":8,\n        //                     \"scale\":0,\n        //                     \"minimumCurrencyAmount\":\"0.00000001\",\n        //                     \"minimalWithdrawalAmount\":0.002\n        //                 },\n        //                 {\n        //                     \"code\":\"ETH\",\n        //                     \"contract\":false,\n        //                     \"commodity\":false,\n        //                     \"fiat\":false,\n        //                     \"description\":\"\",\n        //                     \"precision\":8,\n        //                     \"scale\":2,\n        //                     \"minimumCurrencyAmount\":\"0.00000100\",\n        //                     \"minimalWithdrawalAmount\":0.01\n        //                 }\n        //             ],\n        //             \"pairs\":[\n        //                 {\n        //                     \"symbol1\":\"BTC\",\n        //                     \"symbol2\":\"USD\",\n        //                     \"pricePrecision\":1,\n        //                     \"priceScale\":\"/1000000\",\n        //                     \"minLotSize\":0.002,\n        //                     \"minLotSizeS2\":20\n        //                 },\n        //                 {\n        //                     \"symbol1\":\"ETH\",\n        //                     \"symbol2\":\"USD\",\n        //                     \"pricePrecision\":2,\n        //                     \"priceScale\":\"/10000\",\n        //                     \"minLotSize\":0.1,\n        //                     \"minLotSizeS2\":20\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const currencies = this.safeValue (data, 'symbols', []);\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'code');\n            const code = this.safeCurrencyCode (id);\n            const precision = this.safeInteger (currency, 'precision');\n            const active = true;\n            result[code] = {\n                'id': id,\n                'code': code,\n                'name': id,\n                'active': active,\n                'precision': precision,\n                'fee': undefined,\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (currency, 'minimumCurrencyAmount'),\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': this.safeNumber (currency, 'minimalWithdrawalAmount'),\n                        'max': undefined,\n                    },\n                },\n                'info': currency,\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const currenciesResponse = await this.fetchCurrenciesFromCache (params);\n        const currenciesData = this.safeValue (currenciesResponse, 'data', {});\n        const currencies = this.safeValue (currenciesData, 'symbols', []);\n        const currenciesById = this.indexBy (currencies, 'code');\n        const pairs = this.safeValue (currenciesData, 'pairs', []);\n        const response = await this.publicGetCurrencyLimits (params);\n        //\n        //     {\n        //         \"e\":\"currency_limits\",\n        //         \"ok\":\"ok\",\n        //         \"data\": {\n        //             \"pairs\":[\n        //                 {\n        //                     \"symbol1\":\"BTC\",\n        //                     \"symbol2\":\"USD\",\n        //                     \"minLotSize\":0.002,\n        //                     \"minLotSizeS2\":20,\n        //                     \"maxLotSize\":30,\n        //                     \"minPrice\":\"1500\",\n        //                     \"maxPrice\":\"35000\"\n        //                 },\n        //                 {\n        //                     \"symbol1\":\"BCH\",\n        //                     \"symbol2\":\"EUR\",\n        //                     \"minLotSize\":0.1,\n        //                     \"minLotSizeS2\":20,\n        //                     \"maxLotSize\":null,\n        //                     \"minPrice\":\"25\",\n        //                     \"maxPrice\":\"8192\"\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const result = [];\n        const markets = this.safeValue (response['data'], 'pairs');\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const baseId = this.safeString (market, 'symbol1');\n            const quoteId = this.safeString (market, 'symbol2');\n            const id = baseId + '/' + quoteId;\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const baseCurrency = this.safeValue (currenciesById, baseId, {});\n            const quoteCurrency = this.safeValue (currenciesById, quoteId, {});\n            let pricePrecision = this.safeInteger (quoteCurrency, 'precision', 8);\n            for (let j = 0; j < pairs.length; j++) {\n                const pair = pairs[j];\n                if ((pair['symbol1'] === baseId) && (pair['symbol2'] === quoteId)) {\n                    // we might need to account for `priceScale` here\n                    pricePrecision = this.safeInteger (pair, 'pricePrecision', pricePrecision);\n                }\n            }\n            const baseCcyPrecision = this.safeInteger (baseCurrency, 'precision', 8);\n            const baseCcyScale = this.safeInteger (baseCurrency, 'scale', 0);\n            const amountPrecision = baseCcyPrecision - baseCcyScale;\n            const precision = {\n                'amount': amountPrecision,\n                'price': pricePrecision,\n            };\n            result.push ({\n                'id': id,\n                'info': market,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (market, 'minLotSize'),\n                        'max': this.safeNumber (market, 'maxLotSize'),\n                    },\n                    'price': {\n                        'min': this.safeNumber (market, 'minPrice'),\n                        'max': this.safeNumber (market, 'maxPrice'),\n                    },\n                    'cost': {\n                        'min': this.safeNumber (market, 'minLotSizeS2'),\n                        'max': undefined,\n                    },\n                },\n                'active': undefined,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostBalance (params);\n        const result = { 'info': response };\n        const ommited = [ 'username', 'timestamp' ];\n        const balances = this.omit (response, ommited);\n        const currencyIds = Object.keys (balances);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const balance = this.safeValue (balances, currencyId, {});\n            const account = this.account ();\n            account['free'] = this.safeString (balance, 'available');\n            // https://github.com/ccxt/ccxt/issues/5484\n            account['used'] = this.safeString (balance, 'orders', '0');\n            const code = this.safeCurrencyCode (currencyId);\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        if (limit !== undefined) {\n            request['depth'] = limit;\n        }\n        const response = await this.publicGetOrderBookPair (this.extend (request, params));\n        const timestamp = this.safeTimestamp (response, 'timestamp');\n        return this.parseOrderBook (response, symbol, timestamp);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1591403940,\n        //         0.024972,\n        //         0.024972,\n        //         0.024969,\n        //         0.024969,\n        //         0.49999900\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.safeNumber (ohlcv, 1),\n            this.safeNumber (ohlcv, 2),\n            this.safeNumber (ohlcv, 3),\n            this.safeNumber (ohlcv, 4),\n            this.safeNumber (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (since === undefined) {\n            since = this.milliseconds () - 86400000; // yesterday\n        } else {\n            if (this.options['fetchOHLCVWarning']) {\n                throw new ExchangeError (this.id + \" fetchOHLCV warning: CEX can return historical candles for a certain date only, this might produce an empty or null reply. Set exchange.options['fetchOHLCVWarning'] = false or add ({ 'options': { 'fetchOHLCVWarning': false }}) to constructor params to suppress this warning message.\");\n            }\n        }\n        let ymd = this.ymd (since);\n        ymd = ymd.split ('-');\n        ymd = ymd.join ('');\n        const request = {\n            'pair': market['id'],\n            'yyyymmdd': ymd,\n        };\n        try {\n            const response = await this.publicGetOhlcvHdYyyymmddPair (this.extend (request, params));\n            //\n            //     {\n            //         \"time\":20200606,\n            //         \"data1m\":\"[[1591403940,0.024972,0.024972,0.024969,0.024969,0.49999900]]\",\n            //     }\n            //\n            const key = 'data' + this.timeframes[timeframe];\n            const data = this.safeString (response, key);\n            const ohlcvs = JSON.parse (data);\n            return this.parseOHLCVs (ohlcvs, market, timeframe, since, limit);\n        } catch (e) {\n            if (e instanceof NullResponse) {\n                return [];\n            }\n        }\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.safeTimestamp (ticker, 'timestamp');\n        const volume = this.safeNumber (ticker, 'volume');\n        const high = this.safeNumber (ticker, 'high');\n        const low = this.safeNumber (ticker, 'low');\n        const bid = this.safeNumber (ticker, 'bid');\n        const ask = this.safeNumber (ticker, 'ask');\n        const last = this.safeNumber (ticker, 'last');\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': high,\n            'low': low,\n            'bid': bid,\n            'bidVolume': undefined,\n            'ask': ask,\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': volume,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const currencies = Object.keys (this.currencies);\n        const request = {\n            'currencies': currencies.join ('/'),\n        };\n        const response = await this.publicGetTickersCurrencies (this.extend (request, params));\n        const tickers = response['data'];\n        const result = {};\n        for (let t = 0; t < tickers.length; t++) {\n            const ticker = tickers[t];\n            const symbol = ticker['pair'].replace (':', '/');\n            const market = this.markets[symbol];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const ticker = await this.publicGetTickerPair (this.extend (request, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        const id = this.safeString (trade, 'tid');\n        const type = undefined;\n        const side = this.safeString (trade, 'type');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'amount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        const response = await this.publicGetTradeHistoryPair (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        // for market buy it requires the amount of quote currency to spend\n        if ((type === 'market') && (side === 'buy')) {\n            if (this.options['createMarketBuyOrderRequiresPrice']) {\n                if (price === undefined) {\n                    throw new InvalidOrder (this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the amount argument (the exchange-specific behaviour)\");\n                } else {\n                    amount = amount * price;\n                }\n            }\n        }\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n            'type': side,\n            'amount': amount,\n        };\n        if (type === 'limit') {\n            request['price'] = price;\n        } else {\n            request['order_type'] = type;\n        }\n        const response = await this.privatePostPlaceOrderPair (this.extend (request, params));\n        //\n        //     {\n        //         \"id\": \"12978363524\",\n        //         \"time\": 1586610022259,\n        //         \"type\": \"buy\",\n        //         \"price\": \"0.033934\",\n        //         \"amount\": \"0.10722802\",\n        //         \"pending\": \"0.10722802\",\n        //         \"complete\": false\n        //     }\n        //\n        const placedAmount = this.safeNumber (response, 'amount');\n        const remaining = this.safeNumber (response, 'pending');\n        const timestamp = this.safeValue (response, 'time');\n        const complete = this.safeValue (response, 'complete');\n        const status = complete ? 'closed' : 'open';\n        let filled = undefined;\n        if ((placedAmount !== undefined) && (remaining !== undefined)) {\n            filled = Math.max (placedAmount - remaining, 0);\n        }\n        return {\n            'id': this.safeString (response, 'id'),\n            'info': response,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'type': type,\n            'side': this.safeString (response, 'type'),\n            'symbol': symbol,\n            'status': status,\n            'price': this.safeNumber (response, 'price'),\n            'amount': placedAmount,\n            'cost': undefined,\n            'average': undefined,\n            'remaining': remaining,\n            'filled': filled,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    parseOrder (order, market = undefined) {\n        // Depending on the call, 'time' can be a unix int, unix string or ISO string\n        // Yes, really\n        let timestamp = this.safeValue (order, 'time');\n        if (typeof timestamp === 'string' && timestamp.indexOf ('T') >= 0) {\n            // ISO8601 string\n            timestamp = this.parse8601 (timestamp);\n        } else {\n            // either integer or string integer\n            timestamp = parseInt (timestamp);\n        }\n        let symbol = undefined;\n        if (market === undefined) {\n            const baseId = this.safeString (order, 'symbol1');\n            const quoteId = this.safeString (order, 'symbol2');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            symbol = base + '/' + quote;\n            if (symbol in this.markets) {\n                market = this.market (symbol);\n            }\n        }\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const price = this.safeNumber (order, 'price');\n        let amount = this.safeNumber (order, 'amount');\n        // sell orders can have a negative amount\n        // https://github.com/ccxt/ccxt/issues/5338\n        if (amount !== undefined) {\n            amount = Math.abs (amount);\n        }\n        const remaining = this.safeNumber2 (order, 'pending', 'remains');\n        const filled = amount - remaining;\n        let fee = undefined;\n        let cost = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n            const taCost = this.safeNumber (order, 'ta:' + market['quote']);\n            const ttaCost = this.safeNumber (order, 'tta:' + market['quote']);\n            cost = this.sum (taCost, ttaCost);\n            const baseFee = 'fa:' + market['base'];\n            const baseTakerFee = 'tfa:' + market['base'];\n            const quoteFee = 'fa:' + market['quote'];\n            const quoteTakerFee = 'tfa:' + market['quote'];\n            let feeRate = this.safeNumber (order, 'tradingFeeMaker');\n            if (!feeRate) {\n                feeRate = this.safeNumber (order, 'tradingFeeTaker', feeRate);\n            }\n            if (feeRate) {\n                feeRate /= 100.0; // convert to mathematically-correct percentage coefficients: 1.0 = 100%\n            }\n            if ((baseFee in order) || (baseTakerFee in order)) {\n                const baseFeeCost = this.safeNumber2 (order, baseFee, baseTakerFee);\n                fee = {\n                    'currency': market['base'],\n                    'rate': feeRate,\n                    'cost': baseFeeCost,\n                };\n            } else if ((quoteFee in order) || (quoteTakerFee in order)) {\n                const quoteFeeCost = this.safeNumber2 (order, quoteFee, quoteTakerFee);\n                fee = {\n                    'currency': market['quote'],\n                    'rate': feeRate,\n                    'cost': quoteFeeCost,\n                };\n            }\n        }\n        if (!cost) {\n            cost = price * filled;\n        }\n        const side = order['type'];\n        let trades = undefined;\n        const orderId = order['id'];\n        if ('vtx' in order) {\n            trades = [];\n            for (let i = 0; i < order['vtx'].length; i++) {\n                const item = order['vtx'][i];\n                const tradeSide = this.safeString (item, 'type');\n                if (tradeSide === 'cancel') {\n                    // looks like this might represent the cancelled part of an order\n                    //   { id: '4426729543',\n                    //     type: 'cancel',\n                    //     time: '2017-09-22T00:24:30.476Z',\n                    //     user: 'up106404164',\n                    //     c: 'user:up106404164:a:BCH',\n                    //     d: 'order:4426728375:a:BCH',\n                    //     a: '0.09935956',\n                    //     amount: '0.09935956',\n                    //     balance: '0.42580261',\n                    //     symbol: 'BCH',\n                    //     order: '4426728375',\n                    //     buy: null,\n                    //     sell: null,\n                    //     pair: null,\n                    //     pos: null,\n                    //     cs: '0.42580261',\n                    //     ds: 0 }\n                    continue;\n                }\n                const tradePrice = this.safeNumber (item, 'price');\n                if (tradePrice === undefined) {\n                    // this represents the order\n                    //   {\n                    //     \"a\": \"0.47000000\",\n                    //     \"c\": \"user:up106404164:a:EUR\",\n                    //     \"d\": \"order:6065499239:a:EUR\",\n                    //     \"cs\": \"1432.93\",\n                    //     \"ds\": \"476.72\",\n                    //     \"id\": \"6065499249\",\n                    //     \"buy\": null,\n                    //     \"pos\": null,\n                    //     \"pair\": null,\n                    //     \"sell\": null,\n                    //     \"time\": \"2018-04-22T13:07:22.152Z\",\n                    //     \"type\": \"buy\",\n                    //     \"user\": \"up106404164\",\n                    //     \"order\": \"6065499239\",\n                    //     \"amount\": \"-715.97000000\",\n                    //     \"symbol\": \"EUR\",\n                    //     \"balance\": \"1432.93000000\" }\n                    continue;\n                }\n                // todo: deal with these\n                if (tradeSide === 'costsNothing') {\n                    continue;\n                }\n                // --\n                // if (side !== tradeSide)\n                //     throw new Error (JSON.stringify (order, null, 2));\n                // if (orderId !== item['order'])\n                //     throw new Error (JSON.stringify (order, null, 2));\n                // --\n                // partial buy trade\n                //   {\n                //     \"a\": \"0.01589885\",\n                //     \"c\": \"user:up106404164:a:BTC\",\n                //     \"d\": \"order:6065499239:a:BTC\",\n                //     \"cs\": \"0.36300000\",\n                //     \"ds\": 0,\n                //     \"id\": \"6067991213\",\n                //     \"buy\": \"6065499239\",\n                //     \"pos\": null,\n                //     \"pair\": null,\n                //     \"sell\": \"6067991206\",\n                //     \"time\": \"2018-04-22T23:09:11.773Z\",\n                //     \"type\": \"buy\",\n                //     \"user\": \"up106404164\",\n                //     \"order\": \"6065499239\",\n                //     \"price\": 7146.5,\n                //     \"amount\": \"0.01589885\",\n                //     \"symbol\": \"BTC\",\n                //     \"balance\": \"0.36300000\",\n                //     \"symbol2\": \"EUR\",\n                //     \"fee_amount\": \"0.19\" }\n                // --\n                // trade with zero amount, but non-zero fee\n                //   {\n                //     \"a\": \"0.00000000\",\n                //     \"c\": \"user:up106404164:a:EUR\",\n                //     \"d\": \"order:5840654423:a:EUR\",\n                //     \"cs\": 559744,\n                //     \"ds\": 0,\n                //     \"id\": \"5840654429\",\n                //     \"buy\": \"5807238573\",\n                //     \"pos\": null,\n                //     \"pair\": null,\n                //     \"sell\": \"5840654423\",\n                //     \"time\": \"2018-03-15T03:20:14.010Z\",\n                //     \"type\": \"sell\",\n                //     \"user\": \"up106404164\",\n                //     \"order\": \"5840654423\",\n                //     \"price\": 730,\n                //     \"amount\": \"0.00000000\",\n                //     \"symbol\": \"EUR\",\n                //     \"balance\": \"5597.44000000\",\n                //     \"symbol2\": \"BCH\",\n                //     \"fee_amount\": \"0.01\" }\n                // --\n                // trade which should have an amount of exactly 0.002BTC\n                //   {\n                //     \"a\": \"16.70000000\",\n                //     \"c\": \"user:up106404164:a:GBP\",\n                //     \"d\": \"order:9927386681:a:GBP\",\n                //     \"cs\": \"86.90\",\n                //     \"ds\": 0,\n                //     \"id\": \"9927401610\",\n                //     \"buy\": \"9927401601\",\n                //     \"pos\": null,\n                //     \"pair\": null,\n                //     \"sell\": \"9927386681\",\n                //     \"time\": \"2019-08-21T15:25:37.777Z\",\n                //     \"type\": \"sell\",\n                //     \"user\": \"up106404164\",\n                //     \"order\": \"9927386681\",\n                //     \"price\": 8365,\n                //     \"amount\": \"16.70000000\",\n                //     \"office\": \"UK\",\n                //     \"symbol\": \"GBP\",\n                //     \"balance\": \"86.90000000\",\n                //     \"symbol2\": \"BTC\",\n                //     \"fee_amount\": \"0.03\"\n                //   }\n                const tradeTimestamp = this.parse8601 (this.safeString (item, 'time'));\n                const tradeAmount = this.safeNumber (item, 'amount');\n                const feeCost = this.safeNumber (item, 'fee_amount');\n                let absTradeAmount = (tradeAmount < 0) ? -tradeAmount : tradeAmount;\n                let tradeCost = undefined;\n                if (tradeSide === 'sell') {\n                    tradeCost = absTradeAmount;\n                    absTradeAmount = this.sum (feeCost, tradeCost) / tradePrice;\n                } else {\n                    tradeCost = absTradeAmount * tradePrice;\n                }\n                trades.push ({\n                    'id': this.safeString (item, 'id'),\n                    'timestamp': tradeTimestamp,\n                    'datetime': this.iso8601 (tradeTimestamp),\n                    'order': orderId,\n                    'symbol': symbol,\n                    'price': tradePrice,\n                    'amount': absTradeAmount,\n                    'cost': tradeCost,\n                    'side': tradeSide,\n                    'fee': {\n                        'cost': feeCost,\n                        'currency': market['quote'],\n                    },\n                    'info': item,\n                    'type': undefined,\n                    'takerOrMaker': undefined,\n                });\n            }\n        }\n        return {\n            'id': orderId,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': (price === undefined) ? 'market' : 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': trades,\n            'fee': fee,\n            'info': order,\n            'average': undefined,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let method = 'privatePostOpenOrders';\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n            method += 'Pair';\n        }\n        const orders = await this[method] (this.extend (request, params));\n        for (let i = 0; i < orders.length; i++) {\n            orders[i] = this.extend (orders[i], { 'status': 'open' });\n        }\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const method = 'privatePostArchivedOrdersPair';\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchClosedOrders() requires a symbol argument');\n        }\n        const market = this.market (symbol);\n        const request = { 'pair': market['id'] };\n        const response = await this[method] (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id.toString (),\n        };\n        const response = await this.privatePostGetOrderTx (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        //\n        //     {\n        //         \"id\": \"5442731603\",\n        //         \"type\": \"sell\",\n        //         \"time\": 1516132358071,\n        //         \"lastTxTime\": 1516132378452,\n        //         \"lastTx\": \"5442734452\",\n        //         \"pos\": null,\n        //         \"user\": \"up106404164\",\n        //         \"status\": \"d\",\n        //         \"symbol1\": \"ETH\",\n        //         \"symbol2\": \"EUR\",\n        //         \"amount\": \"0.50000000\",\n        //         \"kind\": \"api\",\n        //         \"price\": \"923.3386\",\n        //         \"tfacf\": \"1\",\n        //         \"fa:EUR\": \"0.55\",\n        //         \"ta:EUR\": \"369.77\",\n        //         \"remains\": \"0.00000000\",\n        //         \"tfa:EUR\": \"0.22\",\n        //         \"tta:EUR\": \"91.95\",\n        //         \"a:ETH:cds\": \"0.50000000\",\n        //         \"a:EUR:cds\": \"461.72\",\n        //         \"f:EUR:cds\": \"0.77\",\n        //         \"tradingFeeMaker\": \"0.15\",\n        //         \"tradingFeeTaker\": \"0.23\",\n        //         \"tradingFeeStrategy\": \"userVolumeAmount\",\n        //         \"tradingFeeUserVolumeAmount\": \"2896912572\",\n        //         \"orderId\": \"5442731603\",\n        //         \"next\": false,\n        //         \"vtx\": [\n        //             {\n        //                 \"id\": \"5442734452\",\n        //                 \"type\": \"sell\",\n        //                 \"time\": \"2018-01-16T19:52:58.452Z\",\n        //                 \"user\": \"up106404164\",\n        //                 \"c\": \"user:up106404164:a:EUR\",\n        //                 \"d\": \"order:5442731603:a:EUR\",\n        //                 \"a\": \"104.53000000\",\n        //                 \"amount\": \"104.53000000\",\n        //                 \"balance\": \"932.71000000\",\n        //                 \"symbol\": \"EUR\",\n        //                 \"order\": \"5442731603\",\n        //                 \"buy\": \"5442734443\",\n        //                 \"sell\": \"5442731603\",\n        //                 \"pair\": null,\n        //                 \"pos\": null,\n        //                 \"office\": null,\n        //                 \"cs\": \"932.71\",\n        //                 \"ds\": 0,\n        //                 \"price\": 923.3386,\n        //                 \"symbol2\": \"ETH\",\n        //                 \"fee_amount\": \"0.16\"\n        //             },\n        //             {\n        //                 \"id\": \"5442731609\",\n        //                 \"type\": \"sell\",\n        //                 \"time\": \"2018-01-16T19:52:38.071Z\",\n        //                 \"user\": \"up106404164\",\n        //                 \"c\": \"user:up106404164:a:EUR\",\n        //                 \"d\": \"order:5442731603:a:EUR\",\n        //                 \"a\": \"91.73000000\",\n        //                 \"amount\": \"91.73000000\",\n        //                 \"balance\": \"563.49000000\",\n        //                 \"symbol\": \"EUR\",\n        //                 \"order\": \"5442731603\",\n        //                 \"buy\": \"5442618127\",\n        //                 \"sell\": \"5442731603\",\n        //                 \"pair\": null,\n        //                 \"pos\": null,\n        //                 \"office\": null,\n        //                 \"cs\": \"563.49\",\n        //                 \"ds\": 0,\n        //                 \"price\": 924.0092,\n        //                 \"symbol2\": \"ETH\",\n        //                 \"fee_amount\": \"0.22\"\n        //             },\n        //             {\n        //                 \"id\": \"5442731604\",\n        //                 \"type\": \"sell\",\n        //                 \"time\": \"2018-01-16T19:52:38.071Z\",\n        //                 \"user\": \"up106404164\",\n        //                 \"c\": \"order:5442731603:a:ETH\",\n        //                 \"d\": \"user:up106404164:a:ETH\",\n        //                 \"a\": \"0.50000000\",\n        //                 \"amount\": \"-0.50000000\",\n        //                 \"balance\": \"15.80995000\",\n        //                 \"symbol\": \"ETH\",\n        //                 \"order\": \"5442731603\",\n        //                 \"buy\": null,\n        //                 \"sell\": null,\n        //                 \"pair\": null,\n        //                 \"pos\": null,\n        //                 \"office\": null,\n        //                 \"cs\": \"0.50000000\",\n        //                 \"ds\": \"15.80995000\"\n        //             }\n        //         ]\n        //     }\n        //\n        return this.parseOrder (data);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'limit': limit,\n            'pair': market['id'],\n            'dateFrom': since,\n        };\n        const response = await this.privatePostArchivedOrdersPair (this.extend (request, params));\n        const results = [];\n        for (let i = 0; i < response.length; i++) {\n            // cancelled (unfilled):\n            //    { id: '4005785516',\n            //     type: 'sell',\n            //     time: '2017-07-18T19:08:34.223Z',\n            //     lastTxTime: '2017-07-18T19:08:34.396Z',\n            //     lastTx: '4005785522',\n            //     pos: null,\n            //     status: 'c',\n            //     symbol1: 'ETH',\n            //     symbol2: 'GBP',\n            //     amount: '0.20000000',\n            //     price: '200.5625',\n            //     remains: '0.20000000',\n            //     'a:ETH:cds': '0.20000000',\n            //     tradingFeeMaker: '0',\n            //     tradingFeeTaker: '0.16',\n            //     tradingFeeUserVolumeAmount: '10155061217',\n            //     orderId: '4005785516' }\n            // --\n            // cancelled (partially filled buy):\n            //    { id: '4084911657',\n            //     type: 'buy',\n            //     time: '2017-08-05T03:18:39.596Z',\n            //     lastTxTime: '2019-03-19T17:37:46.404Z',\n            //     lastTx: '8459265833',\n            //     pos: null,\n            //     status: 'cd',\n            //     symbol1: 'BTC',\n            //     symbol2: 'GBP',\n            //     amount: '0.05000000',\n            //     price: '2241.4692',\n            //     tfacf: '1',\n            //     remains: '0.03910535',\n            //     'tfa:GBP': '0.04',\n            //     'tta:GBP': '24.39',\n            //     'a:BTC:cds': '0.01089465',\n            //     'a:GBP:cds': '112.26',\n            //     'f:GBP:cds': '0.04',\n            //     tradingFeeMaker: '0',\n            //     tradingFeeTaker: '0.16',\n            //     tradingFeeUserVolumeAmount: '13336396963',\n            //     orderId: '4084911657' }\n            // --\n            // cancelled (partially filled sell):\n            //    { id: '4426728375',\n            //     type: 'sell',\n            //     time: '2017-09-22T00:24:20.126Z',\n            //     lastTxTime: '2017-09-22T00:24:30.476Z',\n            //     lastTx: '4426729543',\n            //     pos: null,\n            //     status: 'cd',\n            //     symbol1: 'BCH',\n            //     symbol2: 'BTC',\n            //     amount: '0.10000000',\n            //     price: '0.11757182',\n            //     tfacf: '1',\n            //     remains: '0.09935956',\n            //     'tfa:BTC': '0.00000014',\n            //     'tta:BTC': '0.00007537',\n            //     'a:BCH:cds': '0.10000000',\n            //     'a:BTC:cds': '0.00007537',\n            //     'f:BTC:cds': '0.00000014',\n            //     tradingFeeMaker: '0',\n            //     tradingFeeTaker: '0.18',\n            //     tradingFeeUserVolumeAmount: '3466715450',\n            //     orderId: '4426728375' }\n            // --\n            // filled:\n            //    { id: '5342275378',\n            //     type: 'sell',\n            //     time: '2018-01-04T00:28:12.992Z',\n            //     lastTxTime: '2018-01-04T00:28:12.992Z',\n            //     lastTx: '5342275393',\n            //     pos: null,\n            //     status: 'd',\n            //     symbol1: 'BCH',\n            //     symbol2: 'BTC',\n            //     amount: '0.10000000',\n            //     kind: 'api',\n            //     price: '0.17',\n            //     remains: '0.00000000',\n            //     'tfa:BTC': '0.00003902',\n            //     'tta:BTC': '0.01699999',\n            //     'a:BCH:cds': '0.10000000',\n            //     'a:BTC:cds': '0.01699999',\n            //     'f:BTC:cds': '0.00003902',\n            //     tradingFeeMaker: '0.15',\n            //     tradingFeeTaker: '0.23',\n            //     tradingFeeUserVolumeAmount: '1525951128',\n            //     orderId: '5342275378' }\n            // --\n            // market order (buy):\n            //    { \"id\": \"6281946200\",\n            //     \"pos\": null,\n            //     \"time\": \"2018-05-23T11:55:43.467Z\",\n            //     \"type\": \"buy\",\n            //     \"amount\": \"0.00000000\",\n            //     \"lastTx\": \"6281946210\",\n            //     \"status\": \"d\",\n            //     \"amount2\": \"20.00\",\n            //     \"orderId\": \"6281946200\",\n            //     \"remains\": \"0.00000000\",\n            //     \"symbol1\": \"ETH\",\n            //     \"symbol2\": \"EUR\",\n            //     \"tfa:EUR\": \"0.05\",\n            //     \"tta:EUR\": \"19.94\",\n            //     \"a:ETH:cds\": \"0.03764100\",\n            //     \"a:EUR:cds\": \"20.00\",\n            //     \"f:EUR:cds\": \"0.05\",\n            //     \"lastTxTime\": \"2018-05-23T11:55:43.467Z\",\n            //     \"tradingFeeTaker\": \"0.25\",\n            //     \"tradingFeeUserVolumeAmount\": \"55998097\" }\n            // --\n            // market order (sell):\n            //   { \"id\": \"6282200948\",\n            //     \"pos\": null,\n            //     \"time\": \"2018-05-23T12:42:58.315Z\",\n            //     \"type\": \"sell\",\n            //     \"amount\": \"-0.05000000\",\n            //     \"lastTx\": \"6282200958\",\n            //     \"status\": \"d\",\n            //     \"orderId\": \"6282200948\",\n            //     \"remains\": \"0.00000000\",\n            //     \"symbol1\": \"ETH\",\n            //     \"symbol2\": \"EUR\",\n            //     \"tfa:EUR\": \"0.07\",\n            //     \"tta:EUR\": \"26.49\",\n            //     \"a:ETH:cds\": \"0.05000000\",\n            //     \"a:EUR:cds\": \"26.49\",\n            //     \"f:EUR:cds\": \"0.07\",\n            //     \"lastTxTime\": \"2018-05-23T12:42:58.315Z\",\n            //     \"tradingFeeTaker\": \"0.25\",\n            //     \"tradingFeeUserVolumeAmount\": \"56294576\" }\n            const order = response[i];\n            const status = this.parseOrderStatus (this.safeString (order, 'status'));\n            const baseId = this.safeString (order, 'symbol1');\n            const quoteId = this.safeString (order, 'symbol2');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const side = this.safeString (order, 'type');\n            const baseAmount = this.safeNumber (order, 'a:' + baseId + ':cds');\n            const quoteAmount = this.safeNumber (order, 'a:' + quoteId + ':cds');\n            const fee = this.safeNumber (order, 'f:' + quoteId + ':cds');\n            const amount = this.safeNumber (order, 'amount');\n            const price = this.safeNumber (order, 'price');\n            const remaining = this.safeNumber (order, 'remains');\n            const filled = amount - remaining;\n            let orderAmount = undefined;\n            let cost = undefined;\n            let average = undefined;\n            let type = undefined;\n            if (!price) {\n                type = 'market';\n                orderAmount = baseAmount;\n                cost = quoteAmount;\n                average = orderAmount / cost;\n            } else {\n                const ta = this.safeNumber (order, 'ta:' + quoteId, 0);\n                const tta = this.safeNumber (order, 'tta:' + quoteId, 0);\n                const fa = this.safeNumber (order, 'fa:' + quoteId, 0);\n                const tfa = this.safeNumber (order, 'tfa:' + quoteId, 0);\n                if (side === 'sell') {\n                    cost = this.sum (this.sum (ta, tta), this.sum (fa, tfa));\n                } else {\n                    cost = this.sum (ta, tta) - this.sum (fa, tfa);\n                }\n                type = 'limit';\n                orderAmount = amount;\n                average = cost / filled;\n            }\n            const time = this.safeString (order, 'time');\n            const lastTxTime = this.safeString (order, 'lastTxTime');\n            const timestamp = this.parse8601 (time);\n            results.push ({\n                'id': this.safeString (order, 'id'),\n                'timestamp': timestamp,\n                'datetime': this.iso8601 (timestamp),\n                'lastUpdated': this.parse8601 (lastTxTime),\n                'status': status,\n                'symbol': symbol,\n                'side': side,\n                'price': price,\n                'amount': orderAmount,\n                'average': average,\n                'type': type,\n                'filled': filled,\n                'cost': cost,\n                'remaining': remaining,\n                'fee': {\n                    'cost': fee,\n                    'currency': quote,\n                },\n                'info': order,\n            });\n        }\n        return results;\n    }\n\n    parseOrderStatus (status) {\n        return this.safeString (this.options['order']['status'], status, status);\n    }\n\n    async editOrder (id, symbol, type, side, amount = undefined, price = undefined, params = {}) {\n        if (amount === undefined) {\n            throw new ArgumentsRequired (this.id + ' editOrder() requires a amount argument');\n        }\n        if (price === undefined) {\n            throw new ArgumentsRequired (this.id + ' editOrder() requires a price argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // see: https://cex.io/rest-api#/definitions/CancelReplaceOrderRequest\n        const request = {\n            'pair': market['id'],\n            'type': side,\n            'amount': amount,\n            'price': price,\n            'order_id': id,\n        };\n        const response = await this.privatePostCancelReplaceOrderPair (this.extend (request, params));\n        return this.parseOrder (response, market);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        if (code === 'XRP' || code === 'XLM') {\n            // https://github.com/ccxt/ccxt/pull/2327#issuecomment-375204856\n            throw new NotSupported (this.id + ' fetchDepositAddress does not support XRP and XLM addresses yet (awaiting docs from CEX.io)');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privatePostGetAddress (this.extend (request, params));\n        const address = this.safeString (response, 'data');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': undefined,\n            'info': response,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const auth = nonce + this.uid + this.apiKey;\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            body = this.json (this.extend ({\n                'key': this.apiKey,\n                'signature': signature.toUpperCase (),\n                'nonce': nonce,\n            }, query));\n            headers = {\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (Array.isArray (response)) {\n            return response; // public endpoints may return []-arrays\n        }\n        if (body === 'true') {\n            return;\n        }\n        if (response === undefined) {\n            throw new NullResponse (this.id + ' returned ' + this.json (response));\n        }\n        if ('e' in response) {\n            if ('ok' in response) {\n                if (response['ok'] === 'ok') {\n                    return;\n                }\n            }\n        }\n        if ('error' in response) {\n            const message = this.safeString (response, 'error');\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}