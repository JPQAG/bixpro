{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Price\\\\Documents\\\\VS Code\\\\bixpro\\\\src\\\\components\\\\cryptX\\\\charts\\\\chart\\\\OneDayReturnBarChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Chart from 'react-google-charts';\nimport axios from 'axios'; // Create Data for Chart \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createBarData(data) {\n  const barData = [['Symbol', '24h Return']];\n\n  for (const holding in data) {\n    if (data[holding]['market_cap_rank'] < 11) {\n      barData.push([data[holding]['symbol'].toUpperCase(), data[holding]['market_cap']]);\n      console.log(barData);\n    }\n  }\n\n  return barData;\n}\n\nconst OneDayReturnBarChart = () => {\n  _s();\n\n  const [coins, setCoins] = useState([]);\n  const [search, setSearch] = useState('');\n  const url = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false';\n  const filteredCoins = coins.filter(coin => coin.name.toLowerCase().includes(search.toLowerCase()));\n\n  const getCoins = async () => {\n    axios.get(url).then(res => {\n      setCoins(res.data);\n    }).catch(error => console.log(error));\n  };\n\n  useEffect(() => {\n    getCoins();\n    const interval = setInterval(() => {\n      getCoins();\n    }, 60000);\n    console.log(coins);\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleChange = e => {\n    setSearch(e.target.value);\n  };\n\n  const data = createPieData(filteredCoins);\n  console.log(\"Here is the data\", data);\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    width: \"100%\",\n    height: \"300px\",\n    chartType: \"BarChart\",\n    loader: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this),\n    data: [['City', '2010 Population', '2000 Population'], ['New York City, NY', 8175000, 8008000], ['Los Angeles, CA', 3792000, 3694000], ['Chicago, IL', 2695000, 2896000], ['Houston, TX', 2099000, 1953000], ['Philadelphia, PA', 1526000, 1517000]],\n    options: {\n      title: 'Population of Largest U.S. Cities',\n      chartArea: {\n        width: '50%'\n      },\n      isStacked: true,\n      hAxis: {\n        title: 'Total Population',\n        minValue: 0\n      },\n      vAxis: {\n        title: 'City'\n      },\n      colors: ['#A389D4', '#04a9f5']\n    },\n    rootProps: {\n      'data-testid': '3'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 12\n  }, this);\n};\n\n_s(OneDayReturnBarChart, \"eYytcDICYFEoR+cpw9A5MMZCk2k=\");\n\n_c = OneDayReturnBarChart;\nexport default OneDayReturnBarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"OneDayReturnBarChart\");","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/src/components/cryptX/charts/chart/OneDayReturnBarChart.js"],"names":["React","useState","useEffect","Chart","axios","createBarData","data","barData","holding","push","toUpperCase","console","log","OneDayReturnBarChart","coins","setCoins","search","setSearch","url","filteredCoins","filter","coin","name","toLowerCase","includes","getCoins","get","then","res","catch","error","interval","setInterval","clearInterval","handleChange","e","target","value","createPieData","title","chartArea","width","isStacked","hAxis","minValue","vAxis","colors"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Chart from 'react-google-charts';\r\nimport axios from 'axios';\r\n\r\n// Create Data for Chart \r\nfunction createBarData(data) {\r\n    const barData = [\r\n        ['Symbol','24h Return']\r\n    ];\r\n\r\n    for (const holding in data) {\r\n        if (data[holding]['market_cap_rank'] < 11) {\r\n            barData.push([\r\n                data[holding]['symbol'].toUpperCase(),\r\n                data[holding]['market_cap']\r\n            ]);\r\n            console.log(barData);\r\n        }\r\n    }\r\n    return barData;\r\n}\r\n\r\nconst OneDayReturnBarChart = () => {\r\n\r\n    const [ coins, setCoins ] = useState([]);\r\n    const [ search, setSearch ] = useState('');\r\n\r\n    const url = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=false';\r\n\r\n    const filteredCoins = coins.filter(coin => \r\n        coin.name.toLowerCase().includes(search.toLowerCase())\r\n    );\r\n\r\n    const getCoins = async () => {\r\n        axios\r\n            .get(\r\n                url\r\n            )\r\n            .then(res => {\r\n                setCoins(res.data);\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCoins()\r\n  \r\n        const interval=setInterval(() => {\r\n            getCoins()\r\n        }, 60000)\r\n  \r\n        console.log(coins)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const handleChange = e => {\r\n        setSearch(e.target.value)\r\n    }\r\n    \r\n    const data = createPieData(filteredCoins);\r\n\r\n    console.log(\"Here is the data\", data);\r\n\r\n\r\n    return <Chart\r\n        width='100%'\r\n        height='300px'\r\n        chartType=\"BarChart\"\r\n        loader={<div>Loading Chart</div>}\r\n        data={[\r\n            ['City', '2010 Population', '2000 Population'],\r\n            ['New York City, NY', 8175000, 8008000],\r\n            ['Los Angeles, CA', 3792000, 3694000],\r\n            ['Chicago, IL', 2695000, 2896000],\r\n            ['Houston, TX', 2099000, 1953000],\r\n            ['Philadelphia, PA', 1526000, 1517000],\r\n        ]}\r\n        options={{\r\n            title: 'Population of Largest U.S. Cities',\r\n            chartArea: { width: '50%' },\r\n            isStacked: true,\r\n            hAxis: {\r\n                title: 'Total Population',\r\n                minValue: 0,\r\n            },\r\n            vAxis: {\r\n                title: 'City',\r\n            },\r\n            colors: ['#A389D4', '#04a9f5']\r\n        }}\r\n        rootProps={{ 'data-testid': '3' }}\r\n    />;\r\n}\r\n\r\nexport default OneDayReturnBarChart;"]},"metadata":{},"sourceType":"module"}