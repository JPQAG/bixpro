{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  InvalidNonce,\n  AuthenticationError,\n  OrderNotFound\n} = require('./base/errors');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitso extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitso',\n      'name': 'Bitso',\n      'countries': ['MX'],\n      // Mexico\n      'rateLimit': 2000,\n      // 30 requests per minute\n      'version': 'v3',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchDepositAddress': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87295554-11f98280-c50e-11ea-80d6-15b3bafa8cbf.jpg',\n        'api': 'https://api.bitso.com',\n        'www': 'https://bitso.com',\n        'doc': 'https://bitso.com/api_info',\n        'fees': 'https://bitso.com/fees',\n        'referral': 'https://bitso.com/?ref=itej'\n      },\n      'precisionMode': TICK_SIZE,\n      'options': {\n        'precision': {\n          'XRP': 0.000001,\n          'MXN': 0.01,\n          'TUSD': 0.01\n        },\n        'defaultPrecision': 0.00000001\n      },\n      'api': {\n        'public': {\n          'get': ['available_books', 'ticker', 'order_book', 'trades']\n        },\n        'private': {\n          'get': ['account_status', 'balance', 'fees', 'fundings', 'fundings/{fid}', 'funding_destination', 'kyc_documents', 'ledger', 'ledger/trades', 'ledger/fees', 'ledger/fundings', 'ledger/withdrawals', 'mx_bank_codes', 'open_orders', 'order_trades/{oid}', 'orders/{oid}', 'user_trades', 'user_trades/{tid}', 'withdrawals/', 'withdrawals/{wid}'],\n          'post': ['bitcoin_withdrawal', 'debit_card_withdrawal', 'ether_withdrawal', 'ripple_withdrawal', 'bcash_withdrawal', 'litecoin_withdrawal', 'orders', 'phone_number', 'phone_verification', 'phone_withdrawal', 'spei_withdrawal', 'ripple_withdrawal', 'bcash_withdrawal', 'litecoin_withdrawal'],\n          'delete': ['orders/{oid}', 'orders/all']\n        }\n      },\n      'exceptions': {\n        '0201': AuthenticationError,\n        // Invalid Nonce or Invalid Credentials\n        '104': InvalidNonce // Cannot perform request - nonce must be higher than 1520307203724237\n\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetAvailableBooks(params); //\n    //     {\n    //         \"success\":true,\n    //         \"payload\":[\n    //             {\n    //                 \"book\":\"btc_mxn\",\n    //                 \"minimum_price\":\"500\",\n    //                 \"maximum_price\":\"10000000\",\n    //                 \"minimum_amount\":\"0.00005\",\n    //                 \"maximum_amount\":\"500\",\n    //                 \"minimum_value\":\"5\",\n    //                 \"maximum_value\":\"10000000\",\n    //                 \"tick_size\":\"0.01\",\n    //                 \"fees\":{\n    //                     \"flat_rate\":{\"maker\":\"0.500\",\"taker\":\"0.650\"},\n    //                     \"structure\":[\n    //                         {\"volume\":\"1500000\",\"maker\":\"0.00500\",\"taker\":\"0.00650\"},\n    //                         {\"volume\":\"2000000\",\"maker\":\"0.00490\",\"taker\":\"0.00637\"},\n    //                         {\"volume\":\"5000000\",\"maker\":\"0.00480\",\"taker\":\"0.00624\"},\n    //                         {\"volume\":\"7000000\",\"maker\":\"0.00440\",\"taker\":\"0.00572\"},\n    //                         {\"volume\":\"10000000\",\"maker\":\"0.00420\",\"taker\":\"0.00546\"},\n    //                         {\"volume\":\"15000000\",\"maker\":\"0.00400\",\"taker\":\"0.00520\"},\n    //                         {\"volume\":\"35000000\",\"maker\":\"0.00370\",\"taker\":\"0.00481\"},\n    //                         {\"volume\":\"50000000\",\"maker\":\"0.00300\",\"taker\":\"0.00390\"},\n    //                         {\"volume\":\"150000000\",\"maker\":\"0.00200\",\"taker\":\"0.00260\"},\n    //                         {\"volume\":\"250000000\",\"maker\":\"0.00100\",\"taker\":\"0.00130\"},\n    //                         {\"volume\":\"9999999999\",\"maker\":\"0.00000\",\"taker\":\"0.00130\"},\n    //                     ]\n    //                 }\n    //             },\n    //         ]\n    //     }\n\n    const markets = this.safeValue(response, 'payload');\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'book');\n      const [baseId, quoteId] = id.split('_');\n      let base = baseId.toUpperCase();\n      let quote = quoteId.toUpperCase();\n      base = this.safeCurrencyCode(base);\n      quote = this.safeCurrencyCode(quote);\n      const symbol = base + '/' + quote;\n      const limits = {\n        'amount': {\n          'min': this.safeNumber(market, 'minimum_amount'),\n          'max': this.safeNumber(market, 'maximum_amount')\n        },\n        'price': {\n          'min': this.safeNumber(market, 'minimum_price'),\n          'max': this.safeNumber(market, 'maximum_price')\n        },\n        'cost': {\n          'min': this.safeNumber(market, 'minimum_value'),\n          'max': this.safeNumber(market, 'maximum_value')\n        }\n      };\n      const defaultPricePrecision = this.safeNumber(this.options['precision'], quote, this.options['defaultPrecision']);\n      const pricePrecision = this.safeNumber(market, 'tick_size', defaultPricePrecision);\n      const precision = {\n        'amount': this.safeNumber(this.options['precision'], base, this.options['defaultPrecision']),\n        'price': pricePrecision\n      };\n      const fees = this.safeValue(market, 'fees', {});\n      const flatRate = this.safeValue(fees, 'flat_rate', {});\n      const makerString = this.safeString(flatRate, 'maker');\n      const takerString = this.safeString(flatRate, 'taker');\n      const maker = this.parseNumber(Precise.stringDiv(makerString, '100'));\n      const taker = this.parseNumber(Precise.stringDiv(takerString, '100'));\n      const feeTiers = this.safeValue(fees, 'structure', []);\n      const fee = {\n        'taker': taker,\n        'maker': maker,\n        'percentage': true,\n        'tierBased': true\n      };\n      const takerFees = [];\n      const makerFees = [];\n\n      for (let j = 0; j < feeTiers.length; j++) {\n        const tier = feeTiers[j];\n        const volume = this.safeNumber(tier, 'volume');\n        const takerFee = this.safeNumber(tier, 'taker');\n        const makerFee = this.safeNumber(tier, 'maker');\n        takerFees.push([volume, takerFee]);\n        makerFees.push([volume, makerFee]);\n\n        if (j === 0) {\n          fee['taker'] = takerFee;\n          fee['maker'] = makerFee;\n        }\n      }\n\n      const tiers = {\n        'taker': takerFees,\n        'maker': makerFees\n      };\n      fee['tiers'] = tiers;\n      result.push(this.extend({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'limits': limits,\n        'precision': precision,\n        'active': undefined\n      }, fee));\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalance(params); //\n    //     {\n    //       \"success\": true,\n    //       \"payload\": {\n    //         \"balances\": [\n    //           {\n    //             \"currency\": \"bat\",\n    //             \"available\": \"0.00000000\",\n    //             \"locked\": \"0.00000000\",\n    //             \"total\": \"0.00000000\",\n    //             \"pending_deposit\": \"0.00000000\",\n    //             \"pending_withdrawal\": \"0.00000000\"\n    //           },\n    //           {\n    //             \"currency\": \"bch\",\n    //             \"available\": \"0.00000000\",\n    //             \"locked\": \"0.00000000\",\n    //             \"total\": \"0.00000000\",\n    //             \"pending_deposit\": \"0.00000000\",\n    //             \"pending_withdrawal\": \"0.00000000\"\n    //           },\n    //         ],\n    //       },\n    //     }\n    //\n\n    const payload = this.safeValue(response, 'payload', {});\n    const balances = this.safeValue(payload, 'balances');\n    const result = {\n      'info': response,\n      'timestamp': undefined,\n      'datetime': undefined\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeString(balance, 'available');\n      account['used'] = this.safeString(balance, 'locked');\n      account['total'] = this.safeString(balance, 'total');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'book': this.marketId(symbol)\n    };\n    const response = await this.publicGetOrderBook(this.extend(request, params));\n    const orderbook = this.safeValue(response, 'payload');\n    const timestamp = this.parse8601(this.safeString(orderbook, 'updated_at'));\n    return this.parseOrderBook(orderbook, symbol, timestamp, 'bids', 'asks', 'price', 'amount');\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'book': this.marketId(symbol)\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const ticker = this.safeValue(response, 'payload');\n    const timestamp = this.parse8601(this.safeString(ticker, 'created_at'));\n    const vwap = this.safeNumber(ticker, 'vwap');\n    const baseVolume = this.safeNumber(ticker, 'volume');\n    let quoteVolume = undefined;\n\n    if (baseVolume !== undefined && vwap !== undefined) {\n      quoteVolume = baseVolume * vwap;\n    }\n\n    const last = this.safeNumber(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(trade, 'created_at'));\n    const marketId = this.safeString(trade, 'book');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const side = this.safeString2(trade, 'side', 'maker_side');\n    let amount = this.safeNumber2(trade, 'amount', 'major');\n\n    if (amount !== undefined) {\n      amount = Math.abs(amount);\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeNumber(trade, 'fees_amount');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'fees_currency');\n      const feeCurrency = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrency\n      };\n    }\n\n    let cost = this.safeNumber(trade, 'minor');\n\n    if (cost !== undefined) {\n      cost = Math.abs(cost);\n    }\n\n    const price = this.safeNumber(trade, 'price');\n    const orderId = this.safeString(trade, 'oid');\n    const id = this.safeString(trade, 'tid');\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'book': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response['payload'], market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = 25, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol); // the don't support fetching trades starting from a date yet\n    // use the `marker` extra param for that\n    // this is not a typo, the variable name is 'marker' (don't confuse with 'market')\n\n    const markerInParams = ('marker' in params); // warn the user with an exception if the user wants to filter\n    // starting from since timestamp, but does not set the trade id with an extra 'marker' param\n\n    if (since !== undefined && !markerInParams) {\n      throw new ExchangeError(this.id + ' fetchMyTrades does not support fetching trades starting from a timestamp with the `since` argument, use the `marker` extra param to filter starting from an integer trade id');\n    } // convert it to an integer unconditionally\n\n\n    if (markerInParams) {\n      params = this.extend(params, {\n        'marker': parseInt(params['marker'])\n      });\n    }\n\n    const request = {\n      'book': market['id'],\n      'limit': limit // default = 25, max = 100\n      // 'sort': 'desc', // default = desc\n      // 'marker': id, // integer id to start from\n\n    };\n    const response = await this.privateGetUserTrades(this.extend(request, params));\n    return this.parseTrades(response['payload'], market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'book': this.marketId(symbol),\n      'side': side,\n      'type': type,\n      'major': this.amountToPrecision(symbol, amount)\n    };\n\n    if (type === 'limit') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params));\n    const id = this.safeString(response['payload'], 'oid');\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'oid': id\n    };\n    return await this.privateDeleteOrdersOid(this.extend(request, params));\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'partial-fill': 'open',\n      // this is a common substitution in ccxt\n      'completed': 'closed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    const id = this.safeString(order, 'oid');\n    const side = this.safeString(order, 'side');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const marketId = this.safeString(order, 'book');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const orderType = this.safeString(order, 'type');\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const price = this.safeNumber(order, 'price');\n    const amount = this.safeNumber(order, 'original_amount');\n    const remaining = this.safeNumber(order, 'unfilled_amount');\n    const clientOrderId = this.safeString(order, 'client_id');\n    return this.safeOrder({\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': orderType,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': undefined,\n      'remaining': remaining,\n      'filled': undefined,\n      'status': status,\n      'fee': undefined,\n      'average': undefined,\n      'trades': undefined\n    });\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = 25, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol); // the don't support fetching trades starting from a date yet\n    // use the `marker` extra param for that\n    // this is not a typo, the variable name is 'marker' (don't confuse with 'market')\n\n    const markerInParams = ('marker' in params); // warn the user with an exception if the user wants to filter\n    // starting from since timestamp, but does not set the trade id with an extra 'marker' param\n\n    if (since !== undefined && !markerInParams) {\n      throw new ExchangeError(this.id + ' fetchOpenOrders does not support fetching orders starting from a timestamp with the `since` argument, use the `marker` extra param to filter starting from an integer trade id');\n    } // convert it to an integer unconditionally\n\n\n    if (markerInParams) {\n      params = this.extend(params, {\n        'marker': parseInt(params['marker'])\n      });\n    }\n\n    const request = {\n      'book': market['id'],\n      'limit': limit // default = 25, max = 100\n      // 'sort': 'desc', // default = desc\n      // 'marker': id, // integer id to start from\n\n    };\n    const response = await this.privateGetOpenOrders(this.extend(request, params));\n    const orders = this.parseOrders(response['payload'], market, since, limit);\n    return orders;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetOrdersOid({\n      'oid': id\n    });\n    const payload = this.safeValue(response, 'payload');\n\n    if (Array.isArray(payload)) {\n      const numOrders = response['payload'].length;\n\n      if (numOrders === 1) {\n        return this.parseOrder(payload[0]);\n      }\n    }\n\n    throw new OrderNotFound(this.id + ': The order ' + id + ' not found.');\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'oid': id\n    };\n    const response = await this.privateGetOrderTradesOid(this.extend(request, params));\n    return this.parseTrades(response['payload'], market);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'fund_currency': currency['id']\n    };\n    const response = await this.privateGetFundingDestination(this.extend(request, params));\n    let address = this.safeString(response['payload'], 'account_identifier');\n    let tag = undefined;\n\n    if (address.indexOf('?dt=') >= 0) {\n      const parts = address.split('?dt=');\n      address = this.safeString(parts, 0);\n      tag = this.safeString(parts, 1);\n    }\n\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const methods = {\n      'BTC': 'Bitcoin',\n      'ETH': 'Ether',\n      'XRP': 'Ripple',\n      'BCH': 'Bcash',\n      'LTC': 'Litecoin'\n    };\n    const method = code in methods ? methods[code] : undefined;\n\n    if (method === undefined) {\n      throw new ExchangeError(this.id + ' not valid withdraw coin: ' + code);\n    }\n\n    const request = {\n      'amount': amount,\n      'address': address,\n      'destination_tag': tag\n    };\n    const classMethod = 'privatePost' + method + 'Withdrawal';\n    const response = await this[classMethod](this.extend(request, params));\n    return {\n      'info': response,\n      'id': this.safeString(response['payload'], 'wid')\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let endpoint = '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (method === 'GET') {\n      if (Object.keys(query).length) {\n        endpoint += '?' + this.urlencode(query);\n      }\n    }\n\n    const url = this.urls['api'] + endpoint;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      let request = [nonce, method, endpoint].join('');\n\n      if (method !== 'GET') {\n        if (Object.keys(query).length) {\n          body = this.json(query);\n          request += body;\n        }\n      }\n\n      const signature = this.hmac(this.encode(request), this.encode(this.secret));\n      const auth = this.apiKey + ':' + nonce + ':' + signature;\n      headers = {\n        'Authorization': 'Bitso ' + auth,\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if ('success' in response) {\n      //\n      //     {\"success\":false,\"error\":{\"code\":104,\"message\":\"Cannot perform request - nonce must be higher than 1520307203724237\"}}\n      //\n      let success = this.safeValue(response, 'success', false);\n\n      if (typeof success === 'string') {\n        if (success === 'true' || success === '1') {\n          success = true;\n        } else {\n          success = false;\n        }\n      }\n\n      if (!success) {\n        const feedback = this.id + ' ' + this.json(response);\n        const error = this.safeValue(response, 'error');\n\n        if (error === undefined) {\n          throw new ExchangeError(feedback);\n        }\n\n        const code = this.safeString(error, 'code');\n        this.throwExactlyMatchedException(this.exceptions, code, feedback);\n        throw new ExchangeError(feedback);\n      }\n    }\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if ('success' in response) {\n      if (response['success']) {\n        return response;\n      }\n    }\n\n    throw new ExchangeError(this.id + ' ' + this.json(response));\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/bitso.js"],"names":["Exchange","require","ExchangeError","InvalidNonce","AuthenticationError","OrderNotFound","TICK_SIZE","Precise","module","exports","bitso","describe","deepExtend","fetchMarkets","params","response","publicGetAvailableBooks","markets","safeValue","result","i","length","market","id","safeString","baseId","quoteId","split","base","toUpperCase","quote","safeCurrencyCode","symbol","limits","safeNumber","defaultPricePrecision","options","pricePrecision","precision","fees","flatRate","makerString","takerString","maker","parseNumber","stringDiv","taker","feeTiers","fee","takerFees","makerFees","j","tier","volume","takerFee","makerFee","push","tiers","extend","undefined","fetchBalance","loadMarkets","privateGetBalance","payload","balances","balance","currencyId","code","account","parseBalance","fetchOrderBook","limit","request","marketId","publicGetOrderBook","orderbook","timestamp","parse8601","parseOrderBook","fetchTicker","publicGetTicker","ticker","vwap","baseVolume","quoteVolume","last","iso8601","parseTrade","trade","safeSymbol","side","safeString2","amount","safeNumber2","Math","abs","feeCost","feeCurrencyId","feeCurrency","cost","price","orderId","fetchTrades","since","publicGetTrades","parseTrades","fetchMyTrades","markerInParams","parseInt","privateGetUserTrades","createOrder","type","amountToPrecision","priceToPrecision","privatePostOrders","cancelOrder","privateDeleteOrdersOid","parseOrderStatus","status","statuses","parseOrder","order","orderType","remaining","clientOrderId","safeOrder","fetchOpenOrders","privateGetOpenOrders","orders","parseOrders","fetchOrder","privateGetOrdersOid","Array","isArray","numOrders","fetchOrderTrades","privateGetOrderTradesOid","fetchDepositAddress","currency","privateGetFundingDestination","address","tag","indexOf","parts","checkAddress","withdraw","methods","method","classMethod","sign","path","api","headers","body","endpoint","version","implodeParams","query","omit","extractParams","Object","keys","urlencode","url","urls","checkRequiredCredentials","nonce","toString","join","json","signature","hmac","encode","secret","auth","apiKey","handleErrors","httpCode","reason","requestHeaders","requestBody","success","feedback","error","throwExactlyMatchedException","exceptions","fetch2"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, InvalidNonce, AuthenticationError, OrderNotFound } = require ('./base/errors');\nconst { TICK_SIZE } = require ('./base/functions/number');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitso extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitso',\n            'name': 'Bitso',\n            'countries': [ 'MX' ], // Mexico\n            'rateLimit': 2000, // 30 requests per minute\n            'version': 'v3',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchDepositAddress': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87295554-11f98280-c50e-11ea-80d6-15b3bafa8cbf.jpg',\n                'api': 'https://api.bitso.com',\n                'www': 'https://bitso.com',\n                'doc': 'https://bitso.com/api_info',\n                'fees': 'https://bitso.com/fees',\n                'referral': 'https://bitso.com/?ref=itej',\n            },\n            'precisionMode': TICK_SIZE,\n            'options': {\n                'precision': {\n                    'XRP': 0.000001,\n                    'MXN': 0.01,\n                    'TUSD': 0.01,\n                },\n                'defaultPrecision': 0.00000001,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'available_books',\n                        'ticker',\n                        'order_book',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'account_status',\n                        'balance',\n                        'fees',\n                        'fundings',\n                        'fundings/{fid}',\n                        'funding_destination',\n                        'kyc_documents',\n                        'ledger',\n                        'ledger/trades',\n                        'ledger/fees',\n                        'ledger/fundings',\n                        'ledger/withdrawals',\n                        'mx_bank_codes',\n                        'open_orders',\n                        'order_trades/{oid}',\n                        'orders/{oid}',\n                        'user_trades',\n                        'user_trades/{tid}',\n                        'withdrawals/',\n                        'withdrawals/{wid}',\n                    ],\n                    'post': [\n                        'bitcoin_withdrawal',\n                        'debit_card_withdrawal',\n                        'ether_withdrawal',\n                        'ripple_withdrawal',\n                        'bcash_withdrawal',\n                        'litecoin_withdrawal',\n                        'orders',\n                        'phone_number',\n                        'phone_verification',\n                        'phone_withdrawal',\n                        'spei_withdrawal',\n                        'ripple_withdrawal',\n                        'bcash_withdrawal',\n                        'litecoin_withdrawal',\n                    ],\n                    'delete': [\n                        'orders/{oid}',\n                        'orders/all',\n                    ],\n                },\n            },\n            'exceptions': {\n                '0201': AuthenticationError, // Invalid Nonce or Invalid Credentials\n                '104': InvalidNonce, // Cannot perform request - nonce must be higher than 1520307203724237\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetAvailableBooks (params);\n        //\n        //     {\n        //         \"success\":true,\n        //         \"payload\":[\n        //             {\n        //                 \"book\":\"btc_mxn\",\n        //                 \"minimum_price\":\"500\",\n        //                 \"maximum_price\":\"10000000\",\n        //                 \"minimum_amount\":\"0.00005\",\n        //                 \"maximum_amount\":\"500\",\n        //                 \"minimum_value\":\"5\",\n        //                 \"maximum_value\":\"10000000\",\n        //                 \"tick_size\":\"0.01\",\n        //                 \"fees\":{\n        //                     \"flat_rate\":{\"maker\":\"0.500\",\"taker\":\"0.650\"},\n        //                     \"structure\":[\n        //                         {\"volume\":\"1500000\",\"maker\":\"0.00500\",\"taker\":\"0.00650\"},\n        //                         {\"volume\":\"2000000\",\"maker\":\"0.00490\",\"taker\":\"0.00637\"},\n        //                         {\"volume\":\"5000000\",\"maker\":\"0.00480\",\"taker\":\"0.00624\"},\n        //                         {\"volume\":\"7000000\",\"maker\":\"0.00440\",\"taker\":\"0.00572\"},\n        //                         {\"volume\":\"10000000\",\"maker\":\"0.00420\",\"taker\":\"0.00546\"},\n        //                         {\"volume\":\"15000000\",\"maker\":\"0.00400\",\"taker\":\"0.00520\"},\n        //                         {\"volume\":\"35000000\",\"maker\":\"0.00370\",\"taker\":\"0.00481\"},\n        //                         {\"volume\":\"50000000\",\"maker\":\"0.00300\",\"taker\":\"0.00390\"},\n        //                         {\"volume\":\"150000000\",\"maker\":\"0.00200\",\"taker\":\"0.00260\"},\n        //                         {\"volume\":\"250000000\",\"maker\":\"0.00100\",\"taker\":\"0.00130\"},\n        //                         {\"volume\":\"9999999999\",\"maker\":\"0.00000\",\"taker\":\"0.00130\"},\n        //                     ]\n        //                 }\n        //             },\n        //         ]\n        //     }\n        const markets = this.safeValue (response, 'payload');\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'book');\n            const [ baseId, quoteId ] = id.split ('_');\n            let base = baseId.toUpperCase ();\n            let quote = quoteId.toUpperCase ();\n            base = this.safeCurrencyCode (base);\n            quote = this.safeCurrencyCode (quote);\n            const symbol = base + '/' + quote;\n            const limits = {\n                'amount': {\n                    'min': this.safeNumber (market, 'minimum_amount'),\n                    'max': this.safeNumber (market, 'maximum_amount'),\n                },\n                'price': {\n                    'min': this.safeNumber (market, 'minimum_price'),\n                    'max': this.safeNumber (market, 'maximum_price'),\n                },\n                'cost': {\n                    'min': this.safeNumber (market, 'minimum_value'),\n                    'max': this.safeNumber (market, 'maximum_value'),\n                },\n            };\n            const defaultPricePrecision = this.safeNumber (this.options['precision'], quote, this.options['defaultPrecision']);\n            const pricePrecision = this.safeNumber (market, 'tick_size', defaultPricePrecision);\n            const precision = {\n                'amount': this.safeNumber (this.options['precision'], base, this.options['defaultPrecision']),\n                'price': pricePrecision,\n            };\n            const fees = this.safeValue (market, 'fees', {});\n            const flatRate = this.safeValue (fees, 'flat_rate', {});\n            const makerString = this.safeString (flatRate, 'maker');\n            const takerString = this.safeString (flatRate, 'taker');\n            const maker = this.parseNumber (Precise.stringDiv (makerString, '100'));\n            const taker = this.parseNumber (Precise.stringDiv (takerString, '100'));\n            const feeTiers = this.safeValue (fees, 'structure', []);\n            const fee = {\n                'taker': taker,\n                'maker': maker,\n                'percentage': true,\n                'tierBased': true,\n            };\n            const takerFees = [];\n            const makerFees = [];\n            for (let j = 0; j < feeTiers.length; j++) {\n                const tier = feeTiers[j];\n                const volume = this.safeNumber (tier, 'volume');\n                const takerFee = this.safeNumber (tier, 'taker');\n                const makerFee = this.safeNumber (tier, 'maker');\n                takerFees.push ([ volume, takerFee ]);\n                makerFees.push ([ volume, makerFee ]);\n                if (j === 0) {\n                    fee['taker'] = takerFee;\n                    fee['maker'] = makerFee;\n                }\n            }\n            const tiers = {\n                'taker': takerFees,\n                'maker': makerFees,\n            };\n            fee['tiers'] = tiers;\n            result.push (this.extend ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'limits': limits,\n                'precision': precision,\n                'active': undefined,\n            }, fee));\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalance (params);\n        //\n        //     {\n        //       \"success\": true,\n        //       \"payload\": {\n        //         \"balances\": [\n        //           {\n        //             \"currency\": \"bat\",\n        //             \"available\": \"0.00000000\",\n        //             \"locked\": \"0.00000000\",\n        //             \"total\": \"0.00000000\",\n        //             \"pending_deposit\": \"0.00000000\",\n        //             \"pending_withdrawal\": \"0.00000000\"\n        //           },\n        //           {\n        //             \"currency\": \"bch\",\n        //             \"available\": \"0.00000000\",\n        //             \"locked\": \"0.00000000\",\n        //             \"total\": \"0.00000000\",\n        //             \"pending_deposit\": \"0.00000000\",\n        //             \"pending_withdrawal\": \"0.00000000\"\n        //           },\n        //         ],\n        //       },\n        //     }\n        //\n        const payload = this.safeValue (response, 'payload', {});\n        const balances = this.safeValue (payload, 'balances');\n        const result = {\n            'info': response,\n            'timestamp': undefined,\n            'datetime': undefined,\n        };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeString (balance, 'available');\n            account['used'] = this.safeString (balance, 'locked');\n            account['total'] = this.safeString (balance, 'total');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'book': this.marketId (symbol),\n        };\n        const response = await this.publicGetOrderBook (this.extend (request, params));\n        const orderbook = this.safeValue (response, 'payload');\n        const timestamp = this.parse8601 (this.safeString (orderbook, 'updated_at'));\n        return this.parseOrderBook (orderbook, symbol, timestamp, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'book': this.marketId (symbol),\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const ticker = this.safeValue (response, 'payload');\n        const timestamp = this.parse8601 (this.safeString (ticker, 'created_at'));\n        const vwap = this.safeNumber (ticker, 'vwap');\n        const baseVolume = this.safeNumber (ticker, 'volume');\n        let quoteVolume = undefined;\n        if (baseVolume !== undefined && vwap !== undefined) {\n            quoteVolume = baseVolume * vwap;\n        }\n        const last = this.safeNumber (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (trade, 'created_at'));\n        const marketId = this.safeString (trade, 'book');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const side = this.safeString2 (trade, 'side', 'maker_side');\n        let amount = this.safeNumber2 (trade, 'amount', 'major');\n        if (amount !== undefined) {\n            amount = Math.abs (amount);\n        }\n        let fee = undefined;\n        const feeCost = this.safeNumber (trade, 'fees_amount');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'fees_currency');\n            const feeCurrency = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrency,\n            };\n        }\n        let cost = this.safeNumber (trade, 'minor');\n        if (cost !== undefined) {\n            cost = Math.abs (cost);\n        }\n        const price = this.safeNumber (trade, 'price');\n        const orderId = this.safeString (trade, 'oid');\n        const id = this.safeString (trade, 'tid');\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'book': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response['payload'], market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = 25, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // the don't support fetching trades starting from a date yet\n        // use the `marker` extra param for that\n        // this is not a typo, the variable name is 'marker' (don't confuse with 'market')\n        const markerInParams = ('marker' in params);\n        // warn the user with an exception if the user wants to filter\n        // starting from since timestamp, but does not set the trade id with an extra 'marker' param\n        if ((since !== undefined) && !markerInParams) {\n            throw new ExchangeError (this.id + ' fetchMyTrades does not support fetching trades starting from a timestamp with the `since` argument, use the `marker` extra param to filter starting from an integer trade id');\n        }\n        // convert it to an integer unconditionally\n        if (markerInParams) {\n            params = this.extend (params, {\n                'marker': parseInt (params['marker']),\n            });\n        }\n        const request = {\n            'book': market['id'],\n            'limit': limit, // default = 25, max = 100\n            // 'sort': 'desc', // default = desc\n            // 'marker': id, // integer id to start from\n        };\n        const response = await this.privateGetUserTrades (this.extend (request, params));\n        return this.parseTrades (response['payload'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'book': this.marketId (symbol),\n            'side': side,\n            'type': type,\n            'major': this.amountToPrecision (symbol, amount),\n        };\n        if (type === 'limit') {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        const id = this.safeString (response['payload'], 'oid');\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'oid': id,\n        };\n        return await this.privateDeleteOrdersOid (this.extend (request, params));\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'partial-fill': 'open', // this is a common substitution in ccxt\n            'completed': 'closed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        const id = this.safeString (order, 'oid');\n        const side = this.safeString (order, 'side');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const marketId = this.safeString (order, 'book');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const orderType = this.safeString (order, 'type');\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const price = this.safeNumber (order, 'price');\n        const amount = this.safeNumber (order, 'original_amount');\n        const remaining = this.safeNumber (order, 'unfilled_amount');\n        const clientOrderId = this.safeString (order, 'client_id');\n        return this.safeOrder ({\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': orderType,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': undefined,\n            'remaining': remaining,\n            'filled': undefined,\n            'status': status,\n            'fee': undefined,\n            'average': undefined,\n            'trades': undefined,\n        });\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = 25, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // the don't support fetching trades starting from a date yet\n        // use the `marker` extra param for that\n        // this is not a typo, the variable name is 'marker' (don't confuse with 'market')\n        const markerInParams = ('marker' in params);\n        // warn the user with an exception if the user wants to filter\n        // starting from since timestamp, but does not set the trade id with an extra 'marker' param\n        if ((since !== undefined) && !markerInParams) {\n            throw new ExchangeError (this.id + ' fetchOpenOrders does not support fetching orders starting from a timestamp with the `since` argument, use the `marker` extra param to filter starting from an integer trade id');\n        }\n        // convert it to an integer unconditionally\n        if (markerInParams) {\n            params = this.extend (params, {\n                'marker': parseInt (params['marker']),\n            });\n        }\n        const request = {\n            'book': market['id'],\n            'limit': limit, // default = 25, max = 100\n            // 'sort': 'desc', // default = desc\n            // 'marker': id, // integer id to start from\n        };\n        const response = await this.privateGetOpenOrders (this.extend (request, params));\n        const orders = this.parseOrders (response['payload'], market, since, limit);\n        return orders;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetOrdersOid ({\n            'oid': id,\n        });\n        const payload = this.safeValue (response, 'payload');\n        if (Array.isArray (payload)) {\n            const numOrders = response['payload'].length;\n            if (numOrders === 1) {\n                return this.parseOrder (payload[0]);\n            }\n        }\n        throw new OrderNotFound (this.id + ': The order ' + id + ' not found.');\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'oid': id,\n        };\n        const response = await this.privateGetOrderTradesOid (this.extend (request, params));\n        return this.parseTrades (response['payload'], market);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'fund_currency': currency['id'],\n        };\n        const response = await this.privateGetFundingDestination (this.extend (request, params));\n        let address = this.safeString (response['payload'], 'account_identifier');\n        let tag = undefined;\n        if (address.indexOf ('?dt=') >= 0) {\n            const parts = address.split ('?dt=');\n            address = this.safeString (parts, 0);\n            tag = this.safeString (parts, 1);\n        }\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const methods = {\n            'BTC': 'Bitcoin',\n            'ETH': 'Ether',\n            'XRP': 'Ripple',\n            'BCH': 'Bcash',\n            'LTC': 'Litecoin',\n        };\n        const method = (code in methods) ? methods[code] : undefined;\n        if (method === undefined) {\n            throw new ExchangeError (this.id + ' not valid withdraw coin: ' + code);\n        }\n        const request = {\n            'amount': amount,\n            'address': address,\n            'destination_tag': tag,\n        };\n        const classMethod = 'privatePost' + method + 'Withdrawal';\n        const response = await this[classMethod] (this.extend (request, params));\n        return {\n            'info': response,\n            'id': this.safeString (response['payload'], 'wid'),\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let endpoint = '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (method === 'GET') {\n            if (Object.keys (query).length) {\n                endpoint += '?' + this.urlencode (query);\n            }\n        }\n        const url = this.urls['api'] + endpoint;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            let request = [ nonce, method, endpoint ].join ('');\n            if (method !== 'GET') {\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    request += body;\n                }\n            }\n            const signature = this.hmac (this.encode (request), this.encode (this.secret));\n            const auth = this.apiKey + ':' + nonce + ':' + signature;\n            headers = {\n                'Authorization': 'Bitso ' + auth,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if ('success' in response) {\n            //\n            //     {\"success\":false,\"error\":{\"code\":104,\"message\":\"Cannot perform request - nonce must be higher than 1520307203724237\"}}\n            //\n            let success = this.safeValue (response, 'success', false);\n            if (typeof success === 'string') {\n                if ((success === 'true') || (success === '1')) {\n                    success = true;\n                } else {\n                    success = false;\n                }\n            }\n            if (!success) {\n                const feedback = this.id + ' ' + this.json (response);\n                const error = this.safeValue (response, 'error');\n                if (error === undefined) {\n                    throw new ExchangeError (feedback);\n                }\n                const code = this.safeString (error, 'code');\n                this.throwExactlyMatchedException (this.exceptions, code, feedback);\n                throw new ExchangeError (feedback);\n            }\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('success' in response) {\n            if (response['success']) {\n                return response;\n            }\n        }\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n};\n"]},"metadata":{},"sourceType":"script"}