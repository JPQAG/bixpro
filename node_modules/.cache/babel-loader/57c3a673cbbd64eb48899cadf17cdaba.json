{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/James Price/Documents/VS Code/bixpro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/James Price/Documents/VS Code/bixpro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/James Price/Documents/VS Code/bixpro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{createRef,useState,useEffect}from'react';import{Row,Col,Button,Form}from'react-bootstrap';import{ValidationForm,TextInputGroup}from'react-bootstrap4-form-validation';import complete from\"../../assets/images/complete.png\";import axios from'../../utils/axios';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CardToDo=function CardToDo(props){var formRef=/*#__PURE__*/createRef();var _useState=useState(''),_useState2=_slicedToArray(_useState,2),newNote=_useState2[0],setNewNote=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),cardTodo=_useState4[0],setCardTodo=_useState4[1];var _ref=props.todoList?props:[],todoList=_ref.todoList;useEffect(function(){setCardTodo(todoList);},[todoList]);var completeHandler=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(key){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.post('/api/todo/card/complete',{key:key}).then(function(response){console.log(response);setCardTodo(response.data.cardTodo);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function completeHandler(_x){return _ref2.apply(this,arguments);};}();var handleChange=function handleChange(e){setNewNote(e.target.value);};var handleSubmit=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e,formData,inputs){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:e.preventDefault();_context2.next=3;return axios.post('/api/todo/card/add',{note:newNote}).then(function(response){resetForm();setCardTodo(response.data.cardTodo);setNewNote('');});case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function handleSubmit(_x2,_x3,_x4){return _ref3.apply(this,arguments);};}();var resetForm=function resetForm(){formRef.current.resetValidationState(true);};var handleErrorSubmit=function handleErrorSubmit(e,formData,errorInputs){//console.log(errorInputs);\n};var completeStyle={backgroundImage:\"url(\".concat(complete,\")\"),position:'absolute',top:'5px',right:'5px',content:\"\",width:'55px',height:'55px',backgroundSize:'100%'};var todoListHtml=cardTodo.map(function(item,index){return/*#__PURE__*/_jsxs(\"li\",{className:item.complete?'complete':'',onClick:function onClick(){return completeHandler(index);},children:[item.complete?/*#__PURE__*/_jsx(\"span\",{style:completeStyle}):'',/*#__PURE__*/_jsx(\"p\",{children:item.note})]},index);});return/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsx(ValidationForm,{ref:formRef,onSubmit:handleSubmit,onErrorSubmit:handleErrorSubmit,children:/*#__PURE__*/_jsx(Form.Row,{children:/*#__PURE__*/_jsx(Form.Group,{as:Col,children:/*#__PURE__*/_jsx(TextInputGroup,{name:\"newNoteCard\",id:\"newNoteCard\",placeholder:\"Create your task list\",required:true,append:/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"secondary\",className:\"btn-icon\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fa fa-plus\"})}),value:newNote,onChange:handleChange,autoComplete:\"off\"})})})}),/*#__PURE__*/_jsx(\"section\",{id:\"task-container\",children:/*#__PURE__*/_jsx(\"ul\",{id:\"task-list\",children:todoListHtml})})]})})});};export default CardToDo;","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/src/components/To-Do/CardToDo.js"],"names":["React","createRef","useState","useEffect","Row","Col","Button","Form","ValidationForm","TextInputGroup","complete","axios","CardToDo","props","formRef","newNote","setNewNote","cardTodo","setCardTodo","todoList","completeHandler","key","post","then","response","console","log","data","handleChange","e","target","value","handleSubmit","formData","inputs","preventDefault","note","resetForm","current","resetValidationState","handleErrorSubmit","errorInputs","completeStyle","backgroundImage","position","top","right","content","width","height","backgroundSize","todoListHtml","map","item","index"],"mappings":"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","sourcesContent":["import React, { createRef, useState, useEffect } from 'react';\r\nimport { Row, Col, Button, Form } from 'react-bootstrap';\r\nimport { ValidationForm, TextInputGroup } from 'react-bootstrap4-form-validation';\r\n\r\nimport complete from \"../../assets/images/complete.png\";\r\nimport axios from '../../utils/axios';\r\n\r\nconst CardToDo = props => {\r\n    const formRef = createRef();\r\n    const [newNote, setNewNote] = useState('');\r\n    const [cardTodo, setCardTodo] = useState([]);\r\n\r\n    const { todoList } = (props.todoList) ? props : [];\r\n\r\n    useEffect(() => {\r\n        setCardTodo(todoList);\r\n    }, [todoList]);\r\n\r\n    const completeHandler = async (key) => {\r\n        await axios.post('/api/todo/card/complete', {\r\n            key: key\r\n        }).then(response => {\r\n            console.log(response);\r\n            setCardTodo(response.data.cardTodo);\r\n        });\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setNewNote(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = async (e, formData, inputs) => {\r\n        e.preventDefault();\r\n\r\n        await axios.post('/api/todo/card/add', {\r\n            note: newNote\r\n        }).then(response => {\r\n            resetForm();\r\n            setCardTodo(response.data.cardTodo);\r\n            setNewNote('');\r\n        });\r\n    };\r\n\r\n    const resetForm = () => {\r\n        (formRef.current).resetValidationState(true);\r\n    };\r\n\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        //console.log(errorInputs);\r\n    };\r\n\r\n    const completeStyle = {\r\n        backgroundImage: `url(${complete})`,\r\n        position: 'absolute',\r\n        top: '5px',\r\n        right: '5px',\r\n        content: \"\",\r\n        width: '55px',\r\n        height: '55px',\r\n        backgroundSize: '100%'\r\n    };\r\n\r\n    const todoListHtml = cardTodo.map((item, index) => {\r\n        return (\r\n            <li key={index} className={item.complete ? 'complete' : ''} onClick={() => completeHandler(index)}>\r\n                {item.complete ? <span style={completeStyle} /> : ''}\r\n                <p>{item.note}</p>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col>\r\n                    <ValidationForm ref={formRef} onSubmit={handleSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col}>\r\n                                <TextInputGroup\r\n                                    name=\"newNoteCard\"\r\n                                    id=\"newNoteCard\"\r\n                                    placeholder=\"Create your task list\"\r\n                                    required\r\n                                    append={<Button type=\"submit\" variant=\"secondary\" className='btn-icon'><i className=\"fa fa-plus\"/></Button>}\r\n                                    value={newNote}\r\n                                    onChange={handleChange}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                    </ValidationForm>\r\n                    <section id=\"task-container\">\r\n                        <ul id=\"task-list\">\r\n                            {todoListHtml}\r\n                        </ul>\r\n                    </section>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default CardToDo;"]},"metadata":{},"sourceType":"module"}