{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  AuthenticationError,\n  OrderNotFound,\n  InsufficientFunds,\n  PermissionDenied,\n  BadRequest,\n  RateLimitExceeded,\n  InvalidOrder\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bigone extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bigone',\n      'name': 'BigONE',\n      'countries': ['CN'],\n      'version': 'v3',\n      'rateLimit': 1200,\n      // 500 request per 10 minutes\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrders': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': 'min1',\n        '5m': 'min5',\n        '15m': 'min15',\n        '30m': 'min30',\n        '1h': 'hour1',\n        '3h': 'hour3',\n        '4h': 'hour4',\n        '6h': 'hour6',\n        '12h': 'hour12',\n        '1d': 'day1',\n        '1w': 'week1',\n        '1M': 'month1'\n      },\n      'hostname': 'big.one',\n      // or 'bigone.com'\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/69354403-1d532180-0c91-11ea-88ed-44c06cefdf87.jpg',\n        'api': {\n          'public': 'https://{hostname}/api/v3',\n          'private': 'https://{hostname}/api/v3/viewer'\n        },\n        'www': 'https://big.one',\n        'doc': 'https://open.big.one/docs/api.html',\n        'fees': 'https://bigone.zendesk.com/hc/en-us/articles/115001933374-BigONE-Fee-Policy',\n        'referral': 'https://b1.run/users/new?code=D3LLBVFT'\n      },\n      'api': {\n        'public': {\n          'get': ['ping', 'asset_pairs', 'asset_pairs/{asset_pair_name}/depth', 'asset_pairs/{asset_pair_name}/trades', 'asset_pairs/{asset_pair_name}/ticker', 'asset_pairs/{asset_pair_name}/candles', 'asset_pairs/tickers']\n        },\n        'private': {\n          'get': ['accounts', 'fund/accounts', 'assets/{asset_symbol}/address', 'orders', 'orders/{id}', 'orders/multi', 'trades', 'withdrawals', 'deposits'],\n          'post': ['orders', 'orders/{id}/cancel', 'orders/cancel', 'withdrawals', 'transfer']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.1 / 100,\n          'taker': 0.1 / 100\n        },\n        'funding': {\n          // HARDCODING IS DEPRECATED THE FEES BELOW ARE TO BE REMOVED SOON\n          'withdraw': {\n            'BTC': 0.001,\n            'ETH': 0.005,\n            'EOS': 0.01,\n            'ZEC': 0.003,\n            'LTC': 0.01,\n            'QTUM': 0.01,\n            // 'INK': 0.01 QTUM,\n            // 'BOT': 0.01 QTUM,\n            'ETC': 0.01,\n            'GAS': 0.0,\n            'BTS': 1.0,\n            'GXS': 0.1,\n            'BITCNY': 19.0\n          }\n        }\n      },\n      'exceptions': {\n        'exact': {\n          '10001': BadRequest,\n          // syntax error\n          '10005': ExchangeError,\n          // internal error\n          \"Amount's scale must greater than AssetPair's base scale\": InvalidOrder,\n          '10007': BadRequest,\n          // parameter error, {\"code\":10007,\"message\":\"Amount's scale must greater than AssetPair's base scale\"}\n          '10011': ExchangeError,\n          // system error\n          '10013': OrderNotFound,\n          // {\"code\":10013,\"message\":\"Resource not found\"}\n          '10014': InsufficientFunds,\n          // {\"code\":10014,\"message\":\"Insufficient funds\"}\n          '10403': PermissionDenied,\n          // permission denied\n          '10429': RateLimitExceeded,\n          // too many requests\n          '40004': AuthenticationError,\n          // {\"code\":40004,\"message\":\"invalid jwt\"}\n          '40103': AuthenticationError,\n          // invalid otp code\n          '40104': AuthenticationError,\n          // invalid asset pin code\n          '40301': PermissionDenied,\n          // {\"code\":40301,\"message\":\"Permission denied withdrawal create\"}\n          '40302': ExchangeError,\n          // already requested\n          '40601': ExchangeError,\n          // resource is locked\n          '40602': ExchangeError,\n          // resource is depleted\n          '40603': InsufficientFunds,\n          // insufficient resource\n          '40120': InvalidOrder,\n          // Order is in trading\n          '40121': InvalidOrder // Order is already cancelled or filled\n\n        },\n        'broad': {}\n      },\n      'commonCurrencies': {\n        'MBN': 'Mobilian Coin',\n        'ONE': 'BigONE Token'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetAssetPairs(params); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\n    //                 \"id\":\"01e48809-b42f-4a38-96b1-c4c547365db1\",\n    //                 \"name\":\"PCX-BTC\",\n    //                 \"quote_scale\":7,\n    //                 \"quote_asset\":{\n    //                     \"id\":\"0df9c3c3-255a-46d7-ab82-dedae169fba9\",\n    //                     \"symbol\":\"BTC\",\n    //                     \"name\":\"Bitcoin\",\n    //                 },\n    //                 \"base_asset\":{\n    //                     \"id\":\"405484f7-4b03-4378-a9c1-2bd718ecab51\",\n    //                     \"symbol\":\"PCX\",\n    //                     \"name\":\"ChainX\",\n    //                 },\n    //                 \"base_scale\":3,\n    //                 \"min_quote_value\":\"0.0001\",\n    //             },\n    //         ]\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'data', []);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'name');\n      const uuid = this.safeString(market, 'id');\n      const baseAsset = this.safeValue(market, 'base_asset', {});\n      const quoteAsset = this.safeValue(market, 'quote_asset', {});\n      const baseId = this.safeString(baseAsset, 'symbol');\n      const quoteId = this.safeString(quoteAsset, 'symbol');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const amountPrecisionString = this.safeString(market, 'base_scale');\n      const pricePrecisionString = this.safeString(market, 'quote_scale');\n      const amountLimit = this.parsePrecision(amountPrecisionString);\n      const priceLimit = this.parsePrecision(pricePrecisionString);\n      const precision = {\n        'amount': parseInt(amountPrecisionString),\n        'price': parseInt(pricePrecisionString)\n      };\n      const minCost = this.safeInteger(market, 'min_quote_value');\n      const entry = {\n        'id': id,\n        'uuid': uuid,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.parseNumber(amountLimit),\n            'max': undefined\n          },\n          'price': {\n            'min': this.parseNumber(priceLimit),\n            'max': undefined\n          },\n          'cost': {\n            'min': minCost,\n            'max': undefined\n          }\n        },\n        'info': market\n      };\n      result.push(entry);\n    }\n\n    return result;\n  }\n\n  async loadMarkets(reload = false, params = {}) {\n    const markets = await super.loadMarkets(reload, params);\n    let marketsByUuid = this.safeValue(this.options, 'marketsByUuid');\n\n    if (marketsByUuid === undefined || reload) {\n      marketsByUuid = {};\n\n      for (let i = 0; i < this.symbols.length; i++) {\n        const symbol = this.symbols[i];\n        const market = this.markets[symbol];\n        const uuid = this.safeString(market, 'uuid');\n        marketsByUuid[uuid] = market;\n      }\n\n      this.options['marketsByUuid'] = marketsByUuid;\n    }\n\n    return markets;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //     {\n    //         \"asset_pair_name\":\"ETH-BTC\",\n    //         \"bid\":{\"price\":\"0.021593\",\"order_count\":1,\"quantity\":\"0.20936\"},\n    //         \"ask\":{\"price\":\"0.021613\",\"order_count\":1,\"quantity\":\"2.87064\"},\n    //         \"open\":\"0.021795\",\n    //         \"high\":\"0.021795\",\n    //         \"low\":\"0.021471\",\n    //         \"close\":\"0.021613\",\n    //         \"volume\":\"117078.90431\",\n    //         \"daily_change\":\"-0.000182\"\n    //     }\n    //\n    const marketId = this.safeString(ticker, 'asset_pair_name');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const timestamp = undefined;\n    const close = this.safeNumber(ticker, 'close');\n    const bid = this.safeValue(ticker, 'bid', {});\n    const ask = this.safeValue(ticker, 'ask', {});\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(bid, 'price'),\n      'bidVolume': this.safeNumber(bid, 'quantity'),\n      'ask': this.safeNumber(ask, 'price'),\n      'askVolume': this.safeNumber(ask, 'quantity'),\n      'vwap': undefined,\n      'open': this.safeNumber(ticker, 'open'),\n      'close': close,\n      'last': close,\n      'previousClose': undefined,\n      'change': this.safeNumber(ticker, 'daily_change'),\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeNumber(ticker, 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'asset_pair_name': market['id']\n    };\n    const response = await this.publicGetAssetPairsAssetPairNameTicker(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":{\n    //             \"asset_pair_name\":\"ETH-BTC\",\n    //             \"bid\":{\"price\":\"0.021593\",\"order_count\":1,\"quantity\":\"0.20936\"},\n    //             \"ask\":{\"price\":\"0.021613\",\"order_count\":1,\"quantity\":\"2.87064\"},\n    //             \"open\":\"0.021795\",\n    //             \"high\":\"0.021795\",\n    //             \"low\":\"0.021471\",\n    //             \"close\":\"0.021613\",\n    //             \"volume\":\"117078.90431\",\n    //             \"daily_change\":\"-0.000182\"\n    //         }\n    //     }\n    //\n\n    const ticker = this.safeValue(response, 'data', {});\n    return this.parseTicker(ticker, market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbols !== undefined) {\n      const ids = this.marketIds(symbols);\n      request['pair_names'] = ids.join(',');\n    }\n\n    const response = await this.publicGetAssetPairsTickers(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\n    //                 \"asset_pair_name\":\"PCX-BTC\",\n    //                 \"bid\":{\"price\":\"0.000234\",\"order_count\":1,\"quantity\":\"0.518\"},\n    //                 \"ask\":{\"price\":\"0.0002348\",\"order_count\":1,\"quantity\":\"2.348\"},\n    //                 \"open\":\"0.0002343\",\n    //                 \"high\":\"0.0002348\",\n    //                 \"low\":\"0.0002162\",\n    //                 \"close\":\"0.0002348\",\n    //                 \"volume\":\"12887.016\",\n    //                 \"daily_change\":\"0.0000005\"\n    //             },\n    //             {\n    //                 \"asset_pair_name\":\"GXC-USDT\",\n    //                 \"bid\":{\"price\":\"0.5054\",\"order_count\":1,\"quantity\":\"40.53\"},\n    //                 \"ask\":{\"price\":\"0.5055\",\"order_count\":1,\"quantity\":\"38.53\"},\n    //                 \"open\":\"0.5262\",\n    //                 \"high\":\"0.5323\",\n    //                 \"low\":\"0.5055\",\n    //                 \"close\":\"0.5055\",\n    //                 \"volume\":\"603963.05\",\n    //                 \"daily_change\":\"-0.0207\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const tickers = this.safeValue(response, 'data', []);\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = this.parseTicker(tickers[i]);\n      const symbol = ticker['symbol'];\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.publicGetPing(params); //\n    //     {\n    //         \"data\": {\n    //             \"timestamp\": 1527665262168391000\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const timestamp = this.safeInteger(data, 'timestamp');\n    return parseInt(timestamp / 1000000);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'asset_pair_name': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50, max 200\n    }\n\n    const response = await this.publicGetAssetPairsAssetPairNameDepth(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\": {\n    //             \"asset_pair_name\": \"EOS-BTC\",\n    //             \"bids\": [\n    //                 { \"price\": \"42\", \"order_count\": 4, \"quantity\": \"23.33363711\" }\n    //             ],\n    //             \"asks\": [\n    //                 { \"price\": \"45\", \"order_count\": 2, \"quantity\": \"4193.3283464\" }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const orderbook = this.safeValue(response, 'data', {});\n    return this.parseOrderBook(orderbook, symbol, undefined, 'bids', 'asks', 'price', 'quantity');\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     {\n    //         \"id\": 38199941,\n    //         \"price\": \"3378.67\",\n    //         \"amount\": \"0.019812\",\n    //         \"taker_side\": \"ASK\",\n    //         \"created_at\": \"2019-01-29T06:05:56Z\"\n    //     }\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"id\": 10854280,\n    //         \"asset_pair_name\": \"XIN-USDT\",\n    //         \"price\": \"70\",\n    //         \"amount\": \"1\",\n    //         \"taker_side\": \"ASK\",\n    //         \"maker_order_id\": 58284908,\n    //         \"taker_order_id\": 58284909,\n    //         \"maker_fee\": \"0.0008\",\n    //         \"taker_fee\": \"0.07\",\n    //         \"side\": \"SELF_TRADING\",\n    //         \"inserted_at\": \"2019-04-16T12:00:01Z\"\n    //     },\n    //\n    //     {\n    //         \"id\": 10854263,\n    //         \"asset_pair_name\": \"XIN-USDT\",\n    //         \"price\": \"75.7\",\n    //         \"amount\": \"12.743149\",\n    //         \"taker_side\": \"BID\",\n    //         \"maker_order_id\": null,\n    //         \"taker_order_id\": 58284888,\n    //         \"maker_fee\": null,\n    //         \"taker_fee\": \"0.0025486298\",\n    //         \"side\": \"BID\",\n    //         \"inserted_at\": \"2019-04-15T06:20:57Z\"\n    //     }\n    //\n    const timestamp = this.parse8601(this.safeString2(trade, 'created_at', 'inserted_at'));\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'amount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    const marketId = this.safeString(trade, 'asset_pair_name');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    let side = this.safeString(trade, 'side');\n    const takerSide = this.safeString(trade, 'taker_side');\n    let takerOrMaker = undefined;\n\n    if (takerSide !== undefined && side !== undefined && side !== 'SELF_TRADING') {\n      takerOrMaker = takerSide === side ? 'taker' : 'maker';\n    }\n\n    if (side === undefined) {\n      // taker side is not related to buy/sell side\n      // the following code is probably a mistake\n      side = takerSide === 'ASK' ? 'sell' : 'buy';\n    } else {\n      if (side === 'BID') {\n        side = 'buy';\n      } else if (side === 'ASK') {\n        side = 'sell';\n      }\n    }\n\n    const makerOrderId = this.safeString(trade, 'maker_order_id');\n    const takerOrderId = this.safeString(trade, 'taker_order_id');\n    let orderId = undefined;\n\n    if (makerOrderId !== undefined) {\n      if (takerOrderId !== undefined) {\n        orderId = [makerOrderId, takerOrderId];\n      } else {\n        orderId = makerOrderId;\n      }\n    } else if (takerOrderId !== undefined) {\n      orderId = takerOrderId;\n    }\n\n    const id = this.safeString(trade, 'id');\n    const result = {\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'type': 'limit',\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': parseFloat(cost),\n      'info': trade\n    };\n    let makerCurrencyCode = undefined;\n    let takerCurrencyCode = undefined;\n\n    if (market !== undefined && takerOrMaker !== undefined) {\n      if (side === 'buy') {\n        if (takerOrMaker === 'maker') {\n          makerCurrencyCode = market['base'];\n          takerCurrencyCode = market['quote'];\n        } else {\n          makerCurrencyCode = market['quote'];\n          takerCurrencyCode = market['base'];\n        }\n      } else {\n        if (takerOrMaker === 'maker') {\n          makerCurrencyCode = market['quote'];\n          takerCurrencyCode = market['base'];\n        } else {\n          makerCurrencyCode = market['base'];\n          takerCurrencyCode = market['quote'];\n        }\n      }\n    } else if (side === 'SELF_TRADING') {\n      if (takerSide === 'BID') {\n        makerCurrencyCode = market['quote'];\n        takerCurrencyCode = market['base'];\n      } else if (takerSide === 'ASK') {\n        makerCurrencyCode = market['base'];\n        takerCurrencyCode = market['quote'];\n      }\n    }\n\n    const makerFeeCost = this.safeNumber(trade, 'maker_fee');\n    const takerFeeCost = this.safeNumber(trade, 'taker_fee');\n\n    if (makerFeeCost !== undefined) {\n      if (takerFeeCost !== undefined) {\n        result['fees'] = [{\n          'cost': makerFeeCost,\n          'currency': makerCurrencyCode\n        }, {\n          'cost': takerFeeCost,\n          'currency': takerCurrencyCode\n        }];\n      } else {\n        result['fee'] = {\n          'cost': makerFeeCost,\n          'currency': makerCurrencyCode\n        };\n      }\n    } else if (takerFeeCost !== undefined) {\n      result['fee'] = {\n        'cost': takerFeeCost,\n        'currency': takerCurrencyCode\n      };\n    } else {\n      result['fee'] = undefined;\n    }\n\n    return result;\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'asset_pair_name': market['id']\n    };\n    const response = await this.publicGetAssetPairsAssetPairNameTrades(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 38199941,\n    //                 \"price\": \"3378.67\",\n    //                 \"amount\": \"0.019812\",\n    //                 \"taker_side\": \"ASK\",\n    //                 \"created_at\": \"2019-01-29T06:05:56Z\"\n    //             },\n    //             {\n    //                 \"id\": 38199934,\n    //                 \"price\": \"3376.14\",\n    //                 \"amount\": \"0.019384\",\n    //                 \"taker_side\": \"ASK\",\n    //                 \"created_at\": \"2019-01-29T06:05:40Z\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'data', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         close: '0.021562',\n    //         high: '0.021563',\n    //         low: '0.02156',\n    //         open: '0.021563',\n    //         time: '2019-11-21T07:54:00Z',\n    //         volume: '59.84376'\n    //     }\n    //\n    return [this.parse8601(this.safeString(ohlcv, 'time')), this.safeNumber(ohlcv, 'open'), this.safeNumber(ohlcv, 'high'), this.safeNumber(ohlcv, 'low'), this.safeNumber(ohlcv, 'close'), this.safeNumber(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 100; // default 100, max 500\n    }\n\n    const request = {\n      'asset_pair_name': market['id'],\n      'period': this.timeframes[timeframe],\n      'limit': limit\n    };\n\n    if (since !== undefined) {\n      // const start = parseInt (since / 1000);\n      const end = this.sum(since, limit * this.parseTimeframe(timeframe) * 1000);\n      request['time'] = this.iso8601(end);\n    }\n\n    const response = await this.publicGetAssetPairsAssetPairNameCandles(this.extend(request, params)); //\n    //     {\n    //         code: 0,\n    //         data: [\n    //             {\n    //                 close: '0.021656',\n    //                 high: '0.021658',\n    //                 low: '0.021652',\n    //                 open: '0.021652',\n    //                 time: '2019-11-21T09:30:00Z',\n    //                 volume: '53.08664'\n    //             },\n    //             {\n    //                 close: '0.021652',\n    //                 high: '0.021656',\n    //                 low: '0.021652',\n    //                 open: '0.021656',\n    //                 time: '2019-11-21T09:29:00Z',\n    //                 volume: '88.39861'\n    //             },\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const type = this.safeString(params, 'type', '');\n    params = this.omit(params, 'type');\n    const method = 'privateGet' + this.capitalize(type) + 'Accounts';\n    const response = await this[method](params); //\n    //     {\n    //         \"code\":0,\n    //         \"data\":[\n    //             {\"asset_symbol\":\"NKC\",\"balance\":\"0\",\"locked_balance\":\"0\"},\n    //             {\"asset_symbol\":\"UBTC\",\"balance\":\"0\",\"locked_balance\":\"0\"},\n    //             {\"asset_symbol\":\"READ\",\"balance\":\"0\",\"locked_balance\":\"0\"},\n    //         ],\n    //     }\n    //\n\n    const result = {\n      'info': response,\n      'timestamp': undefined,\n      'datetime': undefined\n    };\n    const balances = this.safeValue(response, 'data', []);\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const symbol = this.safeString(balance, 'asset_symbol');\n      const code = this.safeCurrencyCode(symbol);\n      const account = this.account();\n      account['total'] = this.safeString(balance, 'balance');\n      account['used'] = this.safeString(balance, 'locked_balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //    {\n    //        \"id\": 10,\n    //        \"asset_pair_name\": \"EOS-BTC\",\n    //        \"price\": \"10.00\",\n    //        \"amount\": \"10.00\",\n    //        \"filled_amount\": \"9.0\",\n    //        \"avg_deal_price\": \"12.0\",\n    //        \"side\": \"ASK\",\n    //        \"state\": \"FILLED\",\n    //        \"created_at\":\"2019-01-29T06:05:56Z\",\n    //        \"updated_at\":\"2019-01-29T06:05:56Z\",\n    //    }\n    //\n    const id = this.safeString(order, 'id');\n    const marketId = this.safeString(order, 'asset_pair_name');\n    const symbol = this.safeSymbol(marketId, market, '-');\n    const timestamp = this.parse8601(this.safeString(order, 'created_at'));\n    const price = this.safeNumber(order, 'price');\n    const amount = this.safeNumber(order, 'amount');\n    const filled = this.safeNumber(order, 'filled_amount');\n    const status = this.parseOrderStatus(this.safeString(order, 'state'));\n    let side = this.safeString(order, 'side');\n\n    if (side === 'BID') {\n      side = 'buy';\n    } else {\n      side = 'sell';\n    }\n\n    const lastTradeTimestamp = this.parse8601(this.safeString(order, 'updated_at'));\n    const average = this.safeNumber(order, 'avg_deal_price');\n    return this.safeOrder({\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': undefined,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': undefined,\n      'average': average,\n      'filled': filled,\n      'remaining': undefined,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    });\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    side = side === 'buy' ? 'BID' : 'ASK';\n    const uppercaseType = type.toUpperCase();\n    const request = {\n      'asset_pair_name': market['id'],\n      // asset pair name BTC-USDT, required\n      'side': side,\n      // order side one of \"ASK\"/\"BID\", required\n      'amount': this.amountToPrecision(symbol, amount),\n      // order amount, string, required\n      // 'price': this.priceToPrecision (symbol, price), // order price, string, required\n      'type': uppercaseType // 'operator': 'GTE', // stop orders only, GTE greater than and equal, LTE less than and equal\n      // 'immediate_or_cancel': false, // limit orders only, must be false when post_only is true\n      // 'post_only': false, // limit orders only, must be false when immediate_or_cancel is true\n\n    };\n\n    if (uppercaseType === 'LIMIT') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    } else {\n      const isStopLimit = uppercaseType === 'STOP_LIMIT';\n      const isStopMarket = uppercaseType === 'STOP_MARKET';\n\n      if (isStopLimit || isStopMarket) {\n        const stopPrice = this.safeNumber2(params, 'stop_price', 'stopPrice');\n\n        if (stopPrice === undefined) {\n          throw new ArgumentsRequired(this.id + ' createOrder() requires a stop_price parameter');\n        }\n\n        request['stop_price'] = this.priceToPrecision(symbol, stopPrice);\n        params = this.omit(params, ['stop_price', 'stopPrice']);\n      }\n\n      if (isStopLimit) {\n        request['price'] = this.priceToPrecision(symbol, price);\n      }\n    }\n\n    const response = await this.privatePostOrders(this.extend(request, params)); //\n    //    {\n    //        \"id\": 10,\n    //        \"asset_pair_name\": \"EOS-BTC\",\n    //        \"price\": \"10.00\",\n    //        \"amount\": \"10.00\",\n    //        \"filled_amount\": \"9.0\",\n    //        \"avg_deal_price\": \"12.0\",\n    //        \"side\": \"ASK\",\n    //        \"state\": \"FILLED\",\n    //        \"created_at\":\"2019-01-29T06:05:56Z\",\n    //        \"updated_at\":\"2019-01-29T06:05:56Z\"\n    //    }\n    //\n\n    const order = this.safeValue(response, 'data');\n    return this.parseOrder(order, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privatePostOrdersIdCancel(this.extend(request, params)); //    {\n    //        \"id\": 10,\n    //        \"asset_pair_name\": \"EOS-BTC\",\n    //        \"price\": \"10.00\",\n    //        \"amount\": \"10.00\",\n    //        \"filled_amount\": \"9.0\",\n    //        \"avg_deal_price\": \"12.0\",\n    //        \"side\": \"ASK\",\n    //        \"state\": \"CANCELLED\",\n    //        \"created_at\":\"2019-01-29T06:05:56Z\",\n    //        \"updated_at\":\"2019-01-29T06:05:56Z\"\n    //    }\n\n    const order = this.safeValue(response, 'data');\n    return this.parseOrder(order);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'asset_pair_name': market['id']\n    };\n    const response = await this.privatePostOrdersCancel(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"data\": {\n    //             \"cancelled\":[\n    //                 58272370,\n    //                 58272377\n    //             ],\n    //             \"failed\": []\n    //         }\n    //     }\n    //\n\n    return response;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id\n    };\n    const response = await this.privateGetOrdersId(this.extend(request, params));\n    const order = this.safeValue(response, 'data', {});\n    return this.parseOrder(order);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'asset_pair_name': market['id'] // 'page_token': 'dxzef', // request page after this page token\n      // 'side': 'ASK', // 'ASK' or 'BID', optional\n      // 'state': 'FILLED', // 'CANCELLED', 'FILLED', 'PENDING'\n      // 'limit' 20, // default 20, max 200\n\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 20, max 200\n    }\n\n    const response = await this.privateGetOrders(this.extend(request, params)); //\n    //    {\n    //        \"code\":0,\n    //        \"data\": [\n    //             {\n    //                 \"id\": 10,\n    //                 \"asset_pair_name\": \"ETH-BTC\",\n    //                 \"price\": \"10.00\",\n    //                 \"amount\": \"10.00\",\n    //                 \"filled_amount\": \"9.0\",\n    //                 \"avg_deal_price\": \"12.0\",\n    //                 \"side\": \"ASK\",\n    //                 \"state\": \"FILLED\",\n    //                 \"created_at\":\"2019-01-29T06:05:56Z\",\n    //                 \"updated_at\":\"2019-01-29T06:05:56Z\",\n    //             },\n    //         ],\n    //        \"page_token\":\"dxzef\",\n    //    }\n    //\n\n    const orders = this.safeValue(response, 'data', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a symbol argument');\n    }\n\n    const market = this.market(symbol);\n    const request = {\n      'asset_pair_name': market['id'] // 'page_token': 'dxzef', // request page after this page token\n\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 20, max 200\n    }\n\n    const response = await this.privateGetTrades(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 10854280,\n    //                 \"asset_pair_name\": \"XIN-USDT\",\n    //                 \"price\": \"70\",\n    //                 \"amount\": \"1\",\n    //                 \"taker_side\": \"ASK\",\n    //                 \"maker_order_id\": 58284908,\n    //                 \"taker_order_id\": 58284909,\n    //                 \"maker_fee\": \"0.0008\",\n    //                 \"taker_fee\": \"0.07\",\n    //                 \"side\": \"SELF_TRADING\",\n    //                 \"inserted_at\": \"2019-04-16T12:00:01Z\"\n    //             },\n    //             {\n    //                 \"id\": 10854263,\n    //                 \"asset_pair_name\": \"XIN-USDT\",\n    //                 \"price\": \"75.7\",\n    //                 \"amount\": \"12.743149\",\n    //                 \"taker_side\": \"BID\",\n    //                 \"maker_order_id\": null,\n    //                 \"taker_order_id\": 58284888,\n    //                 \"maker_fee\": null,\n    //                 \"taker_fee\": \"0.0025486298\",\n    //                 \"side\": \"BID\",\n    //                 \"inserted_at\": \"2019-04-15T06:20:57Z\"\n    //             }\n    //         ],\n    //         \"page_token\":\"dxfv\"\n    //     }\n    //\n\n    const trades = this.safeValue(response, 'data', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'PENDING': 'open',\n      'FILLED': 'closed',\n      'CANCELLED': 'canceled'\n    };\n    return this.safeString(statuses, status);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'state': 'PENDING'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'state': 'FILLED'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  nonce() {\n    return this.microseconds() * 1000;\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const query = this.omit(params, this.extractParams(path));\n    const baseUrl = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    });\n    let url = baseUrl + '/' + this.implodeParams(path, params);\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const request = {\n        'type': 'OpenAPIV2',\n        'sub': this.apiKey,\n        'nonce': nonce // 'recv_window': '30', // default 30\n\n      };\n      const jwt = this.jwt(request, this.encode(this.secret));\n      headers = {\n        'Authorization': 'Bearer ' + jwt\n      };\n\n      if (method === 'GET') {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      } else if (method === 'POST') {\n        headers['Content-Type'] = 'application/json';\n        body = this.json(query);\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'asset_symbol': currency['id']\n    };\n    const response = await this.privateGetAssetsAssetSymbolAddress(this.extend(request, params)); //\n    // the actual response format is not the same as the documented one\n    // the data key contains an array in the actual response\n    //\n    //     {\n    //         \"code\":0,\n    //         \"message\":\"\",\n    //         \"data\":[\n    //             {\n    //                 \"id\":5521878,\n    //                 \"chain\":\"Bitcoin\",\n    //                 \"value\":\"1GbmyKoikhpiQVZ1C9sbF17mTyvBjeobVe\",\n    //                 \"memo\":\"\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const dataLength = data.length;\n\n    if (dataLength < 1) {\n      throw new ExchangeError(this.id + 'fetchDepositAddress() returned empty address response');\n    }\n\n    const firstElement = data[0];\n    const address = this.safeString(firstElement, 'value');\n    const tag = this.safeString(firstElement, 'memo');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      // what are other statuses here?\n      'WITHHOLD': 'ok',\n      // deposits\n      'UNCONFIRMED': 'pending',\n      'CONFIRMED': 'ok' // withdrawals\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"amount\": \"25.0\",\n    //         \"asset_symbol\": \"BTS\"\n    //         \"confirms\": 100,\n    //         \"id\": 5,\n    //         \"inserted_at\": \"2018-02-16T11:39:58.000Z\",\n    //         \"is_internal\": false,\n    //         \"kind\": \"default\",\n    //         \"memo\": \"\",\n    //         \"state\": \"WITHHOLD\",\n    //         \"txid\": \"72e03037d144dae3d32b68b5045462b1049a0755\",\n    //         \"updated_at\": \"2018-11-09T10:20:09.000Z\",\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"amount\": \"5\",\n    //         \"asset_symbol\": \"ETH\",\n    //         \"completed_at\": \"2018-03-15T16:13:45.610463Z\",\n    //         \"customer_id\": \"10\",\n    //         \"id\": 10,\n    //         \"inserted_at\": \"2018-03-15T16:13:45.610463Z\",\n    //         \"is_internal\": true,\n    //         \"note\": \"2018-03-15T16:13:45.610463Z\",\n    //         \"state\": \"CONFIRMED\",\n    //         \"target_address\": \"0x4643bb6b393ac20a6175c713175734a72517c63d6f7\"\n    //         \"txid\": \"0x4643bb6b393ac20a6175c713175734a72517c63d6f73a3ca90a15356f2e967da0\",\n    //     }\n    //\n    // withdraw\n    //\n    //     {\n    //         \"id\":1077391,\n    //         \"customer_id\":1082679,\n    //         \"amount\":\"21.9000000000000000\",\n    //         \"txid\":\"\",\n    //         \"is_internal\":false,\n    //         \"kind\":\"on_chain\",\n    //         \"state\":\"PENDING\",\n    //         \"inserted_at\":\"2020-06-03T00:50:57+00:00\",\n    //         \"updated_at\":\"2020-06-03T00:50:57+00:00\",\n    //         \"memo\":\"\",\n    //         \"target_address\":\"rDYtYT3dBeuw376rvHqoZBKW3UmvguoBAf\",\n    //         \"fee\":\"0.1000000000000000\",\n    //         \"asset_symbol\":\"XRP\"\n    //     }\n    //\n    const currencyId = this.safeString(transaction, 'asset_symbol');\n    const code = this.safeCurrencyCode(currencyId);\n    const id = this.safeInteger(transaction, 'id');\n    const amount = this.safeNumber(transaction, 'amount');\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'state'));\n    const timestamp = this.parse8601(this.safeString(transaction, 'inserted_at'));\n    const updated = this.parse8601(this.safeString2(transaction, 'updated_at', 'completed_at'));\n    const txid = this.safeString(transaction, 'txid');\n    const address = this.safeString(transaction, 'target_address');\n    const tag = this.safeString(transaction, 'memo');\n    const type = 'customer_id' in transaction ? 'deposit' : 'withdrawal';\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': undefined,\n      'address': undefined,\n      'addressTo': address,\n      'tagFrom': undefined,\n      'tag': tag,\n      'tagTo': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': undefined\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'page_token': 'dxzef', // request page after this page token\n      // 'limit': 50, // optional, default 50\n      // 'kind': 'string', // optional - air_drop, big_holder_dividend, default, eosc_to_eos, internal, equally_airdrop, referral_mining, one_holder_dividend, single_customer, snapshotted_airdrop, trade_mining\n      // 'asset_symbol': 'BTC', // optional\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['asset_symbol'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50\n    }\n\n    const response = await this.privateGetDeposits(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"page_token\": \"NQ==\",\n    //         \"data\": [\n    //             {\n    //                 \"id\": 5,\n    //                 \"amount\": \"25.0\",\n    //                 \"confirms\": 100,\n    //                 \"txid\": \"72e03037d144dae3d32b68b5045462b1049a0755\",\n    //                 \"is_internal\": false,\n    //                 \"inserted_at\": \"2018-02-16T11:39:58.000Z\",\n    //                 \"updated_at\": \"2018-11-09T10:20:09.000Z\",\n    //                 \"kind\": \"default\",\n    //                 \"memo\": \"\",\n    //                 \"state\": \"WITHHOLD\",\n    //                 \"asset_symbol\": \"BTS\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const deposits = this.safeValue(response, 'data', []);\n    return this.parseTransactions(deposits, code, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'page_token': 'dxzef', // request page after this page token\n      // 'limit': 50, // optional, default 50\n      // 'kind': 'string', // optional - air_drop, big_holder_dividend, default, eosc_to_eos, internal, equally_airdrop, referral_mining, one_holder_dividend, single_customer, snapshotted_airdrop, trade_mining\n      // 'asset_symbol': 'BTC', // optional\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['asset_symbol'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 50\n    }\n\n    const response = await this.privateGetWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": [\n    //             {\n    //                 \"id\": 10,\n    //                 \"customer_id\": \"10\",\n    //                 \"asset_symbol\": \"ETH\",\n    //                 \"amount\": \"5\",\n    //                 \"state\": \"CONFIRMED\",\n    //                 \"note\": \"2018-03-15T16:13:45.610463Z\",\n    //                 \"txid\": \"0x4643bb6b393ac20a6175c713175734a72517c63d6f73a3ca90a15356f2e967da0\",\n    //                 \"completed_at\": \"2018-03-15T16:13:45.610463Z\",\n    //                 \"inserted_at\": \"2018-03-15T16:13:45.610463Z\",\n    //                 \"is_internal\": true,\n    //                 \"target_address\": \"0x4643bb6b393ac20a6175c713175734a72517c63d6f7\"\n    //             }\n    //         ],\n    //         \"page_token\":\"dxvf\"\n    //     }\n    //\n\n    const withdrawals = this.safeValue(response, 'data', []);\n    return this.parseTransactions(withdrawals, code, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'symbol': currency['id'],\n      'target_address': address,\n      'amount': this.currencyToPrecision(code, amount)\n    };\n\n    if (tag !== undefined) {\n      request['memo'] = tag;\n    } // requires write permission on the wallet\n\n\n    const response = await this.privatePostWithdrawals(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"message\":\"\",\n    //         \"data\":{\n    //             \"id\":1077391,\n    //             \"customer_id\":1082679,\n    //             \"amount\":\"21.9000000000000000\",\n    //             \"txid\":\"\",\n    //             \"is_internal\":false,\n    //             \"kind\":\"on_chain\",\n    //             \"state\":\"PENDING\",\n    //             \"inserted_at\":\"2020-06-03T00:50:57+00:00\",\n    //             \"updated_at\":\"2020-06-03T00:50:57+00:00\",\n    //             \"memo\":\"\",\n    //             \"target_address\":\"rDYtYT3dBeuw376rvHqoZBKW3UmvguoBAf\",\n    //             \"fee\":\"0.1000000000000000\",\n    //             \"asset_symbol\":\"XRP\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTransaction(data, currency);\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //      {\"code\":10013,\"message\":\"Resource not found\"}\n    //      {\"code\":40004,\"message\":\"invalid jwt\"}\n    //\n\n\n    const code = this.safeString(response, 'code');\n    const message = this.safeString(response, 'message');\n\n    if (code !== '0') {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/bigone.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","AuthenticationError","OrderNotFound","InsufficientFunds","PermissionDenied","BadRequest","RateLimitExceeded","InvalidOrder","Precise","module","exports","bigone","describe","deepExtend","fetchMarkets","params","response","publicGetAssetPairs","markets","safeValue","result","i","length","market","id","safeString","uuid","baseAsset","quoteAsset","baseId","quoteId","base","safeCurrencyCode","quote","symbol","amountPrecisionString","pricePrecisionString","amountLimit","parsePrecision","priceLimit","precision","parseInt","minCost","safeInteger","entry","parseNumber","undefined","push","loadMarkets","reload","marketsByUuid","options","symbols","parseTicker","ticker","marketId","safeSymbol","timestamp","close","safeNumber","bid","ask","iso8601","fetchTicker","request","publicGetAssetPairsAssetPairNameTicker","extend","fetchTickers","ids","marketIds","join","publicGetAssetPairsTickers","tickers","filterByArray","fetchTime","publicGetPing","data","fetchOrderBook","limit","publicGetAssetPairsAssetPairNameDepth","orderbook","parseOrderBook","parseTrade","trade","parse8601","safeString2","priceString","amountString","price","amount","cost","stringMul","side","takerSide","takerOrMaker","makerOrderId","takerOrderId","orderId","parseFloat","makerCurrencyCode","takerCurrencyCode","makerFeeCost","takerFeeCost","fetchTrades","since","publicGetAssetPairsAssetPairNameTrades","trades","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","end","sum","parseTimeframe","publicGetAssetPairsAssetPairNameCandles","parseOHLCVs","fetchBalance","type","omit","method","capitalize","balances","balance","code","account","parseBalance","parseOrder","order","filled","status","parseOrderStatus","lastTradeTimestamp","average","safeOrder","createOrder","uppercaseType","toUpperCase","amountToPrecision","priceToPrecision","isStopLimit","isStopMarket","stopPrice","safeNumber2","privatePostOrders","cancelOrder","privatePostOrdersIdCancel","cancelAllOrders","privatePostOrdersCancel","fetchOrder","privateGetOrdersId","fetchOrders","privateGetOrders","orders","parseOrders","fetchMyTrades","privateGetTrades","statuses","fetchOpenOrders","fetchClosedOrders","nonce","microseconds","sign","path","api","headers","body","query","extractParams","baseUrl","implodeParams","urls","hostname","url","Object","keys","urlencode","checkRequiredCredentials","toString","apiKey","jwt","encode","secret","json","fetchDepositAddress","currency","privateGetAssetsAssetSymbolAddress","dataLength","firstElement","address","tag","checkAddress","parseTransactionStatus","parseTransaction","transaction","currencyId","updated","txid","fetchDeposits","privateGetDeposits","deposits","parseTransactions","fetchWithdrawals","privateGetWithdrawals","withdrawals","withdraw","currencyToPrecision","privatePostWithdrawals","handleErrors","httpCode","reason","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, AuthenticationError, OrderNotFound, InsufficientFunds, PermissionDenied, BadRequest, RateLimitExceeded, InvalidOrder } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bigone extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bigone',\n            'name': 'BigONE',\n            'countries': [ 'CN' ],\n            'version': 'v3',\n            'rateLimit': 1200, // 500 request per 10 minutes\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': 'min1',\n                '5m': 'min5',\n                '15m': 'min15',\n                '30m': 'min30',\n                '1h': 'hour1',\n                '3h': 'hour3',\n                '4h': 'hour4',\n                '6h': 'hour6',\n                '12h': 'hour12',\n                '1d': 'day1',\n                '1w': 'week1',\n                '1M': 'month1',\n            },\n            'hostname': 'big.one', // or 'bigone.com'\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/69354403-1d532180-0c91-11ea-88ed-44c06cefdf87.jpg',\n                'api': {\n                    'public': 'https://{hostname}/api/v3',\n                    'private': 'https://{hostname}/api/v3/viewer',\n                },\n                'www': 'https://big.one',\n                'doc': 'https://open.big.one/docs/api.html',\n                'fees': 'https://bigone.zendesk.com/hc/en-us/articles/115001933374-BigONE-Fee-Policy',\n                'referral': 'https://b1.run/users/new?code=D3LLBVFT',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ping',\n                        'asset_pairs',\n                        'asset_pairs/{asset_pair_name}/depth',\n                        'asset_pairs/{asset_pair_name}/trades',\n                        'asset_pairs/{asset_pair_name}/ticker',\n                        'asset_pairs/{asset_pair_name}/candles',\n                        'asset_pairs/tickers',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts',\n                        'fund/accounts',\n                        'assets/{asset_symbol}/address',\n                        'orders',\n                        'orders/{id}',\n                        'orders/multi',\n                        'trades',\n                        'withdrawals',\n                        'deposits',\n                    ],\n                    'post': [\n                        'orders',\n                        'orders/{id}/cancel',\n                        'orders/cancel',\n                        'withdrawals',\n                        'transfer',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.1 / 100,\n                    'taker': 0.1 / 100,\n                },\n                'funding': {\n                    // HARDCODING IS DEPRECATED THE FEES BELOW ARE TO BE REMOVED SOON\n                    'withdraw': {\n                        'BTC': 0.001,\n                        'ETH': 0.005,\n                        'EOS': 0.01,\n                        'ZEC': 0.003,\n                        'LTC': 0.01,\n                        'QTUM': 0.01,\n                        // 'INK': 0.01 QTUM,\n                        // 'BOT': 0.01 QTUM,\n                        'ETC': 0.01,\n                        'GAS': 0.0,\n                        'BTS': 1.0,\n                        'GXS': 0.1,\n                        'BITCNY': 19.0,\n                    },\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    '10001': BadRequest, // syntax error\n                    '10005': ExchangeError, // internal error\n                    \"Amount's scale must greater than AssetPair's base scale\": InvalidOrder,\n                    '10007': BadRequest, // parameter error, {\"code\":10007,\"message\":\"Amount's scale must greater than AssetPair's base scale\"}\n                    '10011': ExchangeError, // system error\n                    '10013': OrderNotFound, // {\"code\":10013,\"message\":\"Resource not found\"}\n                    '10014': InsufficientFunds, // {\"code\":10014,\"message\":\"Insufficient funds\"}\n                    '10403': PermissionDenied, // permission denied\n                    '10429': RateLimitExceeded, // too many requests\n                    '40004': AuthenticationError, // {\"code\":40004,\"message\":\"invalid jwt\"}\n                    '40103': AuthenticationError, // invalid otp code\n                    '40104': AuthenticationError, // invalid asset pin code\n                    '40301': PermissionDenied, // {\"code\":40301,\"message\":\"Permission denied withdrawal create\"}\n                    '40302': ExchangeError, // already requested\n                    '40601': ExchangeError, // resource is locked\n                    '40602': ExchangeError, // resource is depleted\n                    '40603': InsufficientFunds, // insufficient resource\n                    '40120': InvalidOrder, // Order is in trading\n                    '40121': InvalidOrder, // Order is already cancelled or filled\n                },\n                'broad': {\n                },\n            },\n            'commonCurrencies': {\n                'MBN': 'Mobilian Coin',\n                'ONE': 'BigONE Token',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetAssetPairs (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\n        //                 \"id\":\"01e48809-b42f-4a38-96b1-c4c547365db1\",\n        //                 \"name\":\"PCX-BTC\",\n        //                 \"quote_scale\":7,\n        //                 \"quote_asset\":{\n        //                     \"id\":\"0df9c3c3-255a-46d7-ab82-dedae169fba9\",\n        //                     \"symbol\":\"BTC\",\n        //                     \"name\":\"Bitcoin\",\n        //                 },\n        //                 \"base_asset\":{\n        //                     \"id\":\"405484f7-4b03-4378-a9c1-2bd718ecab51\",\n        //                     \"symbol\":\"PCX\",\n        //                     \"name\":\"ChainX\",\n        //                 },\n        //                 \"base_scale\":3,\n        //                 \"min_quote_value\":\"0.0001\",\n        //             },\n        //         ]\n        //     }\n        //\n        const markets = this.safeValue (response, 'data', []);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'name');\n            const uuid = this.safeString (market, 'id');\n            const baseAsset = this.safeValue (market, 'base_asset', {});\n            const quoteAsset = this.safeValue (market, 'quote_asset', {});\n            const baseId = this.safeString (baseAsset, 'symbol');\n            const quoteId = this.safeString (quoteAsset, 'symbol');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const amountPrecisionString = this.safeString (market, 'base_scale');\n            const pricePrecisionString = this.safeString (market, 'quote_scale');\n            const amountLimit = this.parsePrecision (amountPrecisionString);\n            const priceLimit = this.parsePrecision (pricePrecisionString);\n            const precision = {\n                'amount': parseInt (amountPrecisionString),\n                'price': parseInt (pricePrecisionString),\n            };\n            const minCost = this.safeInteger (market, 'min_quote_value');\n            const entry = {\n                'id': id,\n                'uuid': uuid,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.parseNumber (amountLimit),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': this.parseNumber (priceLimit),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': minCost,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            };\n            result.push (entry);\n        }\n        return result;\n    }\n\n    async loadMarkets (reload = false, params = {}) {\n        const markets = await super.loadMarkets (reload, params);\n        let marketsByUuid = this.safeValue (this.options, 'marketsByUuid');\n        if ((marketsByUuid === undefined) || reload) {\n            marketsByUuid = {};\n            for (let i = 0; i < this.symbols.length; i++) {\n                const symbol = this.symbols[i];\n                const market = this.markets[symbol];\n                const uuid = this.safeString (market, 'uuid');\n                marketsByUuid[uuid] = market;\n            }\n            this.options['marketsByUuid'] = marketsByUuid;\n        }\n        return markets;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //     {\n        //         \"asset_pair_name\":\"ETH-BTC\",\n        //         \"bid\":{\"price\":\"0.021593\",\"order_count\":1,\"quantity\":\"0.20936\"},\n        //         \"ask\":{\"price\":\"0.021613\",\"order_count\":1,\"quantity\":\"2.87064\"},\n        //         \"open\":\"0.021795\",\n        //         \"high\":\"0.021795\",\n        //         \"low\":\"0.021471\",\n        //         \"close\":\"0.021613\",\n        //         \"volume\":\"117078.90431\",\n        //         \"daily_change\":\"-0.000182\"\n        //     }\n        //\n        const marketId = this.safeString (ticker, 'asset_pair_name');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const timestamp = undefined;\n        const close = this.safeNumber (ticker, 'close');\n        const bid = this.safeValue (ticker, 'bid', {});\n        const ask = this.safeValue (ticker, 'ask', {});\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (bid, 'price'),\n            'bidVolume': this.safeNumber (bid, 'quantity'),\n            'ask': this.safeNumber (ask, 'price'),\n            'askVolume': this.safeNumber (ask, 'quantity'),\n            'vwap': undefined,\n            'open': this.safeNumber (ticker, 'open'),\n            'close': close,\n            'last': close,\n            'previousClose': undefined,\n            'change': this.safeNumber (ticker, 'daily_change'),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeNumber (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'asset_pair_name': market['id'],\n        };\n        const response = await this.publicGetAssetPairsAssetPairNameTicker (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":{\n        //             \"asset_pair_name\":\"ETH-BTC\",\n        //             \"bid\":{\"price\":\"0.021593\",\"order_count\":1,\"quantity\":\"0.20936\"},\n        //             \"ask\":{\"price\":\"0.021613\",\"order_count\":1,\"quantity\":\"2.87064\"},\n        //             \"open\":\"0.021795\",\n        //             \"high\":\"0.021795\",\n        //             \"low\":\"0.021471\",\n        //             \"close\":\"0.021613\",\n        //             \"volume\":\"117078.90431\",\n        //             \"daily_change\":\"-0.000182\"\n        //         }\n        //     }\n        //\n        const ticker = this.safeValue (response, 'data', {});\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbols !== undefined) {\n            const ids = this.marketIds (symbols);\n            request['pair_names'] = ids.join (',');\n        }\n        const response = await this.publicGetAssetPairsTickers (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\n        //                 \"asset_pair_name\":\"PCX-BTC\",\n        //                 \"bid\":{\"price\":\"0.000234\",\"order_count\":1,\"quantity\":\"0.518\"},\n        //                 \"ask\":{\"price\":\"0.0002348\",\"order_count\":1,\"quantity\":\"2.348\"},\n        //                 \"open\":\"0.0002343\",\n        //                 \"high\":\"0.0002348\",\n        //                 \"low\":\"0.0002162\",\n        //                 \"close\":\"0.0002348\",\n        //                 \"volume\":\"12887.016\",\n        //                 \"daily_change\":\"0.0000005\"\n        //             },\n        //             {\n        //                 \"asset_pair_name\":\"GXC-USDT\",\n        //                 \"bid\":{\"price\":\"0.5054\",\"order_count\":1,\"quantity\":\"40.53\"},\n        //                 \"ask\":{\"price\":\"0.5055\",\"order_count\":1,\"quantity\":\"38.53\"},\n        //                 \"open\":\"0.5262\",\n        //                 \"high\":\"0.5323\",\n        //                 \"low\":\"0.5055\",\n        //                 \"close\":\"0.5055\",\n        //                 \"volume\":\"603963.05\",\n        //                 \"daily_change\":\"-0.0207\"\n        //             }\n        //         ]\n        //     }\n        //\n        const tickers = this.safeValue (response, 'data', []);\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = this.parseTicker (tickers[i]);\n            const symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.publicGetPing (params);\n        //\n        //     {\n        //         \"data\": {\n        //             \"timestamp\": 1527665262168391000\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const timestamp = this.safeInteger (data, 'timestamp');\n        return parseInt (timestamp / 1000000);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'asset_pair_name': market['id'],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50, max 200\n        }\n        const response = await this.publicGetAssetPairsAssetPairNameDepth (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\": {\n        //             \"asset_pair_name\": \"EOS-BTC\",\n        //             \"bids\": [\n        //                 { \"price\": \"42\", \"order_count\": 4, \"quantity\": \"23.33363711\" }\n        //             ],\n        //             \"asks\": [\n        //                 { \"price\": \"45\", \"order_count\": 2, \"quantity\": \"4193.3283464\" }\n        //             ]\n        //         }\n        //     }\n        //\n        const orderbook = this.safeValue (response, 'data', {});\n        return this.parseOrderBook (orderbook, symbol, undefined, 'bids', 'asks', 'price', 'quantity');\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     {\n        //         \"id\": 38199941,\n        //         \"price\": \"3378.67\",\n        //         \"amount\": \"0.019812\",\n        //         \"taker_side\": \"ASK\",\n        //         \"created_at\": \"2019-01-29T06:05:56Z\"\n        //     }\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"id\": 10854280,\n        //         \"asset_pair_name\": \"XIN-USDT\",\n        //         \"price\": \"70\",\n        //         \"amount\": \"1\",\n        //         \"taker_side\": \"ASK\",\n        //         \"maker_order_id\": 58284908,\n        //         \"taker_order_id\": 58284909,\n        //         \"maker_fee\": \"0.0008\",\n        //         \"taker_fee\": \"0.07\",\n        //         \"side\": \"SELF_TRADING\",\n        //         \"inserted_at\": \"2019-04-16T12:00:01Z\"\n        //     },\n        //\n        //     {\n        //         \"id\": 10854263,\n        //         \"asset_pair_name\": \"XIN-USDT\",\n        //         \"price\": \"75.7\",\n        //         \"amount\": \"12.743149\",\n        //         \"taker_side\": \"BID\",\n        //         \"maker_order_id\": null,\n        //         \"taker_order_id\": 58284888,\n        //         \"maker_fee\": null,\n        //         \"taker_fee\": \"0.0025486298\",\n        //         \"side\": \"BID\",\n        //         \"inserted_at\": \"2019-04-15T06:20:57Z\"\n        //     }\n        //\n        const timestamp = this.parse8601 (this.safeString2 (trade, 'created_at', 'inserted_at'));\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'amount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        const marketId = this.safeString (trade, 'asset_pair_name');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        let side = this.safeString (trade, 'side');\n        const takerSide = this.safeString (trade, 'taker_side');\n        let takerOrMaker = undefined;\n        if ((takerSide !== undefined) && (side !== undefined) && (side !== 'SELF_TRADING')) {\n            takerOrMaker = (takerSide === side) ? 'taker' : 'maker';\n        }\n        if (side === undefined) {\n            // taker side is not related to buy/sell side\n            // the following code is probably a mistake\n            side = (takerSide === 'ASK') ? 'sell' : 'buy';\n        } else {\n            if (side === 'BID') {\n                side = 'buy';\n            } else if (side === 'ASK') {\n                side = 'sell';\n            }\n        }\n        const makerOrderId = this.safeString (trade, 'maker_order_id');\n        const takerOrderId = this.safeString (trade, 'taker_order_id');\n        let orderId = undefined;\n        if (makerOrderId !== undefined) {\n            if (takerOrderId !== undefined) {\n                orderId = [ makerOrderId, takerOrderId ];\n            } else {\n                orderId = makerOrderId;\n            }\n        } else if (takerOrderId !== undefined) {\n            orderId = takerOrderId;\n        }\n        const id = this.safeString (trade, 'id');\n        const result = {\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'type': 'limit',\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': parseFloat (cost),\n            'info': trade,\n        };\n        let makerCurrencyCode = undefined;\n        let takerCurrencyCode = undefined;\n        if ((market !== undefined) && (takerOrMaker !== undefined)) {\n            if (side === 'buy') {\n                if (takerOrMaker === 'maker') {\n                    makerCurrencyCode = market['base'];\n                    takerCurrencyCode = market['quote'];\n                } else {\n                    makerCurrencyCode = market['quote'];\n                    takerCurrencyCode = market['base'];\n                }\n            } else {\n                if (takerOrMaker === 'maker') {\n                    makerCurrencyCode = market['quote'];\n                    takerCurrencyCode = market['base'];\n                } else {\n                    makerCurrencyCode = market['base'];\n                    takerCurrencyCode = market['quote'];\n                }\n            }\n        } else if (side === 'SELF_TRADING') {\n            if (takerSide === 'BID') {\n                makerCurrencyCode = market['quote'];\n                takerCurrencyCode = market['base'];\n            } else if (takerSide === 'ASK') {\n                makerCurrencyCode = market['base'];\n                takerCurrencyCode = market['quote'];\n            }\n        }\n        const makerFeeCost = this.safeNumber (trade, 'maker_fee');\n        const takerFeeCost = this.safeNumber (trade, 'taker_fee');\n        if (makerFeeCost !== undefined) {\n            if (takerFeeCost !== undefined) {\n                result['fees'] = [\n                    { 'cost': makerFeeCost, 'currency': makerCurrencyCode },\n                    { 'cost': takerFeeCost, 'currency': takerCurrencyCode },\n                ];\n            } else {\n                result['fee'] = { 'cost': makerFeeCost, 'currency': makerCurrencyCode };\n            }\n        } else if (takerFeeCost !== undefined) {\n            result['fee'] = { 'cost': takerFeeCost, 'currency': takerCurrencyCode };\n        } else {\n            result['fee'] = undefined;\n        }\n        return result;\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'asset_pair_name': market['id'],\n        };\n        const response = await this.publicGetAssetPairsAssetPairNameTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 38199941,\n        //                 \"price\": \"3378.67\",\n        //                 \"amount\": \"0.019812\",\n        //                 \"taker_side\": \"ASK\",\n        //                 \"created_at\": \"2019-01-29T06:05:56Z\"\n        //             },\n        //             {\n        //                 \"id\": 38199934,\n        //                 \"price\": \"3376.14\",\n        //                 \"amount\": \"0.019384\",\n        //                 \"taker_side\": \"ASK\",\n        //                 \"created_at\": \"2019-01-29T06:05:40Z\"\n        //             }\n        //         ]\n        //     }\n        //\n        const trades = this.safeValue (response, 'data', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         close: '0.021562',\n        //         high: '0.021563',\n        //         low: '0.02156',\n        //         open: '0.021563',\n        //         time: '2019-11-21T07:54:00Z',\n        //         volume: '59.84376'\n        //     }\n        //\n        return [\n            this.parse8601 (this.safeString (ohlcv, 'time')),\n            this.safeNumber (ohlcv, 'open'),\n            this.safeNumber (ohlcv, 'high'),\n            this.safeNumber (ohlcv, 'low'),\n            this.safeNumber (ohlcv, 'close'),\n            this.safeNumber (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 100; // default 100, max 500\n        }\n        const request = {\n            'asset_pair_name': market['id'],\n            'period': this.timeframes[timeframe],\n            'limit': limit,\n        };\n        if (since !== undefined) {\n            // const start = parseInt (since / 1000);\n            const end = this.sum (since, limit * this.parseTimeframe (timeframe) * 1000);\n            request['time'] = this.iso8601 (end);\n        }\n        const response = await this.publicGetAssetPairsAssetPairNameCandles (this.extend (request, params));\n        //\n        //     {\n        //         code: 0,\n        //         data: [\n        //             {\n        //                 close: '0.021656',\n        //                 high: '0.021658',\n        //                 low: '0.021652',\n        //                 open: '0.021652',\n        //                 time: '2019-11-21T09:30:00Z',\n        //                 volume: '53.08664'\n        //             },\n        //             {\n        //                 close: '0.021652',\n        //                 high: '0.021656',\n        //                 low: '0.021652',\n        //                 open: '0.021656',\n        //                 time: '2019-11-21T09:29:00Z',\n        //                 volume: '88.39861'\n        //             },\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const type = this.safeString (params, 'type', '');\n        params = this.omit (params, 'type');\n        const method = 'privateGet' + this.capitalize (type) + 'Accounts';\n        const response = await this[method] (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\":[\n        //             {\"asset_symbol\":\"NKC\",\"balance\":\"0\",\"locked_balance\":\"0\"},\n        //             {\"asset_symbol\":\"UBTC\",\"balance\":\"0\",\"locked_balance\":\"0\"},\n        //             {\"asset_symbol\":\"READ\",\"balance\":\"0\",\"locked_balance\":\"0\"},\n        //         ],\n        //     }\n        //\n        const result = {\n            'info': response,\n            'timestamp': undefined,\n            'datetime': undefined,\n        };\n        const balances = this.safeValue (response, 'data', []);\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const symbol = this.safeString (balance, 'asset_symbol');\n            const code = this.safeCurrencyCode (symbol);\n            const account = this.account ();\n            account['total'] = this.safeString (balance, 'balance');\n            account['used'] = this.safeString (balance, 'locked_balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //    {\n        //        \"id\": 10,\n        //        \"asset_pair_name\": \"EOS-BTC\",\n        //        \"price\": \"10.00\",\n        //        \"amount\": \"10.00\",\n        //        \"filled_amount\": \"9.0\",\n        //        \"avg_deal_price\": \"12.0\",\n        //        \"side\": \"ASK\",\n        //        \"state\": \"FILLED\",\n        //        \"created_at\":\"2019-01-29T06:05:56Z\",\n        //        \"updated_at\":\"2019-01-29T06:05:56Z\",\n        //    }\n        //\n        const id = this.safeString (order, 'id');\n        const marketId = this.safeString (order, 'asset_pair_name');\n        const symbol = this.safeSymbol (marketId, market, '-');\n        const timestamp = this.parse8601 (this.safeString (order, 'created_at'));\n        const price = this.safeNumber (order, 'price');\n        const amount = this.safeNumber (order, 'amount');\n        const filled = this.safeNumber (order, 'filled_amount');\n        const status = this.parseOrderStatus (this.safeString (order, 'state'));\n        let side = this.safeString (order, 'side');\n        if (side === 'BID') {\n            side = 'buy';\n        } else {\n            side = 'sell';\n        }\n        const lastTradeTimestamp = this.parse8601 (this.safeString (order, 'updated_at'));\n        const average = this.safeNumber (order, 'avg_deal_price');\n        return this.safeOrder ({\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': undefined,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': undefined,\n            'average': average,\n            'filled': filled,\n            'remaining': undefined,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        side = (side === 'buy') ? 'BID' : 'ASK';\n        const uppercaseType = type.toUpperCase ();\n        const request = {\n            'asset_pair_name': market['id'], // asset pair name BTC-USDT, required\n            'side': side, // order side one of \"ASK\"/\"BID\", required\n            'amount': this.amountToPrecision (symbol, amount), // order amount, string, required\n            // 'price': this.priceToPrecision (symbol, price), // order price, string, required\n            'type': uppercaseType,\n            // 'operator': 'GTE', // stop orders only, GTE greater than and equal, LTE less than and equal\n            // 'immediate_or_cancel': false, // limit orders only, must be false when post_only is true\n            // 'post_only': false, // limit orders only, must be false when immediate_or_cancel is true\n        };\n        if (uppercaseType === 'LIMIT') {\n            request['price'] = this.priceToPrecision (symbol, price);\n        } else {\n            const isStopLimit = (uppercaseType === 'STOP_LIMIT');\n            const isStopMarket = (uppercaseType === 'STOP_MARKET');\n            if (isStopLimit || isStopMarket) {\n                const stopPrice = this.safeNumber2 (params, 'stop_price', 'stopPrice');\n                if (stopPrice === undefined) {\n                    throw new ArgumentsRequired (this.id + ' createOrder() requires a stop_price parameter');\n                }\n                request['stop_price'] = this.priceToPrecision (symbol, stopPrice);\n                params = this.omit (params, [ 'stop_price', 'stopPrice' ]);\n            }\n            if (isStopLimit) {\n                request['price'] = this.priceToPrecision (symbol, price);\n            }\n        }\n        const response = await this.privatePostOrders (this.extend (request, params));\n        //\n        //    {\n        //        \"id\": 10,\n        //        \"asset_pair_name\": \"EOS-BTC\",\n        //        \"price\": \"10.00\",\n        //        \"amount\": \"10.00\",\n        //        \"filled_amount\": \"9.0\",\n        //        \"avg_deal_price\": \"12.0\",\n        //        \"side\": \"ASK\",\n        //        \"state\": \"FILLED\",\n        //        \"created_at\":\"2019-01-29T06:05:56Z\",\n        //        \"updated_at\":\"2019-01-29T06:05:56Z\"\n        //    }\n        //\n        const order = this.safeValue (response, 'data');\n        return this.parseOrder (order, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = { 'id': id };\n        const response = await this.privatePostOrdersIdCancel (this.extend (request, params));\n        //    {\n        //        \"id\": 10,\n        //        \"asset_pair_name\": \"EOS-BTC\",\n        //        \"price\": \"10.00\",\n        //        \"amount\": \"10.00\",\n        //        \"filled_amount\": \"9.0\",\n        //        \"avg_deal_price\": \"12.0\",\n        //        \"side\": \"ASK\",\n        //        \"state\": \"CANCELLED\",\n        //        \"created_at\":\"2019-01-29T06:05:56Z\",\n        //        \"updated_at\":\"2019-01-29T06:05:56Z\"\n        //    }\n        const order = this.safeValue (response, 'data');\n        return this.parseOrder (order);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'asset_pair_name': market['id'],\n        };\n        const response = await this.privatePostOrdersCancel (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"data\": {\n        //             \"cancelled\":[\n        //                 58272370,\n        //                 58272377\n        //             ],\n        //             \"failed\": []\n        //         }\n        //     }\n        //\n        return response;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = { 'id': id };\n        const response = await this.privateGetOrdersId (this.extend (request, params));\n        const order = this.safeValue (response, 'data', {});\n        return this.parseOrder (order);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'asset_pair_name': market['id'],\n            // 'page_token': 'dxzef', // request page after this page token\n            // 'side': 'ASK', // 'ASK' or 'BID', optional\n            // 'state': 'FILLED', // 'CANCELLED', 'FILLED', 'PENDING'\n            // 'limit' 20, // default 20, max 200\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 20, max 200\n        }\n        const response = await this.privateGetOrders (this.extend (request, params));\n        //\n        //    {\n        //        \"code\":0,\n        //        \"data\": [\n        //             {\n        //                 \"id\": 10,\n        //                 \"asset_pair_name\": \"ETH-BTC\",\n        //                 \"price\": \"10.00\",\n        //                 \"amount\": \"10.00\",\n        //                 \"filled_amount\": \"9.0\",\n        //                 \"avg_deal_price\": \"12.0\",\n        //                 \"side\": \"ASK\",\n        //                 \"state\": \"FILLED\",\n        //                 \"created_at\":\"2019-01-29T06:05:56Z\",\n        //                 \"updated_at\":\"2019-01-29T06:05:56Z\",\n        //             },\n        //         ],\n        //        \"page_token\":\"dxzef\",\n        //    }\n        //\n        const orders = this.safeValue (response, 'data', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades() requires a symbol argument');\n        }\n        const market = this.market (symbol);\n        const request = {\n            'asset_pair_name': market['id'],\n            // 'page_token': 'dxzef', // request page after this page token\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 20, max 200\n        }\n        const response = await this.privateGetTrades (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 10854280,\n        //                 \"asset_pair_name\": \"XIN-USDT\",\n        //                 \"price\": \"70\",\n        //                 \"amount\": \"1\",\n        //                 \"taker_side\": \"ASK\",\n        //                 \"maker_order_id\": 58284908,\n        //                 \"taker_order_id\": 58284909,\n        //                 \"maker_fee\": \"0.0008\",\n        //                 \"taker_fee\": \"0.07\",\n        //                 \"side\": \"SELF_TRADING\",\n        //                 \"inserted_at\": \"2019-04-16T12:00:01Z\"\n        //             },\n        //             {\n        //                 \"id\": 10854263,\n        //                 \"asset_pair_name\": \"XIN-USDT\",\n        //                 \"price\": \"75.7\",\n        //                 \"amount\": \"12.743149\",\n        //                 \"taker_side\": \"BID\",\n        //                 \"maker_order_id\": null,\n        //                 \"taker_order_id\": 58284888,\n        //                 \"maker_fee\": null,\n        //                 \"taker_fee\": \"0.0025486298\",\n        //                 \"side\": \"BID\",\n        //                 \"inserted_at\": \"2019-04-15T06:20:57Z\"\n        //             }\n        //         ],\n        //         \"page_token\":\"dxfv\"\n        //     }\n        //\n        const trades = this.safeValue (response, 'data', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'PENDING': 'open',\n            'FILLED': 'closed',\n            'CANCELLED': 'canceled',\n        };\n        return this.safeString (statuses, status);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'state': 'PENDING',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'state': 'FILLED',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    nonce () {\n        return this.microseconds () * 1000;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const query = this.omit (params, this.extractParams (path));\n        const baseUrl = this.implodeParams (this.urls['api'][api], { 'hostname': this.hostname });\n        let url = baseUrl + '/' + this.implodeParams (path, params);\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const request = {\n                'type': 'OpenAPIV2',\n                'sub': this.apiKey,\n                'nonce': nonce,\n                // 'recv_window': '30', // default 30\n            };\n            const jwt = this.jwt (request, this.encode (this.secret));\n            headers = {\n                'Authorization': 'Bearer ' + jwt,\n            };\n            if (method === 'GET') {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            } else if (method === 'POST') {\n                headers['Content-Type'] = 'application/json';\n                body = this.json (query);\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'asset_symbol': currency['id'],\n        };\n        const response = await this.privateGetAssetsAssetSymbolAddress (this.extend (request, params));\n        //\n        // the actual response format is not the same as the documented one\n        // the data key contains an array in the actual response\n        //\n        //     {\n        //         \"code\":0,\n        //         \"message\":\"\",\n        //         \"data\":[\n        //             {\n        //                 \"id\":5521878,\n        //                 \"chain\":\"Bitcoin\",\n        //                 \"value\":\"1GbmyKoikhpiQVZ1C9sbF17mTyvBjeobVe\",\n        //                 \"memo\":\"\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const dataLength = data.length;\n        if (dataLength < 1) {\n            throw new ExchangeError (this.id + 'fetchDepositAddress() returned empty address response');\n        }\n        const firstElement = data[0];\n        const address = this.safeString (firstElement, 'value');\n        const tag = this.safeString (firstElement, 'memo');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            // what are other statuses here?\n            'WITHHOLD': 'ok', // deposits\n            'UNCONFIRMED': 'pending',\n            'CONFIRMED': 'ok', // withdrawals\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"amount\": \"25.0\",\n        //         \"asset_symbol\": \"BTS\"\n        //         \"confirms\": 100,\n        //         \"id\": 5,\n        //         \"inserted_at\": \"2018-02-16T11:39:58.000Z\",\n        //         \"is_internal\": false,\n        //         \"kind\": \"default\",\n        //         \"memo\": \"\",\n        //         \"state\": \"WITHHOLD\",\n        //         \"txid\": \"72e03037d144dae3d32b68b5045462b1049a0755\",\n        //         \"updated_at\": \"2018-11-09T10:20:09.000Z\",\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"amount\": \"5\",\n        //         \"asset_symbol\": \"ETH\",\n        //         \"completed_at\": \"2018-03-15T16:13:45.610463Z\",\n        //         \"customer_id\": \"10\",\n        //         \"id\": 10,\n        //         \"inserted_at\": \"2018-03-15T16:13:45.610463Z\",\n        //         \"is_internal\": true,\n        //         \"note\": \"2018-03-15T16:13:45.610463Z\",\n        //         \"state\": \"CONFIRMED\",\n        //         \"target_address\": \"0x4643bb6b393ac20a6175c713175734a72517c63d6f7\"\n        //         \"txid\": \"0x4643bb6b393ac20a6175c713175734a72517c63d6f73a3ca90a15356f2e967da0\",\n        //     }\n        //\n        // withdraw\n        //\n        //     {\n        //         \"id\":1077391,\n        //         \"customer_id\":1082679,\n        //         \"amount\":\"21.9000000000000000\",\n        //         \"txid\":\"\",\n        //         \"is_internal\":false,\n        //         \"kind\":\"on_chain\",\n        //         \"state\":\"PENDING\",\n        //         \"inserted_at\":\"2020-06-03T00:50:57+00:00\",\n        //         \"updated_at\":\"2020-06-03T00:50:57+00:00\",\n        //         \"memo\":\"\",\n        //         \"target_address\":\"rDYtYT3dBeuw376rvHqoZBKW3UmvguoBAf\",\n        //         \"fee\":\"0.1000000000000000\",\n        //         \"asset_symbol\":\"XRP\"\n        //     }\n        //\n        const currencyId = this.safeString (transaction, 'asset_symbol');\n        const code = this.safeCurrencyCode (currencyId);\n        const id = this.safeInteger (transaction, 'id');\n        const amount = this.safeNumber (transaction, 'amount');\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'state'));\n        const timestamp = this.parse8601 (this.safeString (transaction, 'inserted_at'));\n        const updated = this.parse8601 (this.safeString2 (transaction, 'updated_at', 'completed_at'));\n        const txid = this.safeString (transaction, 'txid');\n        const address = this.safeString (transaction, 'target_address');\n        const tag = this.safeString (transaction, 'memo');\n        const type = ('customer_id' in transaction) ? 'deposit' : 'withdrawal';\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': undefined,\n            'address': undefined,\n            'addressTo': address,\n            'tagFrom': undefined,\n            'tag': tag,\n            'tagTo': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': undefined,\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'page_token': 'dxzef', // request page after this page token\n            // 'limit': 50, // optional, default 50\n            // 'kind': 'string', // optional - air_drop, big_holder_dividend, default, eosc_to_eos, internal, equally_airdrop, referral_mining, one_holder_dividend, single_customer, snapshotted_airdrop, trade_mining\n            // 'asset_symbol': 'BTC', // optional\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['asset_symbol'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50\n        }\n        const response = await this.privateGetDeposits (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"page_token\": \"NQ==\",\n        //         \"data\": [\n        //             {\n        //                 \"id\": 5,\n        //                 \"amount\": \"25.0\",\n        //                 \"confirms\": 100,\n        //                 \"txid\": \"72e03037d144dae3d32b68b5045462b1049a0755\",\n        //                 \"is_internal\": false,\n        //                 \"inserted_at\": \"2018-02-16T11:39:58.000Z\",\n        //                 \"updated_at\": \"2018-11-09T10:20:09.000Z\",\n        //                 \"kind\": \"default\",\n        //                 \"memo\": \"\",\n        //                 \"state\": \"WITHHOLD\",\n        //                 \"asset_symbol\": \"BTS\"\n        //             }\n        //         ]\n        //     }\n        //\n        const deposits = this.safeValue (response, 'data', []);\n        return this.parseTransactions (deposits, code, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'page_token': 'dxzef', // request page after this page token\n            // 'limit': 50, // optional, default 50\n            // 'kind': 'string', // optional - air_drop, big_holder_dividend, default, eosc_to_eos, internal, equally_airdrop, referral_mining, one_holder_dividend, single_customer, snapshotted_airdrop, trade_mining\n            // 'asset_symbol': 'BTC', // optional\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['asset_symbol'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 50\n        }\n        const response = await this.privateGetWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": [\n        //             {\n        //                 \"id\": 10,\n        //                 \"customer_id\": \"10\",\n        //                 \"asset_symbol\": \"ETH\",\n        //                 \"amount\": \"5\",\n        //                 \"state\": \"CONFIRMED\",\n        //                 \"note\": \"2018-03-15T16:13:45.610463Z\",\n        //                 \"txid\": \"0x4643bb6b393ac20a6175c713175734a72517c63d6f73a3ca90a15356f2e967da0\",\n        //                 \"completed_at\": \"2018-03-15T16:13:45.610463Z\",\n        //                 \"inserted_at\": \"2018-03-15T16:13:45.610463Z\",\n        //                 \"is_internal\": true,\n        //                 \"target_address\": \"0x4643bb6b393ac20a6175c713175734a72517c63d6f7\"\n        //             }\n        //         ],\n        //         \"page_token\":\"dxvf\"\n        //     }\n        //\n        const withdrawals = this.safeValue (response, 'data', []);\n        return this.parseTransactions (withdrawals, code, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'symbol': currency['id'],\n            'target_address': address,\n            'amount': this.currencyToPrecision (code, amount),\n        };\n        if (tag !== undefined) {\n            request['memo'] = tag;\n        }\n        // requires write permission on the wallet\n        const response = await this.privatePostWithdrawals (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"message\":\"\",\n        //         \"data\":{\n        //             \"id\":1077391,\n        //             \"customer_id\":1082679,\n        //             \"amount\":\"21.9000000000000000\",\n        //             \"txid\":\"\",\n        //             \"is_internal\":false,\n        //             \"kind\":\"on_chain\",\n        //             \"state\":\"PENDING\",\n        //             \"inserted_at\":\"2020-06-03T00:50:57+00:00\",\n        //             \"updated_at\":\"2020-06-03T00:50:57+00:00\",\n        //             \"memo\":\"\",\n        //             \"target_address\":\"rDYtYT3dBeuw376rvHqoZBKW3UmvguoBAf\",\n        //             \"fee\":\"0.1000000000000000\",\n        //             \"asset_symbol\":\"XRP\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTransaction (data, currency);\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //      {\"code\":10013,\"message\":\"Resource not found\"}\n        //      {\"code\":40004,\"message\":\"invalid jwt\"}\n        //\n        const code = this.safeString (response, 'code');\n        const message = this.safeString (response, 'message');\n        if (code !== '0') {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}