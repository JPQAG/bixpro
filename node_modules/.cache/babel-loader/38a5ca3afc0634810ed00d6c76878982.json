{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  BadRequest,\n  ExchangeError,\n  ArgumentsRequired,\n  AuthenticationError,\n  InsufficientFunds,\n  OrderNotFound,\n  ExchangeNotAvailable,\n  RateLimitExceeded,\n  PermissionDenied,\n  InvalidOrder,\n  InvalidAddress,\n  OnMaintenance,\n  RequestTimeout,\n  AccountSuspended\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class zb extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'zb',\n      'name': 'ZB',\n      'countries': ['CN'],\n      'rateLimit': 100,\n      'version': 'v1',\n      'certified': true,\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDepositAddresses': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchClosedOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1min',\n        '3m': '3min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '1hour',\n        '2h': '2hour',\n        '4h': '4hour',\n        '6h': '6hour',\n        '12h': '12hour',\n        '1d': '1day',\n        '3d': '3day',\n        '1w': '1week'\n      },\n      'exceptions': {\n        'ws': {\n          //  '1000': ExchangeError, // The call is successful.\n          '1001': ExchangeError,\n          // General error prompt\n          '1002': ExchangeError,\n          // Internal Error\n          '1003': AuthenticationError,\n          // Fail to verify\n          '1004': AuthenticationError,\n          // The transaction password is locked\n          '1005': AuthenticationError,\n          // Wrong transaction password, please check it and re-enter。\n          '1006': PermissionDenied,\n          // Real-name authentication is pending approval or unapproved\n          '1007': ExchangeError,\n          // Channel does not exist\n          '1009': OnMaintenance,\n          // This interface is under maintenance\n          '1010': ExchangeNotAvailable,\n          // Not available now\n          '1012': PermissionDenied,\n          // Insufficient permissions\n          '1013': ExchangeError,\n          // Cannot trade, please contact email: support@zb.cn for support.\n          '1014': ExchangeError,\n          // Cannot sell during the pre-sale period\n          '2001': InsufficientFunds,\n          // Insufficient CNY account balance\n          '2002': InsufficientFunds,\n          // Insufficient BTC account balance\n          '2003': InsufficientFunds,\n          // Insufficient LTC account balance\n          '2005': InsufficientFunds,\n          // Insufficient ETH account balance\n          '2006': InsufficientFunds,\n          // ETCInsufficient account balance\n          '2007': InsufficientFunds,\n          // BTSInsufficient account balance\n          '2008': InsufficientFunds,\n          // EOSInsufficient account balance\n          '2009': InsufficientFunds,\n          // BCCInsufficient account balance\n          '3001': OrderNotFound,\n          // Order not found or is completed\n          '3002': InvalidOrder,\n          // Invalid amount\n          '3003': InvalidOrder,\n          // Invalid quantity\n          '3004': AuthenticationError,\n          // User does not exist\n          '3005': BadRequest,\n          // Invalid parameter\n          '3006': PermissionDenied,\n          // Invalid IP or not consistent with the bound IP\n          '3007': RequestTimeout,\n          // The request time has expired\n          '3008': ExchangeError,\n          // Transaction not found\n          '3009': InvalidOrder,\n          // The price exceeds the limit\n          '3010': PermissionDenied,\n          // It fails to place an order, due to you have set up to prohibit trading of this market.\n          '3011': InvalidOrder,\n          // The entrusted price is abnormal, please modify it and place order again\n          '3012': InvalidOrder,\n          // Duplicate custom customerOrderId\n          '4001': AccountSuspended,\n          // APIThe interface is locked for one hour\n          '4002': RateLimitExceeded // Request too frequently\n\n        },\n        'exact': {\n          // '1000': 'Successful operation',\n          '1001': ExchangeError,\n          // 'General error message',\n          '1002': ExchangeError,\n          // 'Internal error',\n          '1003': AuthenticationError,\n          // 'Verification does not pass',\n          '1004': AuthenticationError,\n          // 'Funding security password lock',\n          '1005': AuthenticationError,\n          // 'Funds security password is incorrect, please confirm and re-enter.',\n          '1006': AuthenticationError,\n          // 'Real-name certification pending approval or audit does not pass',\n          '1009': ExchangeNotAvailable,\n          // 'This interface is under maintenance',\n          '1010': ExchangeNotAvailable,\n          // Not available now\n          '1012': PermissionDenied,\n          // Insufficient permissions\n          '1013': ExchangeError,\n          // Cannot trade, please contact email: support@zb.cn for support.\n          '1014': ExchangeError,\n          // Cannot sell during the pre-sale period\n          '2001': InsufficientFunds,\n          // 'Insufficient CNY Balance',\n          '2002': InsufficientFunds,\n          // 'Insufficient BTC Balance',\n          '2003': InsufficientFunds,\n          // 'Insufficient LTC Balance',\n          '2005': InsufficientFunds,\n          // 'Insufficient ETH Balance',\n          '2006': InsufficientFunds,\n          // 'Insufficient ETC Balance',\n          '2007': InsufficientFunds,\n          // 'Insufficient BTS Balance',\n          '2008': InsufficientFunds,\n          // EOSInsufficient account balance\n          '2009': InsufficientFunds,\n          // 'Account balance is not enough',\n          '3001': OrderNotFound,\n          // 'Pending orders not found',\n          '3002': InvalidOrder,\n          // 'Invalid price',\n          '3003': InvalidOrder,\n          // 'Invalid amount',\n          '3004': AuthenticationError,\n          // 'User does not exist',\n          '3005': BadRequest,\n          // 'Invalid parameter',\n          '3006': AuthenticationError,\n          // 'Invalid IP or inconsistent with the bound IP',\n          '3007': AuthenticationError,\n          // 'The request time has expired',\n          '3008': OrderNotFound,\n          // 'Transaction records not found',\n          '3009': InvalidOrder,\n          // 'The price exceeds the limit',\n          '3010': PermissionDenied,\n          // It fails to place an order, due to you have set up to prohibit trading of this market.\n          '3011': InvalidOrder,\n          // 'The entrusted price is abnormal, please modify it and place order again',\n          '3012': InvalidOrder,\n          // Duplicate custom customerOrderId\n          '4001': ExchangeNotAvailable,\n          // 'API interface is locked or not enabled',\n          '4002': RateLimitExceeded // 'Request too often',\n\n        },\n        'broad': {\n          '提币地址有误，请先添加提币地址。': InvalidAddress // {\"code\":1001,\"message\":\"提币地址有误，请先添加提币地址。\"}\n\n        }\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg',\n        'api': {\n          'public': 'https://api.zb.today/data',\n          'private': 'https://trade.zb.today/api',\n          'trade': 'https://trade.zb.today/api'\n        },\n        'www': 'https://www.zb.com',\n        'doc': 'https://www.zb.com/i/developer',\n        'fees': 'https://www.zb.com/i/rate'\n      },\n      'api': {\n        'trade': {\n          'get': ['getFeeInfo']\n        },\n        'public': {\n          'get': ['markets', 'ticker', 'allTicker', 'depth', 'trades', 'kline', 'getGroupMarkets']\n        },\n        'private': {\n          'get': [// spot API\n          'order', 'orderMoreV2', 'cancelOrder', 'getOrder', 'getOrders', 'getOrdersNew', 'getOrdersIgnoreTradeType', 'getUnfinishedOrdersIgnoreTradeType', 'getFinishedAndPartialOrders', 'getAccountInfo', 'getUserAddress', 'getPayinAddress', 'getWithdrawAddress', 'getWithdrawRecord', 'getChargeRecord', 'getCnyWithdrawRecord', 'getCnyChargeRecord', 'withdraw', // sub accounts\n          'addSubUser', 'getSubUserList', 'doTransferFunds', 'createSubUserKey', // removed on 2021-03-16 according to the update log in the API doc\n          // leverage API\n          'getLeverAssetsInfo', 'getLeverBills', 'transferInLever', 'transferOutLever', 'loan', 'cancelLoan', 'getLoans', 'getLoanRecords', 'borrow', 'autoBorrow', 'repay', 'doAllRepay', 'getRepayments', 'getFinanceRecords', 'changeInvestMark', 'changeLoop', // cross API\n          'getCrossAssets', 'getCrossBills', 'transferInCross', 'transferOutCross', 'doCrossLoan', 'doCrossRepay', 'getCrossRepayRecords']\n        }\n      },\n      'fees': {\n        'funding': {\n          'withdraw': {\n            'BTC': 0.0001,\n            'BCH': 0.0006,\n            'LTC': 0.005,\n            'ETH': 0.01,\n            'ETC': 0.01,\n            'BTS': 3,\n            'EOS': 1,\n            'QTUM': 0.01,\n            'HSR': 0.001,\n            'XRP': 0.1,\n            'USDT': '0.1%',\n            'QCASH': 5,\n            'DASH': 0.002,\n            'BCD': 0,\n            'UBTC': 0,\n            'SBTC': 0,\n            'INK': 20,\n            'TV': 0.1,\n            'BTH': 0,\n            'BCX': 0,\n            'LBTC': 0,\n            'CHAT': 20,\n            'bitCNY': 20,\n            'HLC': 20,\n            'BTP': 0,\n            'BCW': 0\n          }\n        },\n        'trading': {\n          'maker': 0.2 / 100,\n          'taker': 0.2 / 100\n        }\n      },\n      'commonCurrencies': {\n        'ENT': 'ENTCash'\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const markets = await this.publicGetMarkets(params); //\n    //     {\n    //         \"zb_qc\":{\n    //             \"amountScale\":2,\n    //             \"minAmount\":0.01,\n    //             \"minSize\":5,\n    //             \"priceScale\":4,\n    //         },\n    //     }\n    //\n\n    const keys = Object.keys(markets);\n    const result = [];\n\n    for (let i = 0; i < keys.length; i++) {\n      const id = keys[i];\n      const market = markets[id];\n      const [baseId, quoteId] = id.split('_');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const amountPrecisionString = this.safeString(market, 'amountScale');\n      const pricePrecisionString = this.safeString(market, 'priceScale');\n      const amountLimit = this.parsePrecision(amountPrecisionString);\n      const priceLimit = this.parsePrecision(pricePrecisionString);\n      const precision = {\n        'amount': parseInt(amountPrecisionString),\n        'price': parseInt(pricePrecisionString)\n      };\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'base': base,\n        'quote': quote,\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.parseNumber(amountLimit),\n            'max': undefined\n          },\n          'price': {\n            'min': this.parseNumber(priceLimit),\n            'max': undefined\n          },\n          'cost': {\n            'min': 0,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.tradeGetGetFeeInfo(params); //\n    //     {\n    //         \"code\":1000,\n    //         \"message\":\"success\",\n    //         \"result\":{\n    //             \"USDT\":[\n    //                 {\n    //                     \"chainName\":\"TRC20\",\n    //                     \"canWithdraw\":true,\n    //                     \"fee\":1.0,\n    //                     \"mainChainName\":\"TRX\",\n    //                     \"canDeposit\":true\n    //                 },\n    //                 {\n    //                     \"chainName\":\"OMNI\",\n    //                     \"canWithdraw\":true,\n    //                     \"fee\":5.0,\n    //                     \"mainChainName\":\"BTC\",\n    //                     \"canDeposit\":true\n    //                 },\n    //                 {\n    //                     \"chainName\":\"ERC20\",\n    //                     \"canWithdraw\":true,\n    //                     \"fee\":15.0,\n    //                     \"mainChainName\":\"ETH\",\n    //                     \"canDeposit\":true\n    //                 }\n    //             ],\n    //         }\n    //     }\n    //\n\n    const currencies = this.safeValue(response, 'result', {});\n    const ids = Object.keys(currencies);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const currency = currencies[id];\n      const code = this.safeCurrencyCode(id);\n      const precision = undefined;\n      let isWithdrawEnabled = true;\n      let isDepositEnabled = true;\n      const fees = {};\n\n      for (let j = 0; j < currency.length; j++) {\n        const networkItem = currency[j];\n        const network = this.safeString(networkItem, 'chainName'); // const name = this.safeString (networkItem, 'name');\n\n        const withdrawFee = this.safeNumber(networkItem, 'fee');\n        const depositEnable = this.safeValue(networkItem, 'canDeposit');\n        const withdrawEnable = this.safeValue(networkItem, 'canWithdraw');\n        isDepositEnabled = isDepositEnabled || depositEnable;\n        isWithdrawEnabled = isWithdrawEnabled || withdrawEnable;\n        fees[network] = withdrawFee;\n      }\n\n      const active = isWithdrawEnabled && isDepositEnabled;\n      result[code] = {\n        'id': id,\n        'name': undefined,\n        'code': code,\n        'precision': precision,\n        'info': currency,\n        'active': active,\n        'fee': undefined,\n        'fees': fees,\n        'limits': this.limits\n      };\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetGetAccountInfo(params); // todo: use this somehow\n    // let permissions = response['result']['base'];\n\n    const balances = this.safeValue(response['result'], 'coins');\n    const result = {\n      'info': response,\n      'timestamp': undefined,\n      'datetime': undefined\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i]; //     {        enName: \"BTC\",\n      //               freez: \"0.00000000\",\n      //         unitDecimal:  8, // always 8\n      //              cnName: \"BTC\",\n      //       isCanRecharge:  true, // TODO: should use this\n      //             unitTag: \"฿\",\n      //       isCanWithdraw:  true,  // TODO: should use this\n      //           available: \"0.00000000\",\n      //                 key: \"btc\"         }\n\n      const account = this.account();\n      const currencyId = this.safeString(balance, 'key');\n      const code = this.safeCurrencyCode(currencyId);\n      account['free'] = this.safeString(balance, 'available');\n      account['used'] = this.safeString(balance, 'freez');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    //\n    // fetchDepositAddress\n    //\n    //     {\n    //         \"key\": \"0x0af7f36b8f09410f3df62c81e5846da673d4d9a9\"\n    //     }\n    //\n    // fetchDepositAddresses\n    //\n    //     {\n    //         \"blockChain\": \"btc\",\n    //         \"isUseMemo\": false,\n    //         \"address\": \"1LL5ati6pXHZnTGzHSA3rWdqi4mGGXudwM\",\n    //         \"canWithdraw\": true,\n    //         \"canDeposit\": true\n    //     }\n    //     {\n    //         \"blockChain\": \"bts\",\n    //         \"isUseMemo\": true,\n    //         \"account\": \"btstest\",\n    //         \"memo\": \"123\",\n    //         \"canWithdraw\": true,\n    //         \"canDeposit\": true\n    //     }\n    //\n    let address = this.safeString2(depositAddress, 'key', 'address');\n    let tag = undefined;\n    const memo = this.safeString(depositAddress, 'memo');\n\n    if (memo !== undefined) {\n      tag = memo;\n    } else if (address.indexOf('_') >= 0) {\n      const parts = address.split('_');\n      address = parts[0]; // WARNING: MAY BE tag_address INSTEAD OF address_tag FOR SOME CURRENCIES!!\n\n      tag = parts[1];\n    }\n\n    const currencyId = this.safeString(depositAddress, 'blockChain');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': depositAddress\n    };\n  }\n\n  async fetchDepositAddresses(codes = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetGetPayinAddress(params); //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": {\n    //             \"des\": \"success\",\n    //             \"isSuc\": true,\n    //             \"datas\": [\n    //                 {\n    //                     \"blockChain\": \"btc\",\n    //                     \"isUseMemo\": false,\n    //                     \"address\": \"1LL5ati6pXHZnTGzHSA3rWdqi4mGGXudwM\",\n    //                     \"canWithdraw\": true,\n    //                     \"canDeposit\": true\n    //                 },\n    //                 {\n    //                     \"blockChain\": \"bts\",\n    //                     \"isUseMemo\": true,\n    //                     \"account\": \"btstest\",\n    //                     \"memo\": \"123\",\n    //                     \"canWithdraw\": true,\n    //                     \"canDeposit\": true\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const message = this.safeValue(response, 'message', {});\n    const datas = this.safeValue(message, 'datas', []);\n    return this.parseDepositAddresses(datas, codes);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privateGetGetUserAddress(this.extend(request, params)); //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": {\n    //             \"des\": \"success\",\n    //             \"isSuc\": true,\n    //             \"datas\": {\n    //                 \"key\": \"0x0af7f36b8f09410f3df62c81e5846da673d4d9a9\"\n    //             }\n    //         }\n    //     }\n    //\n\n    const message = this.safeValue(response, 'message', {});\n    const datas = this.safeValue(message, 'datas', {});\n    return this.parseDepositAddress(datas, currency);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['size'] = limit;\n    }\n\n    const response = await this.publicGetDepth(this.extend(request, params));\n    return this.parseOrderBook(response, symbol);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetAllTicker(params);\n    const result = {};\n    const anotherMarketsById = {};\n    const marketIds = Object.keys(this.marketsById);\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const tickerId = marketIds[i].replace('_', '');\n      anotherMarketsById[tickerId] = this.marketsById[marketIds[i]];\n    }\n\n    const ids = Object.keys(response);\n\n    for (let i = 0; i < ids.length; i++) {\n      const market = anotherMarketsById[ids[i]];\n      result[market['symbol']] = this.parseTicker(response[ids[i]], market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTicker(this.extend(request, params));\n    const ticker = response['ticker'];\n    return this.parseTicker(ticker, market);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeNumber(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeNumber(ticker, 'vol'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    return [this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 1000;\n    }\n\n    const request = {\n      'market': market['id'],\n      'type': this.timeframes[timeframe],\n      'limit': limit\n    };\n\n    if (since !== undefined) {\n      request['since'] = since;\n    }\n\n    const response = await this.publicGetKline(this.extend(request, params));\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    const timestamp = this.safeTimestamp(trade, 'date');\n    let side = this.safeString(trade, 'trade_type');\n    side = side === 'bid' ? 'buy' : 'sell';\n    const id = this.safeString(trade, 'tid');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'amount');\n    const costString = Precise.stringMul(priceString, amountString);\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(costString);\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    if (type !== 'limit') {\n      throw new InvalidOrder(this.id + ' allows limit orders only');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'price': this.priceToPrecision(symbol, price),\n      'amount': this.amountToPrecision(symbol, amount),\n      'tradeType': side === 'buy' ? '1' : '0',\n      'currency': this.marketId(symbol)\n    };\n    const response = await this.privateGetOrder(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['id']\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id.toString(),\n      'currency': this.marketId(symbol)\n    };\n    return await this.privateGetCancelOrder(this.extend(request, params));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'id': id.toString(),\n      'currency': this.marketId(symbol)\n    };\n    const response = await this.privateGetGetOrder(this.extend(request, params)); //\n    //     {\n    //         'total_amount': 0.01,\n    //         'id': '20180910244276459',\n    //         'price': 180.0,\n    //         'trade_date': 1536576744960,\n    //         'status': 2,\n    //         'trade_money': '1.96742',\n    //         'trade_amount': 0.01,\n    //         'type': 0,\n    //         'currency': 'eth_usdt'\n    //     }\n    //\n\n    return this.parseOrder(response, undefined);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = 50, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + 'fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id'],\n      'pageIndex': 1,\n      // default pageIndex is 1\n      'pageSize': limit // default pageSize is 50\n\n    };\n    let method = 'privateGetGetOrdersIgnoreTradeType'; // tradeType 交易类型1/0[buy/sell]\n\n    if ('tradeType' in params) {\n      method = 'privateGetGetOrdersNew';\n    }\n\n    let response = undefined;\n\n    try {\n      response = await this[method](this.extend(request, params));\n    } catch (e) {\n      if (e instanceof OrderNotFound) {\n        return [];\n      }\n\n      throw e;\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + 'fetchClosedOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id'],\n      'pageIndex': 1,\n      // default pageIndex is 1\n      'pageSize': 10 // default pageSize is 10, doesn't work with other values now\n\n    };\n    const response = await this.privateGetGetFinishedAndPartialOrders(this.extend(request, params));\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = 10, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + 'fetchOpenOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'currency': market['id'],\n      'pageIndex': 1,\n      // default pageIndex is 1\n      'pageSize': limit // default pageSize is 10\n\n    };\n    let method = 'privateGetGetUnfinishedOrdersIgnoreTradeType'; // tradeType 交易类型1/0[buy/sell]\n\n    if ('tradeType' in params) {\n      method = 'privateGetGetOrdersNew';\n    }\n\n    let response = undefined;\n\n    try {\n      response = await this[method](this.extend(request, params));\n    } catch (e) {\n      if (e instanceof OrderNotFound) {\n        return [];\n      }\n\n      throw e;\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         acctType: 0,\n    //         currency: 'btc_usdt',\n    //         fees: 3.6e-7,\n    //         id: '202102282829772463',\n    //         price: 45177.5,\n    //         status: 2,\n    //         total_amount: 0.0002,\n    //         trade_amount: 0.0002,\n    //         trade_date: 1614515104998,\n    //         trade_money: 8.983712,\n    //         type: 1,\n    //         useZbFee: false\n    //     },\n    //\n    let side = this.safeInteger(order, 'type');\n    side = side === 1 ? 'buy' : 'sell';\n    const type = 'limit'; // market order is not availalbe in ZB\n\n    const timestamp = this.safeInteger(order, 'trade_date');\n    const marketId = this.safeString(order, 'currency');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const price = this.safeNumber(order, 'price');\n    const filled = this.safeNumber(order, 'trade_amount');\n    const amount = this.safeNumber(order, 'total_amount');\n    const cost = this.safeNumber(order, 'trade_money');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const id = this.safeString(order, 'id');\n    const feeCost = this.safeNumber(order, 'fees');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      let feeCurrency = undefined;\n      const zbFees = this.safeValue(order, 'useZbFee');\n\n      if (zbFees === true) {\n        feeCurrency = 'ZB';\n      } else if (market !== undefined) {\n        feeCurrency = side === 'sell' ? market['quote'] : market['base'];\n      }\n\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrency\n      };\n    }\n\n    return this.safeOrder({\n      'info': order,\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'average': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': undefined,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    });\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '0': 'open',\n      '1': 'canceled',\n      '2': 'closed',\n      '3': 'open' // partial\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      '0': 'pending',\n      // submitted, pending confirmation\n      '1': 'failed',\n      '2': 'ok',\n      '3': 'canceled',\n      '5': 'ok' // confirmed\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // withdraw\n    //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": \"success\",\n    //         \"id\": \"withdrawalId\"\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"amount\": 0.01,\n    //         \"fees\": 0.001,\n    //         \"id\": 2016042556231,\n    //         \"manageTime\": 1461579340000,\n    //         \"status\": 3,\n    //         \"submitTime\": 1461579288000,\n    //         \"toAddress\": \"14fxEPirL9fyfw1i9EF439Pq6gQ5xijUmp\",\n    //     }\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"address\": \"1FKN1DZqCm8HaTujDioRL2Aezdh7Qj7xxx\",\n    //         \"amount\": \"1.00000000\",\n    //         \"confirmTimes\": 1,\n    //         \"currency\": \"BTC\",\n    //         \"description\": \"Successfully Confirm\",\n    //         \"hash\": \"7ce842de187c379abafadd64a5fe66c5c61c8a21fb04edff9532234a1dae6xxx\",\n    //         \"id\": 558,\n    //         \"itransfer\": 1,\n    //         \"status\": 2,\n    //         \"submit_time\": \"2016-12-07 18:51:57\",\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const txid = this.safeString(transaction, 'hash');\n    const amount = this.safeNumber(transaction, 'amount');\n    let timestamp = this.parse8601(this.safeString(transaction, 'submit_time'));\n    timestamp = this.safeInteger(transaction, 'submitTime', timestamp);\n    let address = this.safeString2(transaction, 'toAddress', 'address');\n    let tag = undefined;\n\n    if (address !== undefined) {\n      const parts = address.split('_');\n      address = this.safeString(parts, 0);\n      tag = this.safeString(parts, 1);\n    }\n\n    const confirmTimes = this.safeInteger(transaction, 'confirmTimes');\n    const updated = this.safeInteger(transaction, 'manageTime');\n    let type = undefined;\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId, currency);\n\n    if (address !== undefined) {\n      type = confirmTimes === undefined ? 'withdrawal' : 'deposit';\n    }\n\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    let fee = undefined;\n    const feeCost = this.safeNumber(transaction, 'fees');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': code\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': undefined,\n      'address': address,\n      'addressTo': address,\n      'tagFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    const password = this.safeString(params, 'safePwd', this.password);\n\n    if (password === undefined) {\n      throw new ArgumentsRequired(this.id + ' withdraw() requires exchange.password or a safePwd parameter');\n    }\n\n    const fees = this.safeNumber(params, 'fees');\n\n    if (fees === undefined) {\n      throw new ArgumentsRequired(this.id + ' withdraw() requires a fees parameter');\n    }\n\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (tag !== undefined) {\n      address += '_' + tag;\n    }\n\n    const request = {\n      'amount': this.currencyToPrecision(code, amount),\n      'currency': currency['id'],\n      'fees': this.currencyToPrecision(code, fees),\n      // 'itransfer': 0, // agree for an internal transfer, 0 disagree, 1 agree, the default is to disagree\n      'method': 'withdraw',\n      'receiveAddr': address,\n      'safePwd': password\n    };\n    const response = await this.privateGetWithdraw(this.extend(request, params)); //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": \"success\",\n    //         \"id\": \"withdrawalId\"\n    //     }\n    //\n\n    const transaction = this.parseTransaction(response, currency);\n    return this.extend(transaction, {\n      'type': 'withdrawal',\n      'address': address,\n      'addressTo': address,\n      'amount': amount\n    });\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'currency': currency['id'],\n      // 'pageIndex': 1,\n      // 'pageSize': limit,\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const response = await this.privateGetGetWithdrawRecord(this.extend(request, params)); //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": {\n    //             \"des\": \"success\",\n    //             \"isSuc\": true,\n    //             \"datas\": {\n    //                 \"list\": [\n    //                     {\n    //                         \"amount\": 0.01,\n    //                         \"fees\": 0.001,\n    //                         \"id\": 2016042556231,\n    //                         \"manageTime\": 1461579340000,\n    //                         \"status\": 3,\n    //                         \"submitTime\": 1461579288000,\n    //                         \"toAddress\": \"14fxEPirL9fyfw1i9EF439Pq6gQ5xijUmp\",\n    //                     },\n    //                 ],\n    //                 \"pageIndex\": 1,\n    //                 \"pageSize\": 10,\n    //                 \"totalCount\": 4,\n    //                 \"totalPage\": 1\n    //             }\n    //         }\n    //     }\n    //\n\n    const message = this.safeValue(response, 'message', {});\n    const datas = this.safeValue(message, 'datas', {});\n    const withdrawals = this.safeValue(datas, 'list', []);\n    return this.parseTransactions(withdrawals, currency, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'currency': currency['id'],\n      // 'pageIndex': 1,\n      // 'pageSize': limit,\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (limit !== undefined) {\n      request['pageSize'] = limit;\n    }\n\n    const response = await this.privateGetGetChargeRecord(this.extend(request, params)); //\n    //     {\n    //         \"code\": 1000,\n    //         \"message\": {\n    //             \"des\": \"success\",\n    //             \"isSuc\": true,\n    //             \"datas\": {\n    //                 \"list\": [\n    //                     {\n    //                         \"address\": \"1FKN1DZqCm8HaTujDioRL2Aezdh7Qj7xxx\",\n    //                         \"amount\": \"1.00000000\",\n    //                         \"confirmTimes\": 1,\n    //                         \"currency\": \"BTC\",\n    //                         \"description\": \"Successfully Confirm\",\n    //                         \"hash\": \"7ce842de187c379abafadd64a5fe66c5c61c8a21fb04edff9532234a1dae6xxx\",\n    //                         \"id\": 558,\n    //                         \"itransfer\": 1,\n    //                         \"status\": 2,\n    //                         \"submit_time\": \"2016-12-07 18:51:57\",\n    //                     },\n    //                 ],\n    //                 \"pageIndex\": 1,\n    //                 \"pageSize\": 10,\n    //                 \"total\": 8\n    //             }\n    //         }\n    //     }\n    //\n\n    const message = this.safeValue(response, 'message', {});\n    const datas = this.safeValue(message, 'datas', {});\n    const deposits = this.safeValue(datas, 'list', []);\n    return this.parseTransactions(deposits, currency, since, limit);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api];\n\n    if (api === 'public') {\n      url += '/' + this.version + '/' + path;\n\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else if (api === 'trade') {\n      url += '/' + path;\n\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      let query = this.keysort(this.extend({\n        'method': path,\n        'accesskey': this.apiKey\n      }, params));\n      const nonce = this.nonce();\n      query = this.keysort(query);\n      const auth = this.rawencode(query);\n      const secret = this.hash(this.encode(this.secret), 'sha1');\n      const signature = this.hmac(this.encode(auth), this.encode(secret), 'md5');\n      const suffix = 'sign=' + signature + '&reqTime=' + nonce.toString();\n      url += '/' + path + '?' + auth + '&' + suffix;\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    if (body[0] === '{') {\n      const feedback = this.id + ' ' + body;\n      this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);\n\n      if ('code' in response) {\n        const code = this.safeString(response, 'code');\n        this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);\n\n        if (code !== '1000') {\n          throw new ExchangeError(feedback);\n        }\n      } // special case for {\"result\":false,\"message\":\"服务端忙碌\"} (a \"Busy Server\" reply)\n\n\n      const result = this.safeValue(response, 'result');\n\n      if (result !== undefined) {\n        if (!result) {\n          const message = this.safeString(response, 'message');\n\n          if (message === '服务端忙碌') {\n            throw new ExchangeNotAvailable(feedback);\n          } else {\n            throw new ExchangeError(feedback);\n          }\n        }\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/zb.js"],"names":["Exchange","require","BadRequest","ExchangeError","ArgumentsRequired","AuthenticationError","InsufficientFunds","OrderNotFound","ExchangeNotAvailable","RateLimitExceeded","PermissionDenied","InvalidOrder","InvalidAddress","OnMaintenance","RequestTimeout","AccountSuspended","Precise","module","exports","zb","describe","deepExtend","fetchMarkets","params","markets","publicGetMarkets","keys","Object","result","i","length","id","market","baseId","quoteId","split","base","safeCurrencyCode","quote","symbol","amountPrecisionString","safeString","pricePrecisionString","amountLimit","parsePrecision","priceLimit","precision","parseInt","push","parseNumber","undefined","fetchCurrencies","response","tradeGetGetFeeInfo","currencies","safeValue","ids","currency","code","isWithdrawEnabled","isDepositEnabled","fees","j","networkItem","network","withdrawFee","safeNumber","depositEnable","withdrawEnable","active","limits","fetchBalance","loadMarkets","privateGetGetAccountInfo","balances","balance","account","currencyId","parseBalance","parseDepositAddress","depositAddress","address","safeString2","tag","memo","indexOf","parts","fetchDepositAddresses","codes","privateGetGetPayinAddress","message","datas","parseDepositAddresses","fetchDepositAddress","request","privateGetGetUserAddress","extend","fetchOrderBook","limit","publicGetDepth","parseOrderBook","fetchTickers","symbols","publicGetAllTicker","anotherMarketsById","marketIds","marketsById","tickerId","replace","parseTicker","filterByArray","fetchTicker","publicGetTicker","ticker","timestamp","milliseconds","last","iso8601","parseOHLCV","ohlcv","safeInteger","fetchOHLCV","timeframe","since","timeframes","publicGetKline","data","parseOHLCVs","parseTrade","trade","safeTimestamp","side","priceString","amountString","costString","stringMul","price","amount","cost","fetchTrades","publicGetTrades","parseTrades","createOrder","type","priceToPrecision","amountToPrecision","marketId","privateGetOrder","cancelOrder","toString","privateGetCancelOrder","fetchOrder","privateGetGetOrder","parseOrder","fetchOrders","method","e","parseOrders","fetchClosedOrders","privateGetGetFinishedAndPartialOrders","fetchOpenOrders","order","safeSymbol","filled","status","parseOrderStatus","feeCost","fee","feeCurrency","zbFees","safeOrder","statuses","parseTransactionStatus","parseTransaction","transaction","txid","parse8601","confirmTimes","updated","withdraw","password","checkAddress","currencyToPrecision","privateGetWithdraw","fetchWithdrawals","privateGetGetWithdrawRecord","withdrawals","parseTransactions","fetchDeposits","privateGetGetChargeRecord","deposits","nonce","sign","path","api","headers","body","url","urls","version","urlencode","query","keysort","apiKey","auth","rawencode","secret","hash","encode","signature","hmac","suffix","handleErrors","httpCode","reason","requestHeaders","requestBody","feedback","throwBroadlyMatchedException","exceptions","throwExactlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { BadRequest, ExchangeError, ArgumentsRequired, AuthenticationError, InsufficientFunds, OrderNotFound, ExchangeNotAvailable, RateLimitExceeded, PermissionDenied, InvalidOrder, InvalidAddress, OnMaintenance, RequestTimeout, AccountSuspended } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class zb extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'zb',\n            'name': 'ZB',\n            'countries': [ 'CN' ],\n            'rateLimit': 100,\n            'version': 'v1',\n            'certified': true,\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDepositAddresses': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchClosedOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1min',\n                '3m': '3min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '1hour',\n                '2h': '2hour',\n                '4h': '4hour',\n                '6h': '6hour',\n                '12h': '12hour',\n                '1d': '1day',\n                '3d': '3day',\n                '1w': '1week',\n            },\n            'exceptions': {\n                'ws': {\n                    //  '1000': ExchangeError, // The call is successful.\n                    '1001': ExchangeError, // General error prompt\n                    '1002': ExchangeError, // Internal Error\n                    '1003': AuthenticationError, // Fail to verify\n                    '1004': AuthenticationError, // The transaction password is locked\n                    '1005': AuthenticationError, // Wrong transaction password, please check it and re-enter。\n                    '1006': PermissionDenied, // Real-name authentication is pending approval or unapproved\n                    '1007': ExchangeError, // Channel does not exist\n                    '1009': OnMaintenance, // This interface is under maintenance\n                    '1010': ExchangeNotAvailable, // Not available now\n                    '1012': PermissionDenied, // Insufficient permissions\n                    '1013': ExchangeError, // Cannot trade, please contact email: support@zb.cn for support.\n                    '1014': ExchangeError, // Cannot sell during the pre-sale period\n                    '2001': InsufficientFunds, // Insufficient CNY account balance\n                    '2002': InsufficientFunds, // Insufficient BTC account balance\n                    '2003': InsufficientFunds, // Insufficient LTC account balance\n                    '2005': InsufficientFunds, // Insufficient ETH account balance\n                    '2006': InsufficientFunds, // ETCInsufficient account balance\n                    '2007': InsufficientFunds, // BTSInsufficient account balance\n                    '2008': InsufficientFunds, // EOSInsufficient account balance\n                    '2009': InsufficientFunds, // BCCInsufficient account balance\n                    '3001': OrderNotFound, // Order not found or is completed\n                    '3002': InvalidOrder, // Invalid amount\n                    '3003': InvalidOrder, // Invalid quantity\n                    '3004': AuthenticationError, // User does not exist\n                    '3005': BadRequest, // Invalid parameter\n                    '3006': PermissionDenied, // Invalid IP or not consistent with the bound IP\n                    '3007': RequestTimeout, // The request time has expired\n                    '3008': ExchangeError, // Transaction not found\n                    '3009': InvalidOrder, // The price exceeds the limit\n                    '3010': PermissionDenied, // It fails to place an order, due to you have set up to prohibit trading of this market.\n                    '3011': InvalidOrder, // The entrusted price is abnormal, please modify it and place order again\n                    '3012': InvalidOrder, // Duplicate custom customerOrderId\n                    '4001': AccountSuspended, // APIThe interface is locked for one hour\n                    '4002': RateLimitExceeded, // Request too frequently\n                },\n                'exact': {\n                    // '1000': 'Successful operation',\n                    '1001': ExchangeError, // 'General error message',\n                    '1002': ExchangeError, // 'Internal error',\n                    '1003': AuthenticationError, // 'Verification does not pass',\n                    '1004': AuthenticationError, // 'Funding security password lock',\n                    '1005': AuthenticationError, // 'Funds security password is incorrect, please confirm and re-enter.',\n                    '1006': AuthenticationError, // 'Real-name certification pending approval or audit does not pass',\n                    '1009': ExchangeNotAvailable, // 'This interface is under maintenance',\n                    '1010': ExchangeNotAvailable, // Not available now\n                    '1012': PermissionDenied, // Insufficient permissions\n                    '1013': ExchangeError, // Cannot trade, please contact email: support@zb.cn for support.\n                    '1014': ExchangeError, // Cannot sell during the pre-sale period\n                    '2001': InsufficientFunds, // 'Insufficient CNY Balance',\n                    '2002': InsufficientFunds, // 'Insufficient BTC Balance',\n                    '2003': InsufficientFunds, // 'Insufficient LTC Balance',\n                    '2005': InsufficientFunds, // 'Insufficient ETH Balance',\n                    '2006': InsufficientFunds, // 'Insufficient ETC Balance',\n                    '2007': InsufficientFunds, // 'Insufficient BTS Balance',\n                    '2008': InsufficientFunds, // EOSInsufficient account balance\n                    '2009': InsufficientFunds, // 'Account balance is not enough',\n                    '3001': OrderNotFound, // 'Pending orders not found',\n                    '3002': InvalidOrder, // 'Invalid price',\n                    '3003': InvalidOrder, // 'Invalid amount',\n                    '3004': AuthenticationError, // 'User does not exist',\n                    '3005': BadRequest, // 'Invalid parameter',\n                    '3006': AuthenticationError, // 'Invalid IP or inconsistent with the bound IP',\n                    '3007': AuthenticationError, // 'The request time has expired',\n                    '3008': OrderNotFound, // 'Transaction records not found',\n                    '3009': InvalidOrder, // 'The price exceeds the limit',\n                    '3010': PermissionDenied, // It fails to place an order, due to you have set up to prohibit trading of this market.\n                    '3011': InvalidOrder, // 'The entrusted price is abnormal, please modify it and place order again',\n                    '3012': InvalidOrder, // Duplicate custom customerOrderId\n                    '4001': ExchangeNotAvailable, // 'API interface is locked or not enabled',\n                    '4002': RateLimitExceeded, // 'Request too often',\n                },\n                'broad': {\n                    '提币地址有误，请先添加提币地址。': InvalidAddress, // {\"code\":1001,\"message\":\"提币地址有误，请先添加提币地址。\"}\n                },\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg',\n                'api': {\n                    'public': 'https://api.zb.today/data',\n                    'private': 'https://trade.zb.today/api',\n                    'trade': 'https://trade.zb.today/api',\n                },\n                'www': 'https://www.zb.com',\n                'doc': 'https://www.zb.com/i/developer',\n                'fees': 'https://www.zb.com/i/rate',\n            },\n            'api': {\n                'trade': {\n                    'get': [\n                        'getFeeInfo',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'markets',\n                        'ticker',\n                        'allTicker',\n                        'depth',\n                        'trades',\n                        'kline',\n                        'getGroupMarkets',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        // spot API\n                        'order',\n                        'orderMoreV2',\n                        'cancelOrder',\n                        'getOrder',\n                        'getOrders',\n                        'getOrdersNew',\n                        'getOrdersIgnoreTradeType',\n                        'getUnfinishedOrdersIgnoreTradeType',\n                        'getFinishedAndPartialOrders',\n                        'getAccountInfo',\n                        'getUserAddress',\n                        'getPayinAddress',\n                        'getWithdrawAddress',\n                        'getWithdrawRecord',\n                        'getChargeRecord',\n                        'getCnyWithdrawRecord',\n                        'getCnyChargeRecord',\n                        'withdraw',\n                        // sub accounts\n                        'addSubUser',\n                        'getSubUserList',\n                        'doTransferFunds',\n                        'createSubUserKey', // removed on 2021-03-16 according to the update log in the API doc\n                        // leverage API\n                        'getLeverAssetsInfo',\n                        'getLeverBills',\n                        'transferInLever',\n                        'transferOutLever',\n                        'loan',\n                        'cancelLoan',\n                        'getLoans',\n                        'getLoanRecords',\n                        'borrow',\n                        'autoBorrow',\n                        'repay',\n                        'doAllRepay',\n                        'getRepayments',\n                        'getFinanceRecords',\n                        'changeInvestMark',\n                        'changeLoop',\n                        // cross API\n                        'getCrossAssets',\n                        'getCrossBills',\n                        'transferInCross',\n                        'transferOutCross',\n                        'doCrossLoan',\n                        'doCrossRepay',\n                        'getCrossRepayRecords',\n                    ],\n                },\n            },\n            'fees': {\n                'funding': {\n                    'withdraw': {\n                        'BTC': 0.0001,\n                        'BCH': 0.0006,\n                        'LTC': 0.005,\n                        'ETH': 0.01,\n                        'ETC': 0.01,\n                        'BTS': 3,\n                        'EOS': 1,\n                        'QTUM': 0.01,\n                        'HSR': 0.001,\n                        'XRP': 0.1,\n                        'USDT': '0.1%',\n                        'QCASH': 5,\n                        'DASH': 0.002,\n                        'BCD': 0,\n                        'UBTC': 0,\n                        'SBTC': 0,\n                        'INK': 20,\n                        'TV': 0.1,\n                        'BTH': 0,\n                        'BCX': 0,\n                        'LBTC': 0,\n                        'CHAT': 20,\n                        'bitCNY': 20,\n                        'HLC': 20,\n                        'BTP': 0,\n                        'BCW': 0,\n                    },\n                },\n                'trading': {\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n            'commonCurrencies': {\n                'ENT': 'ENTCash',\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const markets = await this.publicGetMarkets (params);\n        //\n        //     {\n        //         \"zb_qc\":{\n        //             \"amountScale\":2,\n        //             \"minAmount\":0.01,\n        //             \"minSize\":5,\n        //             \"priceScale\":4,\n        //         },\n        //     }\n        //\n        const keys = Object.keys (markets);\n        const result = [];\n        for (let i = 0; i < keys.length; i++) {\n            const id = keys[i];\n            const market = markets[id];\n            const [ baseId, quoteId ] = id.split ('_');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const amountPrecisionString = this.safeString (market, 'amountScale');\n            const pricePrecisionString = this.safeString (market, 'priceScale');\n            const amountLimit = this.parsePrecision (amountPrecisionString);\n            const priceLimit = this.parsePrecision (pricePrecisionString);\n            const precision = {\n                'amount': parseInt (amountPrecisionString),\n                'price': parseInt (pricePrecisionString),\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'base': base,\n                'quote': quote,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.parseNumber (amountLimit),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': this.parseNumber (priceLimit),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.tradeGetGetFeeInfo (params);\n        //\n        //     {\n        //         \"code\":1000,\n        //         \"message\":\"success\",\n        //         \"result\":{\n        //             \"USDT\":[\n        //                 {\n        //                     \"chainName\":\"TRC20\",\n        //                     \"canWithdraw\":true,\n        //                     \"fee\":1.0,\n        //                     \"mainChainName\":\"TRX\",\n        //                     \"canDeposit\":true\n        //                 },\n        //                 {\n        //                     \"chainName\":\"OMNI\",\n        //                     \"canWithdraw\":true,\n        //                     \"fee\":5.0,\n        //                     \"mainChainName\":\"BTC\",\n        //                     \"canDeposit\":true\n        //                 },\n        //                 {\n        //                     \"chainName\":\"ERC20\",\n        //                     \"canWithdraw\":true,\n        //                     \"fee\":15.0,\n        //                     \"mainChainName\":\"ETH\",\n        //                     \"canDeposit\":true\n        //                 }\n        //             ],\n        //         }\n        //     }\n        //\n        const currencies = this.safeValue (response, 'result', {});\n        const ids = Object.keys (currencies);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const currency = currencies[id];\n            const code = this.safeCurrencyCode (id);\n            const precision = undefined;\n            let isWithdrawEnabled = true;\n            let isDepositEnabled = true;\n            const fees = {};\n            for (let j = 0; j < currency.length; j++) {\n                const networkItem = currency[j];\n                const network = this.safeString (networkItem, 'chainName');\n                // const name = this.safeString (networkItem, 'name');\n                const withdrawFee = this.safeNumber (networkItem, 'fee');\n                const depositEnable = this.safeValue (networkItem, 'canDeposit');\n                const withdrawEnable = this.safeValue (networkItem, 'canWithdraw');\n                isDepositEnabled = isDepositEnabled || depositEnable;\n                isWithdrawEnabled = isWithdrawEnabled || withdrawEnable;\n                fees[network] = withdrawFee;\n            }\n            const active = (isWithdrawEnabled && isDepositEnabled);\n            result[code] = {\n                'id': id,\n                'name': undefined,\n                'code': code,\n                'precision': precision,\n                'info': currency,\n                'active': active,\n                'fee': undefined,\n                'fees': fees,\n                'limits': this.limits,\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetGetAccountInfo (params);\n        // todo: use this somehow\n        // let permissions = response['result']['base'];\n        const balances = this.safeValue (response['result'], 'coins');\n        const result = {\n            'info': response,\n            'timestamp': undefined,\n            'datetime': undefined,\n        };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            //     {        enName: \"BTC\",\n            //               freez: \"0.00000000\",\n            //         unitDecimal:  8, // always 8\n            //              cnName: \"BTC\",\n            //       isCanRecharge:  true, // TODO: should use this\n            //             unitTag: \"฿\",\n            //       isCanWithdraw:  true,  // TODO: should use this\n            //           available: \"0.00000000\",\n            //                 key: \"btc\"         }\n            const account = this.account ();\n            const currencyId = this.safeString (balance, 'key');\n            const code = this.safeCurrencyCode (currencyId);\n            account['free'] = this.safeString (balance, 'available');\n            account['used'] = this.safeString (balance, 'freez');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        //\n        // fetchDepositAddress\n        //\n        //     {\n        //         \"key\": \"0x0af7f36b8f09410f3df62c81e5846da673d4d9a9\"\n        //     }\n        //\n        // fetchDepositAddresses\n        //\n        //     {\n        //         \"blockChain\": \"btc\",\n        //         \"isUseMemo\": false,\n        //         \"address\": \"1LL5ati6pXHZnTGzHSA3rWdqi4mGGXudwM\",\n        //         \"canWithdraw\": true,\n        //         \"canDeposit\": true\n        //     }\n        //     {\n        //         \"blockChain\": \"bts\",\n        //         \"isUseMemo\": true,\n        //         \"account\": \"btstest\",\n        //         \"memo\": \"123\",\n        //         \"canWithdraw\": true,\n        //         \"canDeposit\": true\n        //     }\n        //\n        let address = this.safeString2 (depositAddress, 'key', 'address');\n        let tag = undefined;\n        const memo = this.safeString (depositAddress, 'memo');\n        if (memo !== undefined) {\n            tag = memo;\n        } else if (address.indexOf ('_') >= 0) {\n            const parts = address.split ('_');\n            address = parts[0];  // WARNING: MAY BE tag_address INSTEAD OF address_tag FOR SOME CURRENCIES!!\n            tag = parts[1];\n        }\n        const currencyId = this.safeString (depositAddress, 'blockChain');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': depositAddress,\n        };\n    }\n\n    async fetchDepositAddresses (codes = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetGetPayinAddress (params);\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": {\n        //             \"des\": \"success\",\n        //             \"isSuc\": true,\n        //             \"datas\": [\n        //                 {\n        //                     \"blockChain\": \"btc\",\n        //                     \"isUseMemo\": false,\n        //                     \"address\": \"1LL5ati6pXHZnTGzHSA3rWdqi4mGGXudwM\",\n        //                     \"canWithdraw\": true,\n        //                     \"canDeposit\": true\n        //                 },\n        //                 {\n        //                     \"blockChain\": \"bts\",\n        //                     \"isUseMemo\": true,\n        //                     \"account\": \"btstest\",\n        //                     \"memo\": \"123\",\n        //                     \"canWithdraw\": true,\n        //                     \"canDeposit\": true\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const message = this.safeValue (response, 'message', {});\n        const datas = this.safeValue (message, 'datas', []);\n        return this.parseDepositAddresses (datas, codes);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privateGetGetUserAddress (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": {\n        //             \"des\": \"success\",\n        //             \"isSuc\": true,\n        //             \"datas\": {\n        //                 \"key\": \"0x0af7f36b8f09410f3df62c81e5846da673d4d9a9\"\n        //             }\n        //         }\n        //     }\n        //\n        const message = this.safeValue (response, 'message', {});\n        const datas = this.safeValue (message, 'datas', {});\n        return this.parseDepositAddress (datas, currency);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        if (limit !== undefined) {\n            request['size'] = limit;\n        }\n        const response = await this.publicGetDepth (this.extend (request, params));\n        return this.parseOrderBook (response, symbol);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetAllTicker (params);\n        const result = {};\n        const anotherMarketsById = {};\n        const marketIds = Object.keys (this.marketsById);\n        for (let i = 0; i < marketIds.length; i++) {\n            const tickerId = marketIds[i].replace ('_', '');\n            anotherMarketsById[tickerId] = this.marketsById[marketIds[i]];\n        }\n        const ids = Object.keys (response);\n        for (let i = 0; i < ids.length; i++) {\n            const market = anotherMarketsById[ids[i]];\n            result[market['symbol']] = this.parseTicker (response[ids[i]], market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTicker (this.extend (request, params));\n        const ticker = response['ticker'];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeNumber (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeNumber (ticker, 'vol'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeNumber (ohlcv, 1),\n            this.safeNumber (ohlcv, 2),\n            this.safeNumber (ohlcv, 3),\n            this.safeNumber (ohlcv, 4),\n            this.safeNumber (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 1000;\n        }\n        const request = {\n            'market': market['id'],\n            'type': this.timeframes[timeframe],\n            'limit': limit,\n        };\n        if (since !== undefined) {\n            request['since'] = since;\n        }\n        const response = await this.publicGetKline (this.extend (request, params));\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        const timestamp = this.safeTimestamp (trade, 'date');\n        let side = this.safeString (trade, 'trade_type');\n        side = (side === 'bid') ? 'buy' : 'sell';\n        const id = this.safeString (trade, 'tid');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'amount');\n        const costString = Precise.stringMul (priceString, amountString);\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (costString);\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type !== 'limit') {\n            throw new InvalidOrder (this.id + ' allows limit orders only');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'price': this.priceToPrecision (symbol, price),\n            'amount': this.amountToPrecision (symbol, amount),\n            'tradeType': (side === 'buy') ? '1' : '0',\n            'currency': this.marketId (symbol),\n        };\n        const response = await this.privateGetOrder (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id.toString (),\n            'currency': this.marketId (symbol),\n        };\n        return await this.privateGetCancelOrder (this.extend (request, params));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'id': id.toString (),\n            'currency': this.marketId (symbol),\n        };\n        const response = await this.privateGetGetOrder (this.extend (request, params));\n        //\n        //     {\n        //         'total_amount': 0.01,\n        //         'id': '20180910244276459',\n        //         'price': 180.0,\n        //         'trade_date': 1536576744960,\n        //         'status': 2,\n        //         'trade_money': '1.96742',\n        //         'trade_amount': 0.01,\n        //         'type': 0,\n        //         'currency': 'eth_usdt'\n        //     }\n        //\n        return this.parseOrder (response, undefined);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = 50, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + 'fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n            'pageIndex': 1, // default pageIndex is 1\n            'pageSize': limit, // default pageSize is 50\n        };\n        let method = 'privateGetGetOrdersIgnoreTradeType';\n        // tradeType 交易类型1/0[buy/sell]\n        if ('tradeType' in params) {\n            method = 'privateGetGetOrdersNew';\n        }\n        let response = undefined;\n        try {\n            response = await this[method] (this.extend (request, params));\n        } catch (e) {\n            if (e instanceof OrderNotFound) {\n                return [];\n            }\n            throw e;\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + 'fetchClosedOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n            'pageIndex': 1, // default pageIndex is 1\n            'pageSize': 10, // default pageSize is 10, doesn't work with other values now\n        };\n        const response = await this.privateGetGetFinishedAndPartialOrders (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = 10, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + 'fetchOpenOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'currency': market['id'],\n            'pageIndex': 1, // default pageIndex is 1\n            'pageSize': limit, // default pageSize is 10\n        };\n        let method = 'privateGetGetUnfinishedOrdersIgnoreTradeType';\n        // tradeType 交易类型1/0[buy/sell]\n        if ('tradeType' in params) {\n            method = 'privateGetGetOrdersNew';\n        }\n        let response = undefined;\n        try {\n            response = await this[method] (this.extend (request, params));\n        } catch (e) {\n            if (e instanceof OrderNotFound) {\n                return [];\n            }\n            throw e;\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         acctType: 0,\n        //         currency: 'btc_usdt',\n        //         fees: 3.6e-7,\n        //         id: '202102282829772463',\n        //         price: 45177.5,\n        //         status: 2,\n        //         total_amount: 0.0002,\n        //         trade_amount: 0.0002,\n        //         trade_date: 1614515104998,\n        //         trade_money: 8.983712,\n        //         type: 1,\n        //         useZbFee: false\n        //     },\n        //\n        let side = this.safeInteger (order, 'type');\n        side = (side === 1) ? 'buy' : 'sell';\n        const type = 'limit'; // market order is not availalbe in ZB\n        const timestamp = this.safeInteger (order, 'trade_date');\n        const marketId = this.safeString (order, 'currency');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const price = this.safeNumber (order, 'price');\n        const filled = this.safeNumber (order, 'trade_amount');\n        const amount = this.safeNumber (order, 'total_amount');\n        const cost = this.safeNumber (order, 'trade_money');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const id = this.safeString (order, 'id');\n        const feeCost = this.safeNumber (order, 'fees');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            let feeCurrency = undefined;\n            const zbFees = this.safeValue (order, 'useZbFee');\n            if (zbFees === true) {\n                feeCurrency = 'ZB';\n            } else if (market !== undefined) {\n                feeCurrency = (side === 'sell') ? market['quote'] : market['base'];\n            }\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrency,\n            };\n        }\n        return this.safeOrder ({\n            'info': order,\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'average': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': undefined,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        });\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '0': 'open',\n            '1': 'canceled',\n            '2': 'closed',\n            '3': 'open', // partial\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            '0': 'pending', // submitted, pending confirmation\n            '1': 'failed',\n            '2': 'ok',\n            '3': 'canceled',\n            '5': 'ok', // confirmed\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // withdraw\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": \"success\",\n        //         \"id\": \"withdrawalId\"\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"amount\": 0.01,\n        //         \"fees\": 0.001,\n        //         \"id\": 2016042556231,\n        //         \"manageTime\": 1461579340000,\n        //         \"status\": 3,\n        //         \"submitTime\": 1461579288000,\n        //         \"toAddress\": \"14fxEPirL9fyfw1i9EF439Pq6gQ5xijUmp\",\n        //     }\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"address\": \"1FKN1DZqCm8HaTujDioRL2Aezdh7Qj7xxx\",\n        //         \"amount\": \"1.00000000\",\n        //         \"confirmTimes\": 1,\n        //         \"currency\": \"BTC\",\n        //         \"description\": \"Successfully Confirm\",\n        //         \"hash\": \"7ce842de187c379abafadd64a5fe66c5c61c8a21fb04edff9532234a1dae6xxx\",\n        //         \"id\": 558,\n        //         \"itransfer\": 1,\n        //         \"status\": 2,\n        //         \"submit_time\": \"2016-12-07 18:51:57\",\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const txid = this.safeString (transaction, 'hash');\n        const amount = this.safeNumber (transaction, 'amount');\n        let timestamp = this.parse8601 (this.safeString (transaction, 'submit_time'));\n        timestamp = this.safeInteger (transaction, 'submitTime', timestamp);\n        let address = this.safeString2 (transaction, 'toAddress', 'address');\n        let tag = undefined;\n        if (address !== undefined) {\n            const parts = address.split ('_');\n            address = this.safeString (parts, 0);\n            tag = this.safeString (parts, 1);\n        }\n        const confirmTimes = this.safeInteger (transaction, 'confirmTimes');\n        const updated = this.safeInteger (transaction, 'manageTime');\n        let type = undefined;\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        if (address !== undefined) {\n            type = (confirmTimes === undefined) ? 'withdrawal' : 'deposit';\n        }\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        let fee = undefined;\n        const feeCost = this.safeNumber (transaction, 'fees');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': code,\n            };\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': undefined,\n            'address': address,\n            'addressTo': address,\n            'tagFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        const password = this.safeString (params, 'safePwd', this.password);\n        if (password === undefined) {\n            throw new ArgumentsRequired (this.id + ' withdraw() requires exchange.password or a safePwd parameter');\n        }\n        const fees = this.safeNumber (params, 'fees');\n        if (fees === undefined) {\n            throw new ArgumentsRequired (this.id + ' withdraw() requires a fees parameter');\n        }\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (tag !== undefined) {\n            address += '_' + tag;\n        }\n        const request = {\n            'amount': this.currencyToPrecision (code, amount),\n            'currency': currency['id'],\n            'fees': this.currencyToPrecision (code, fees),\n            // 'itransfer': 0, // agree for an internal transfer, 0 disagree, 1 agree, the default is to disagree\n            'method': 'withdraw',\n            'receiveAddr': address,\n            'safePwd': password,\n        };\n        const response = await this.privateGetWithdraw (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": \"success\",\n        //         \"id\": \"withdrawalId\"\n        //     }\n        //\n        const transaction = this.parseTransaction (response, currency);\n        return this.extend (transaction, {\n            'type': 'withdrawal',\n            'address': address,\n            'addressTo': address,\n            'amount': amount,\n        });\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'currency': currency['id'],\n            // 'pageIndex': 1,\n            // 'pageSize': limit,\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const response = await this.privateGetGetWithdrawRecord (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": {\n        //             \"des\": \"success\",\n        //             \"isSuc\": true,\n        //             \"datas\": {\n        //                 \"list\": [\n        //                     {\n        //                         \"amount\": 0.01,\n        //                         \"fees\": 0.001,\n        //                         \"id\": 2016042556231,\n        //                         \"manageTime\": 1461579340000,\n        //                         \"status\": 3,\n        //                         \"submitTime\": 1461579288000,\n        //                         \"toAddress\": \"14fxEPirL9fyfw1i9EF439Pq6gQ5xijUmp\",\n        //                     },\n        //                 ],\n        //                 \"pageIndex\": 1,\n        //                 \"pageSize\": 10,\n        //                 \"totalCount\": 4,\n        //                 \"totalPage\": 1\n        //             }\n        //         }\n        //     }\n        //\n        const message = this.safeValue (response, 'message', {});\n        const datas = this.safeValue (message, 'datas', {});\n        const withdrawals = this.safeValue (datas, 'list', []);\n        return this.parseTransactions (withdrawals, currency, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'currency': currency['id'],\n            // 'pageIndex': 1,\n            // 'pageSize': limit,\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (limit !== undefined) {\n            request['pageSize'] = limit;\n        }\n        const response = await this.privateGetGetChargeRecord (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 1000,\n        //         \"message\": {\n        //             \"des\": \"success\",\n        //             \"isSuc\": true,\n        //             \"datas\": {\n        //                 \"list\": [\n        //                     {\n        //                         \"address\": \"1FKN1DZqCm8HaTujDioRL2Aezdh7Qj7xxx\",\n        //                         \"amount\": \"1.00000000\",\n        //                         \"confirmTimes\": 1,\n        //                         \"currency\": \"BTC\",\n        //                         \"description\": \"Successfully Confirm\",\n        //                         \"hash\": \"7ce842de187c379abafadd64a5fe66c5c61c8a21fb04edff9532234a1dae6xxx\",\n        //                         \"id\": 558,\n        //                         \"itransfer\": 1,\n        //                         \"status\": 2,\n        //                         \"submit_time\": \"2016-12-07 18:51:57\",\n        //                     },\n        //                 ],\n        //                 \"pageIndex\": 1,\n        //                 \"pageSize\": 10,\n        //                 \"total\": 8\n        //             }\n        //         }\n        //     }\n        //\n        const message = this.safeValue (response, 'message', {});\n        const datas = this.safeValue (message, 'datas', {});\n        const deposits = this.safeValue (datas, 'list', []);\n        return this.parseTransactions (deposits, currency, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api === 'public') {\n            url += '/' + this.version + '/' + path;\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else if (api === 'trade') {\n            url += '/' + path;\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            let query = this.keysort (this.extend ({\n                'method': path,\n                'accesskey': this.apiKey,\n            }, params));\n            const nonce = this.nonce ();\n            query = this.keysort (query);\n            const auth = this.rawencode (query);\n            const secret = this.hash (this.encode (this.secret), 'sha1');\n            const signature = this.hmac (this.encode (auth), this.encode (secret), 'md5');\n            const suffix = 'sign=' + signature + '&reqTime=' + nonce.toString ();\n            url += '/' + path + '?' + auth + '&' + suffix;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        if (body[0] === '{') {\n            const feedback = this.id + ' ' + body;\n            this.throwBroadlyMatchedException (this.exceptions['broad'], body, feedback);\n            if ('code' in response) {\n                const code = this.safeString (response, 'code');\n                this.throwExactlyMatchedException (this.exceptions['exact'], code, feedback);\n                if (code !== '1000') {\n                    throw new ExchangeError (feedback);\n                }\n            }\n            // special case for {\"result\":false,\"message\":\"服务端忙碌\"} (a \"Busy Server\" reply)\n            const result = this.safeValue (response, 'result');\n            if (result !== undefined) {\n                if (!result) {\n                    const message = this.safeString (response, 'message');\n                    if (message === '服务端忙碌') {\n                        throw new ExchangeNotAvailable (feedback);\n                    } else {\n                        throw new ExchangeError (feedback);\n                    }\n                }\n            }\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}