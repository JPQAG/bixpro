{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  InsufficientFunds,\n  OrderNotFound,\n  InvalidOrder,\n  AuthenticationError\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class coinex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'coinex',\n      'name': 'CoinEx',\n      'version': 'v1',\n      'countries': ['CN'],\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1min',\n        '3m': '3min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '1hour',\n        '2h': '2hour',\n        '4h': '4hour',\n        '6h': '6hour',\n        '12h': '12hour',\n        '1d': '1day',\n        '3d': '3day',\n        '1w': '1week'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87182089-1e05fa00-c2ec-11ea-8da9-cc73b45abbbc.jpg',\n        'api': 'https://api.coinex.com',\n        'www': 'https://www.coinex.com',\n        'doc': 'https://github.com/coinexcom/coinex_exchange_api/wiki',\n        'fees': 'https://www.coinex.com/fees',\n        'referral': 'https://www.coinex.com/register?refer_code=yw5fz'\n      },\n      'api': {\n        'public': {\n          'get': ['common/currency/rate', 'common/asset/config', 'market/info', 'market/list', 'market/ticker', 'market/ticker/all', 'market/depth', 'market/deals', 'market/kline']\n        },\n        'private': {\n          'get': ['balance/coin/deposit', 'balance/coin/withdraw', 'balance/info', 'future/account', 'future/config', 'future/limitprice', 'future/loan/history', 'future/market', 'margin/account', 'margin/config', 'margin/loan/history', 'margin/market', 'order', 'order/deals', 'order/finished', 'order/finished/{id}', 'order/pending', 'order/status', 'order/status/batch', 'order/user/deals', 'sub_account/balance', 'sub_account/transfer/history'],\n          'post': ['balance/coin/withdraw', 'future/flat', 'future/loan', 'future/transfer', 'margin/flat', 'margin/loan', 'margin/transfer', 'order/batchlimit', 'order/ioc', 'order/limit', 'order/market', 'sub_account/transfer'],\n          'delete': ['balance/coin/withdraw', 'order/pending/batch', 'order/pending']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.001,\n          'taker': 0.001\n        },\n        'funding': {\n          'withdraw': {\n            'BCH': 0.0,\n            'BTC': 0.001,\n            'LTC': 0.001,\n            'ETH': 0.001,\n            'ZEC': 0.0001,\n            'DASH': 0.0001\n          }\n        }\n      },\n      'limits': {\n        'amount': {\n          'min': 0.001,\n          'max': undefined\n        }\n      },\n      'precision': {\n        'amount': 8,\n        'price': 8\n      },\n      'options': {\n        'createMarketBuyOrderRequiresPrice': true\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetMarketInfo(params); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": {\n    //             \"WAVESBTC\": {\n    //                 \"name\": \"WAVESBTC\",\n    //                 \"min_amount\": \"1\",\n    //                 \"maker_fee_rate\": \"0.001\",\n    //                 \"taker_fee_rate\": \"0.001\",\n    //                 \"pricing_name\": \"BTC\",\n    //                 \"pricing_decimal\": 8,\n    //                 \"trading_name\": \"WAVES\",\n    //                 \"trading_decimal\": 8\n    //             }\n    //         }\n    //     }\n    //\n\n    const markets = this.safeValue(response, 'data', {});\n    const result = [];\n    const keys = Object.keys(markets);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const market = markets[key];\n      const id = this.safeString(market, 'name');\n      const tradingName = this.safeString(market, 'trading_name');\n      const baseId = tradingName;\n      const quoteId = this.safeString(market, 'pricing_name');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      let symbol = base + '/' + quote;\n\n      if (tradingName === id) {\n        symbol = id;\n      }\n\n      const precision = {\n        'amount': this.safeInteger(market, 'trading_decimal'),\n        'price': this.safeInteger(market, 'pricing_decimal')\n      };\n      const active = undefined;\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': active,\n        'taker': this.safeNumber(market, 'taker_fee_rate'),\n        'maker': this.safeNumber(market, 'maker_fee_rate'),\n        'info': market,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(market, 'min_amount'),\n            'max': undefined\n          },\n          'price': {\n            'min': Math.pow(10, -precision['price']),\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.safeInteger(ticker, 'date');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    ticker = this.safeValue(ticker, 'ticker', {});\n    const last = this.safeNumber(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'buy'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'sell'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeNumber2(ticker, 'vol', 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetMarketTicker(this.extend(request, params));\n    return this.parseTicker(response['data'], market);\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetMarketTickerAll(params);\n    const data = this.safeValue(response, 'data');\n    const timestamp = this.safeInteger(data, 'date');\n    const tickers = this.safeValue(data, 'ticker');\n    const marketIds = Object.keys(tickers);\n    const result = {};\n\n    for (let i = 0; i < marketIds.length; i++) {\n      const marketId = marketIds[i];\n      const market = this.safeMarket(marketId);\n      const symbol = market['symbol'];\n      const ticker = this.parseTicker({\n        'date': timestamp,\n        'ticker': tickers[marketId]\n      }, market);\n      ticker['symbol'] = symbol;\n      result[symbol] = ticker;\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchOrderBook(symbol, limit = 20, params = {}) {\n    await this.loadMarkets();\n\n    if (limit === undefined) {\n      limit = 20; // default\n    }\n\n    const request = {\n      'market': this.marketId(symbol),\n      'merge': '0.0000000001',\n      'limit': limit.toString()\n    };\n    const response = await this.publicGetMarketDepth(this.extend(request, params));\n    return this.parseOrderBook(response['data'], symbol);\n  }\n\n  parseTrade(trade, market = undefined) {\n    // this method parses both public and private trades\n    let timestamp = this.safeTimestamp(trade, 'create_time');\n\n    if (timestamp === undefined) {\n      timestamp = this.safeInteger(trade, 'date_ms');\n    }\n\n    const tradeId = this.safeString(trade, 'id');\n    const orderId = this.safeString(trade, 'order_id');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'amount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const marketId = this.safeString(trade, 'market');\n    const symbol = this.safeSymbol(marketId, market);\n    let cost = this.safeNumber(trade, 'deal_money');\n\n    if (cost === undefined) {\n      cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    }\n\n    let fee = undefined;\n    const feeCost = this.safeNumber(trade, 'fee');\n\n    if (feeCost !== undefined) {\n      const feeCurrencyId = this.safeString(trade, 'fee_asset');\n      const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrencyCode\n      };\n    }\n\n    const takerOrMaker = this.safeString(trade, 'role');\n    const side = this.safeString(trade, 'type');\n    return {\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': tradeId,\n      'order': orderId,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id']\n    };\n    const response = await this.publicGetMarketDeals(this.extend(request, params));\n    return this.parseTrades(response['data'], market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1591484400,\n    //         \"0.02505349\",\n    //         \"0.02506988\",\n    //         \"0.02507000\",\n    //         \"0.02505304\",\n    //         \"343.19716223\",\n    //         \"8.6021323866383196\",\n    //         \"ETHBTC\"\n    //     ]\n    //\n    return [this.safeTimestamp(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id'],\n      'type': this.timeframes[timeframe]\n    };\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this.publicGetMarketKline(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": [\n    //             [1591484400, \"0.02505349\", \"0.02506988\", \"0.02507000\", \"0.02505304\", \"343.19716223\", \"8.6021323866383196\", \"ETHBTC\"],\n    //             [1591484700, \"0.02506990\", \"0.02508109\", \"0.02508109\", \"0.02506979\", \"91.59841581\", \"2.2972047780447000\", \"ETHBTC\"],\n    //             [1591485000, \"0.02508106\", \"0.02507996\", \"0.02508106\", \"0.02507500\", \"65.15307697\", \"1.6340597822306000\", \"ETHBTC\"],\n    //         ],\n    //         \"message\": \"OK\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    return this.parseOHLCVs(data, market, timeframe, since, limit);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalanceInfo(params); //\n    //     {\n    //       \"code\": 0,\n    //       \"data\": {\n    //         \"BCH\": {                     # BCH account\n    //           \"available\": \"13.60109\",   # Available BCH\n    //           \"frozen\": \"0.00000\"        # Frozen BCH\n    //         },\n    //         \"BTC\": {                     # BTC account\n    //           \"available\": \"32590.16\",   # Available BTC\n    //           \"frozen\": \"7000.00\"        # Frozen BTC\n    //         },\n    //         \"ETH\": {                     # ETH account\n    //           \"available\": \"5.06000\",    # Available ETH\n    //           \"frozen\": \"0.00000\"        # Frozen ETH\n    //         }\n    //       },\n    //       \"message\": \"Ok\"\n    //     }\n    //\n\n    const result = {\n      'info': response\n    };\n    const balances = this.safeValue(response, 'data', {});\n    const currencyIds = Object.keys(balances);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const balance = this.safeValue(balances, currencyId, {});\n      const account = this.account();\n      account['free'] = this.safeString(balance, 'available');\n      account['used'] = this.safeString(balance, 'frozen');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'not_deal': 'open',\n      'part_deal': 'open',\n      'done': 'closed',\n      'cancel': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // fetchOrder\n    //\n    //     {\n    //         \"amount\": \"0.1\",\n    //         \"asset_fee\": \"0.22736197736197736197\",\n    //         \"avg_price\": \"196.85000000000000000000\",\n    //         \"create_time\": 1537270135,\n    //         \"deal_amount\": \"0.1\",\n    //         \"deal_fee\": \"0\",\n    //         \"deal_money\": \"19.685\",\n    //         \"fee_asset\": \"CET\",\n    //         \"fee_discount\": \"0.5\",\n    //         \"id\": 1788259447,\n    //         \"left\": \"0\",\n    //         \"maker_fee_rate\": \"0\",\n    //         \"market\": \"ETHUSDT\",\n    //         \"order_type\": \"limit\",\n    //         \"price\": \"170.00000000\",\n    //         \"status\": \"done\",\n    //         \"taker_fee_rate\": \"0.0005\",\n    //         \"type\": \"sell\",\n    //     }\n    //\n    const timestamp = this.safeTimestamp(order, 'create_time');\n    const price = this.safeNumber(order, 'price');\n    const cost = this.safeNumber(order, 'deal_money');\n    const amount = this.safeNumber(order, 'amount');\n    const filled = this.safeNumber(order, 'deal_amount');\n    const average = this.safeNumber(order, 'avg_price');\n    let symbol = undefined;\n    const marketId = this.safeString(order, 'market');\n    market = this.safeMarket(marketId, market);\n    const feeCurrencyId = this.safeString(order, 'fee_asset');\n    let feeCurrency = this.safeCurrencyCode(feeCurrencyId);\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n\n      if (feeCurrency === undefined) {\n        feeCurrency = market['quote'];\n      }\n    }\n\n    const remaining = this.safeNumber(order, 'left');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const type = this.safeString(order, 'order_type');\n    const side = this.safeString(order, 'type');\n    return this.safeOrder({\n      'id': this.safeString(order, 'id'),\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'average': average,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': undefined,\n      'fee': {\n        'currency': feeCurrency,\n        'cost': this.safeNumber(order, 'deal_fee')\n      },\n      'info': order\n    });\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const method = 'privatePostOrder' + this.capitalize(type);\n    const market = this.market(symbol);\n    const request = {\n      'market': market['id'],\n      'type': side\n    };\n    amount = parseFloat(amount); // for market buy it requires the amount of quote currency to spend\n\n    if (type === 'market' && side === 'buy') {\n      if (this.options['createMarketBuyOrderRequiresPrice']) {\n        if (price === undefined) {\n          throw new InvalidOrder(this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the amount argument (the exchange-specific behaviour)\");\n        } else {\n          price = parseFloat(price);\n          request['amount'] = this.costToPrecision(symbol, amount * price);\n        }\n      } else {\n        request['amount'] = this.costToPrecision(symbol, amount);\n      }\n    } else {\n      request['amount'] = this.amountToPrecision(symbol, amount);\n    }\n\n    if (type === 'limit' || type === 'ioc') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    const response = await this[method](this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': id,\n      'market': market['id']\n    };\n    const response = await this.privateDeleteOrderPending(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data, market);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': id,\n      'market': market['id']\n    };\n    const response = await this.privateGetOrder(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": {\n    //             \"amount\": \"0.1\",\n    //             \"asset_fee\": \"0.22736197736197736197\",\n    //             \"avg_price\": \"196.85000000000000000000\",\n    //             \"create_time\": 1537270135,\n    //             \"deal_amount\": \"0.1\",\n    //             \"deal_fee\": \"0\",\n    //             \"deal_money\": \"19.685\",\n    //             \"fee_asset\": \"CET\",\n    //             \"fee_discount\": \"0.5\",\n    //             \"id\": 1788259447,\n    //             \"left\": \"0\",\n    //             \"maker_fee_rate\": \"0\",\n    //             \"market\": \"ETHUSDT\",\n    //             \"order_type\": \"limit\",\n    //             \"price\": \"170.00000000\",\n    //             \"status\": \"done\",\n    //             \"taker_fee_rate\": \"0.0005\",\n    //             \"type\": \"sell\",\n    //         },\n    //         \"message\": \"Ok\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data, market);\n  }\n\n  async fetchOrdersByStatus(status, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (limit === undefined) {\n      limit = 100;\n    }\n\n    const request = {\n      'page': 1,\n      'limit': limit\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market'] = market['id'];\n    }\n\n    const method = 'privateGetOrder' + this.capitalize(status);\n    const response = await this[method](this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    const orders = this.safeValue(data, 'data', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByStatus('pending', symbol, since, limit, params);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersByStatus('finished', symbol, since, limit, params);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (limit === undefined) {\n      limit = 100;\n    }\n\n    const request = {\n      'page': 1,\n      'limit': limit\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['market'] = market['id'];\n    }\n\n    const response = await this.privateGetOrderUserDeals(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    const trades = this.safeValue(data, 'data', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (tag) {\n      address = address + ':' + tag;\n    }\n\n    const request = {\n      'coin_type': currency['id'],\n      'coin_address': address,\n      // must be authorized, inter-user transfer by a registered mobile phone number or an email address is supported\n      'actual_amount': parseFloat(amount),\n      // the actual amount without fees, https://www.coinex.com/fees\n      'transfer_method': 'onchain' // onchain, local\n\n    };\n    const response = await this.privatePostBalanceCoinWithdraw(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": {\n    //             \"actual_amount\": \"1.00000000\",\n    //             \"amount\": \"1.00000000\",\n    //             \"coin_address\": \"1KAv3pazbTk2JnQ5xTo6fpKK7p1it2RzD4\",\n    //             \"coin_type\": \"BCH\",\n    //             \"coin_withdraw_id\": 206,\n    //             \"confirmations\": 0,\n    //             \"create_time\": 1524228297,\n    //             \"status\": \"audit\",\n    //             \"tx_fee\": \"0\",\n    //             \"tx_id\": \"\"\n    //         },\n    //         \"message\": \"Ok\"\n    //     }\n    //\n\n    const transaction = this.safeValue(response, 'data', {});\n    return this.parseTransaction(transaction, currency);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'audit': 'pending',\n      'pass': 'pending',\n      'processing': 'pending',\n      'confirming': 'pending',\n      'not_pass': 'failed',\n      'cancel': 'canceled',\n      'finish': 'ok',\n      'fail': 'failed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"actual_amount\": \"120.00000000\",\n    //         \"actual_amount_display\": \"120\",\n    //         \"add_explorer\": \"XXX\",\n    //         \"amount\": \"120.00000000\",\n    //         \"amount_display\": \"120\",\n    //         \"coin_address\": \"XXXXXXXX\",\n    //         \"coin_address_display\": \"XXXXXXXX\",\n    //         \"coin_deposit_id\": 1866,\n    //         \"coin_type\": \"USDT\",\n    //         \"confirmations\": 0,\n    //         \"create_time\": 1539595701,\n    //         \"explorer\": \"\",\n    //         \"remark\": \"\",\n    //         \"status\": \"finish\",\n    //         \"status_display\": \"finish\",\n    //         \"transfer_method\": \"local\",\n    //         \"tx_id\": \"\",\n    //         \"tx_id_display\": \"XXXXXXXXXX\"\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"actual_amount\": \"0.10000000\",\n    //         \"amount\": \"0.10000000\",\n    //         \"coin_address\": \"15sr1VdyXQ6sVLqeJUJ1uPzLpmQtgUeBSB\",\n    //         \"coin_type\": \"BCH\",\n    //         \"coin_withdraw_id\": 203,\n    //         \"confirmations\": 11,\n    //         \"create_time\": 1515806440,\n    //         \"status\": \"finish\",\n    //         \"tx_fee\": \"0\",\n    //         \"tx_id\": \"896371d0e23d64d1cac65a0b7c9e9093d835affb572fec89dd4547277fbdd2f6\"\n    //     }\n    //\n    const id = this.safeString2(transaction, 'coin_withdraw_id', 'coin_deposit_id');\n    const address = this.safeString(transaction, 'coin_address');\n    let tag = this.safeString(transaction, 'remark'); // set but unused\n\n    if (tag !== undefined) {\n      if (tag.length < 1) {\n        tag = undefined;\n      }\n    }\n\n    let txid = this.safeValue(transaction, 'tx_id');\n\n    if (txid !== undefined) {\n      if (txid.length < 1) {\n        txid = undefined;\n      }\n    }\n\n    const currencyId = this.safeString(transaction, 'coin_type');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const timestamp = this.safeTimestamp(transaction, 'create_time');\n    const type = 'coin_withdraw_id' in transaction ? 'withdraw' : 'deposit';\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    let amount = this.safeNumber(transaction, 'amount');\n    let feeCost = this.safeNumber(transaction, 'tx_fee');\n\n    if (type === 'deposit') {\n      feeCost = 0;\n    }\n\n    const fee = {\n      'cost': feeCost,\n      'currency': code\n    }; // https://github.com/ccxt/ccxt/issues/8321\n\n    if (amount !== undefined) {\n      amount = amount - feeCost;\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'tag': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'fee': fee\n    };\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchWithdrawals() requires a currency code argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coin_type': currency['id']\n    };\n\n    if (limit !== undefined) {\n      request['Limit'] = limit;\n    }\n\n    const response = await this.privateGetBalanceCoinWithdraw(this.extend(request, params)); //\n    //     {\n    //         \"code\": 0,\n    //         \"data\": {\n    //             \"has_next\": true,\n    //             \"curr_page\": 1,\n    //             \"count\": 10,\n    //             \"data\": [\n    //                 {\n    //                     \"coin_withdraw_id\": 203,\n    //                     \"create_time\": 1513933541,\n    //                     \"actual_amount\": \"0.00100000\",\n    //                     \"actual_amount_display\": \"***\",\n    //                     \"amount\": \"0.00100000\",\n    //                     \"amount_display\": \"******\",\n    //                     \"coin_address\": \"1GVVx5UBddLKrckTprNi4VhHSymeQ8tsLF\",\n    //                     \"app_coin_address_display\": \"**********\",\n    //                     \"coin_address_display\": \"****************\",\n    //                     \"add_explorer\": \"https://explorer.viawallet.com/btc/address/1GVVx5UBddLKrckTprNi4VhHSymeQ8tsLF\",\n    //                     \"coin_type\": \"BTC\",\n    //                     \"confirmations\": 6,\n    //                     \"explorer\": \"https://explorer.viawallet.com/btc/tx/1GVVx5UBddLKrckTprNi4VhHSymeQ8tsLF\",\n    //                     \"fee\": \"0\",\n    //                     \"remark\": \"\",\n    //                     \"smart_contract_name\": \"BTC\",\n    //                     \"status\": \"finish\",\n    //                     \"status_display\": \"finish\",\n    //                     \"transfer_method\": \"onchain\",\n    //                     \"tx_fee\": \"0\",\n    //                     \"tx_id\": \"896371d0e23d64d1cac65a0b7c9e9093d835affb572fec89dd4547277fbdd2f6\"\n    //                 }, /* many more data points */\n    //             ],\n    //             \"total\": ***,\n    //             \"total_page\":***\n    //         },\n    //         \"message\": \"Success\"\n    //     }\n    //\n\n    let data = this.safeValue(response, 'data');\n\n    if (!Array.isArray(data)) {\n      data = this.safeValue(data, 'data', []);\n    }\n\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchDeposits() requires a currency code argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coin_type': currency['id']\n    };\n\n    if (limit !== undefined) {\n      request['Limit'] = limit;\n    }\n\n    const response = await this.privateGetBalanceCoinDeposit(this.extend(request, params)); //     {\n    //         \"code\": 0,\n    //         \"data\": [\n    //             {\n    //                 \"actual_amount\": \"4.65397682\",\n    //                 \"actual_amount_display\": \"4.65397682\",\n    //                 \"add_explorer\": \"https://etherscan.io/address/0x361XXXXXX\",\n    //                 \"amount\": \"4.65397682\",\n    //                 \"amount_display\": \"4.65397682\",\n    //                 \"coin_address\": \"0x36dabcdXXXXXX\",\n    //                 \"coin_address_display\": \"0x361X*****XXXXX\",\n    //                 \"coin_deposit_id\": 966191,\n    //                 \"coin_type\": \"ETH\",\n    //                 \"confirmations\": 30,\n    //                 \"create_time\": 1531661445,\n    //                 \"explorer\": \"https://etherscan.io/tx/0x361XXXXXX\",\n    //                 \"remark\": \"\",\n    //                 \"status\": \"finish\",\n    //                 \"status_display\": \"finish\",\n    //                 \"transfer_method\": \"onchain\",\n    //                 \"tx_id\": \"0x361XXXXXX\",\n    //                 \"tx_id_display\": \"0x361XXXXXX\"\n    //             }\n    //         ],\n    //         \"message\": \"Ok\"\n    //     }\n    //\n\n    let data = this.safeValue(response, 'data');\n\n    if (!Array.isArray(data)) {\n      data = this.safeValue(data, 'data', []);\n    }\n\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    path = this.implodeParams(path, params);\n    let url = this.urls['api'] + '/' + this.version + '/' + path;\n    let query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce();\n      query = this.extend({\n        'access_id': this.apiKey,\n        'tonce': nonce.toString()\n      }, query);\n      query = this.keysort(query);\n      const urlencoded = this.rawencode(query);\n      const signature = this.hash(this.encode(urlencoded + '&secret_key=' + this.secret));\n      headers = {\n        'Authorization': signature.toUpperCase(),\n        'Content-Type': 'application/json'\n      };\n\n      if (method === 'GET' || method === 'DELETE') {\n        url += '?' + urlencoded;\n      } else {\n        body = this.json(query);\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n    const code = this.safeString(response, 'code');\n    const data = this.safeValue(response, 'data');\n    const message = this.safeString(response, 'message');\n\n    if (code !== '0' || data === undefined || message !== 'Success' && message !== 'Ok' && !data) {\n      const responseCodes = {\n        '24': AuthenticationError,\n        '25': AuthenticationError,\n        '107': InsufficientFunds,\n        '600': OrderNotFound,\n        '601': InvalidOrder,\n        '602': InvalidOrder,\n        '606': InvalidOrder\n      };\n      const ErrorClass = this.safeValue(responseCodes, code, ExchangeError);\n      throw new ErrorClass(response['message']);\n    }\n\n    return response;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/coinex.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","InsufficientFunds","OrderNotFound","InvalidOrder","AuthenticationError","Precise","module","exports","coinex","describe","deepExtend","undefined","fetchMarkets","params","response","publicGetMarketInfo","markets","safeValue","result","keys","Object","i","length","key","market","id","safeString","tradingName","baseId","quoteId","base","safeCurrencyCode","quote","symbol","precision","safeInteger","active","push","safeNumber","Math","pow","parseTicker","ticker","timestamp","last","iso8601","safeNumber2","fetchTicker","loadMarkets","request","publicGetMarketTicker","extend","fetchTickers","symbols","publicGetMarketTickerAll","data","tickers","marketIds","marketId","safeMarket","filterByArray","fetchOrderBook","limit","toString","publicGetMarketDepth","parseOrderBook","parseTrade","trade","safeTimestamp","tradeId","orderId","priceString","amountString","price","parseNumber","amount","safeSymbol","cost","stringMul","fee","feeCost","feeCurrencyId","feeCurrencyCode","takerOrMaker","side","fetchTrades","since","publicGetMarketDeals","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","timeframes","publicGetMarketKline","parseOHLCVs","fetchBalance","privateGetBalanceInfo","balances","currencyIds","currencyId","code","balance","account","parseBalance","parseOrderStatus","status","statuses","parseOrder","order","filled","average","feeCurrency","remaining","type","safeOrder","createOrder","method","capitalize","parseFloat","options","costToPrecision","amountToPrecision","priceToPrecision","cancelOrder","privateDeleteOrderPending","fetchOrder","privateGetOrder","fetchOrdersByStatus","orders","parseOrders","fetchOpenOrders","fetchClosedOrders","fetchMyTrades","privateGetOrderUserDeals","trades","withdraw","address","tag","checkAddress","currency","privatePostBalanceCoinWithdraw","transaction","parseTransaction","parseTransactionStatus","safeString2","txid","fetchWithdrawals","privateGetBalanceCoinWithdraw","Array","isArray","parseTransactions","fetchDeposits","privateGetBalanceCoinDeposit","nonce","milliseconds","sign","path","api","headers","body","implodeParams","url","urls","version","query","omit","extractParams","urlencode","checkRequiredCredentials","apiKey","keysort","urlencoded","rawencode","signature","hash","encode","secret","toUpperCase","json","fetch2","message","responseCodes","ErrorClass"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, InsufficientFunds, OrderNotFound, InvalidOrder, AuthenticationError } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinex',\n            'name': 'CoinEx',\n            'version': 'v1',\n            'countries': [ 'CN' ],\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1min',\n                '3m': '3min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '1hour',\n                '2h': '2hour',\n                '4h': '4hour',\n                '6h': '6hour',\n                '12h': '12hour',\n                '1d': '1day',\n                '3d': '3day',\n                '1w': '1week',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87182089-1e05fa00-c2ec-11ea-8da9-cc73b45abbbc.jpg',\n                'api': 'https://api.coinex.com',\n                'www': 'https://www.coinex.com',\n                'doc': 'https://github.com/coinexcom/coinex_exchange_api/wiki',\n                'fees': 'https://www.coinex.com/fees',\n                'referral': 'https://www.coinex.com/register?refer_code=yw5fz',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'common/currency/rate',\n                        'common/asset/config',\n                        'market/info',\n                        'market/list',\n                        'market/ticker',\n                        'market/ticker/all',\n                        'market/depth',\n                        'market/deals',\n                        'market/kline',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'balance/coin/deposit',\n                        'balance/coin/withdraw',\n                        'balance/info',\n                        'future/account',\n                        'future/config',\n                        'future/limitprice',\n                        'future/loan/history',\n                        'future/market',\n                        'margin/account',\n                        'margin/config',\n                        'margin/loan/history',\n                        'margin/market',\n                        'order',\n                        'order/deals',\n                        'order/finished',\n                        'order/finished/{id}',\n                        'order/pending',\n                        'order/status',\n                        'order/status/batch',\n                        'order/user/deals',\n                        'sub_account/balance',\n                        'sub_account/transfer/history',\n                    ],\n                    'post': [\n                        'balance/coin/withdraw',\n                        'future/flat',\n                        'future/loan',\n                        'future/transfer',\n                        'margin/flat',\n                        'margin/loan',\n                        'margin/transfer',\n                        'order/batchlimit',\n                        'order/ioc',\n                        'order/limit',\n                        'order/market',\n                        'sub_account/transfer',\n                    ],\n                    'delete': [\n                        'balance/coin/withdraw',\n                        'order/pending/batch',\n                        'order/pending',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.001,\n                    'taker': 0.001,\n                },\n                'funding': {\n                    'withdraw': {\n                        'BCH': 0.0,\n                        'BTC': 0.001,\n                        'LTC': 0.001,\n                        'ETH': 0.001,\n                        'ZEC': 0.0001,\n                        'DASH': 0.0001,\n                    },\n                },\n            },\n            'limits': {\n                'amount': {\n                    'min': 0.001,\n                    'max': undefined,\n                },\n            },\n            'precision': {\n                'amount': 8,\n                'price': 8,\n            },\n            'options': {\n                'createMarketBuyOrderRequiresPrice': true,\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetMarketInfo (params);\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": {\n        //             \"WAVESBTC\": {\n        //                 \"name\": \"WAVESBTC\",\n        //                 \"min_amount\": \"1\",\n        //                 \"maker_fee_rate\": \"0.001\",\n        //                 \"taker_fee_rate\": \"0.001\",\n        //                 \"pricing_name\": \"BTC\",\n        //                 \"pricing_decimal\": 8,\n        //                 \"trading_name\": \"WAVES\",\n        //                 \"trading_decimal\": 8\n        //             }\n        //         }\n        //     }\n        //\n        const markets = this.safeValue (response, 'data', {});\n        const result = [];\n        const keys = Object.keys (markets);\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const market = markets[key];\n            const id = this.safeString (market, 'name');\n            const tradingName = this.safeString (market, 'trading_name');\n            const baseId = tradingName;\n            const quoteId = this.safeString (market, 'pricing_name');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            let symbol = base + '/' + quote;\n            if (tradingName === id) {\n                symbol = id;\n            }\n            const precision = {\n                'amount': this.safeInteger (market, 'trading_decimal'),\n                'price': this.safeInteger (market, 'pricing_decimal'),\n            };\n            const active = undefined;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': active,\n                'taker': this.safeNumber (market, 'taker_fee_rate'),\n                'maker': this.safeNumber (market, 'maker_fee_rate'),\n                'info': market,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (market, 'min_amount'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.safeInteger (ticker, 'date');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        ticker = this.safeValue (ticker, 'ticker', {});\n        const last = this.safeNumber (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'buy'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'sell'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeNumber2 (ticker, 'vol', 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetMarketTicker (this.extend (request, params));\n        return this.parseTicker (response['data'], market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetMarketTickerAll (params);\n        const data = this.safeValue (response, 'data');\n        const timestamp = this.safeInteger (data, 'date');\n        const tickers = this.safeValue (data, 'ticker');\n        const marketIds = Object.keys (tickers);\n        const result = {};\n        for (let i = 0; i < marketIds.length; i++) {\n            const marketId = marketIds[i];\n            const market = this.safeMarket (marketId);\n            const symbol = market['symbol'];\n            const ticker = this.parseTicker ({\n                'date': timestamp,\n                'ticker': tickers[marketId],\n            }, market);\n            ticker['symbol'] = symbol;\n            result[symbol] = ticker;\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchOrderBook (symbol, limit = 20, params = {}) {\n        await this.loadMarkets ();\n        if (limit === undefined) {\n            limit = 20; // default\n        }\n        const request = {\n            'market': this.marketId (symbol),\n            'merge': '0.0000000001',\n            'limit': limit.toString (),\n        };\n        const response = await this.publicGetMarketDepth (this.extend (request, params));\n        return this.parseOrderBook (response['data'], symbol);\n    }\n\n    parseTrade (trade, market = undefined) {\n        // this method parses both public and private trades\n        let timestamp = this.safeTimestamp (trade, 'create_time');\n        if (timestamp === undefined) {\n            timestamp = this.safeInteger (trade, 'date_ms');\n        }\n        const tradeId = this.safeString (trade, 'id');\n        const orderId = this.safeString (trade, 'order_id');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'amount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const marketId = this.safeString (trade, 'market');\n        const symbol = this.safeSymbol (marketId, market);\n        let cost = this.safeNumber (trade, 'deal_money');\n        if (cost === undefined) {\n            cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        }\n        let fee = undefined;\n        const feeCost = this.safeNumber (trade, 'fee');\n        if (feeCost !== undefined) {\n            const feeCurrencyId = this.safeString (trade, 'fee_asset');\n            const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrencyCode,\n            };\n        }\n        const takerOrMaker = this.safeString (trade, 'role');\n        const side = this.safeString (trade, 'type');\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': tradeId,\n            'order': orderId,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n        };\n        const response = await this.publicGetMarketDeals (this.extend (request, params));\n        return this.parseTrades (response['data'], market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1591484400,\n        //         \"0.02505349\",\n        //         \"0.02506988\",\n        //         \"0.02507000\",\n        //         \"0.02505304\",\n        //         \"343.19716223\",\n        //         \"8.6021323866383196\",\n        //         \"ETHBTC\"\n        //     ]\n        //\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.safeNumber (ohlcv, 1),\n            this.safeNumber (ohlcv, 3),\n            this.safeNumber (ohlcv, 4),\n            this.safeNumber (ohlcv, 2),\n            this.safeNumber (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n            'type': this.timeframes[timeframe],\n        };\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this.publicGetMarketKline (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": [\n        //             [1591484400, \"0.02505349\", \"0.02506988\", \"0.02507000\", \"0.02505304\", \"343.19716223\", \"8.6021323866383196\", \"ETHBTC\"],\n        //             [1591484700, \"0.02506990\", \"0.02508109\", \"0.02508109\", \"0.02506979\", \"91.59841581\", \"2.2972047780447000\", \"ETHBTC\"],\n        //             [1591485000, \"0.02508106\", \"0.02507996\", \"0.02508106\", \"0.02507500\", \"65.15307697\", \"1.6340597822306000\", \"ETHBTC\"],\n        //         ],\n        //         \"message\": \"OK\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        return this.parseOHLCVs (data, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalanceInfo (params);\n        //\n        //     {\n        //       \"code\": 0,\n        //       \"data\": {\n        //         \"BCH\": {                     # BCH account\n        //           \"available\": \"13.60109\",   # Available BCH\n        //           \"frozen\": \"0.00000\"        # Frozen BCH\n        //         },\n        //         \"BTC\": {                     # BTC account\n        //           \"available\": \"32590.16\",   # Available BTC\n        //           \"frozen\": \"7000.00\"        # Frozen BTC\n        //         },\n        //         \"ETH\": {                     # ETH account\n        //           \"available\": \"5.06000\",    # Available ETH\n        //           \"frozen\": \"0.00000\"        # Frozen ETH\n        //         }\n        //       },\n        //       \"message\": \"Ok\"\n        //     }\n        //\n        const result = { 'info': response };\n        const balances = this.safeValue (response, 'data', {});\n        const currencyIds = Object.keys (balances);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const balance = this.safeValue (balances, currencyId, {});\n            const account = this.account ();\n            account['free'] = this.safeString (balance, 'available');\n            account['used'] = this.safeString (balance, 'frozen');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'not_deal': 'open',\n            'part_deal': 'open',\n            'done': 'closed',\n            'cancel': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // fetchOrder\n        //\n        //     {\n        //         \"amount\": \"0.1\",\n        //         \"asset_fee\": \"0.22736197736197736197\",\n        //         \"avg_price\": \"196.85000000000000000000\",\n        //         \"create_time\": 1537270135,\n        //         \"deal_amount\": \"0.1\",\n        //         \"deal_fee\": \"0\",\n        //         \"deal_money\": \"19.685\",\n        //         \"fee_asset\": \"CET\",\n        //         \"fee_discount\": \"0.5\",\n        //         \"id\": 1788259447,\n        //         \"left\": \"0\",\n        //         \"maker_fee_rate\": \"0\",\n        //         \"market\": \"ETHUSDT\",\n        //         \"order_type\": \"limit\",\n        //         \"price\": \"170.00000000\",\n        //         \"status\": \"done\",\n        //         \"taker_fee_rate\": \"0.0005\",\n        //         \"type\": \"sell\",\n        //     }\n        //\n        const timestamp = this.safeTimestamp (order, 'create_time');\n        const price = this.safeNumber (order, 'price');\n        const cost = this.safeNumber (order, 'deal_money');\n        const amount = this.safeNumber (order, 'amount');\n        const filled = this.safeNumber (order, 'deal_amount');\n        const average = this.safeNumber (order, 'avg_price');\n        let symbol = undefined;\n        const marketId = this.safeString (order, 'market');\n        market = this.safeMarket (marketId, market);\n        const feeCurrencyId = this.safeString (order, 'fee_asset');\n        let feeCurrency = this.safeCurrencyCode (feeCurrencyId);\n        if (market !== undefined) {\n            symbol = market['symbol'];\n            if (feeCurrency === undefined) {\n                feeCurrency = market['quote'];\n            }\n        }\n        const remaining = this.safeNumber (order, 'left');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const type = this.safeString (order, 'order_type');\n        const side = this.safeString (order, 'type');\n        return this.safeOrder ({\n            'id': this.safeString (order, 'id'),\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': {\n                'currency': feeCurrency,\n                'cost': this.safeNumber (order, 'deal_fee'),\n            },\n            'info': order,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const method = 'privatePostOrder' + this.capitalize (type);\n        const market = this.market (symbol);\n        const request = {\n            'market': market['id'],\n            'type': side,\n        };\n        amount = parseFloat (amount);\n        // for market buy it requires the amount of quote currency to spend\n        if ((type === 'market') && (side === 'buy')) {\n            if (this.options['createMarketBuyOrderRequiresPrice']) {\n                if (price === undefined) {\n                    throw new InvalidOrder (this.id + \" createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false to supply the cost in the amount argument (the exchange-specific behaviour)\");\n                } else {\n                    price = parseFloat (price);\n                    request['amount'] = this.costToPrecision (symbol, amount * price);\n                }\n            } else {\n                request['amount'] = this.costToPrecision (symbol, amount);\n            }\n        } else {\n            request['amount'] = this.amountToPrecision (symbol, amount);\n        }\n        if ((type === 'limit') || (type === 'ioc')) {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        const response = await this[method] (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': id,\n            'market': market['id'],\n        };\n        const response = await this.privateDeleteOrderPending (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data, market);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': id,\n            'market': market['id'],\n        };\n        const response = await this.privateGetOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": {\n        //             \"amount\": \"0.1\",\n        //             \"asset_fee\": \"0.22736197736197736197\",\n        //             \"avg_price\": \"196.85000000000000000000\",\n        //             \"create_time\": 1537270135,\n        //             \"deal_amount\": \"0.1\",\n        //             \"deal_fee\": \"0\",\n        //             \"deal_money\": \"19.685\",\n        //             \"fee_asset\": \"CET\",\n        //             \"fee_discount\": \"0.5\",\n        //             \"id\": 1788259447,\n        //             \"left\": \"0\",\n        //             \"maker_fee_rate\": \"0\",\n        //             \"market\": \"ETHUSDT\",\n        //             \"order_type\": \"limit\",\n        //             \"price\": \"170.00000000\",\n        //             \"status\": \"done\",\n        //             \"taker_fee_rate\": \"0.0005\",\n        //             \"type\": \"sell\",\n        //         },\n        //         \"message\": \"Ok\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data, market);\n    }\n\n    async fetchOrdersByStatus (status, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (limit === undefined) {\n            limit = 100;\n        }\n        const request = {\n            'page': 1,\n            'limit': limit,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market'] = market['id'];\n        }\n        const method = 'privateGetOrder' + this.capitalize (status);\n        const response = await this[method] (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        const orders = this.safeValue (data, 'data', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByStatus ('pending', symbol, since, limit, params);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersByStatus ('finished', symbol, since, limit, params);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (limit === undefined) {\n            limit = 100;\n        }\n        const request = {\n            'page': 1,\n            'limit': limit,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['market'] = market['id'];\n        }\n        const response = await this.privateGetOrderUserDeals (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        const trades = this.safeValue (data, 'data', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (tag) {\n            address = address + ':' + tag;\n        }\n        const request = {\n            'coin_type': currency['id'],\n            'coin_address': address, // must be authorized, inter-user transfer by a registered mobile phone number or an email address is supported\n            'actual_amount': parseFloat (amount), // the actual amount without fees, https://www.coinex.com/fees\n            'transfer_method': 'onchain', // onchain, local\n        };\n        const response = await this.privatePostBalanceCoinWithdraw (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": {\n        //             \"actual_amount\": \"1.00000000\",\n        //             \"amount\": \"1.00000000\",\n        //             \"coin_address\": \"1KAv3pazbTk2JnQ5xTo6fpKK7p1it2RzD4\",\n        //             \"coin_type\": \"BCH\",\n        //             \"coin_withdraw_id\": 206,\n        //             \"confirmations\": 0,\n        //             \"create_time\": 1524228297,\n        //             \"status\": \"audit\",\n        //             \"tx_fee\": \"0\",\n        //             \"tx_id\": \"\"\n        //         },\n        //         \"message\": \"Ok\"\n        //     }\n        //\n        const transaction = this.safeValue (response, 'data', {});\n        return this.parseTransaction (transaction, currency);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'audit': 'pending',\n            'pass': 'pending',\n            'processing': 'pending',\n            'confirming': 'pending',\n            'not_pass': 'failed',\n            'cancel': 'canceled',\n            'finish': 'ok',\n            'fail': 'failed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"actual_amount\": \"120.00000000\",\n        //         \"actual_amount_display\": \"120\",\n        //         \"add_explorer\": \"XXX\",\n        //         \"amount\": \"120.00000000\",\n        //         \"amount_display\": \"120\",\n        //         \"coin_address\": \"XXXXXXXX\",\n        //         \"coin_address_display\": \"XXXXXXXX\",\n        //         \"coin_deposit_id\": 1866,\n        //         \"coin_type\": \"USDT\",\n        //         \"confirmations\": 0,\n        //         \"create_time\": 1539595701,\n        //         \"explorer\": \"\",\n        //         \"remark\": \"\",\n        //         \"status\": \"finish\",\n        //         \"status_display\": \"finish\",\n        //         \"transfer_method\": \"local\",\n        //         \"tx_id\": \"\",\n        //         \"tx_id_display\": \"XXXXXXXXXX\"\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"actual_amount\": \"0.10000000\",\n        //         \"amount\": \"0.10000000\",\n        //         \"coin_address\": \"15sr1VdyXQ6sVLqeJUJ1uPzLpmQtgUeBSB\",\n        //         \"coin_type\": \"BCH\",\n        //         \"coin_withdraw_id\": 203,\n        //         \"confirmations\": 11,\n        //         \"create_time\": 1515806440,\n        //         \"status\": \"finish\",\n        //         \"tx_fee\": \"0\",\n        //         \"tx_id\": \"896371d0e23d64d1cac65a0b7c9e9093d835affb572fec89dd4547277fbdd2f6\"\n        //     }\n        //\n        const id = this.safeString2 (transaction, 'coin_withdraw_id', 'coin_deposit_id');\n        const address = this.safeString (transaction, 'coin_address');\n        let tag = this.safeString (transaction, 'remark'); // set but unused\n        if (tag !== undefined) {\n            if (tag.length < 1) {\n                tag = undefined;\n            }\n        }\n        let txid = this.safeValue (transaction, 'tx_id');\n        if (txid !== undefined) {\n            if (txid.length < 1) {\n                txid = undefined;\n            }\n        }\n        const currencyId = this.safeString (transaction, 'coin_type');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const timestamp = this.safeTimestamp (transaction, 'create_time');\n        const type = ('coin_withdraw_id' in transaction) ? 'withdraw' : 'deposit';\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        let amount = this.safeNumber (transaction, 'amount');\n        let feeCost = this.safeNumber (transaction, 'tx_fee');\n        if (type === 'deposit') {\n            feeCost = 0;\n        }\n        const fee = {\n            'cost': feeCost,\n            'currency': code,\n        };\n        // https://github.com/ccxt/ccxt/issues/8321\n        if (amount !== undefined) {\n            amount = amount - feeCost;\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'tag': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'fee': fee,\n        };\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchWithdrawals() requires a currency code argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coin_type': currency['id'],\n        };\n        if (limit !== undefined) {\n            request['Limit'] = limit;\n        }\n        const response = await this.privateGetBalanceCoinWithdraw (this.extend (request, params));\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"data\": {\n        //             \"has_next\": true,\n        //             \"curr_page\": 1,\n        //             \"count\": 10,\n        //             \"data\": [\n        //                 {\n        //                     \"coin_withdraw_id\": 203,\n        //                     \"create_time\": 1513933541,\n        //                     \"actual_amount\": \"0.00100000\",\n        //                     \"actual_amount_display\": \"***\",\n        //                     \"amount\": \"0.00100000\",\n        //                     \"amount_display\": \"******\",\n        //                     \"coin_address\": \"1GVVx5UBddLKrckTprNi4VhHSymeQ8tsLF\",\n        //                     \"app_coin_address_display\": \"**********\",\n        //                     \"coin_address_display\": \"****************\",\n        //                     \"add_explorer\": \"https://explorer.viawallet.com/btc/address/1GVVx5UBddLKrckTprNi4VhHSymeQ8tsLF\",\n        //                     \"coin_type\": \"BTC\",\n        //                     \"confirmations\": 6,\n        //                     \"explorer\": \"https://explorer.viawallet.com/btc/tx/1GVVx5UBddLKrckTprNi4VhHSymeQ8tsLF\",\n        //                     \"fee\": \"0\",\n        //                     \"remark\": \"\",\n        //                     \"smart_contract_name\": \"BTC\",\n        //                     \"status\": \"finish\",\n        //                     \"status_display\": \"finish\",\n        //                     \"transfer_method\": \"onchain\",\n        //                     \"tx_fee\": \"0\",\n        //                     \"tx_id\": \"896371d0e23d64d1cac65a0b7c9e9093d835affb572fec89dd4547277fbdd2f6\"\n        //                 }, /* many more data points */\n        //             ],\n        //             \"total\": ***,\n        //             \"total_page\":***\n        //         },\n        //         \"message\": \"Success\"\n        //     }\n        //\n        let data = this.safeValue (response, 'data');\n        if (!Array.isArray (data)) {\n            data = this.safeValue (data, 'data', []);\n        }\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchDeposits() requires a currency code argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coin_type': currency['id'],\n        };\n        if (limit !== undefined) {\n            request['Limit'] = limit;\n        }\n        const response = await this.privateGetBalanceCoinDeposit (this.extend (request, params));\n        //     {\n        //         \"code\": 0,\n        //         \"data\": [\n        //             {\n        //                 \"actual_amount\": \"4.65397682\",\n        //                 \"actual_amount_display\": \"4.65397682\",\n        //                 \"add_explorer\": \"https://etherscan.io/address/0x361XXXXXX\",\n        //                 \"amount\": \"4.65397682\",\n        //                 \"amount_display\": \"4.65397682\",\n        //                 \"coin_address\": \"0x36dabcdXXXXXX\",\n        //                 \"coin_address_display\": \"0x361X*****XXXXX\",\n        //                 \"coin_deposit_id\": 966191,\n        //                 \"coin_type\": \"ETH\",\n        //                 \"confirmations\": 30,\n        //                 \"create_time\": 1531661445,\n        //                 \"explorer\": \"https://etherscan.io/tx/0x361XXXXXX\",\n        //                 \"remark\": \"\",\n        //                 \"status\": \"finish\",\n        //                 \"status_display\": \"finish\",\n        //                 \"transfer_method\": \"onchain\",\n        //                 \"tx_id\": \"0x361XXXXXX\",\n        //                 \"tx_id_display\": \"0x361XXXXXX\"\n        //             }\n        //         ],\n        //         \"message\": \"Ok\"\n        //     }\n        //\n        let data = this.safeValue (response, 'data');\n        if (!Array.isArray (data)) {\n            data = this.safeValue (data, 'data', []);\n        }\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        path = this.implodeParams (path, params);\n        let url = this.urls['api'] + '/' + this.version + '/' + path;\n        let query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ();\n            query = this.extend ({\n                'access_id': this.apiKey,\n                'tonce': nonce.toString (),\n            }, query);\n            query = this.keysort (query);\n            const urlencoded = this.rawencode (query);\n            const signature = this.hash (this.encode (urlencoded + '&secret_key=' + this.secret));\n            headers = {\n                'Authorization': signature.toUpperCase (),\n                'Content-Type': 'application/json',\n            };\n            if ((method === 'GET') || (method === 'DELETE')) {\n                url += '?' + urlencoded;\n            } else {\n                body = this.json (query);\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        const code = this.safeString (response, 'code');\n        const data = this.safeValue (response, 'data');\n        const message = this.safeString (response, 'message');\n        if ((code !== '0') || (data === undefined) || ((message !== 'Success') && (message !== 'Ok') && !data)) {\n            const responseCodes = {\n                '24': AuthenticationError,\n                '25': AuthenticationError,\n                '107': InsufficientFunds,\n                '600': OrderNotFound,\n                '601': InvalidOrder,\n                '602': InvalidOrder,\n                '606': InvalidOrder,\n            };\n            const ErrorClass = this.safeValue (responseCodes, code, ExchangeError);\n            throw new ErrorClass (response['message']);\n        }\n        return response;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}