{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  BadRequest,\n  OrderNotFound,\n  InvalidAddress\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class therock extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'therock',\n      'name': 'TheRockTrading',\n      'countries': ['MT'],\n      'rateLimit': 1000,\n      'version': 'v1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchDeposits': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchTransactions': 'emulated',\n        'fetchWithdrawals': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg',\n        'api': 'https://api.therocktrading.com',\n        'www': 'https://therocktrading.com',\n        'doc': ['https://api.therocktrading.com/doc/v1/index.html', 'https://api.therocktrading.com/doc/']\n      },\n      'api': {\n        'public': {\n          'get': ['funds', 'funds/{id}/orderbook', 'funds/{id}/ticker', 'funds/{id}/trades', 'funds/tickers']\n        },\n        'private': {\n          'get': ['balances', 'balances/{id}', 'discounts', 'discounts/{id}', 'funds', 'funds/{id}', 'funds/{id}/trades', 'funds/{fund_id}/orders', 'funds/{fund_id}/orders/{id}', 'funds/{fund_id}/position_balances', 'funds/{fund_id}/positions', 'funds/{fund_id}/positions/{id}', 'transactions', 'transactions/{id}', 'withdraw_limits/{id}', 'withdraw_limits'],\n          'post': ['atms/withdraw', 'funds/{fund_id}/orders'],\n          'delete': ['funds/{fund_id}/orders/{id}', 'funds/{fund_id}/orders/remove_all']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.2 / 100,\n          'taker': 0.2 / 100\n        },\n        'funding': {\n          'tierBased': false,\n          'percentage': false,\n          'withdraw': {\n            'BTC': 0.0005,\n            'BCH': 0.0005,\n            'PPC': 0.02,\n            'ETH': 0.001,\n            'ZEC': 0.001,\n            'LTC': 0.002,\n            'EUR': 2.5 // worst-case scenario: https://therocktrading.com/en/pages/fees\n\n          },\n          'deposit': {\n            'BTC': 0,\n            'BCH': 0,\n            'PPC': 0,\n            'ETH': 0,\n            'ZEC': 0,\n            'LTC': 0,\n            'EUR': 0\n          }\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'Request already running': BadRequest,\n          'cannot specify multiple address types': BadRequest,\n          'Currency is not included in the list': BadRequest,\n          'Record not found': OrderNotFound\n        },\n        'broad': {\n          'before must be greater than after param': BadRequest,\n          'must be shorter than 60 days': BadRequest,\n          'must be a multiple of (period param) in minutes': BadRequest,\n          'Address allocation limit reached for currency': InvalidAddress,\n          'is not a valid value for param currency': BadRequest,\n          ' is invalid': InvalidAddress\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetFunds(params); //\n    //     { funds: [ {                      id:   \"BTCEUR\",\n    //                              description:   \"Trade Bitcoin with Euro\",\n    //                                     type:   \"currency\",\n    //                            base_currency:   \"EUR\",\n    //                           trade_currency:   \"BTC\",\n    //                                  buy_fee:    0.2,\n    //                                 sell_fee:    0.2,\n    //                      minimum_price_offer:    0.01,\n    //                   minimum_quantity_offer:    0.0005,\n    //                   base_currency_decimals:    2,\n    //                  trade_currency_decimals:    4,\n    //                                leverages: []                           },\n    //                {                      id:   \"LTCEUR\",\n    //                              description:   \"Trade Litecoin with Euro\",\n    //                                     type:   \"currency\",\n    //                            base_currency:   \"EUR\",\n    //                           trade_currency:   \"LTC\",\n    //                                  buy_fee:    0.2,\n    //                                 sell_fee:    0.2,\n    //                      minimum_price_offer:    0.01,\n    //                   minimum_quantity_offer:    0.01,\n    //                   base_currency_decimals:    2,\n    //                  trade_currency_decimals:    2,\n    //                                leverages: []                            } ] }\n    //\n\n    const markets = this.safeValue(response, 'funds');\n    const result = [];\n\n    if (markets === undefined) {\n      throw new ExchangeError(this.id + ' fetchMarkets got an unexpected response');\n    } else {\n      for (let i = 0; i < markets.length; i++) {\n        const market = markets[i];\n        const id = this.safeString(market, 'id');\n        const baseId = this.safeString(market, 'trade_currency');\n        const quoteId = this.safeString(market, 'base_currency');\n        const base = this.safeCurrencyCode(baseId);\n        const quote = this.safeCurrencyCode(quoteId);\n        const symbol = base + '/' + quote;\n        const buy_fee = this.safeNumber(market, 'buy_fee');\n        const sell_fee = this.safeNumber(market, 'sell_fee');\n        let taker = Math.max(buy_fee, sell_fee);\n        taker = taker / 100;\n        const maker = taker;\n        result.push({\n          'id': id,\n          'symbol': symbol,\n          'base': base,\n          'quote': quote,\n          'baseId': baseId,\n          'quoteId': quoteId,\n          'info': market,\n          'active': true,\n          'maker': maker,\n          'taker': taker,\n          'precision': {\n            'amount': this.safeInteger(market, 'trade_currency_decimals'),\n            'price': this.safeInteger(market, 'base_currency_decimals')\n          },\n          'limits': {\n            'amount': {\n              'min': this.safeNumber(market, 'minimum_quantity_offer'),\n              'max': undefined\n            },\n            'price': {\n              'min': this.safeNumber(market, 'minimum_price_offer'),\n              'max': undefined\n            },\n            'cost': {\n              'min': undefined,\n              'max': undefined\n            }\n          }\n        });\n      }\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetBalances(params);\n    const balances = this.safeValue(response, 'balances', []);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['free'] = this.safeString(balance, 'trading_balance');\n      account['total'] = this.safeString(balance, 'balance');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': this.marketId(symbol)\n    };\n    const orderbook = await this.publicGetFundsIdOrderbook(this.extend(request, params));\n    const timestamp = this.parse8601(this.safeString(orderbook, 'date'));\n    return this.parseOrderBook(orderbook, symbol, timestamp, 'bids', 'asks', 'price', 'amount');\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.parse8601(ticker['date']);\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const last = this.safeNumber(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': this.safeNumber(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': this.safeNumber(ticker, 'close'),\n      // previous day close, if any\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeNumber(ticker, 'volume_traded'),\n      'quoteVolume': this.safeNumber(ticker, 'volume'),\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetFundsTickers(params);\n    const tickers = this.indexBy(response['tickers'], 'fund_id');\n    const ids = Object.keys(tickers);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = this.safeMarket(id);\n      const symbol = market['symbol'];\n      const ticker = tickers[id];\n      result[symbol] = this.parseTicker(ticker, market);\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const ticker = await this.publicGetFundsIdTicker(this.extend({\n      'id': market['id']\n    }, params));\n    return this.parseTicker(ticker, market);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades, fetchOrder trades\n    //\n    //     {      id:  4493548,\n    //       fund_id: \"ETHBTC\",\n    //        amount:  0.203,\n    //         price:  0.02783576,\n    //          side: \"buy\",\n    //          dark:  false,\n    //          date: \"2018-11-30T08:19:18.236Z\" }\n    //\n    // fetchMyTrades\n    //\n    //     {           id:    237338,\n    //            fund_id:   \"BTCEUR\",\n    //             amount:    0.348,\n    //              price:    348,\n    //               side:   \"sell\",\n    //               dark:    false,\n    //           order_id:    14920648,\n    //               date:   \"2015-06-03T00:49:49.000Z\",\n    //       transactions: [ {       id:  2770768,\n    //                             date: \"2015-06-03T00:49:49.000Z\",\n    //                             type: \"sold_currency_to_fund\",\n    //                            price:  121.1,\n    //                         currency: \"EUR\"                       },\n    //                       {       id:  2770769,\n    //                             date: \"2015-06-03T00:49:49.000Z\",\n    //                             type: \"released_currency_to_fund\",\n    //                            price:  0.348,\n    //                         currency: \"BTC\"                        },\n    //                       {       id:  2770772,\n    //                             date: \"2015-06-03T00:49:49.000Z\",\n    //                             type: \"paid_commission\",\n    //                            price:  0.06,\n    //                         currency: \"EUR\",\n    //                         trade_id:  440492                     }   ] }\n    //\n    const marketId = this.safeString(trade, 'fund_id');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.parse8601(this.safeString(trade, 'date'));\n    const id = this.safeString(trade, 'id');\n    const orderId = this.safeString(trade, 'order_id');\n    const side = this.safeString(trade, 'side');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'amount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    let fee = undefined;\n    let feeCost = undefined;\n    const transactions = this.safeValue(trade, 'transactions', []);\n    const transactionsByType = this.groupBy(transactions, 'type');\n    const feeTransactions = this.safeValue(transactionsByType, 'paid_commission', []);\n\n    for (let i = 0; i < feeTransactions.length; i++) {\n      if (feeCost === undefined) {\n        feeCost = 0;\n      }\n\n      feeCost = this.sum(feeCost, this.safeNumber(feeTransactions[i], 'price'));\n    }\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': market['quote']\n      };\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'order': orderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  parseLedgerEntryDirection(direction) {\n    const directions = {\n      'affiliate_earnings': 'in',\n      'atm_payment': 'in',\n      'bought_currency_from_fund': 'out',\n      'bought_shares': 'out',\n      'paid_commission': 'out',\n      'paypal_payment': 'in',\n      'pos_payment': 'in',\n      'released_currency_to_fund': 'out',\n      'rollover_commission': 'out',\n      'sold_currency_to_fund': 'in',\n      'sold_shares': 'in',\n      'transfer_received': 'in',\n      'transfer_sent': 'out',\n      'withdraw': 'out' // commented types will be shown as-is\n      // 'acquired_currency_from_fund': '',\n      // 'acquired_insurance': '',\n      // 'dividend_distributed_to_holders': '',\n      // 'dividend_from_shares': '',\n      // 'exposed_position': '',\n      // 'insurances_reimbursement': '',\n      // 'lent_currency': '',\n      // 'linden_lab_assessment': '',\n      // 'position_transfer_received': '',\n      // 'return_lent_currency': '',\n      // 'returned_lent_currency': '',\n      // 'the_rock_assessment': '',\n\n    };\n    return this.safeString(directions, direction, direction);\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'affiliate_earnings': 'referral',\n      'atm_payment': 'transaction',\n      'bought_currency_from_fund': 'trade',\n      'bought_shares': 'trade',\n      'paid_commission': 'fee',\n      'paypal_payment': 'transaction',\n      'pos_payment': 'transaction',\n      'released_currency_to_fund': 'trade',\n      'rollover_commission': 'fee',\n      'sold_currency_to_fund': 'trade',\n      'sold_shares': 'trade',\n      'transfer_received': 'transfer',\n      'transfer_sent': 'transfer',\n      'withdraw': 'transaction' // commented types will be shown as-is\n      // 'acquired_currency_from_fund': '',\n      // 'acquired_insurance': '',\n      // 'dividend_distributed_to_holders': '',\n      // 'dividend_from_shares': '',\n      // 'exposed_position': '',\n      // 'insurances_reimbursement': '',\n      // 'lent_currency': '',\n      // 'linden_lab_assessment': '',\n      // 'position_transfer_received': '',\n      // 'return_lent_currency': '',\n      // 'returned_lent_currency': '',\n      // 'the_rock_assessment': '',\n\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    // withdrawal\n    //\n    //     {\n    //         \"id\": 21311223,\n    //         \"date\": \"2015-06-30T13:55:11.000Z\",\n    //         \"type\": \"withdraw\",\n    //         \"price\": 103.00,\n    //         \"currency\": \"EUR\",\n    //         \"fund_id\": null,\n    //         \"order_id\": null,\n    //         \"trade_id\": null,\n    //         \"transfer_detail\": {\n    //             \"method\": \"wire_transfer\",\n    //             \"id\": \"F112DD3\",\n    //             \"recipient\": \"IT123456789012\",\n    //             \"confirmations\": 0\n    //         }\n    //     }\n    //\n    // deposit\n    //\n    //     {\n    //         \"id\": 21311222,\n    //         \"date\": \"2015-06-30T13:55:11.000Z\",\n    //         \"type\": \"atm_payment\",\n    //         \"price\": 2.01291,\n    //         \"currency\": \"BTC\",\n    //         \"fund_id\": \"null\",\n    //         \"order_id\": null,\n    //         \"trade_id\": null,\n    //         \"transfer_detail\": {\n    //             \"method\": \"bitcoin\",\n    //             \"id\": \"0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098\",\n    //             \"recipient\": \"mzb3NgX9Dr6jgGAu31L6jsPGB2zkaFxxyf\",\n    //             \"confirmations\": 3\n    //         }\n    //     }\n    //\n    // trade fee\n    //\n    //     {\n    //         \"id\": 21311221,\n    //         \"date\": \"2015-06-30T13:55:11.000Z\",\n    //         \"type\": \"paid_commission\",\n    //         \"price\": 0.0001,\n    //         \"fund_id\": \"BTCEUR\",\n    //         \"order_id\": 12832371,\n    //         \"trade_id\": 12923212,\n    //         \"currency\": \"BTC\",\n    //         \"transfer_detail\": null\n    //     }\n    //\n    const id = this.safeString(item, 'id');\n    let referenceId = undefined;\n    let type = this.safeString(item, 'type');\n    const direction = this.parseLedgerEntryDirection(type);\n    type = this.parseLedgerEntryType(type);\n\n    if (type === 'trade' || type === 'fee') {\n      referenceId = this.safeString(item, 'trade_id');\n    }\n\n    const currencyId = this.safeString(item, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    const amount = this.safeNumber(item, 'price');\n    const timestamp = this.parse8601(this.safeString(item, 'date'));\n    const status = 'ok';\n    return {\n      'info': item,\n      'id': id,\n      'direction': direction,\n      'account': undefined,\n      'referenceId': referenceId,\n      'referenceAccount': undefined,\n      'type': type,\n      'currency': code,\n      'amount': amount,\n      'before': undefined,\n      'after': undefined,\n      'status': status,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': undefined\n    };\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'page': 1,\n      // 'fund_id': 'ETHBTC', // filter by fund symbol\n      // 'currency': 'BTC', // filter by currency\n      // 'after': '2015-02-06T08:47:26Z', // filter after a certain timestamp\n      // 'before': '2015-02-06T08:47:26Z',\n      // 'type': 'withdraw',\n      // 'order_id': '12832371', // filter by a specific order ID\n      // 'trade_id': '12923212', // filter by a specific trade ID\n      // 'transfer_method': 'bitcoin', // wire_transfer, ripple, greenaddress, bitcoin, litecoin, namecoin, peercoin, dogecoin\n      // 'transfer_recipient': '1MAHLhJoz9W2ydbRf972WSgJYJ3Ui7aotm', // filter by a specific recipient (e.g. Bitcoin address, IBAN)\n      // 'transfer_id': '8261949194985b01985006724dca5d6059989e096fa95608271d00dd902327fa', // filter by a specific transfer ID (e.g. Bitcoin TX hash)\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['after'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetTransactions(this.extend(request, params)); //\n    //     {\n    //         \"transactions\": [\n    //             {\n    //                 \"id\": 21311223,\n    //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n    //                 \"type\": \"withdraw\",\n    //                 \"price\": 103.00,\n    //                 \"currency\": \"EUR\",\n    //                 \"fund_id\": null,\n    //                 \"order_id\": null,\n    //                 \"trade_id\": null,\n    //                 \"transfer_detail\": {\n    //                     \"method\": \"wire_transfer\",\n    //                     \"id\": \"F112DD3\",\n    //                     \"recipient\": \"IT123456789012\",\n    //                     \"confirmations\": 0\n    //                 }\n    //             },\n    //             {\n    //                 \"id\": 21311222,\n    //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n    //                 \"type\": \"atm_payment\",\n    //                 \"price\": 2.01291,\n    //                 \"currency\": \"BTC\",\n    //                 \"fund_id\": \"null\",\n    //                 \"order_id\": null,\n    //                 \"trade_id\": null,\n    //                 \"transfer_detail\": {\n    //                     \"method\": \"bitcoin\",\n    //                     \"id\": \"0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098\",\n    //                     \"recipient\": \"mzb3NgX9Dr6jgGAu31L6jsPGB2zkaFxxyf\",\n    //                     \"confirmations\": 3\n    //                 }\n    //             },\n    //             {\n    //                 \"id\": 21311221,\n    //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n    //                 \"type\": \"paid_commission\",\n    //                 \"price\": 0.0001,\n    //                 \"fund_id\": \"BTCEUR\",\n    //                 \"order_id\": 12832371,\n    //                 \"trade_id\": 12923212,\n    //                 \"currency\": \"BTC\",\n    //                 \"transfer_detail\": null\n    //             }\n    //         ],\n    //         \"meta\": {\n    //             \"total_count\": 1221,\n    //             \"first\": { \"page\": 1, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1\" },\n    //             \"previous\": null,\n    //             \"current\": { \"page\": 1, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1\" },\n    //             \"next\": { \"page\": 2, \"href\": \"https://api.therocktrading.com/v1/transactions?page=2\" },\n    //             \"last\": { \"page\": 1221, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1221\" }\n    //         }\n    //     }\n    //\n\n    const transactions = this.safeValue(response, 'transactions', []);\n    return this.parseLedger(transactions, currency, since, limit);\n  }\n\n  parseTransactionType(type) {\n    const types = {\n      'withdraw': 'withdrawal',\n      'atm_payment': 'deposit'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchWithdrawals\n    //\n    //     // fiat\n    //\n    //     {\n    //         \"id\": 21311223,\n    //         \"date\": \"2015-06-30T13:55:11.000Z\",\n    //         \"type\": \"withdraw\",\n    //         \"price\": 103.00,\n    //         \"currency\": \"EUR\",\n    //         \"fund_id\": null,\n    //         \"order_id\": null,\n    //         \"trade_id\": null,\n    //         \"transfer_detail\": {\n    //             \"method\": \"wire_transfer\",\n    //             \"id\": \"F112DD3\",\n    //             \"recipient\": \"IT123456789012\",\n    //             \"confirmations\": 0\n    //         }\n    //     }\n    //\n    //     {\n    //         \"id\": 12564223,\n    //         \"date\": \"2017-08-07T08:13:50.023Z\",\n    //         \"note\": \"GB7IDL401573388\",\n    //         \"type\": \"withdraw\",\n    //         \"price\": 4345.93,\n    //         \"fund_id\": null,\n    //         \"currency\": \"EUR\",\n    //         \"order_id\": null,\n    //         \"trade_id\": null,\n    //         \"transfer_detail\": {\n    //             \"id\": \"EXECUTEDBUTUNCHECKED\",\n    //             \"method\": \"wire_transfer\",\n    //             \"recipient\": \"GB7IDL401573388\",\n    //             \"confirmations\": 0\n    //         }\n    //     }\n    //\n    //     // crypto\n    //\n    //     {\n    //         id: 20914695,\n    //         date: '2018-02-24T07:13:23.002Z',\n    //         type: 'withdraw',\n    //         price: 2.70883607,\n    //         currency: 'BCH',\n    //         fund_id: null,\n    //         order_id: null,\n    //         trade_id: null,\n    //         note: '1MAHLhJoz9W2ydbRf972WSgJYJ3Ui7aotm',\n    //         transfer_detail: {\n    //             method: 'bitcoin_cash',\n    //             id: '8261949194985b01985006724dca5d6059989e096fa95608271d00dd902327fa',\n    //             recipient: '1MAHLhJoz9W2ydbRf972WSgJYJ3Ui7aotm',\n    //             confirmations: 0\n    //         }\n    //     }\n    //\n    //\n    // fetchDeposits\n    //\n    //     // fiat\n    //\n    //     {\n    //         id: 16176632,\n    //         date: '2017-11-20T21:00:13.355Z',\n    //         type: 'atm_payment',\n    //         price: 5000,\n    //         currency: 'EUR',\n    //         fund_id: null,\n    //         order_id: null,\n    //         trade_id: null,\n    //         note: 'Mistral deposit',\n    //         transfer_detail: {\n    //             method: 'wire_transfer',\n    //             id: '972JQ49337DX769T',\n    //             recipient: null,\n    //             confirmations: 0\n    //         }\n    //     }\n    //\n    //     // crypto\n    //\n    //     {\n    //         \"id\": 21311222,\n    //         \"date\": \"2015-06-30T13:55:11.000Z\",\n    //         \"type\": \"atm_payment\",\n    //         \"price\": 2.01291,\n    //         \"currency\": \"BTC\",\n    //         \"fund_id\": \"null\",\n    //         \"order_id\": null,\n    //         \"trade_id\": null,\n    //         \"transfer_detail\": {\n    //             \"method\": \"bitcoin\",\n    //             \"id\": \"0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098\",\n    //             \"recipient\": \"mzb3NgX9Dr6jgGAu31L6jsPGB2zkaFxxyf\",\n    //             \"confirmations\": 3\n    //         }\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const type = this.parseTransactionType(this.safeString(transaction, 'type'));\n    const detail = this.safeValue(transaction, 'transfer_detail', {});\n    const method = this.safeString(detail, 'method');\n    let txid = undefined;\n    let address = undefined;\n\n    if (method !== undefined) {\n      if (method !== 'wire_transfer') {\n        txid = this.safeString(detail, 'id');\n        address = this.safeString(detail, 'recipient');\n      }\n    }\n\n    const currencyId = this.safeString(transaction, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    const amount = this.safeNumber(transaction, 'price');\n    const timestamp = this.parse8601(this.safeString(transaction, 'date'));\n    const status = 'ok'; // todo parse tags\n\n    return {\n      'info': transaction,\n      'id': id,\n      'currency': code,\n      'amount': amount,\n      'addressFrom': undefined,\n      'addressTo': address,\n      'address': address,\n      'tagFrom': undefined,\n      'tagTo': undefined,\n      'tag': undefined,\n      'status': status,\n      'type': type,\n      'updated': undefined,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': undefined\n    };\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'type': 'withdraw'\n    };\n    return await this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'type': 'atm_payment'\n    };\n    return await this.fetchTransactions(code, since, limit, this.extend(request, params));\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'page': 1,\n      // 'fund_id': 'ETHBTC', // filter by fund symbol\n      // 'currency': 'BTC', // filter by currency\n      // 'after': '2015-02-06T08:47:26Z', // filter after a certain timestamp\n      // 'before': '2015-02-06T08:47:26Z',\n      // 'type': 'withdraw',\n      // 'order_id': '12832371', // filter by a specific order ID\n      // 'trade_id': '12923212', // filter by a specific trade ID\n      // 'transfer_method': 'bitcoin', // wire_transfer, ripple, greenaddress, bitcoin, litecoin, namecoin, peercoin, dogecoin\n      // 'transfer_recipient': '1MAHLhJoz9W2ydbRf972WSgJYJ3Ui7aotm', // filter by a specific recipient (e.g. Bitcoin address, IBAN)\n      // 'transfer_id': '8261949194985b01985006724dca5d6059989e096fa95608271d00dd902327fa', // filter by a specific transfer ID (e.g. Bitcoin TX hash)\n    };\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n    }\n\n    if (since !== undefined) {\n      request['after'] = this.iso8601(since);\n    }\n\n    params = this.extend(request, params);\n    const response = await this.privateGetTransactions(params); //\n    //     {\n    //         \"transactions\": [\n    //             {\n    //                 \"id\": 21311223,\n    //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n    //                 \"type\": \"withdraw\",\n    //                 \"price\": 103.00,\n    //                 \"currency\": \"EUR\",\n    //                 \"fund_id\": null,\n    //                 \"order_id\": null,\n    //                 \"trade_id\": null,\n    //                 \"transfer_detail\": {\n    //                     \"method\": \"wire_transfer\",\n    //                     \"id\": \"F112DD3\",\n    //                     \"recipient\": \"IT123456789012\",\n    //                     \"confirmations\": 0\n    //                 }\n    //             },\n    //             {\n    //                 \"id\": 21311222,\n    //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n    //                 \"type\": \"atm_payment\",\n    //                 \"price\": 2.01291,\n    //                 \"currency\": \"BTC\",\n    //                 \"fund_id\": \"null\",\n    //                 \"order_id\": null,\n    //                 \"trade_id\": null,\n    //                 \"transfer_detail\": {\n    //                     \"method\": \"bitcoin\",\n    //                     \"id\": \"0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098\",\n    //                     \"recipient\": \"mzb3NgX9Dr6jgGAu31L6jsPGB2zkaFxxyf\",\n    //                     \"confirmations\": 3\n    //                 }\n    //             },\n    //             {\n    //                 \"id\": 21311221,\n    //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n    //                 \"type\": \"paid_commission\",\n    //                 \"price\": 0.0001,\n    //                 \"fund_id\": \"BTCEUR\",\n    //                 \"order_id\": 12832371,\n    //                 \"trade_id\": 12923212,\n    //                 \"currency\": \"BTC\",\n    //                 \"transfer_detail\": null\n    //             }\n    //         ],\n    //         \"meta\": {\n    //             \"total_count\": 1221,\n    //             \"first\": { \"page\": 1, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1\" },\n    //             \"previous\": null,\n    //             \"current\": { \"page\": 1, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1\" },\n    //             \"next\": { \"page\": 2, \"href\": \"https://api.therocktrading.com/v1/transactions?page=2\" },\n    //             \"last\": { \"page\": 1221, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1221\" }\n    //         }\n    //     }\n    //\n\n    const transactions = this.safeValue(response, 'transactions', []);\n    const transactionTypes = ['withdraw', 'atm_payment'];\n    const depositsAndWithdrawals = this.filterByArray(transactions, 'type', transactionTypes, false);\n    return this.parseTransactions(depositsAndWithdrawals, currency, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'active': 'open',\n      'executed': 'closed',\n      'deleted': 'canceled' // don't know what this status means\n      // 'conditional': '?',\n\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"id\": 4325578,\n    //         \"fund_id\":\"BTCEUR\",\n    //         \"side\":\"buy\",\n    //         \"type\":\"limit\",\n    //         \"status\":\"executed\",\n    //         \"price\":0.0102,\n    //         \"amount\": 50.0,\n    //         \"amount_unfilled\": 0.0,\n    //         \"conditional_type\": null,\n    //         \"conditional_price\": null,\n    //         \"date\":\"2015-06-03T00:49:48.000Z\",\n    //         \"close_on\": nil,\n    //         \"leverage\": 1.0,\n    //         \"position_id\": null,\n    //         \"trades\": [\n    //             {\n    //                 \"id\":237338,\n    //                 \"fund_id\":\"BTCEUR\",\n    //                 \"amount\":50,\n    //                 \"price\":0.0102,\n    //                 \"side\":\"buy\",\n    //                 \"dark\":false,\n    //                 \"date\":\"2015-06-03T00:49:49.000Z\"\n    //             }\n    //         ]\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const marketId = this.safeString(order, 'fund_id');\n    const symbol = this.safeSymbol(marketId, market);\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    const timestamp = this.parse8601(this.safeString(order, 'date'));\n    const type = this.safeString(order, 'type');\n    const side = this.safeString(order, 'side');\n    const amount = this.safeNumber(order, 'amount');\n    const remaining = this.safeNumber(order, 'amount_unfilled');\n    let filled = undefined;\n\n    if (amount !== undefined) {\n      if (remaining !== undefined) {\n        filled = amount - remaining;\n      }\n    }\n\n    const price = this.safeNumber(order, 'price');\n    let trades = this.safeValue(order, 'trades');\n    let cost = undefined;\n    let average = undefined;\n    let lastTradeTimestamp = undefined;\n\n    if (trades !== undefined) {\n      const numTrades = trades.length;\n\n      if (numTrades > 0) {\n        trades = this.parseTrades(trades, market, undefined, undefined, {\n          'orderId': id\n        }); // todo: determine the cost and the average price from trades\n\n        cost = 0;\n        filled = 0;\n\n        for (let i = 0; i < numTrades; i++) {\n          const trade = trades[i];\n          cost = this.sum(cost, trade['cost']);\n          filled = this.sum(filled, trade['amount']);\n        }\n\n        if (filled > 0) {\n          average = cost / filled;\n        }\n\n        lastTradeTimestamp = trades[numTrades - 1]['timestamp'];\n      } else {\n        cost = 0;\n      }\n    }\n\n    const stopPrice = this.safeNumber(order, 'conditional_price');\n    return {\n      'id': id,\n      'clientOrderId': undefined,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'average': average,\n      'remaining': remaining,\n      'fee': undefined,\n      'trades': trades\n    };\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'active'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const request = {\n      'status': 'executed'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'fund_id': market['id'] // 'after': '2015-02-06T08:47:26Z',\n      // 'before': '2015-02-06T08:47:26Z'\n      // 'status': 'active', // 'executed', 'conditional'\n      // 'side': 'buy', // 'sell'\n      // 'position_id': 123, // filter orders by margin position id\n\n    };\n\n    if (since !== undefined) {\n      request['after'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetFundsFundIdOrders(this.extend(request, params)); //\n    //     {\n    //         orders: [\n    //             {\n    //                 id: 299333648,\n    //                 fund_id: 'BTCEUR',\n    //                 side: 'sell',\n    //                 type: 'limit',\n    //                 status: 'executed',\n    //                 price: 5821,\n    //                 amount: 0.1,\n    //                 amount_unfilled: 0,\n    //                 conditional_type: null,\n    //                 conditional_price: null,\n    //                 date: '2018-06-18T17:38:16.129Z',\n    //                 close_on: null,\n    //                 dark: false,\n    //                 leverage: 1,\n    //                 position_id: 0\n    //             }\n    //         ]\n    //     }\n    //\n\n    const orders = this.safeValue(response, 'orders', []);\n    return this.parseOrders(orders, market, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': id,\n      'fund_id': market['id']\n    };\n    const response = await this.privatePostFundsFundIdOrdersId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (type === 'market') {\n      price = 0;\n    }\n\n    const request = {\n      'fund_id': this.marketId(symbol),\n      'side': side,\n      'amount': amount,\n      'price': price\n    };\n    const response = await this.privatePostFundsFundIdOrders(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'id': id,\n      'fund_id': this.marketId(symbol)\n    };\n    const response = await this.privateDeleteFundsFundIdOrdersId(this.extend(request, params));\n    return this.parseOrder(response);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['per_page'] = limit; // default 25 max 200\n    }\n\n    if (since !== undefined) {\n      request['after'] = this.iso8601(since);\n    }\n\n    const response = await this.privateGetFundsIdTrades(this.extend(request, params)); //\n    //     { trades: [ {           id:    237338,\n    //                        fund_id:   \"BTCEUR\",\n    //                         amount:    0.348,\n    //                          price:    348,\n    //                           side:   \"sell\",\n    //                           dark:    false,\n    //                       order_id:    14920648,\n    //                           date:   \"2015-06-03T00:49:49.000Z\",\n    //                   transactions: [ {       id:  2770768,\n    //                                         date: \"2015-06-03T00:49:49.000Z\",\n    //                                         type: \"sold_currency_to_fund\",\n    //                                        price:  121.1,\n    //                                     currency: \"EUR\"                       },\n    //                                   {       id:  2770769,\n    //                                         date: \"2015-06-03T00:49:49.000Z\",\n    //                                         type: \"released_currency_to_fund\",\n    //                                        price:  0.348,\n    //                                     currency: \"BTC\"                        },\n    //                                   {       id:  2770772,\n    //                                         date: \"2015-06-03T00:49:49.000Z\",\n    //                                         type: \"paid_commission\",\n    //                                        price:  0.06,\n    //                                     currency: \"EUR\",\n    //                                     trade_id:  440492                     }   ] } ],\n    //         meta: { total_count:    31,\n    //                       first: { href: \"https://api.therocktrading.com/v1/funds/BTCXRP/trades?page=1\" },\n    //                    previous:    null,\n    //                     current: { href: \"https://api.therocktrading.com/v1/funds/BTCXRP/trades?page=1\" },\n    //                        next: { href: \"https://api.therocktrading.com/v1/funds/BTCXRP/trades?page=2\" },\n    //                        last: { href: \"https://api.therocktrading.com/v1/funds/BTCXRP/trades?page=2\" }  } }\n    //\n\n    return this.parseTrades(response['trades'], market, since, limit);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'id': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['per_page'] = limit; // default 25 max 200\n    }\n\n    if (since !== undefined) {\n      request['after'] = this.iso8601(since);\n    }\n\n    const response = await this.publicGetFundsIdTrades(this.extend(request, params)); //\n    //     { trades: [ {      id:  4493548,\n    //                   fund_id: \"ETHBTC\",\n    //                    amount:  0.203,\n    //                     price:  0.02783576,\n    //                      side: \"buy\",\n    //                      dark:  false,\n    //                      date: \"2018-11-30T08:19:18.236Z\" },\n    //                 {      id:  4492926,\n    //                   fund_id: \"ETHBTC\",\n    //                    amount:  0.04,\n    //                     price:  0.02767034,\n    //                      side: \"buy\",\n    //                      dark:  false,\n    //                      date: \"2018-11-30T07:03:03.897Z\" }  ],\n    //         meta: { total_count:    null,\n    //                       first: { page:  1,\n    //                                href: \"https://api.therocktrading.com/v1/funds/ETHBTC/trades?page=1\" },\n    //                    previous:    null,\n    //                     current: { page:  1,\n    //                                href: \"https://api.therocktrading.com/v1/funds/ETHBTC/trades?page=1\" },\n    //                        next: { page:  2,\n    //                                href: \"https://api.therocktrading.com/v1/funds/ETHBTC/trades?page=2\" },\n    //                        last:    null                                                                   } }\n    //\n\n    return this.parseTrades(response['trades'], market, since, limit);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n    headers = headers === undefined ? {} : headers;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n\n      if (Object.keys(query).length) {\n        if (method === 'POST') {\n          body = this.json(query);\n          headers['Content-Type'] = 'application/json';\n        } else {\n          const queryString = this.rawencode(query);\n\n          if (queryString.length) {\n            url += '?' + queryString;\n          }\n        }\n      }\n\n      const nonce = this.nonce().toString();\n      const auth = nonce + url;\n      headers['X-TRT-KEY'] = this.apiKey;\n      headers['X-TRT-NONCE'] = nonce;\n      headers['X-TRT-SIGN'] = this.hmac(this.encode(auth), this.encode(this.secret), 'sha512');\n    } else if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.rawencode(query);\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //     {\n    //         \"errors\":\n    //         [\n    //             { \"message\": \":currency is not a valid value for param currency\",\"code\": \"11\",\"meta\": { \"key\":\"currency\",\"value\":\":currency\"} },\n    //             { \"message\": \"Address allocation limit reached for currency :currency.\",\"code\": \"13\" },\n    //             { \"message\": \"Request already running\", \"code\": \"50\"},\n    //             { \"message\": \"cannot specify multiple address types\", \"code\": \"12\" },\n    //             { \"message\": \":address_type is invalid\", \"code\": \"12\" }\n    //         ]\n    //     }\n    //\n\n\n    const errors = this.safeValue(response, 'errors', []);\n    const numErrors = errors.length;\n\n    if (numErrors > 0) {\n      const feedback = this.id + ' ' + body; // here we throw the first error we can identify\n\n      for (let i = 0; i < numErrors; i++) {\n        const error = errors[i];\n        const message = this.safeString(error, 'message');\n        this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n        this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      }\n\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/therock.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","BadRequest","OrderNotFound","InvalidAddress","Precise","module","exports","therock","describe","deepExtend","fetchMarkets","params","response","publicGetFunds","markets","safeValue","result","undefined","id","i","length","market","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","buy_fee","safeNumber","sell_fee","taker","Math","max","maker","push","safeInteger","fetchBalance","loadMarkets","privateGetBalances","balances","balance","currencyId","code","account","parseBalance","fetchOrderBook","limit","request","marketId","orderbook","publicGetFundsIdOrderbook","extend","timestamp","parse8601","parseOrderBook","parseTicker","ticker","last","iso8601","fetchTickers","symbols","publicGetFundsTickers","tickers","indexBy","ids","Object","keys","safeMarket","filterByArray","fetchTicker","publicGetFundsIdTicker","parseTrade","trade","safeSymbol","orderId","side","priceString","amountString","price","parseNumber","amount","cost","stringMul","fee","feeCost","transactions","transactionsByType","groupBy","feeTransactions","sum","parseLedgerEntryDirection","direction","directions","parseLedgerEntryType","type","types","parseLedgerEntry","item","currency","referenceId","status","fetchLedger","since","privateGetTransactions","parseLedger","parseTransactionType","parseTransaction","transaction","detail","method","txid","address","fetchWithdrawals","fetchTransactions","fetchDeposits","transactionTypes","depositsAndWithdrawals","parseTransactions","parseOrderStatus","statuses","parseOrder","order","remaining","filled","trades","average","lastTradeTimestamp","numTrades","parseTrades","stopPrice","fetchOpenOrders","fetchOrders","fetchClosedOrders","privateGetFundsFundIdOrders","orders","parseOrders","fetchOrder","privatePostFundsFundIdOrdersId","createOrder","privatePostFundsFundIdOrders","cancelOrder","privateDeleteFundsFundIdOrdersId","fetchMyTrades","privateGetFundsIdTrades","fetchTrades","publicGetFundsIdTrades","sign","path","api","headers","body","url","urls","version","implodeParams","query","omit","extractParams","checkRequiredCredentials","json","queryString","rawencode","nonce","toString","auth","apiKey","hmac","encode","secret","handleErrors","httpCode","reason","requestHeaders","requestBody","errors","numErrors","feedback","error","message","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, BadRequest, OrderNotFound, InvalidAddress } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class therock extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'therock',\n            'name': 'TheRockTrading',\n            'countries': [ 'MT' ],\n            'rateLimit': 1000,\n            'version': 'v1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchDeposits': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchTransactions': 'emulated',\n                'fetchWithdrawals': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg',\n                'api': 'https://api.therocktrading.com',\n                'www': 'https://therocktrading.com',\n                'doc': [\n                    'https://api.therocktrading.com/doc/v1/index.html',\n                    'https://api.therocktrading.com/doc/',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'funds',\n                        'funds/{id}/orderbook',\n                        'funds/{id}/ticker',\n                        'funds/{id}/trades',\n                        'funds/tickers',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'balances',\n                        'balances/{id}',\n                        'discounts',\n                        'discounts/{id}',\n                        'funds',\n                        'funds/{id}',\n                        'funds/{id}/trades',\n                        'funds/{fund_id}/orders',\n                        'funds/{fund_id}/orders/{id}',\n                        'funds/{fund_id}/position_balances',\n                        'funds/{fund_id}/positions',\n                        'funds/{fund_id}/positions/{id}',\n                        'transactions',\n                        'transactions/{id}',\n                        'withdraw_limits/{id}',\n                        'withdraw_limits',\n                    ],\n                    'post': [\n                        'atms/withdraw',\n                        'funds/{fund_id}/orders',\n                    ],\n                    'delete': [\n                        'funds/{fund_id}/orders/{id}',\n                        'funds/{fund_id}/orders/remove_all',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.0005,\n                        'BCH': 0.0005,\n                        'PPC': 0.02,\n                        'ETH': 0.001,\n                        'ZEC': 0.001,\n                        'LTC': 0.002,\n                        'EUR': 2.5,  // worst-case scenario: https://therocktrading.com/en/pages/fees\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'BCH': 0,\n                        'PPC': 0,\n                        'ETH': 0,\n                        'ZEC': 0,\n                        'LTC': 0,\n                        'EUR': 0,\n                    },\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'Request already running': BadRequest,\n                    'cannot specify multiple address types': BadRequest,\n                    'Currency is not included in the list': BadRequest,\n                    'Record not found': OrderNotFound,\n                },\n                'broad': {\n                    'before must be greater than after param': BadRequest,\n                    'must be shorter than 60 days': BadRequest,\n                    'must be a multiple of (period param) in minutes': BadRequest,\n                    'Address allocation limit reached for currency': InvalidAddress,\n                    'is not a valid value for param currency': BadRequest,\n                    ' is invalid': InvalidAddress,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetFunds (params);\n        //\n        //     { funds: [ {                      id:   \"BTCEUR\",\n        //                              description:   \"Trade Bitcoin with Euro\",\n        //                                     type:   \"currency\",\n        //                            base_currency:   \"EUR\",\n        //                           trade_currency:   \"BTC\",\n        //                                  buy_fee:    0.2,\n        //                                 sell_fee:    0.2,\n        //                      minimum_price_offer:    0.01,\n        //                   minimum_quantity_offer:    0.0005,\n        //                   base_currency_decimals:    2,\n        //                  trade_currency_decimals:    4,\n        //                                leverages: []                           },\n        //                {                      id:   \"LTCEUR\",\n        //                              description:   \"Trade Litecoin with Euro\",\n        //                                     type:   \"currency\",\n        //                            base_currency:   \"EUR\",\n        //                           trade_currency:   \"LTC\",\n        //                                  buy_fee:    0.2,\n        //                                 sell_fee:    0.2,\n        //                      minimum_price_offer:    0.01,\n        //                   minimum_quantity_offer:    0.01,\n        //                   base_currency_decimals:    2,\n        //                  trade_currency_decimals:    2,\n        //                                leverages: []                            } ] }\n        //\n        const markets = this.safeValue (response, 'funds');\n        const result = [];\n        if (markets === undefined) {\n            throw new ExchangeError (this.id + ' fetchMarkets got an unexpected response');\n        } else {\n            for (let i = 0; i < markets.length; i++) {\n                const market = markets[i];\n                const id = this.safeString (market, 'id');\n                const baseId = this.safeString (market, 'trade_currency');\n                const quoteId = this.safeString (market, 'base_currency');\n                const base = this.safeCurrencyCode (baseId);\n                const quote = this.safeCurrencyCode (quoteId);\n                const symbol = base + '/' + quote;\n                const buy_fee = this.safeNumber (market, 'buy_fee');\n                const sell_fee = this.safeNumber (market, 'sell_fee');\n                let taker = Math.max (buy_fee, sell_fee);\n                taker = taker / 100;\n                const maker = taker;\n                result.push ({\n                    'id': id,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'baseId': baseId,\n                    'quoteId': quoteId,\n                    'info': market,\n                    'active': true,\n                    'maker': maker,\n                    'taker': taker,\n                    'precision': {\n                        'amount': this.safeInteger (market, 'trade_currency_decimals'),\n                        'price': this.safeInteger (market, 'base_currency_decimals'),\n                    },\n                    'limits': {\n                        'amount': {\n                            'min': this.safeNumber (market, 'minimum_quantity_offer'),\n                            'max': undefined,\n                        },\n                        'price': {\n                            'min': this.safeNumber (market, 'minimum_price_offer'),\n                            'max': undefined,\n                        },\n                        'cost': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                    },\n                });\n            }\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetBalances (params);\n        const balances = this.safeValue (response, 'balances', []);\n        const result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['free'] = this.safeString (balance, 'trading_balance');\n            account['total'] = this.safeString (balance, 'balance');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': this.marketId (symbol),\n        };\n        const orderbook = await this.publicGetFundsIdOrderbook (this.extend (request, params));\n        const timestamp = this.parse8601 (this.safeString (orderbook, 'date'));\n        return this.parseOrderBook (orderbook, symbol, timestamp, 'bids', 'asks', 'price', 'amount');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.parse8601 (ticker['date']);\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const last = this.safeNumber (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': this.safeNumber (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': this.safeNumber (ticker, 'close'), // previous day close, if any\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeNumber (ticker, 'volume_traded'),\n            'quoteVolume': this.safeNumber (ticker, 'volume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetFundsTickers (params);\n        const tickers = this.indexBy (response['tickers'], 'fund_id');\n        const ids = Object.keys (tickers);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = this.safeMarket (id);\n            const symbol = market['symbol'];\n            const ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const ticker = await this.publicGetFundsIdTicker (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades, fetchOrder trades\n        //\n        //     {      id:  4493548,\n        //       fund_id: \"ETHBTC\",\n        //        amount:  0.203,\n        //         price:  0.02783576,\n        //          side: \"buy\",\n        //          dark:  false,\n        //          date: \"2018-11-30T08:19:18.236Z\" }\n        //\n        // fetchMyTrades\n        //\n        //     {           id:    237338,\n        //            fund_id:   \"BTCEUR\",\n        //             amount:    0.348,\n        //              price:    348,\n        //               side:   \"sell\",\n        //               dark:    false,\n        //           order_id:    14920648,\n        //               date:   \"2015-06-03T00:49:49.000Z\",\n        //       transactions: [ {       id:  2770768,\n        //                             date: \"2015-06-03T00:49:49.000Z\",\n        //                             type: \"sold_currency_to_fund\",\n        //                            price:  121.1,\n        //                         currency: \"EUR\"                       },\n        //                       {       id:  2770769,\n        //                             date: \"2015-06-03T00:49:49.000Z\",\n        //                             type: \"released_currency_to_fund\",\n        //                            price:  0.348,\n        //                         currency: \"BTC\"                        },\n        //                       {       id:  2770772,\n        //                             date: \"2015-06-03T00:49:49.000Z\",\n        //                             type: \"paid_commission\",\n        //                            price:  0.06,\n        //                         currency: \"EUR\",\n        //                         trade_id:  440492                     }   ] }\n        //\n        const marketId = this.safeString (trade, 'fund_id');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.parse8601 (this.safeString (trade, 'date'));\n        const id = this.safeString (trade, 'id');\n        const orderId = this.safeString (trade, 'order_id');\n        const side = this.safeString (trade, 'side');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'amount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        let fee = undefined;\n        let feeCost = undefined;\n        const transactions = this.safeValue (trade, 'transactions', []);\n        const transactionsByType = this.groupBy (transactions, 'type');\n        const feeTransactions = this.safeValue (transactionsByType, 'paid_commission', []);\n        for (let i = 0; i < feeTransactions.length; i++) {\n            if (feeCost === undefined) {\n                feeCost = 0;\n            }\n            feeCost = this.sum (feeCost, this.safeNumber (feeTransactions[i], 'price'));\n        }\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': market['quote'],\n            };\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    parseLedgerEntryDirection (direction) {\n        const directions = {\n            'affiliate_earnings': 'in',\n            'atm_payment': 'in',\n            'bought_currency_from_fund': 'out',\n            'bought_shares': 'out',\n            'paid_commission': 'out',\n            'paypal_payment': 'in',\n            'pos_payment': 'in',\n            'released_currency_to_fund': 'out',\n            'rollover_commission': 'out',\n            'sold_currency_to_fund': 'in',\n            'sold_shares': 'in',\n            'transfer_received': 'in',\n            'transfer_sent': 'out',\n            'withdraw': 'out',\n            // commented types will be shown as-is\n            // 'acquired_currency_from_fund': '',\n            // 'acquired_insurance': '',\n            // 'dividend_distributed_to_holders': '',\n            // 'dividend_from_shares': '',\n            // 'exposed_position': '',\n            // 'insurances_reimbursement': '',\n            // 'lent_currency': '',\n            // 'linden_lab_assessment': '',\n            // 'position_transfer_received': '',\n            // 'return_lent_currency': '',\n            // 'returned_lent_currency': '',\n            // 'the_rock_assessment': '',\n        };\n        return this.safeString (directions, direction, direction);\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'affiliate_earnings': 'referral',\n            'atm_payment': 'transaction',\n            'bought_currency_from_fund': 'trade',\n            'bought_shares': 'trade',\n            'paid_commission': 'fee',\n            'paypal_payment': 'transaction',\n            'pos_payment': 'transaction',\n            'released_currency_to_fund': 'trade',\n            'rollover_commission': 'fee',\n            'sold_currency_to_fund': 'trade',\n            'sold_shares': 'trade',\n            'transfer_received': 'transfer',\n            'transfer_sent': 'transfer',\n            'withdraw': 'transaction',\n            // commented types will be shown as-is\n            // 'acquired_currency_from_fund': '',\n            // 'acquired_insurance': '',\n            // 'dividend_distributed_to_holders': '',\n            // 'dividend_from_shares': '',\n            // 'exposed_position': '',\n            // 'insurances_reimbursement': '',\n            // 'lent_currency': '',\n            // 'linden_lab_assessment': '',\n            // 'position_transfer_received': '',\n            // 'return_lent_currency': '',\n            // 'returned_lent_currency': '',\n            // 'the_rock_assessment': '',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        // withdrawal\n        //\n        //     {\n        //         \"id\": 21311223,\n        //         \"date\": \"2015-06-30T13:55:11.000Z\",\n        //         \"type\": \"withdraw\",\n        //         \"price\": 103.00,\n        //         \"currency\": \"EUR\",\n        //         \"fund_id\": null,\n        //         \"order_id\": null,\n        //         \"trade_id\": null,\n        //         \"transfer_detail\": {\n        //             \"method\": \"wire_transfer\",\n        //             \"id\": \"F112DD3\",\n        //             \"recipient\": \"IT123456789012\",\n        //             \"confirmations\": 0\n        //         }\n        //     }\n        //\n        // deposit\n        //\n        //     {\n        //         \"id\": 21311222,\n        //         \"date\": \"2015-06-30T13:55:11.000Z\",\n        //         \"type\": \"atm_payment\",\n        //         \"price\": 2.01291,\n        //         \"currency\": \"BTC\",\n        //         \"fund_id\": \"null\",\n        //         \"order_id\": null,\n        //         \"trade_id\": null,\n        //         \"transfer_detail\": {\n        //             \"method\": \"bitcoin\",\n        //             \"id\": \"0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098\",\n        //             \"recipient\": \"mzb3NgX9Dr6jgGAu31L6jsPGB2zkaFxxyf\",\n        //             \"confirmations\": 3\n        //         }\n        //     }\n        //\n        // trade fee\n        //\n        //     {\n        //         \"id\": 21311221,\n        //         \"date\": \"2015-06-30T13:55:11.000Z\",\n        //         \"type\": \"paid_commission\",\n        //         \"price\": 0.0001,\n        //         \"fund_id\": \"BTCEUR\",\n        //         \"order_id\": 12832371,\n        //         \"trade_id\": 12923212,\n        //         \"currency\": \"BTC\",\n        //         \"transfer_detail\": null\n        //     }\n        //\n        const id = this.safeString (item, 'id');\n        let referenceId = undefined;\n        let type = this.safeString (item, 'type');\n        const direction = this.parseLedgerEntryDirection (type);\n        type = this.parseLedgerEntryType (type);\n        if (type === 'trade' || type === 'fee') {\n            referenceId = this.safeString (item, 'trade_id');\n        }\n        const currencyId = this.safeString (item, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        const amount = this.safeNumber (item, 'price');\n        const timestamp = this.parse8601 (this.safeString (item, 'date'));\n        const status = 'ok';\n        return {\n            'info': item,\n            'id': id,\n            'direction': direction,\n            'account': undefined,\n            'referenceId': referenceId,\n            'referenceAccount': undefined,\n            'type': type,\n            'currency': code,\n            'amount': amount,\n            'before': undefined,\n            'after': undefined,\n            'status': status,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': undefined,\n        };\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'page': 1,\n            // 'fund_id': 'ETHBTC', // filter by fund symbol\n            // 'currency': 'BTC', // filter by currency\n            // 'after': '2015-02-06T08:47:26Z', // filter after a certain timestamp\n            // 'before': '2015-02-06T08:47:26Z',\n            // 'type': 'withdraw',\n            // 'order_id': '12832371', // filter by a specific order ID\n            // 'trade_id': '12923212', // filter by a specific trade ID\n            // 'transfer_method': 'bitcoin', // wire_transfer, ripple, greenaddress, bitcoin, litecoin, namecoin, peercoin, dogecoin\n            // 'transfer_recipient': '1MAHLhJoz9W2ydbRf972WSgJYJ3Ui7aotm', // filter by a specific recipient (e.g. Bitcoin address, IBAN)\n            // 'transfer_id': '8261949194985b01985006724dca5d6059989e096fa95608271d00dd902327fa', // filter by a specific transfer ID (e.g. Bitcoin TX hash)\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['after'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetTransactions (this.extend (request, params));\n        //\n        //     {\n        //         \"transactions\": [\n        //             {\n        //                 \"id\": 21311223,\n        //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n        //                 \"type\": \"withdraw\",\n        //                 \"price\": 103.00,\n        //                 \"currency\": \"EUR\",\n        //                 \"fund_id\": null,\n        //                 \"order_id\": null,\n        //                 \"trade_id\": null,\n        //                 \"transfer_detail\": {\n        //                     \"method\": \"wire_transfer\",\n        //                     \"id\": \"F112DD3\",\n        //                     \"recipient\": \"IT123456789012\",\n        //                     \"confirmations\": 0\n        //                 }\n        //             },\n        //             {\n        //                 \"id\": 21311222,\n        //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n        //                 \"type\": \"atm_payment\",\n        //                 \"price\": 2.01291,\n        //                 \"currency\": \"BTC\",\n        //                 \"fund_id\": \"null\",\n        //                 \"order_id\": null,\n        //                 \"trade_id\": null,\n        //                 \"transfer_detail\": {\n        //                     \"method\": \"bitcoin\",\n        //                     \"id\": \"0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098\",\n        //                     \"recipient\": \"mzb3NgX9Dr6jgGAu31L6jsPGB2zkaFxxyf\",\n        //                     \"confirmations\": 3\n        //                 }\n        //             },\n        //             {\n        //                 \"id\": 21311221,\n        //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n        //                 \"type\": \"paid_commission\",\n        //                 \"price\": 0.0001,\n        //                 \"fund_id\": \"BTCEUR\",\n        //                 \"order_id\": 12832371,\n        //                 \"trade_id\": 12923212,\n        //                 \"currency\": \"BTC\",\n        //                 \"transfer_detail\": null\n        //             }\n        //         ],\n        //         \"meta\": {\n        //             \"total_count\": 1221,\n        //             \"first\": { \"page\": 1, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1\" },\n        //             \"previous\": null,\n        //             \"current\": { \"page\": 1, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1\" },\n        //             \"next\": { \"page\": 2, \"href\": \"https://api.therocktrading.com/v1/transactions?page=2\" },\n        //             \"last\": { \"page\": 1221, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1221\" }\n        //         }\n        //     }\n        //\n        const transactions = this.safeValue (response, 'transactions', []);\n        return this.parseLedger (transactions, currency, since, limit);\n    }\n\n    parseTransactionType (type) {\n        const types = {\n            'withdraw': 'withdrawal',\n            'atm_payment': 'deposit',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchWithdrawals\n        //\n        //     // fiat\n        //\n        //     {\n        //         \"id\": 21311223,\n        //         \"date\": \"2015-06-30T13:55:11.000Z\",\n        //         \"type\": \"withdraw\",\n        //         \"price\": 103.00,\n        //         \"currency\": \"EUR\",\n        //         \"fund_id\": null,\n        //         \"order_id\": null,\n        //         \"trade_id\": null,\n        //         \"transfer_detail\": {\n        //             \"method\": \"wire_transfer\",\n        //             \"id\": \"F112DD3\",\n        //             \"recipient\": \"IT123456789012\",\n        //             \"confirmations\": 0\n        //         }\n        //     }\n        //\n        //     {\n        //         \"id\": 12564223,\n        //         \"date\": \"2017-08-07T08:13:50.023Z\",\n        //         \"note\": \"GB7IDL401573388\",\n        //         \"type\": \"withdraw\",\n        //         \"price\": 4345.93,\n        //         \"fund_id\": null,\n        //         \"currency\": \"EUR\",\n        //         \"order_id\": null,\n        //         \"trade_id\": null,\n        //         \"transfer_detail\": {\n        //             \"id\": \"EXECUTEDBUTUNCHECKED\",\n        //             \"method\": \"wire_transfer\",\n        //             \"recipient\": \"GB7IDL401573388\",\n        //             \"confirmations\": 0\n        //         }\n        //     }\n        //\n        //     // crypto\n        //\n        //     {\n        //         id: 20914695,\n        //         date: '2018-02-24T07:13:23.002Z',\n        //         type: 'withdraw',\n        //         price: 2.70883607,\n        //         currency: 'BCH',\n        //         fund_id: null,\n        //         order_id: null,\n        //         trade_id: null,\n        //         note: '1MAHLhJoz9W2ydbRf972WSgJYJ3Ui7aotm',\n        //         transfer_detail: {\n        //             method: 'bitcoin_cash',\n        //             id: '8261949194985b01985006724dca5d6059989e096fa95608271d00dd902327fa',\n        //             recipient: '1MAHLhJoz9W2ydbRf972WSgJYJ3Ui7aotm',\n        //             confirmations: 0\n        //         }\n        //     }\n        //\n        //\n        // fetchDeposits\n        //\n        //     // fiat\n        //\n        //     {\n        //         id: 16176632,\n        //         date: '2017-11-20T21:00:13.355Z',\n        //         type: 'atm_payment',\n        //         price: 5000,\n        //         currency: 'EUR',\n        //         fund_id: null,\n        //         order_id: null,\n        //         trade_id: null,\n        //         note: 'Mistral deposit',\n        //         transfer_detail: {\n        //             method: 'wire_transfer',\n        //             id: '972JQ49337DX769T',\n        //             recipient: null,\n        //             confirmations: 0\n        //         }\n        //     }\n        //\n        //     // crypto\n        //\n        //     {\n        //         \"id\": 21311222,\n        //         \"date\": \"2015-06-30T13:55:11.000Z\",\n        //         \"type\": \"atm_payment\",\n        //         \"price\": 2.01291,\n        //         \"currency\": \"BTC\",\n        //         \"fund_id\": \"null\",\n        //         \"order_id\": null,\n        //         \"trade_id\": null,\n        //         \"transfer_detail\": {\n        //             \"method\": \"bitcoin\",\n        //             \"id\": \"0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098\",\n        //             \"recipient\": \"mzb3NgX9Dr6jgGAu31L6jsPGB2zkaFxxyf\",\n        //             \"confirmations\": 3\n        //         }\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const type = this.parseTransactionType (this.safeString (transaction, 'type'));\n        const detail = this.safeValue (transaction, 'transfer_detail', {});\n        const method = this.safeString (detail, 'method');\n        let txid = undefined;\n        let address = undefined;\n        if (method !== undefined) {\n            if (method !== 'wire_transfer') {\n                txid = this.safeString (detail, 'id');\n                address = this.safeString (detail, 'recipient');\n            }\n        }\n        const currencyId = this.safeString (transaction, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        const amount = this.safeNumber (transaction, 'price');\n        const timestamp = this.parse8601 (this.safeString (transaction, 'date'));\n        const status = 'ok';\n        // todo parse tags\n        return {\n            'info': transaction,\n            'id': id,\n            'currency': code,\n            'amount': amount,\n            'addressFrom': undefined,\n            'addressTo': address,\n            'address': address,\n            'tagFrom': undefined,\n            'tagTo': undefined,\n            'tag': undefined,\n            'status': status,\n            'type': type,\n            'updated': undefined,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': undefined,\n        };\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'type': 'withdraw',\n        };\n        return await this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'type': 'atm_payment',\n        };\n        return await this.fetchTransactions (code, since, limit, this.extend (request, params));\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'page': 1,\n            // 'fund_id': 'ETHBTC', // filter by fund symbol\n            // 'currency': 'BTC', // filter by currency\n            // 'after': '2015-02-06T08:47:26Z', // filter after a certain timestamp\n            // 'before': '2015-02-06T08:47:26Z',\n            // 'type': 'withdraw',\n            // 'order_id': '12832371', // filter by a specific order ID\n            // 'trade_id': '12923212', // filter by a specific trade ID\n            // 'transfer_method': 'bitcoin', // wire_transfer, ripple, greenaddress, bitcoin, litecoin, namecoin, peercoin, dogecoin\n            // 'transfer_recipient': '1MAHLhJoz9W2ydbRf972WSgJYJ3Ui7aotm', // filter by a specific recipient (e.g. Bitcoin address, IBAN)\n            // 'transfer_id': '8261949194985b01985006724dca5d6059989e096fa95608271d00dd902327fa', // filter by a specific transfer ID (e.g. Bitcoin TX hash)\n        };\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n        }\n        if (since !== undefined) {\n            request['after'] = this.iso8601 (since);\n        }\n        params = this.extend (request, params);\n        const response = await this.privateGetTransactions (params);\n        //\n        //     {\n        //         \"transactions\": [\n        //             {\n        //                 \"id\": 21311223,\n        //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n        //                 \"type\": \"withdraw\",\n        //                 \"price\": 103.00,\n        //                 \"currency\": \"EUR\",\n        //                 \"fund_id\": null,\n        //                 \"order_id\": null,\n        //                 \"trade_id\": null,\n        //                 \"transfer_detail\": {\n        //                     \"method\": \"wire_transfer\",\n        //                     \"id\": \"F112DD3\",\n        //                     \"recipient\": \"IT123456789012\",\n        //                     \"confirmations\": 0\n        //                 }\n        //             },\n        //             {\n        //                 \"id\": 21311222,\n        //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n        //                 \"type\": \"atm_payment\",\n        //                 \"price\": 2.01291,\n        //                 \"currency\": \"BTC\",\n        //                 \"fund_id\": \"null\",\n        //                 \"order_id\": null,\n        //                 \"trade_id\": null,\n        //                 \"transfer_detail\": {\n        //                     \"method\": \"bitcoin\",\n        //                     \"id\": \"0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098\",\n        //                     \"recipient\": \"mzb3NgX9Dr6jgGAu31L6jsPGB2zkaFxxyf\",\n        //                     \"confirmations\": 3\n        //                 }\n        //             },\n        //             {\n        //                 \"id\": 21311221,\n        //                 \"date\": \"2015-06-30T13:55:11.000Z\",\n        //                 \"type\": \"paid_commission\",\n        //                 \"price\": 0.0001,\n        //                 \"fund_id\": \"BTCEUR\",\n        //                 \"order_id\": 12832371,\n        //                 \"trade_id\": 12923212,\n        //                 \"currency\": \"BTC\",\n        //                 \"transfer_detail\": null\n        //             }\n        //         ],\n        //         \"meta\": {\n        //             \"total_count\": 1221,\n        //             \"first\": { \"page\": 1, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1\" },\n        //             \"previous\": null,\n        //             \"current\": { \"page\": 1, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1\" },\n        //             \"next\": { \"page\": 2, \"href\": \"https://api.therocktrading.com/v1/transactions?page=2\" },\n        //             \"last\": { \"page\": 1221, \"href\": \"https://api.therocktrading.com/v1/transactions?page=1221\" }\n        //         }\n        //     }\n        //\n        const transactions = this.safeValue (response, 'transactions', []);\n        const transactionTypes = [ 'withdraw', 'atm_payment' ];\n        const depositsAndWithdrawals = this.filterByArray (transactions, 'type', transactionTypes, false);\n        return this.parseTransactions (depositsAndWithdrawals, currency, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'active': 'open',\n            'executed': 'closed',\n            'deleted': 'canceled',\n            // don't know what this status means\n            // 'conditional': '?',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"id\": 4325578,\n        //         \"fund_id\":\"BTCEUR\",\n        //         \"side\":\"buy\",\n        //         \"type\":\"limit\",\n        //         \"status\":\"executed\",\n        //         \"price\":0.0102,\n        //         \"amount\": 50.0,\n        //         \"amount_unfilled\": 0.0,\n        //         \"conditional_type\": null,\n        //         \"conditional_price\": null,\n        //         \"date\":\"2015-06-03T00:49:48.000Z\",\n        //         \"close_on\": nil,\n        //         \"leverage\": 1.0,\n        //         \"position_id\": null,\n        //         \"trades\": [\n        //             {\n        //                 \"id\":237338,\n        //                 \"fund_id\":\"BTCEUR\",\n        //                 \"amount\":50,\n        //                 \"price\":0.0102,\n        //                 \"side\":\"buy\",\n        //                 \"dark\":false,\n        //                 \"date\":\"2015-06-03T00:49:49.000Z\"\n        //             }\n        //         ]\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const marketId = this.safeString (order, 'fund_id');\n        const symbol = this.safeSymbol (marketId, market);\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        const timestamp = this.parse8601 (this.safeString (order, 'date'));\n        const type = this.safeString (order, 'type');\n        const side = this.safeString (order, 'side');\n        const amount = this.safeNumber (order, 'amount');\n        const remaining = this.safeNumber (order, 'amount_unfilled');\n        let filled = undefined;\n        if (amount !== undefined) {\n            if (remaining !== undefined) {\n                filled = amount - remaining;\n            }\n        }\n        const price = this.safeNumber (order, 'price');\n        let trades = this.safeValue (order, 'trades');\n        let cost = undefined;\n        let average = undefined;\n        let lastTradeTimestamp = undefined;\n        if (trades !== undefined) {\n            const numTrades = trades.length;\n            if (numTrades > 0) {\n                trades = this.parseTrades (trades, market, undefined, undefined, {\n                    'orderId': id,\n                });\n                // todo: determine the cost and the average price from trades\n                cost = 0;\n                filled = 0;\n                for (let i = 0; i < numTrades; i++) {\n                    const trade = trades[i];\n                    cost = this.sum (cost, trade['cost']);\n                    filled = this.sum (filled, trade['amount']);\n                }\n                if (filled > 0) {\n                    average = cost / filled;\n                }\n                lastTradeTimestamp = trades[numTrades - 1]['timestamp'];\n            } else {\n                cost = 0;\n            }\n        }\n        const stopPrice = this.safeNumber (order, 'conditional_price');\n        return {\n            'id': id,\n            'clientOrderId': undefined,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'average': average,\n            'remaining': remaining,\n            'fee': undefined,\n            'trades': trades,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'active',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const request = {\n            'status': 'executed',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'fund_id': market['id'],\n            // 'after': '2015-02-06T08:47:26Z',\n            // 'before': '2015-02-06T08:47:26Z'\n            // 'status': 'active', // 'executed', 'conditional'\n            // 'side': 'buy', // 'sell'\n            // 'position_id': 123, // filter orders by margin position id\n        };\n        if (since !== undefined) {\n            request['after'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetFundsFundIdOrders (this.extend (request, params));\n        //\n        //     {\n        //         orders: [\n        //             {\n        //                 id: 299333648,\n        //                 fund_id: 'BTCEUR',\n        //                 side: 'sell',\n        //                 type: 'limit',\n        //                 status: 'executed',\n        //                 price: 5821,\n        //                 amount: 0.1,\n        //                 amount_unfilled: 0,\n        //                 conditional_type: null,\n        //                 conditional_price: null,\n        //                 date: '2018-06-18T17:38:16.129Z',\n        //                 close_on: null,\n        //                 dark: false,\n        //                 leverage: 1,\n        //                 position_id: 0\n        //             }\n        //         ]\n        //     }\n        //\n        const orders = this.safeValue (response, 'orders', []);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': id,\n            'fund_id': market['id'],\n        };\n        const response = await this.privatePostFundsFundIdOrdersId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type === 'market') {\n            price = 0;\n        }\n        const request = {\n            'fund_id': this.marketId (symbol),\n            'side': side,\n            'amount': amount,\n            'price': price,\n        };\n        const response = await this.privatePostFundsFundIdOrders (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'id': id,\n            'fund_id': this.marketId (symbol),\n        };\n        const response = await this.privateDeleteFundsFundIdOrdersId (this.extend (request, params));\n        return this.parseOrder (response);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n        };\n        if (limit !== undefined) {\n            request['per_page'] = limit; // default 25 max 200\n        }\n        if (since !== undefined) {\n            request['after'] = this.iso8601 (since);\n        }\n        const response = await this.privateGetFundsIdTrades (this.extend (request, params));\n        //\n        //     { trades: [ {           id:    237338,\n        //                        fund_id:   \"BTCEUR\",\n        //                         amount:    0.348,\n        //                          price:    348,\n        //                           side:   \"sell\",\n        //                           dark:    false,\n        //                       order_id:    14920648,\n        //                           date:   \"2015-06-03T00:49:49.000Z\",\n        //                   transactions: [ {       id:  2770768,\n        //                                         date: \"2015-06-03T00:49:49.000Z\",\n        //                                         type: \"sold_currency_to_fund\",\n        //                                        price:  121.1,\n        //                                     currency: \"EUR\"                       },\n        //                                   {       id:  2770769,\n        //                                         date: \"2015-06-03T00:49:49.000Z\",\n        //                                         type: \"released_currency_to_fund\",\n        //                                        price:  0.348,\n        //                                     currency: \"BTC\"                        },\n        //                                   {       id:  2770772,\n        //                                         date: \"2015-06-03T00:49:49.000Z\",\n        //                                         type: \"paid_commission\",\n        //                                        price:  0.06,\n        //                                     currency: \"EUR\",\n        //                                     trade_id:  440492                     }   ] } ],\n        //         meta: { total_count:    31,\n        //                       first: { href: \"https://api.therocktrading.com/v1/funds/BTCXRP/trades?page=1\" },\n        //                    previous:    null,\n        //                     current: { href: \"https://api.therocktrading.com/v1/funds/BTCXRP/trades?page=1\" },\n        //                        next: { href: \"https://api.therocktrading.com/v1/funds/BTCXRP/trades?page=2\" },\n        //                        last: { href: \"https://api.therocktrading.com/v1/funds/BTCXRP/trades?page=2\" }  } }\n        //\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'id': market['id'],\n        };\n        if (limit !== undefined) {\n            request['per_page'] = limit; // default 25 max 200\n        }\n        if (since !== undefined) {\n            request['after'] = this.iso8601 (since);\n        }\n        const response = await this.publicGetFundsIdTrades (this.extend (request, params));\n        //\n        //     { trades: [ {      id:  4493548,\n        //                   fund_id: \"ETHBTC\",\n        //                    amount:  0.203,\n        //                     price:  0.02783576,\n        //                      side: \"buy\",\n        //                      dark:  false,\n        //                      date: \"2018-11-30T08:19:18.236Z\" },\n        //                 {      id:  4492926,\n        //                   fund_id: \"ETHBTC\",\n        //                    amount:  0.04,\n        //                     price:  0.02767034,\n        //                      side: \"buy\",\n        //                      dark:  false,\n        //                      date: \"2018-11-30T07:03:03.897Z\" }  ],\n        //         meta: { total_count:    null,\n        //                       first: { page:  1,\n        //                                href: \"https://api.therocktrading.com/v1/funds/ETHBTC/trades?page=1\" },\n        //                    previous:    null,\n        //                     current: { page:  1,\n        //                                href: \"https://api.therocktrading.com/v1/funds/ETHBTC/trades?page=1\" },\n        //                        next: { page:  2,\n        //                                href: \"https://api.therocktrading.com/v1/funds/ETHBTC/trades?page=2\" },\n        //                        last:    null                                                                   } }\n        //\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        headers = (headers === undefined) ? {} : headers;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            if (Object.keys (query).length) {\n                if (method === 'POST') {\n                    body = this.json (query);\n                    headers['Content-Type'] = 'application/json';\n                } else {\n                    const queryString = this.rawencode (query);\n                    if (queryString.length) {\n                        url += '?' + queryString;\n                    }\n                }\n            }\n            const nonce = this.nonce ().toString ();\n            const auth = nonce + url;\n            headers['X-TRT-KEY'] = this.apiKey;\n            headers['X-TRT-NONCE'] = nonce;\n            headers['X-TRT-SIGN'] = this.hmac (this.encode (auth), this.encode (this.secret), 'sha512');\n        } else if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.rawencode (query);\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //     {\n        //         \"errors\":\n        //         [\n        //             { \"message\": \":currency is not a valid value for param currency\",\"code\": \"11\",\"meta\": { \"key\":\"currency\",\"value\":\":currency\"} },\n        //             { \"message\": \"Address allocation limit reached for currency :currency.\",\"code\": \"13\" },\n        //             { \"message\": \"Request already running\", \"code\": \"50\"},\n        //             { \"message\": \"cannot specify multiple address types\", \"code\": \"12\" },\n        //             { \"message\": \":address_type is invalid\", \"code\": \"12\" }\n        //         ]\n        //     }\n        //\n        const errors = this.safeValue (response, 'errors', []);\n        const numErrors = errors.length;\n        if (numErrors > 0) {\n            const feedback = this.id + ' ' + body;\n            // here we throw the first error we can identify\n            for (let i = 0; i < numErrors; i++) {\n                const error = errors[i];\n                const message = this.safeString (error, 'message');\n                this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n                this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            }\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}