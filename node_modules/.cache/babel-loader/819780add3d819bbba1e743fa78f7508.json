{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  AuthenticationError,\n  InsufficientFunds,\n  BadSymbol,\n  OrderNotFound\n} = require('./base/errors');\n\nconst {\n  TICK_SIZE\n} = require('./base/functions/number');\n\nconst Precise = require('./base/Precise'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class ndax extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'ndax',\n      'name': 'NDAX',\n      'countries': ['US'],\n      // United States\n      'rateLimit': 1000,\n      'pro': true,\n      'has': {\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createDepositAddress': true,\n        'createOrder': true,\n        'editOrder': true,\n        'fetchAccounts': true,\n        'fetchBalance': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchLedger': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrderTrades': true,\n        'fetchTicker': true,\n        'fetchTrades': true\n      },\n      'timeframes': {\n        '1m': '60',\n        '5m': '300',\n        '15m': '900',\n        '30m': '1800',\n        '1h': '3600',\n        '2h': '7200',\n        '4h': '14400',\n        '6h': '21600',\n        '12h': '43200',\n        '1d': '86400',\n        '1w': '604800',\n        '1M': '2419200',\n        '4M': '9676800'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/108623144-67a3ef00-744e-11eb-8140-75c6b851e945.jpg',\n        'test': {\n          'public': 'https://ndaxmarginstaging.cdnhop.net:8443/AP',\n          'private': 'https://ndaxmarginstaging.cdnhop.net:8443/AP'\n        },\n        'api': {\n          'public': 'https://api.ndax.io:8443/AP',\n          'private': 'https://api.ndax.io:8443/AP'\n        },\n        'www': 'https://ndax.io',\n        'doc': ['https://apidoc.ndax.io/'],\n        'fees': 'https://ndax.io/fees',\n        'referral': 'https://one.ndax.io/bfQiSL'\n      },\n      'api': {\n        'public': {\n          'get': ['Activate2FA', 'Authenticate2FA', 'AuthenticateUser', 'GetL2Snapshot', 'GetLevel1', 'GetValidate2FARequiredEndpoints', 'LogOut', 'GetTickerHistory', 'GetProduct', 'GetProducts', 'GetInstrument', 'GetInstruments', 'Ping', 'trades', // undocumented\n          'GetLastTrades', // undocumented\n          'SubscribeLevel1', 'SubscribeLevel2', 'SubscribeTicker', 'SubscribeTrades', 'SubscribeBlockTrades', 'UnsubscribeBlockTrades', 'UnsubscribeLevel1', 'UnsubscribeLevel2', 'UnsubscribeTicker', 'UnsubscribeTrades', 'Authenticate' // undocumented\n          ]\n        },\n        'private': {\n          'get': ['GetUserAccountInfos', 'GetUserAccounts', 'GetUserAffiliateCount', 'GetUserAffiliateTag', 'GetUserConfig', 'GetAllUnredactedUserConfigsForUser', 'GetUnredactedUserConfigByKey', 'GetUserDevices', 'GetUserReportTickets', 'GetUserReportWriterResultRecords', 'GetAccountInfo', 'GetAccountPositions', 'GetAllAccountConfigs', 'GetTreasuryProductsForAccount', 'GetAccountTrades', 'GetAccountTransactions', 'GetOpenTradeReports', 'GetAllOpenTradeReports', 'GetTradesHistory', 'GetOpenOrders', 'GetOpenQuotes', 'GetOrderFee', 'GetOrderHistory', 'GetOrdersHistory', 'GetOrderStatus', 'GetOmsFeeTiers', 'GetAccountDepositTransactions', 'GetAccountWithdrawTransactions', 'GetAllDepositRequestInfoTemplates', 'GetDepositInfo', 'GetDepositRequestInfoTemplate', 'GetDeposits', 'GetDepositTicket', 'GetDepositTickets', 'GetOMSWithdrawFees', 'GetWithdrawFee', 'GetWithdraws', 'GetWithdrawTemplate', 'GetWithdrawTemplateTypes', 'GetWithdrawTicket', 'GetWithdrawTickets'],\n          'post': ['AddUserAffiliateTag', 'CancelUserReport', 'RegisterNewDevice', 'SubscribeAccountEvents', 'UpdateUserAffiliateTag', 'GenerateTradeActivityReport', 'GenerateTransactionActivityReport', 'GenerateTreasuryActivityReport', 'ScheduleTradeActivityReport', 'ScheduleTransactionActivityReport', 'ScheduleTreasuryActivityReport', 'CancelAllOrders', 'CancelOrder', 'CancelQuote', 'CancelReplaceOrder', 'CreateQuote', 'ModifyOrder', 'SendOrder', 'SubmitBlockTrade', 'UpdateQuote', 'CancelWithdraw', 'CreateDepositTicket', 'CreateWithdrawTicket', 'SubmitDepositTicketComment', 'SubmitWithdrawTicketComment', 'GetOrderHistoryByOrderId']\n        }\n      },\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'maker': 0.2 / 100,\n          'taker': 0.25 / 100\n        }\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true,\n        'uid': true\n      },\n      'precisionMode': TICK_SIZE,\n      'exceptions': {\n        'exact': {\n          'Not_Enough_Funds': InsufficientFunds,\n          // {\"status\":\"Rejected\",\"errormsg\":\"Not_Enough_Funds\",\"errorcode\":101}\n          'Server Error': ExchangeError,\n          // {\"result\":false,\"errormsg\":\"Server Error\",\"errorcode\":102,\"detail\":null}\n          'Resource Not Found': OrderNotFound // {\"result\":false,\"errormsg\":\"Resource Not Found\",\"errorcode\":104,\"detail\":null}\n\n        },\n        'broad': {\n          'Invalid InstrumentId': BadSymbol // {\"result\":false,\"errormsg\":\"Invalid InstrumentId: 10000\",\"errorcode\":100,\"detail\":null}\n\n        }\n      },\n      'options': {\n        'omsId': 1,\n        'orderTypes': {\n          'Market': 1,\n          'Limit': 2,\n          'StopMarket': 3,\n          'StopLimit': 4,\n          'TrailingStopMarket': 5,\n          'TrailingStopLimit': 6,\n          'BlockTrade': 7\n        }\n      }\n    });\n  }\n\n  async fetchCurrencies(params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    const request = {\n      'omsId': omsId\n    };\n    const response = await this.publicGetGetProducts(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"OMSId\":1,\n    //             \"ProductId\":1,\n    //             \"Product\":\"BTC\",\n    //             \"ProductFullName\":\"Bitcoin\",\n    //             \"ProductType\":\"CryptoCurrency\",\n    //             \"DecimalPlaces\":8,\n    //             \"TickSize\":0.0000000100000000000000000000,\n    //             \"NoFees\":false,\n    //             \"IsDisabled\":false,\n    //             \"MarginEnabled\":false\n    //         },\n    //     ]\n    //\n\n    const result = {};\n\n    for (let i = 0; i < response.length; i++) {\n      const currency = response[i];\n      const id = this.safeString(currency, 'ProductId');\n      const name = this.safeString(currency, 'ProductFullName');\n      const type = this.safeString(currency, 'ProductType');\n      const code = this.safeCurrencyCode(this.safeString(currency, 'Product'));\n      const precision = this.safeNumber(currency, 'TickSize');\n      const isDisabled = this.safeValue(currency, 'IsDisabled');\n      const active = !isDisabled;\n      result[code] = {\n        'id': id,\n        'name': name,\n        'code': code,\n        'type': type,\n        'precision': precision,\n        'info': currency,\n        'active': active,\n        'fee': undefined,\n        'limits': this.limits\n      };\n    }\n\n    return result;\n  }\n\n  async fetchMarkets(params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    const request = {\n      'omsId': omsId\n    };\n    const response = await this.publicGetGetInstruments(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"OMSId\":1,\n    //             \"InstrumentId\":3,\n    //             \"Symbol\":\"LTCBTC\",\n    //             \"Product1\":3,\n    //             \"Product1Symbol\":\"LTC\",\n    //             \"Product2\":1,\n    //             \"Product2Symbol\":\"BTC\",\n    //             \"InstrumentType\":\"Standard\",\n    //             \"VenueInstrumentId\":3,\n    //             \"VenueId\":1,\n    //             \"SortIndex\":0,\n    //             \"SessionStatus\":\"Running\",\n    //             \"PreviousSessionStatus\":\"Stopped\",\n    //             \"SessionStatusDateTime\":\"2020-11-25T19:42:15.245Z\",\n    //             \"SelfTradePrevention\":true,\n    //             \"QuantityIncrement\":0.0000000100000000000000000000,\n    //             \"PriceIncrement\":0.0000000100000000000000000000,\n    //             \"MinimumQuantity\":0.0100000000000000000000000000,\n    //             \"MinimumPrice\":0.0000010000000000000000000000,\n    //             \"VenueSymbol\":\"LTCBTC\",\n    //             \"IsDisable\":false,\n    //             \"MasterDataId\":0,\n    //             \"PriceCollarThreshold\":0.0000000000000000000000000000,\n    //             \"PriceCollarPercent\":0.0000000000000000000000000000,\n    //             \"PriceCollarEnabled\":false,\n    //             \"PriceFloorLimit\":0.0000000000000000000000000000,\n    //             \"PriceFloorLimitEnabled\":false,\n    //             \"PriceCeilingLimit\":0.0000000000000000000000000000,\n    //             \"PriceCeilingLimitEnabled\":false,\n    //             \"CreateWithMarketRunning\":true,\n    //             \"AllowOnlyMarketMakerCounterParty\":false,\n    //             \"PriceCollarIndexDifference\":0.0000000000000000000000000000,\n    //             \"PriceCollarConvertToOtcEnabled\":false,\n    //             \"PriceCollarConvertToOtcClientUserId\":0,\n    //             \"PriceCollarConvertToOtcAccountId\":0,\n    //             \"PriceCollarConvertToOtcThreshold\":0.0000000000000000000000000000,\n    //             \"OtcConvertSizeThreshold\":0.0000000000000000000000000000,\n    //             \"OtcConvertSizeEnabled\":false,\n    //             \"OtcTradesPublic\":true,\n    //             \"PriceTier\":0\n    //         },\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const market = response[i];\n      const id = this.safeString(market, 'InstrumentId'); // const lowercaseId = this.safeStringLower (market, 'symbol');\n\n      const baseId = this.safeString(market, 'Product1');\n      const quoteId = this.safeString(market, 'Product2');\n      const base = this.safeCurrencyCode(this.safeString(market, 'Product1Symbol'));\n      const quote = this.safeCurrencyCode(this.safeString(market, 'Product2Symbol'));\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': this.safeNumber(market, 'QuantityIncrement'),\n        'price': this.safeNumber(market, 'PriceIncrement')\n      };\n      const sessionStatus = this.safeString(market, 'SessionStatus');\n      const isDisable = this.safeValue(market, 'IsDisable');\n      const sessionRunning = sessionStatus === 'Running';\n      const active = sessionRunning && !isDisable ? true : false;\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'info': market,\n        'active': active,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(market, 'MinimumQuantity'),\n            'max': undefined\n          },\n          'price': {\n            'min': this.safeNumber(market, 'MinimumPrice'),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  parseOrderBook(orderbook, symbol, timestamp = undefined, bidsKey = 'bids', asksKey = 'asks', priceKey = 6, amountKey = 8) {\n    let nonce = undefined;\n    const result = {\n      'symbol': symbol,\n      'bids': [],\n      'asks': [],\n      'timestamp': undefined,\n      'datetime': undefined,\n      'nonce': undefined\n    };\n\n    for (let i = 0; i < orderbook.length; i++) {\n      const level = orderbook[i];\n\n      if (timestamp === undefined) {\n        timestamp = this.safeInteger(level, 2);\n      } else {\n        const newTimestamp = this.safeInteger(level, 2);\n        timestamp = Math.max(timestamp, newTimestamp);\n      }\n\n      if (nonce === undefined) {\n        nonce = this.safeInteger(level, 0);\n      } else {\n        const newNonce = this.safeInteger(level, 0);\n        nonce = Math.max(nonce, newNonce);\n      }\n\n      const bidask = this.parseBidAsk(level, priceKey, amountKey);\n      const levelSide = this.safeInteger(level, 9);\n      const side = levelSide ? asksKey : bidsKey;\n      result[side].push(bidask);\n    }\n\n    result['bids'] = this.sortBy(result['bids'], 0, true);\n    result['asks'] = this.sortBy(result['asks'], 0);\n    result['timestamp'] = timestamp;\n    result['datetime'] = this.iso8601(timestamp);\n    result['nonce'] = nonce;\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    limit = limit === undefined ? 100 : limit; // default 100\n\n    const request = {\n      'omsId': omsId,\n      'InstrumentId': market['id'],\n      'Depth': limit // default 100\n\n    };\n    const response = await this.publicGetGetL2Snapshot(this.extend(request, params)); //\n    //     [\n    //         [\n    //             0,   // 0 MDUpdateId\n    //             1,   // 1 Number of Unique Accounts\n    //             123, // 2 ActionDateTime in Posix format X 1000\n    //             0,   // 3 ActionType 0 (New), 1 (Update), 2(Delete)\n    //             0.0, // 4 LastTradePrice\n    //             0,   // 5 Number of Orders\n    //             0.0, // 6 Price\n    //             0,   // 7 ProductPairCode\n    //             0.0, // 8 Quantity\n    //             0,   // 9 Side\n    //         ],\n    //         [97244115,1,1607456142963,0,19069.32,1,19069.31,8,0.140095,0],\n    //         [97244115,0,1607456142963,0,19069.32,1,19068.64,8,0.0055,0],\n    //         [97244115,0,1607456142963,0,19069.32,1,19068.26,8,0.021291,0],\n    //         [97244115,1,1607456142964,0,19069.32,1,19069.32,8,0.099636,1],\n    //         [97244115,0,1607456142964,0,19069.32,1,19069.98,8,0.1,1],\n    //         [97244115,0,1607456142964,0,19069.32,1,19069.99,8,0.141604,1],\n    //     ]\n    //\n\n    return this.parseOrderBook(response, symbol);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // fetchTicker\n    //\n    //     {\n    //         \"OMSId\":1,\n    //         \"InstrumentId\":8,\n    //         \"BestBid\":19069.31,\n    //         \"BestOffer\":19069.32,\n    //         \"LastTradedPx\":19069.32,\n    //         \"LastTradedQty\":0.0001,\n    //         \"LastTradeTime\":1607040406424,\n    //         \"SessionOpen\":19069.32,\n    //         \"SessionHigh\":19069.32,\n    //         \"SessionLow\":19069.32,\n    //         \"SessionClose\":19069.32,\n    //         \"Volume\":0.0001,\n    //         \"CurrentDayVolume\":0.0001,\n    //         \"CurrentDayNotional\":1.906932,\n    //         \"CurrentDayNumTrades\":1,\n    //         \"CurrentDayPxChange\":0.00,\n    //         \"Rolling24HrVolume\":0.000000000000000000000000000,\n    //         \"Rolling24HrNotional\":0.00000000000000000000000,\n    //         \"Rolling24NumTrades\":0,\n    //         \"Rolling24HrPxChange\":0,\n    //         \"TimeStamp\":\"1607040406425\",\n    //         \"BidQty\":0,\n    //         \"AskQty\":0,\n    //         \"BidOrderCt\":0,\n    //         \"AskOrderCt\":0,\n    //         \"Rolling24HrPxChangePercent\":0,\n    //     }\n    //\n    const timestamp = this.safeInteger(ticker, 'TimeStamp');\n    const marketId = this.safeString(ticker, 'InstrumentId');\n    const symbol = this.safeSymbol(marketId, market);\n    const last = this.safeNumber(ticker, 'LastTradedPx');\n    const percentage = this.safeNumber(ticker, 'Rolling24HrPxChangePercent');\n    const change = this.safeNumber(ticker, 'Rolling24HrPxChange');\n    const open = this.safeNumber(ticker, 'SessionOpen');\n    let average = undefined;\n\n    if (last !== undefined && change !== undefined) {\n      average = this.sum(last, open) / 2;\n    }\n\n    const baseVolume = this.safeNumber(ticker, 'Rolling24HrVolume');\n    const quoteVolume = this.safeNumber(ticker, 'Rolling24HrNotional');\n    const vwap = this.vwap(baseVolume, quoteVolume);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'SessionHigh'),\n      'low': this.safeNumber(ticker, 'SessionLow'),\n      'bid': this.safeNumber(ticker, 'BestBid'),\n      'bidVolume': undefined,\n      // this.safeNumber (ticker, 'BidQty'), always shows 0\n      'ask': this.safeNumber(ticker, 'BestOffer'),\n      'askVolume': undefined,\n      // this.safeNumber (ticker, 'AskQty'), always shows 0\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'omsId': omsId,\n      'InstrumentId': market['id']\n    };\n    const response = await this.publicGetGetLevel1(this.extend(request, params)); //\n    //     {\n    //         \"OMSId\":1,\n    //         \"InstrumentId\":8,\n    //         \"BestBid\":19069.31,\n    //         \"BestOffer\":19069.32,\n    //         \"LastTradedPx\":19069.32,\n    //         \"LastTradedQty\":0.0001,\n    //         \"LastTradeTime\":1607040406424,\n    //         \"SessionOpen\":19069.32,\n    //         \"SessionHigh\":19069.32,\n    //         \"SessionLow\":19069.32,\n    //         \"SessionClose\":19069.32,\n    //         \"Volume\":0.0001,\n    //         \"CurrentDayVolume\":0.0001,\n    //         \"CurrentDayNotional\":1.906932,\n    //         \"CurrentDayNumTrades\":1,\n    //         \"CurrentDayPxChange\":0.00,\n    //         \"Rolling24HrVolume\":0.000000000000000000000000000,\n    //         \"Rolling24HrNotional\":0.00000000000000000000000,\n    //         \"Rolling24NumTrades\":0,\n    //         \"Rolling24HrPxChange\":0,\n    //         \"TimeStamp\":\"1607040406425\",\n    //         \"BidQty\":0,\n    //         \"AskQty\":0,\n    //         \"BidOrderCt\":0,\n    //         \"AskOrderCt\":0,\n    //         \"Rolling24HrPxChangePercent\":0,\n    //     }\n    //\n\n    return this.parseTicker(response, market);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1501603632000, // 0 DateTime\n    //         2700.33,       // 1 High\n    //         2687.01,       // 2 Low\n    //         2687.01,       // 3 Open\n    //         2687.01,       // 4 Close\n    //         24.86100992,   // 5 Volume\n    //         0,             // 6 Inside Bid Price\n    //         2870.95,       // 7 Inside Ask Price\n    //         1              // 8 InstrumentId\n    //     ]\n    //\n    return [this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'omsId': omsId,\n      'InstrumentId': market['id'],\n      'Interval': this.timeframes[timeframe]\n    };\n    const duration = this.parseTimeframe(timeframe);\n    const now = this.milliseconds();\n\n    if (since === undefined) {\n      if (limit !== undefined) {\n        request['FromDate'] = this.ymdhms(now - duration * limit * 1000);\n        request['ToDate'] = this.ymdhms(now);\n      }\n    } else {\n      request['FromDate'] = this.ymdhms(since);\n\n      if (limit === undefined) {\n        request['ToDate'] = this.ymdhms(now);\n      } else {\n        request['ToDate'] = this.ymdhms(this.sum(since, duration * limit * 1000));\n      }\n    }\n\n    const response = await this.publicGetGetTickerHistory(this.extend(request, params)); //\n    //     [\n    //         [1607299260000,19069.32,19069.32,19069.32,19069.32,0,19069.31,19069.32,8,1607299200000],\n    //         [1607299320000,19069.32,19069.32,19069.32,19069.32,0,19069.31,19069.32,8,1607299260000],\n    //         [1607299380000,19069.32,19069.32,19069.32,19069.32,0,19069.31,19069.32,8,1607299320000],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     [\n    //         6913253,       //  0 TradeId\n    //         8,             //  1 ProductPairCode\n    //         0.03340802,    //  2 Quantity\n    //         19116.08,      //  3 Price\n    //         2543425077,    //  4 Order1\n    //         2543425482,    //  5 Order2\n    //         1606935922416, //  6 Tradetime\n    //         0,             //  7 Direction\n    //         1,             //  8 TakerSide\n    //         0,             //  9 BlockTrade\n    //         0,             // 10 Either Order1ClientId or Order2ClientId\n    //     ]\n    //\n    // fetchMyTrades (private)\n    //\n    //     {\n    //         \"OMSId\":1,\n    //         \"ExecutionId\":16916567,\n    //         \"TradeId\":14476351,\n    //         \"OrderId\":2543565231,\n    //         \"AccountId\":449,\n    //         \"AccountName\":\"igor@ccxt.trade\",\n    //         \"SubAccountId\":0,\n    //         \"ClientOrderId\":0,\n    //         \"InstrumentId\":8,\n    //         \"Side\":\"Sell\",\n    //         \"OrderType\":\"Market\",\n    //         \"Quantity\":0.1230000000000000000000000000,\n    //         \"RemainingQuantity\":0.0000000000000000000000000000,\n    //         \"Price\":19069.310000000000000000000000,\n    //         \"Value\":2345.5251300000000000000000000,\n    //         \"CounterParty\":\"7\",\n    //         \"OrderTradeRevision\":1,\n    //         \"Direction\":\"NoChange\",\n    //         \"IsBlockTrade\":false,\n    //         \"Fee\":1.1727625650000000000000000000,\n    //         \"FeeProductId\":8,\n    //         \"OrderOriginator\":446,\n    //         \"UserName\":\"igor@ccxt.trade\",\n    //         \"TradeTimeMS\":1607565031569,\n    //         \"MakerTaker\":\"Taker\",\n    //         \"AdapterTradeId\":0,\n    //         \"InsideBid\":19069.310000000000000000000000,\n    //         \"InsideBidSize\":0.2400950000000000000000000000,\n    //         \"InsideAsk\":19069.320000000000000000000000,\n    //         \"InsideAskSize\":0.0997360000000000000000000000,\n    //         \"IsQuote\":false,\n    //         \"CounterPartyClientUserId\":1,\n    //         \"NotionalProductId\":2,\n    //         \"NotionalRate\":1.0000000000000000000000000000,\n    //         \"NotionalValue\":2345.5251300000000000000000000,\n    //         \"NotionalHoldAmount\":0,\n    //         \"TradeTime\":637431618315686826\n    //     }\n    //\n    // fetchOrderTrades\n    //\n    //     {\n    //         \"Side\":\"Sell\",\n    //         \"OrderId\":2543565235,\n    //         \"Price\":18600.000000000000000000000000,\n    //         \"Quantity\":0.0000000000000000000000000000,\n    //         \"DisplayQuantity\":0.0000000000000000000000000000,\n    //         \"Instrument\":8,\n    //         \"Account\":449,\n    //         \"AccountName\":\"igor@ccxt.trade\",\n    //         \"OrderType\":\"Limit\",\n    //         \"ClientOrderId\":0,\n    //         \"OrderState\":\"FullyExecuted\",\n    //         \"ReceiveTime\":1607585844956,\n    //         \"ReceiveTimeTicks\":637431826449564182,\n    //         \"LastUpdatedTime\":1607585844959,\n    //         \"LastUpdatedTimeTicks\":637431826449593893,\n    //         \"OrigQuantity\":0.1230000000000000000000000000,\n    //         \"QuantityExecuted\":0.1230000000000000000000000000,\n    //         \"GrossValueExecuted\":2345.3947500000000000000000000,\n    //         \"ExecutableValue\":0.0000000000000000000000000000,\n    //         \"AvgPrice\":19068.250000000000000000000000,\n    //         \"CounterPartyId\":0,\n    //         \"ChangeReason\":\"Trade\",\n    //         \"OrigOrderId\":2543565235,\n    //         \"OrigClOrdId\":0,\n    //         \"EnteredBy\":446,\n    //         \"UserName\":\"igor@ccxt.trade\",\n    //         \"IsQuote\":false,\n    //         \"InsideAsk\":19069.320000000000000000000000,\n    //         \"InsideAskSize\":0.0997360000000000000000000000,\n    //         \"InsideBid\":19068.250000000000000000000000,\n    //         \"InsideBidSize\":1.3300010000000000000000000000,\n    //         \"LastTradePrice\":19068.250000000000000000000000,\n    //         \"RejectReason\":\"\",\n    //         \"IsLockedIn\":false,\n    //         \"CancelReason\":\"\",\n    //         \"OrderFlag\":\"0\",\n    //         \"UseMargin\":false,\n    //         \"StopPrice\":0.0000000000000000000000000000,\n    //         \"PegPriceType\":\"Unknown\",\n    //         \"PegOffset\":0.0000000000000000000000000000,\n    //         \"PegLimitOffset\":0.0000000000000000000000000000,\n    //         \"IpAddress\":\"5.228.233.138\",\n    //         \"ClientOrderIdUuid\":null,\n    //         \"OMSId\":1\n    //     }\n    //\n    let priceString = undefined;\n    let amountString = undefined;\n    let cost = undefined;\n    let timestamp = undefined;\n    let id = undefined;\n    let marketId = undefined;\n    let side = undefined;\n    let orderId = undefined;\n    let takerOrMaker = undefined;\n    let fee = undefined;\n    let type = undefined;\n\n    if (Array.isArray(trade)) {\n      priceString = this.safeString(trade, 3);\n      amountString = this.safeString(trade, 2);\n      timestamp = this.safeInteger(trade, 6);\n      id = this.safeString(trade, 0);\n      marketId = this.safeString(trade, 1);\n      const takerSide = this.safeValue(trade, 8);\n      side = takerSide ? 'sell' : 'buy';\n      orderId = this.safeString(trade, 4);\n    } else {\n      timestamp = this.safeInteger2(trade, 'TradeTimeMS', 'ReceiveTime');\n      id = this.safeString(trade, 'TradeId');\n      orderId = this.safeString2(trade, 'OrderId', 'OrigOrderId');\n      marketId = this.safeString2(trade, 'InstrumentId', 'Instrument');\n      priceString = this.safeString(trade, 'Price');\n      amountString = this.safeString(trade, 'Quantity');\n      cost = this.safeNumber2(trade, 'Value', 'GrossValueExecuted');\n      takerOrMaker = this.safeStringLower(trade, 'MakerTaker');\n      side = this.safeStringLower(trade, 'Side');\n      type = this.safeStringLower(trade, 'OrderType');\n      const feeCost = this.safeNumber(trade, 'Fee');\n\n      if (feeCost !== undefined) {\n        const feeCurrencyId = this.safeString(trade, 'FeeProductId');\n        const feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);\n        fee = {\n          'cost': feeCost,\n          'currency': feeCurrencyCode\n        };\n      }\n    }\n\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n\n    if (cost === undefined) {\n      cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    }\n\n    const symbol = this.safeSymbol(marketId, market);\n    return {\n      'info': trade,\n      'id': id,\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'order': orderId,\n      'type': type,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'omsId': omsId,\n      'InstrumentId': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['Count'] = limit;\n    }\n\n    const response = await this.publicGetGetLastTrades(this.extend(request, params)); //\n    //     [\n    //         [6913253,8,0.03340802,19116.08,2543425077,2543425482,1606935922416,0,1,0,0],\n    //         [6913254,8,0.01391671,19117.42,2543427510,2543427811,1606935927998,1,1,0,0],\n    //         [6913255,8,0.000006,19107.81,2543430495,2543430793,1606935933881,2,0,0,0],\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchAccounts(params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    this.checkRequiredCredentials();\n    const request = {\n      'omsId': omsId,\n      'UserId': this.uid,\n      'UserName': 'igor@ccxt.trade'\n    };\n    const response = await this.privateGetGetUserAccounts(this.extend(request, params)); //\n    //     [ 449 ] // comma-separated list of account ids\n    //\n\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      const accountId = this.safeString(response, i);\n      result.push({\n        'id': accountId,\n        'type': undefined,\n        'currency': undefined,\n        'info': accountId\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    params = this.omit(params, ['accountId', 'AccountId']);\n    const request = {\n      'omsId': omsId,\n      'AccountId': accountId\n    };\n    const response = await this.privateGetGetAccountPositions(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"OMSId\":1,\n    //             \"AccountId\":449,\n    //             \"ProductSymbol\":\"BTC\",\n    //             \"ProductId\":1,\n    //             \"Amount\":10.000000000000000000000000000,\n    //             \"Hold\":0,\n    //             \"PendingDeposits\":0.0000000000000000000000000000,\n    //             \"PendingWithdraws\":0.0000000000000000000000000000,\n    //             \"TotalDayDeposits\":10.000000000000000000000000000,\n    //             \"TotalMonthDeposits\":10.000000000000000000000000000,\n    //             \"TotalYearDeposits\":10.000000000000000000000000000,\n    //             \"TotalDayDepositNotional\":10.000000000000000000000000000,\n    //             \"TotalMonthDepositNotional\":10.000000000000000000000000000,\n    //             \"TotalYearDepositNotional\":10.000000000000000000000000000,\n    //             \"TotalDayWithdraws\":0,\n    //             \"TotalMonthWithdraws\":0,\n    //             \"TotalYearWithdraws\":0,\n    //             \"TotalDayWithdrawNotional\":0,\n    //             \"TotalMonthWithdrawNotional\":0,\n    //             \"TotalYearWithdrawNotional\":0,\n    //             \"NotionalProductId\":8,\n    //             \"NotionalProductSymbol\":\"USDT\",\n    //             \"NotionalValue\":10.000000000000000000000000000,\n    //             \"NotionalHoldAmount\":0,\n    //             \"NotionalRate\":1\n    //         },\n    //     ]\n    //\n\n    const result = {\n      'info': response,\n      'timestamp': undefined,\n      'datetime': undefined\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'ProductId');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeString(balance, 'Amount');\n      account['used'] = this.safeString(balance, 'Hold');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  parseLedgerEntryType(type) {\n    const types = {\n      'Trade': 'trade',\n      'Deposit': 'transaction',\n      'Withdraw': 'transaction',\n      'Transfer': 'transfer',\n      'OrderHold': 'trade',\n      'WithdrawHold': 'transaction',\n      'DepositHold': 'transaction',\n      'MarginHold': 'trade',\n      'ManualHold': 'trade',\n      'ManualEntry': 'trade',\n      'MarginAcquisition': 'trade',\n      'MarginRelinquish': 'trade',\n      'MarginQuoteHold': 'trade'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseLedgerEntry(item, currency = undefined) {\n    //\n    //     {\n    //         \"TransactionId\":2663709493,\n    //         \"ReferenceId\":68,\n    //         \"OMSId\":1,\n    //         \"AccountId\":449,\n    //         \"CR\":10.000000000000000000000000000,\n    //         \"DR\":0.0000000000000000000000000000,\n    //         \"Counterparty\":3,\n    //         \"TransactionType\":\"Other\",\n    //         \"ReferenceType\":\"Deposit\",\n    //         \"ProductId\":1,\n    //         \"Balance\":10.000000000000000000000000000,\n    //         \"TimeStamp\":1607532331591\n    //     }\n    //\n    const id = this.safeString(item, 'TransactionId');\n    const account = this.safeString(item, 'AccountId');\n    const referenceId = this.safeString(item, 'ReferenceId');\n    const referenceAccount = this.safeString(item, 'Counterparty');\n    const type = this.parseLedgerEntryType(this.safeString(item, 'ReferenceType'));\n    const currencyId = this.safeString(item, 'ProductId');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const credit = this.safeNumber(item, 'CR');\n    const debit = this.safeNumber(item, 'DR');\n    let amount = undefined;\n    let direction = undefined;\n\n    if (credit > 0) {\n      amount = credit;\n      direction = 'in';\n    } else if (debit > 0) {\n      amount = debit;\n      direction = 'out';\n    }\n\n    const timestamp = this.safeInteger(item, 'TimeStamp');\n    let before = undefined;\n    const after = this.safeNumber(item, 'Balance');\n\n    if (direction === 'out') {\n      before = this.sum(after, amount);\n    } else if (direction === 'in') {\n      before = Math.max(0, after - amount);\n    }\n\n    const status = 'ok';\n    return {\n      'info': item,\n      'id': id,\n      'direction': direction,\n      'account': account,\n      'referenceId': referenceId,\n      'referenceAccount': referenceAccount,\n      'type': type,\n      'currency': code,\n      'amount': amount,\n      'before': before,\n      'after': after,\n      'status': status,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'fee': undefined\n    };\n  }\n\n  async fetchLedger(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    params = this.omit(params, ['accountId', 'AccountId']);\n    const request = {\n      'omsId': omsId,\n      'AccountId': accountId\n    };\n\n    if (limit !== undefined) {\n      request['Depth'] = limit;\n    }\n\n    const response = await this.privateGetGetAccountTransactions(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"TransactionId\":2663709493,\n    //             \"ReferenceId\":68,\n    //             \"OMSId\":1,\n    //             \"AccountId\":449,\n    //             \"CR\":10.000000000000000000000000000,\n    //             \"DR\":0.0000000000000000000000000000,\n    //             \"Counterparty\":3,\n    //             \"TransactionType\":\"Other\",\n    //             \"ReferenceType\":\"Deposit\",\n    //             \"ProductId\":1,\n    //             \"Balance\":10.000000000000000000000000000,\n    //             \"TimeStamp\":1607532331591\n    //         },\n    //     ]\n    //\n\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    return this.parseLedger(response, currency, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'Accepted': 'open',\n      'Rejected': 'rejected',\n      'Working': 'open',\n      'Canceled': 'canceled',\n      'Expired': 'expired',\n      'FullyExecuted': 'closed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //     {\n    //         \"status\":\"Accepted\",\n    //         \"errormsg\":\"\",\n    //         \"OrderId\": 2543565231\n    //     }\n    //\n    // editOrder\n    //\n    //     {\n    //         \"ReplacementOrderId\": 1234,\n    //         \"ReplacementClOrdId\": 1561,\n    //         \"OrigOrderId\": 5678,\n    //         \"OrigClOrdId\": 91011,\n    //     }\n    //\n    // fetchOpenOrders, fetchClosedOrders\n    //\n    //     {\n    //         \"Side\":\"Buy\",\n    //         \"OrderId\":2543565233,\n    //         \"Price\":19010,\n    //         \"Quantity\":0.345,\n    //         \"DisplayQuantity\":0.345,\n    //         \"Instrument\":8,\n    //         \"Account\":449,\n    //         \"AccountName\":\"igor@ccxt.trade\",\n    //         \"OrderType\":\"Limit\",\n    //         \"ClientOrderId\":0,\n    //         \"OrderState\":\"Working\",\n    //         \"ReceiveTime\":1607579326003,\n    //         \"ReceiveTimeTicks\":637431761260028981,\n    //         \"LastUpdatedTime\":1607579326005,\n    //         \"LastUpdatedTimeTicks\":637431761260054714,\n    //         \"OrigQuantity\":0.345,\n    //         \"QuantityExecuted\":0,\n    //         \"GrossValueExecuted\":0,\n    //         \"ExecutableValue\":0,\n    //         \"AvgPrice\":0,\n    //         \"CounterPartyId\":0,\n    //         \"ChangeReason\":\"NewInputAccepted\",\n    //         \"OrigOrderId\":2543565233,\n    //         \"OrigClOrdId\":0,\n    //         \"EnteredBy\":446,\n    //         \"UserName\":\"igor@ccxt.trade\",\n    //         \"IsQuote\":false,\n    //         \"InsideAsk\":19069.32,\n    //         \"InsideAskSize\":0.099736,\n    //         \"InsideBid\":19068.25,\n    //         \"InsideBidSize\":1.330001,\n    //         \"LastTradePrice\":19068.25,\n    //         \"RejectReason\":\"\",\n    //         \"IsLockedIn\":false,\n    //         \"CancelReason\":\"\",\n    //         \"OrderFlag\":\"AddedToBook\",\n    //         \"UseMargin\":false,\n    //         \"StopPrice\":0,\n    //         \"PegPriceType\":\"Unknown\",\n    //         \"PegOffset\":0,\n    //         \"PegLimitOffset\":0,\n    //         \"IpAddress\":null,\n    //         \"ClientOrderIdUuid\":null,\n    //         \"OMSId\":1\n    //     }\n    //\n    const id = this.safeString2(order, 'ReplacementOrderId', 'OrderId');\n    const timestamp = this.safeInteger(order, 'ReceiveTime');\n    const lastTradeTimestamp = this.safeInteger(order, 'LastUpdatedTime');\n    const marketId = this.safeString(order, 'Instrument');\n    const symbol = this.safeSymbol(marketId, market);\n    const side = this.safeStringLower(order, 'Side');\n    const type = this.safeStringLower(order, 'OrderType');\n    const clientOrderId = this.safeString2(order, 'ReplacementClOrdId', 'ClientOrderId');\n    let price = this.safeNumber(order, 'Price', 0.0);\n    price = price > 0.0 ? price : undefined;\n    const amount = this.safeNumber(order, 'OrigQuantity');\n    const filled = this.safeNumber(order, 'QuantityExecuted');\n    const cost = this.safeNumber(order, 'GrossValueExecuted');\n    let average = this.safeNumber(order, 'AvgPrice', 0.0);\n    average = average > 0 ? average : undefined;\n    let stopPrice = this.safeNumber(order, 'StopPrice', 0.0);\n    stopPrice = stopPrice > 0.0 ? stopPrice : undefined;\n    const timeInForce = undefined;\n    const status = this.parseOrderStatus(this.safeString(order, 'OrderState'));\n    const fee = undefined;\n    const trades = undefined;\n    return this.safeOrder({\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'average': average,\n      'remaining': undefined,\n      'fee': fee,\n      'trades': trades\n    });\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    const clientOrderId = this.safeInteger2(params, 'ClientOrderId', 'clientOrderId');\n    params = this.omit(params, ['accountId', 'AccountId', 'clientOrderId', 'ClientOrderId']);\n    const market = this.market(symbol);\n    const orderSide = side === 'buy' ? 0 : 1;\n    const request = {\n      'InstrumentId': parseInt(market['id']),\n      'omsId': omsId,\n      'AccountId': accountId,\n      'TimeInForce': 1,\n      // 0 Unknown, 1 GTC by default, 2 OPG execute as close to opening price as possible, 3 IOC immediate or canceled,  4 FOK fill-or-kill, 5 GTX good 'til executed, 6 GTD good 'til date\n      // 'ClientOrderId': clientOrderId, // defaults to 0\n      // If this order is order A, OrderIdOCO refers to the order ID of an order B (which is not the order being created by this call).\n      // If order B executes, then order A created by this call is canceled.\n      // You can also set up order B to watch order A in the same way, but that may require an update to order B to make it watch this one, which could have implications for priority in the order book.\n      // See CancelReplaceOrder and ModifyOrder.\n      // 'OrderIdOCO': 0, // The order ID if One Cancels the Other.\n      // 'UseDisplayQuantity': false, // If you enter a Limit order with a reserve, you must set UseDisplayQuantity to true\n      'Side': orderSide,\n      // 0 Buy, 1 Sell, 2 Short, 3 unknown an error condition\n      'Quantity': parseFloat(this.amountToPrecision(symbol, amount)),\n      'OrderType': this.safeInteger(this.options['orderTypes'], this.capitalize(type)) // 0 Unknown, 1 Market, 2 Limit, 3 StopMarket, 4 StopLimit, 5 TrailingStopMarket, 6 TrailingStopLimit, 7 BlockTrade\n      // 'PegPriceType': 3, // 1 Last, 2 Bid, 3 Ask, 4 Midpoint\n      // 'LimitPrice': parseFloat (this.priceToPrecision (symbol, price)),\n\n    }; // If OrderType=1 (Market), Side=0 (Buy), and LimitPrice is supplied, the Market order will execute up to the value specified\n\n    if (price !== undefined) {\n      request['LimitPrice'] = parseFloat(this.priceToPrecision(symbol, price));\n    }\n\n    if (clientOrderId !== undefined) {\n      request['ClientOrderId'] = clientOrderId;\n    }\n\n    const response = await this.privatePostSendOrder(this.extend(request, params)); //\n    //     {\n    //         \"status\":\"Accepted\",\n    //         \"errormsg\":\"\",\n    //         \"OrderId\": 2543565231\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async editOrder(id, symbol, type, side, amount, price = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    const clientOrderId = this.safeInteger2(params, 'ClientOrderId', 'clientOrderId');\n    params = this.omit(params, ['accountId', 'AccountId', 'clientOrderId', 'ClientOrderId']);\n    const market = this.market(symbol);\n    const orderSide = side === 'buy' ? 0 : 1;\n    const request = {\n      'OrderIdToReplace': parseInt(id),\n      'InstrumentId': parseInt(market['id']),\n      'omsId': omsId,\n      'AccountId': accountId,\n      'TimeInForce': 1,\n      // 0 Unknown, 1 GTC by default, 2 OPG execute as close to opening price as possible, 3 IOC immediate or canceled,  4 FOK fill-or-kill, 5 GTX good 'til executed, 6 GTD good 'til date\n      // 'ClientOrderId': clientOrderId, // defaults to 0\n      // If this order is order A, OrderIdOCO refers to the order ID of an order B (which is not the order being created by this call).\n      // If order B executes, then order A created by this call is canceled.\n      // You can also set up order B to watch order A in the same way, but that may require an update to order B to make it watch this one, which could have implications for priority in the order book.\n      // See CancelReplaceOrder and ModifyOrder.\n      // 'OrderIdOCO': 0, // The order ID if One Cancels the Other.\n      // 'UseDisplayQuantity': false, // If you enter a Limit order with a reserve, you must set UseDisplayQuantity to true\n      'Side': orderSide,\n      // 0 Buy, 1 Sell, 2 Short, 3 unknown an error condition\n      'Quantity': parseFloat(this.amountToPrecision(symbol, amount)),\n      'OrderType': this.safeInteger(this.options['orderTypes'], this.capitalize(type)) // 0 Unknown, 1 Market, 2 Limit, 3 StopMarket, 4 StopLimit, 5 TrailingStopMarket, 6 TrailingStopLimit, 7 BlockTrade\n      // 'PegPriceType': 3, // 1 Last, 2 Bid, 3 Ask, 4 Midpoint\n      // 'LimitPrice': parseFloat (this.priceToPrecision (symbol, price)),\n\n    }; // If OrderType=1 (Market), Side=0 (Buy), and LimitPrice is supplied, the Market order will execute up to the value specified\n\n    if (price !== undefined) {\n      request['LimitPrice'] = parseFloat(this.priceToPrecision(symbol, price));\n    }\n\n    if (clientOrderId !== undefined) {\n      request['ClientOrderId'] = clientOrderId;\n    }\n\n    const response = await this.privatePostCancelReplaceOrder(this.extend(request, params)); //\n    //     {\n    //         \"replacementOrderId\": 1234,\n    //         \"replacementClOrdId\": 1561,\n    //         \"origOrderId\": 5678,\n    //         \"origClOrdId\": 91011,\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    params = this.omit(params, ['accountId', 'AccountId']);\n    const request = {\n      'omsId': omsId,\n      'AccountId': accountId // 'InstrumentId': market['id'],\n      // 'TradeId': 123, // If you specify TradeId, GetTradesHistory can return all states for a single trade\n      // 'OrderId': 456, // If specified, the call returns all trades associated with the order\n      // 'UserId': integer. The ID of the logged-in user. If not specified, the call returns trades associated with the users belonging to the default account for the logged-in user of this OMS.\n      // 'StartTimeStamp': long integer. The historical date and time at which to begin the trade report, in POSIX format. If not specified, reverts to the start date of this account on the trading venue.\n      // 'EndTimeStamp': long integer. Date at which to end the trade report, in POSIX format.\n      // 'Depth': integer. In this case, the count of trades to return, counting from the StartIndex. If Depth is not specified, returns all trades between BeginTimeStamp and EndTimeStamp, beginning at StartIndex.\n      // 'StartIndex': 0 // from the most recent trade 0 and moving backwards in time\n      // 'ExecutionId': 123, // The ID of the individual buy or sell execution. If not specified, returns all.\n\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['InstrumentId'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['StartTimeStamp'] = parseInt(since / 1000);\n    }\n\n    if (limit !== undefined) {\n      request['Depth'] = limit;\n    }\n\n    const response = await this.privateGetGetTradesHistory(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"OMSId\":1,\n    //             \"ExecutionId\":16916567,\n    //             \"TradeId\":14476351,\n    //             \"OrderId\":2543565231,\n    //             \"AccountId\":449,\n    //             \"AccountName\":\"igor@ccxt.trade\",\n    //             \"SubAccountId\":0,\n    //             \"ClientOrderId\":0,\n    //             \"InstrumentId\":8,\n    //             \"Side\":\"Sell\",\n    //             \"OrderType\":\"Market\",\n    //             \"Quantity\":0.1230000000000000000000000000,\n    //             \"RemainingQuantity\":0.0000000000000000000000000000,\n    //             \"Price\":19069.310000000000000000000000,\n    //             \"Value\":2345.5251300000000000000000000,\n    //             \"CounterParty\":\"7\",\n    //             \"OrderTradeRevision\":1,\n    //             \"Direction\":\"NoChange\",\n    //             \"IsBlockTrade\":false,\n    //             \"Fee\":1.1727625650000000000000000000,\n    //             \"FeeProductId\":8,\n    //             \"OrderOriginator\":446,\n    //             \"UserName\":\"igor@ccxt.trade\",\n    //             \"TradeTimeMS\":1607565031569,\n    //             \"MakerTaker\":\"Taker\",\n    //             \"AdapterTradeId\":0,\n    //             \"InsideBid\":19069.310000000000000000000000,\n    //             \"InsideBidSize\":0.2400950000000000000000000000,\n    //             \"InsideAsk\":19069.320000000000000000000000,\n    //             \"InsideAskSize\":0.0997360000000000000000000000,\n    //             \"IsQuote\":false,\n    //             \"CounterPartyClientUserId\":1,\n    //             \"NotionalProductId\":2,\n    //             \"NotionalRate\":1.0000000000000000000000000000,\n    //             \"NotionalValue\":2345.5251300000000000000000000,\n    //             \"NotionalHoldAmount\":0,\n    //             \"TradeTime\":637431618315686826\n    //         }\n    //     ]\n    //\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    params = this.omit(params, ['accountId', 'AccountId']);\n    const request = {\n      'omsId': omsId,\n      'AccountId': accountId\n    };\n\n    if (symbol !== undefined) {\n      const market = this.market(symbol);\n      request['IntrumentId'] = market['id'];\n    }\n\n    const response = await this.privatePostCancelAllOrders(this.extend(request, params)); //\n    //     {\n    //         \"result\":true,\n    //         \"errormsg\":null,\n    //         \"errorcode\":0,\n    //         \"detail\":null\n    //     }\n    //\n\n    return response;\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts(); // const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n    // const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n    // params = this.omit (params, [ 'accountId', 'AccountId' ]);\n\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'omsId': omsId // 'AccountId': accountId,\n\n    };\n    const clientOrderId = this.safeInteger2(params, 'clientOrderId', 'ClOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['ClOrderId'] = clientOrderId;\n    } else {\n      request['OrderId'] = parseInt(id);\n    }\n\n    params = this.omit(params, ['clientOrderId', 'ClOrderId']);\n    const response = await this.privatePostCancelOrder(this.extend(request, params));\n    const order = this.parseOrder(response, market);\n    return this.extend(order, {\n      'id': id,\n      'clientOrderId': clientOrderId\n    });\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    params = this.omit(params, ['accountId', 'AccountId']);\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'omsId': omsId,\n      'AccountId': accountId\n    };\n    const response = await this.privateGetGetOpenOrders(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"Side\":\"Buy\",\n    //             \"OrderId\":2543565233,\n    //             \"Price\":19010,\n    //             \"Quantity\":0.345,\n    //             \"DisplayQuantity\":0.345,\n    //             \"Instrument\":8,\n    //             \"Account\":449,\n    //             \"AccountName\":\"igor@ccxt.trade\",\n    //             \"OrderType\":\"Limit\",\n    //             \"ClientOrderId\":0,\n    //             \"OrderState\":\"Working\",\n    //             \"ReceiveTime\":1607579326003,\n    //             \"ReceiveTimeTicks\":637431761260028981,\n    //             \"LastUpdatedTime\":1607579326005,\n    //             \"LastUpdatedTimeTicks\":637431761260054714,\n    //             \"OrigQuantity\":0.345,\n    //             \"QuantityExecuted\":0,\n    //             \"GrossValueExecuted\":0,\n    //             \"ExecutableValue\":0,\n    //             \"AvgPrice\":0,\n    //             \"CounterPartyId\":0,\n    //             \"ChangeReason\":\"NewInputAccepted\",\n    //             \"OrigOrderId\":2543565233,\n    //             \"OrigClOrdId\":0,\n    //             \"EnteredBy\":446,\n    //             \"UserName\":\"igor@ccxt.trade\",\n    //             \"IsQuote\":false,\n    //             \"InsideAsk\":19069.32,\n    //             \"InsideAskSize\":0.099736,\n    //             \"InsideBid\":19068.25,\n    //             \"InsideBidSize\":1.330001,\n    //             \"LastTradePrice\":19068.25,\n    //             \"RejectReason\":\"\",\n    //             \"IsLockedIn\":false,\n    //             \"CancelReason\":\"\",\n    //             \"OrderFlag\":\"AddedToBook\",\n    //             \"UseMargin\":false,\n    //             \"StopPrice\":0,\n    //             \"PegPriceType\":\"Unknown\",\n    //             \"PegOffset\":0,\n    //             \"PegLimitOffset\":0,\n    //             \"IpAddress\":null,\n    //             \"ClientOrderIdUuid\":null,\n    //             \"OMSId\":1\n    //         }\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    params = this.omit(params, ['accountId', 'AccountId']);\n    const request = {\n      'omsId': omsId,\n      'AccountId': accountId // 'ClientOrderId': clientOrderId,\n      // 'OriginalOrderId': id,\n      // 'OriginalClientOrderId': long integer,\n      // 'UserId': integer,\n      // 'InstrumentId': market['id'],\n      // 'StartTimestamp': since,\n      // 'EndTimestamp': this.milliseconds (),\n      // 'Depth': limit,\n      // 'StartIndex': 0,\n\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['InstrumentId'] = market['id'];\n    }\n\n    if (since !== undefined) {\n      request['StartTimeStamp'] = parseInt(since / 1000);\n    }\n\n    if (limit !== undefined) {\n      request['Depth'] = limit;\n    }\n\n    const response = await this.privateGetGetOrdersHistory(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"Side\":\"Buy\",\n    //             \"OrderId\":2543565233,\n    //             \"Price\":19010.000000000000000000000000,\n    //             \"Quantity\":0.0000000000000000000000000000,\n    //             \"DisplayQuantity\":0.3450000000000000000000000000,\n    //             \"Instrument\":8,\n    //             \"Account\":449,\n    //             \"AccountName\":\"igor@ccxt.trade\",\n    //             \"OrderType\":\"Limit\",\n    //             \"ClientOrderId\":0,\n    //             \"OrderState\":\"Canceled\",\n    //             \"ReceiveTime\":1607579326003,\n    //             \"ReceiveTimeTicks\":637431761260028981,\n    //             \"LastUpdatedTime\":1607580965346,\n    //             \"LastUpdatedTimeTicks\":637431777653463754,\n    //             \"OrigQuantity\":0.3450000000000000000000000000,\n    //             \"QuantityExecuted\":0.0000000000000000000000000000,\n    //             \"GrossValueExecuted\":0.0000000000000000000000000000,\n    //             \"ExecutableValue\":0.0000000000000000000000000000,\n    //             \"AvgPrice\":0.0000000000000000000000000000,\n    //             \"CounterPartyId\":0,\n    //             \"ChangeReason\":\"UserModified\",\n    //             \"OrigOrderId\":2543565233,\n    //             \"OrigClOrdId\":0,\n    //             \"EnteredBy\":446,\n    //             \"UserName\":\"igor@ccxt.trade\",\n    //             \"IsQuote\":false,\n    //             \"InsideAsk\":19069.320000000000000000000000,\n    //             \"InsideAskSize\":0.0997360000000000000000000000,\n    //             \"InsideBid\":19068.250000000000000000000000,\n    //             \"InsideBidSize\":1.3300010000000000000000000000,\n    //             \"LastTradePrice\":19068.250000000000000000000000,\n    //             \"RejectReason\":\"\",\n    //             \"IsLockedIn\":false,\n    //             \"CancelReason\":\"UserModified\",\n    //             \"OrderFlag\":\"AddedToBook, RemovedFromBook\",\n    //             \"UseMargin\":false,\n    //             \"StopPrice\":0.0000000000000000000000000000,\n    //             \"PegPriceType\":\"Unknown\",\n    //             \"PegOffset\":0.0000000000000000000000000000,\n    //             \"PegLimitOffset\":0.0000000000000000000000000000,\n    //             \"IpAddress\":\"5.228.233.138\",\n    //             \"ClientOrderIdUuid\":null,\n    //             \"OMSId\":1\n    //         },\n    //     ]\n    //\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    params = this.omit(params, ['accountId', 'AccountId']);\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'omsId': omsId,\n      'AccountId': accountId,\n      'OrderId': parseInt(id)\n    };\n    const response = await this.privateGetGetOrderStatus(this.extend(request, params)); //\n    //     {\n    //         \"Side\":\"Sell\",\n    //         \"OrderId\":2543565232,\n    //         \"Price\":0.0000000000000000000000000000,\n    //         \"Quantity\":0.0000000000000000000000000000,\n    //         \"DisplayQuantity\":0.0000000000000000000000000000,\n    //         \"Instrument\":8,\n    //         \"Account\":449,\n    //         \"AccountName\":\"igor@ccxt.trade\",\n    //         \"OrderType\":\"Market\",\n    //         \"ClientOrderId\":0,\n    //         \"OrderState\":\"FullyExecuted\",\n    //         \"ReceiveTime\":1607569475591,\n    //         \"ReceiveTimeTicks\":637431662755912377,\n    //         \"LastUpdatedTime\":1607569475596,\n    //         \"LastUpdatedTimeTicks\":637431662755960902,\n    //         \"OrigQuantity\":1.0000000000000000000000000000,\n    //         \"QuantityExecuted\":1.0000000000000000000000000000,\n    //         \"GrossValueExecuted\":19068.270478610000000000000000,\n    //         \"ExecutableValue\":0.0000000000000000000000000000,\n    //         \"AvgPrice\":19068.270478610000000000000000,\n    //         \"CounterPartyId\":0,\n    //         \"ChangeReason\":\"Trade\",\n    //         \"OrigOrderId\":2543565232,\n    //         \"OrigClOrdId\":0,\n    //         \"EnteredBy\":446,\n    //         \"UserName\":\"igor@ccxt.trade\",\n    //         \"IsQuote\":false,\n    //         \"InsideAsk\":19069.320000000000000000000000,\n    //         \"InsideAskSize\":0.0997360000000000000000000000,\n    //         \"InsideBid\":19069.310000000000000000000000,\n    //         \"InsideBidSize\":0.2400950000000000000000000000,\n    //         \"LastTradePrice\":19069.310000000000000000000000,\n    //         \"RejectReason\":\"\",\n    //         \"IsLockedIn\":false,\n    //         \"CancelReason\":\"\",\n    //         \"OrderFlag\":\"0\",\n    //         \"UseMargin\":false,\n    //         \"StopPrice\":0.0000000000000000000000000000,\n    //         \"PegPriceType\":\"Unknown\",\n    //         \"PegOffset\":0.0000000000000000000000000000,\n    //         \"PegLimitOffset\":0.0000000000000000000000000000,\n    //         \"IpAddress\":\"5.228.233.138\",\n    //         \"ClientOrderIdUuid\":null,\n    //         \"OMSId\":1\n    //     }\n    //\n\n    return this.parseOrder(response, market);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts(); // const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n    // const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n    // params = this.omit (params, [ 'accountId', 'AccountId' ]);\n\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const request = {\n      'OMSId': parseInt(omsId),\n      // 'AccountId': accountId,\n      'OrderId': id\n    };\n    const response = await this.privatePostGetOrderHistoryByOrderId(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"Side\":\"Sell\",\n    //             \"OrderId\":2543565235,\n    //             \"Price\":18600.000000000000000000000000,\n    //             \"Quantity\":0.0000000000000000000000000000,\n    //             \"DisplayQuantity\":0.0000000000000000000000000000,\n    //             \"Instrument\":8,\n    //             \"Account\":449,\n    //             \"AccountName\":\"igor@ccxt.trade\",\n    //             \"OrderType\":\"Limit\",\n    //             \"ClientOrderId\":0,\n    //             \"OrderState\":\"FullyExecuted\",\n    //             \"ReceiveTime\":1607585844956,\n    //             \"ReceiveTimeTicks\":637431826449564182,\n    //             \"LastUpdatedTime\":1607585844959,\n    //             \"LastUpdatedTimeTicks\":637431826449593893,\n    //             \"OrigQuantity\":0.1230000000000000000000000000,\n    //             \"QuantityExecuted\":0.1230000000000000000000000000,\n    //             \"GrossValueExecuted\":2345.3947500000000000000000000,\n    //             \"ExecutableValue\":0.0000000000000000000000000000,\n    //             \"AvgPrice\":19068.250000000000000000000000,\n    //             \"CounterPartyId\":0,\n    //             \"ChangeReason\":\"Trade\",\n    //             \"OrigOrderId\":2543565235,\n    //             \"OrigClOrdId\":0,\n    //             \"EnteredBy\":446,\n    //             \"UserName\":\"igor@ccxt.trade\",\n    //             \"IsQuote\":false,\n    //             \"InsideAsk\":19069.320000000000000000000000,\n    //             \"InsideAskSize\":0.0997360000000000000000000000,\n    //             \"InsideBid\":19068.250000000000000000000000,\n    //             \"InsideBidSize\":1.3300010000000000000000000000,\n    //             \"LastTradePrice\":19068.250000000000000000000000,\n    //             \"RejectReason\":\"\",\n    //             \"IsLockedIn\":false,\n    //             \"CancelReason\":\"\",\n    //             \"OrderFlag\":\"0\",\n    //             \"UseMargin\":false,\n    //             \"StopPrice\":0.0000000000000000000000000000,\n    //             \"PegPriceType\":\"Unknown\",\n    //             \"PegOffset\":0.0000000000000000000000000000,\n    //             \"PegLimitOffset\":0.0000000000000000000000000000,\n    //             \"IpAddress\":\"5.228.233.138\",\n    //             \"ClientOrderIdUuid\":null,\n    //             \"OMSId\":1\n    //         },\n    //     ]\n    //\n\n    const grouped = this.groupBy(response, 'ChangeReason');\n    const trades = this.safeValue(grouped, 'Trade', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    params = this.omit(params, ['accountId', 'AccountId']);\n    const currency = this.currency(code);\n    const request = {\n      'omsId': omsId,\n      'AccountId': accountId,\n      'ProductId': currency['id'],\n      'GenerateNewKey': false\n    };\n    const response = await this.privateGetGetDepositInfo(this.extend(request, params)); //\n    //     {\n    //         \"result\":true,\n    //         \"errormsg\":null,\n    //         \"statuscode\":0,\n    //         \"AssetManagerId\":1,\n    //         \"AccountId\":57922,\n    //         \"AssetId\":16,\n    //         \"ProviderId\":23,\n    //         \"DepositInfo\":\"[\\\"0x8A27564b5c30b91C93B1591821642420F323a210\\\"]\"\n    //     }\n    //\n\n    return this.parseDepositAddress(response, currency);\n  }\n\n  parseDepositAddress(depositAddress, currency = undefined) {\n    //\n    // fetchDepositAddress, createDepositAddress\n    //\n    //     {\n    //         \"result\":true,\n    //         \"errormsg\":null,\n    //         \"statuscode\":0,\n    //         \"AssetManagerId\":1,\n    //         \"AccountId\":449,\n    //         \"AssetId\":1,\n    //         \"ProviderId\":1,\n    //         \"DepositInfo\":\"[\\\"r3e95RwVsLH7yCbnMfyh7SA8FdwUJCB4S2?memo=241452010\\\"]\"\n    //     }\n    //\n    const depositInfoString = this.safeString(depositAddress, 'DepositInfo');\n    const depositInfo = JSON.parse(depositInfoString);\n    const depositInfoLength = depositInfo.length;\n    const lastString = this.safeString(depositInfo, depositInfoLength - 1);\n    const parts = lastString.split('?memo=');\n    const address = this.safeString(parts, 0);\n    const tag = this.safeString(parts, 1);\n    let code = undefined;\n\n    if (currency !== undefined) {\n      code = currency['code'];\n    }\n\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': depositAddress\n    };\n  }\n\n  async createDepositAddress(code, params = {}) {\n    const request = {\n      'GenerateNewKey': true\n    };\n    return await this.fetchDepositAddress(code, this.extend(request, params));\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    params = this.omit(params, ['accountId', 'AccountId']);\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const request = {\n      'omsId': omsId,\n      'AccountId': accountId\n    };\n    const response = await this.privateGetGetDeposits(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"OMSId\":1,\n    //             \"DepositId\":44,\n    //             \"AccountId\":449,\n    //             \"SubAccountId\":0,\n    //             \"ProductId\":4,\n    //             \"Amount\":200.00000000000000000000000000,\n    //             \"LastUpdateTimeStamp\":637431291261187806,\n    //             \"ProductType\":\"CryptoCurrency\",\n    //             \"TicketStatus\":\"FullyProcessed\",\n    //             \"DepositInfo\":\"{}\",\n    //             \"DepositCode\":\"ab0e23d5-a9ce-4d94-865f-9ab464fb1de3\",\n    //             \"TicketNumber\":71,\n    //             \"NotionalProductId\":13,\n    //             \"NotionalValue\":200.00000000000000000000000000,\n    //             \"FeeAmount\":0.0000000000000000000000000000,\n    //         },\n    //     ]\n    //\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    const omsId = this.safeInteger(this.options, 'omsId', 1);\n    await this.loadMarkets();\n    await this.loadAccounts();\n    const defaultAccountId = this.safeInteger2(this.options, 'accountId', 'AccountId', parseInt(this.accounts[0]['id']));\n    const accountId = this.safeInteger2(params, 'accountId', 'AccountId', defaultAccountId);\n    params = this.omit(params, ['accountId', 'AccountId']);\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const request = {\n      'omsId': omsId,\n      'AccountId': accountId\n    };\n    const response = await this.privateGetGetWithdraws(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"Amount\": 0.0,\n    //             \"FeeAmount\": 0.0,\n    //             \"NotionalValue\": 0.0,\n    //             \"WithdrawId\": 0,\n    //             \"AssetManagerId\": 0,\n    //             \"AccountId\": 0,\n    //             \"AssetId\": 0,\n    //             \"TemplateForm\": \"{\\\"TemplateType\\\": \\\"TetherRPCWithdraw\\\",\\\"Comment\\\": \\\"TestWithdraw\\\",\\\"ExternalAddress\\\": \\\"ms6C3pKAAr8gRCcnVebs8VRkVrjcvqNYv3\\\"}\",\n    //             \"TemplateFormType\": \"TetherRPCWithdraw\",\n    //             \"omsId\": 0,\n    //             \"TicketStatus\": 0,\n    //             \"TicketNumber\": 0,\n    //             \"WithdrawTransactionDetails\": \"\",\n    //             \"WithdrawType\": \"\",\n    //             \"WithdrawCode\": \"490b4fa3-53fc-44f4-bd29-7e16be86fba3\",\n    //             \"AssetType\": 0,\n    //             \"Reaccepted\": true,\n    //             \"NotionalProductId\": 0\n    //         },\n    //     ]\n    //\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  parseTransactionStatusByType(status, type = undefined) {\n    const statusesByType = {\n      'deposit': {\n        'New': 'pending',\n        // new ticket awaiting operator review\n        'AdminProcessing': 'pending',\n        // an admin is looking at the ticket\n        'Accepted': 'pending',\n        // an admin accepts the ticket\n        'Rejected': 'rejected',\n        // admin rejects the ticket\n        'SystemProcessing': 'pending',\n        // automatic processing; an unlikely status for a deposit\n        'FullyProcessed': 'ok',\n        // the deposit has concluded\n        'Failed': 'failed',\n        // the deposit has failed for some reason\n        'Pending': 'pending',\n        // Account Provider has set status to pending\n        'Confirmed': 'pending',\n        // Account Provider confirms the deposit\n        'AmlProcessing': 'pending',\n        // anti-money-laundering process underway\n        'AmlAccepted': 'pending',\n        // anti-money-laundering process successful\n        'AmlRejected': 'rejected',\n        // deposit did not stand up to anti-money-laundering process\n        'AmlFailed': 'failed',\n        // anti-money-laundering process failed/did not complete\n        'LimitsAccepted': 'pending',\n        // deposit meets limits for fiat or crypto asset\n        'LimitsRejected': 'rejected' // deposit does not meet limits for fiat or crypto asset\n\n      },\n      'withdrawal': {\n        'New': 'pending',\n        // awaiting operator review\n        'AdminProcessing': 'pending',\n        // An admin is looking at the ticket\n        'Accepted': 'pending',\n        // withdrawal will proceed\n        'Rejected': 'rejected',\n        // admin or automatic rejection\n        'SystemProcessing': 'pending',\n        // automatic processing underway\n        'FullyProcessed': 'ok',\n        // the withdrawal has concluded\n        'Failed': 'failed',\n        // the withdrawal failed for some reason\n        'Pending': 'pending',\n        // the admin has placed the withdrawal in pending status\n        'Pending2Fa': 'pending',\n        // user must click 2-factor authentication confirmation link\n        'AutoAccepted': 'pending',\n        // withdrawal will be automatically processed\n        'Delayed': 'pending',\n        // waiting for funds to be allocated for the withdrawal\n        'UserCanceled': 'canceled',\n        // withdraw canceled by user or Superuser\n        'AdminCanceled': 'canceled',\n        // withdraw canceled by Superuser\n        'AmlProcessing': 'pending',\n        // anti-money-laundering process underway\n        'AmlAccepted': 'pending',\n        // anti-money-laundering process complete\n        'AmlRejected': 'rejected',\n        // withdrawal did not stand up to anti-money-laundering process\n        'AmlFailed': 'failed',\n        // withdrawal did not complete anti-money-laundering process\n        'LimitsAccepted': 'pending',\n        // withdrawal meets limits for fiat or crypto asset\n        'LimitsRejected': 'rejected',\n        // withdrawal does not meet limits for fiat or crypto asset\n        'Submitted': 'pending',\n        // withdrawal sent to Account Provider; awaiting blockchain confirmation\n        'Confirmed': 'pending',\n        // Account Provider confirms that withdrawal is on the blockchain\n        'ManuallyConfirmed': 'pending',\n        // admin has sent withdrawal via wallet or admin function directly; marks ticket as FullyProcessed; debits account\n        'Confirmed2Fa': 'pending' // user has confirmed withdraw via 2-factor authentication.\n\n      }\n    };\n    const statuses = this.safeValue(statusesByType, type, {});\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"OMSId\":1,\n    //         \"DepositId\":44,\n    //         \"AccountId\":449,\n    //         \"SubAccountId\":0,\n    //         \"ProductId\":4,\n    //         \"Amount\":200.00000000000000000000000000,\n    //         \"LastUpdateTimeStamp\":637431291261187806,\n    //         \"ProductType\":\"CryptoCurrency\",\n    //         \"TicketStatus\":\"FullyProcessed\",\n    //         \"DepositInfo\":\"{}\",\n    //         \"DepositCode\":\"ab0e23d5-a9ce-4d94-865f-9ab464fb1de3\",\n    //         \"TicketNumber\":71,\n    //         \"NotionalProductId\":13,\n    //         \"NotionalValue\":200.00000000000000000000000000,\n    //         \"FeeAmount\":0.0000000000000000000000000000,\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"Amount\": 0.0,\n    //         \"FeeAmount\": 0.0,\n    //         \"NotionalValue\": 0.0,\n    //         \"WithdrawId\": 0,\n    //         \"AssetManagerId\": 0,\n    //         \"AccountId\": 0,\n    //         \"AssetId\": 0,\n    //         \"TemplateForm\": \"{\\\"TemplateType\\\": \\\"TetherRPCWithdraw\\\",\\\"Comment\\\": \\\"TestWithdraw\\\",\\\"ExternalAddress\\\": \\\"ms6C3pKAAr8gRCcnVebs8VRkVrjcvqNYv3\\\"}\",\n    //         \"TemplateFormType\": \"TetherRPCWithdraw\",\n    //         \"omsId\": 0,\n    //         \"TicketStatus\": 0,\n    //         \"TicketNumber\": 0,\n    //         \"WithdrawTransactionDetails\": \"\",\n    //         \"WithdrawType\": \"\",\n    //         \"WithdrawCode\": \"490b4fa3-53fc-44f4-bd29-7e16be86fba3\",\n    //         \"AssetType\": 0,\n    //         \"Reaccepted\": true,\n    //         \"NotionalProductId\": 0\n    //     }\n    //\n    const id = this.safeString(transaction, 'DepositId');\n    let txid = undefined;\n    const currencyId = this.safeString(transaction, 'ProductId');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    let timestamp = undefined;\n    let type = undefined;\n\n    if ('DepositId' in transaction) {\n      type = 'deposit';\n    } else if ('WithdrawId' in transaction) {\n      type = 'withdrawal';\n    }\n\n    const templateFormString = this.safeString(transaction, 'TemplateForm');\n    let address = undefined;\n    let updated = this.safeInteger(transaction, 'LastUpdateTimeStamp');\n\n    if (templateFormString !== undefined) {\n      const templateForm = JSON.parse(templateFormString);\n      address = this.safeString(templateForm, 'ExternalAddress');\n      txid = this.safeString(templateForm, 'TxId');\n      timestamp = this.safeInteger(templateForm, 'TimeSubmitted');\n      updated = this.safeInteger(templateForm, 'LastUpdated', updated);\n    }\n\n    const addressTo = address;\n    const status = this.parseTransactionStatusByType(this.safeString(transaction, 'TicketStatus'), type);\n    const amount = this.safeNumber(transaction, 'Amount');\n    const feeCost = this.safeNumber(transaction, 'FeeAmount');\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      fee = {\n        'currency': code,\n        'cost': feeCost\n      };\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'addressTo': addressTo,\n      'addressFrom': undefined,\n      'tag': undefined,\n      'tagTo': undefined,\n      'tagFrom': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': fee\n    };\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    } else if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const auth = nonce + this.uid + this.apiKey;\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret));\n      headers = {\n        'Nonce': nonce,\n        'APIKey': this.apiKey,\n        'Signature': signature,\n        'UserId': this.uid\n      };\n\n      if (method === 'POST') {\n        headers['Content-Type'] = 'application/json';\n        body = this.json(query);\n      } else {\n        if (Object.keys(query).length) {\n          url += '?' + this.urlencode(query);\n        }\n      }\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (code === 404) {\n      throw new AuthenticationError(this.id + ' ' + body);\n    }\n\n    if (response === undefined) {\n      return;\n    } //\n    //     {\"status\":\"Rejected\",\"errormsg\":\"Not_Enough_Funds\",\"errorcode\":101}\n    //     {\"result\":false,\"errormsg\":\"Server Error\",\"errorcode\":102,\"detail\":null}\n    //\n\n\n    const message = this.safeString(response, 'errormsg');\n\n    if (message !== undefined && message !== '') {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], body, feedback);\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/ndax.js"],"names":["Exchange","require","ExchangeError","AuthenticationError","InsufficientFunds","BadSymbol","OrderNotFound","TICK_SIZE","Precise","module","exports","ndax","describe","deepExtend","fetchCurrencies","params","omsId","safeInteger","options","request","response","publicGetGetProducts","extend","result","i","length","currency","id","safeString","name","type","code","safeCurrencyCode","precision","safeNumber","isDisabled","safeValue","active","undefined","limits","fetchMarkets","publicGetGetInstruments","market","baseId","quoteId","base","quote","symbol","sessionStatus","isDisable","sessionRunning","push","parseOrderBook","orderbook","timestamp","bidsKey","asksKey","priceKey","amountKey","nonce","level","newTimestamp","Math","max","newNonce","bidask","parseBidAsk","levelSide","side","sortBy","iso8601","fetchOrderBook","limit","loadMarkets","publicGetGetL2Snapshot","parseTicker","ticker","marketId","safeSymbol","last","percentage","change","open","average","sum","baseVolume","quoteVolume","vwap","fetchTicker","publicGetGetLevel1","parseOHLCV","ohlcv","fetchOHLCV","timeframe","since","timeframes","duration","parseTimeframe","now","milliseconds","ymdhms","publicGetGetTickerHistory","parseOHLCVs","parseTrade","trade","priceString","amountString","cost","orderId","takerOrMaker","fee","Array","isArray","takerSide","safeInteger2","safeString2","safeNumber2","safeStringLower","feeCost","feeCurrencyId","feeCurrencyCode","price","parseNumber","amount","stringMul","fetchTrades","publicGetGetLastTrades","parseTrades","fetchAccounts","checkRequiredCredentials","uid","privateGetGetUserAccounts","accountId","fetchBalance","loadAccounts","defaultAccountId","parseInt","accounts","omit","privateGetGetAccountPositions","balance","currencyId","account","parseBalance","parseLedgerEntryType","types","parseLedgerEntry","item","referenceId","referenceAccount","credit","debit","direction","before","after","status","fetchLedger","privateGetGetAccountTransactions","parseLedger","parseOrderStatus","statuses","parseOrder","order","lastTradeTimestamp","clientOrderId","filled","stopPrice","timeInForce","trades","safeOrder","createOrder","orderSide","parseFloat","amountToPrecision","capitalize","priceToPrecision","privatePostSendOrder","editOrder","privatePostCancelReplaceOrder","fetchMyTrades","privateGetGetTradesHistory","cancelAllOrders","privatePostCancelAllOrders","cancelOrder","privatePostCancelOrder","fetchOpenOrders","privateGetGetOpenOrders","parseOrders","fetchOrders","privateGetGetOrdersHistory","fetchOrder","privateGetGetOrderStatus","fetchOrderTrades","privatePostGetOrderHistoryByOrderId","grouped","groupBy","fetchDepositAddress","privateGetGetDepositInfo","parseDepositAddress","depositAddress","depositInfoString","depositInfo","JSON","parse","depositInfoLength","lastString","parts","split","address","tag","checkAddress","createDepositAddress","fetchDeposits","privateGetGetDeposits","parseTransactions","fetchWithdrawals","privateGetGetWithdraws","parseTransactionStatusByType","statusesByType","parseTransaction","transaction","txid","templateFormString","updated","templateForm","addressTo","sign","path","api","method","headers","body","url","urls","implodeParams","query","extractParams","Object","keys","urlencode","toString","auth","apiKey","signature","hmac","encode","secret","json","handleErrors","reason","requestHeaders","requestBody","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, AuthenticationError, InsufficientFunds, BadSymbol, OrderNotFound } = require ('./base/errors');\nconst { TICK_SIZE } = require ('./base/functions/number');\nconst Precise = require ('./base/Precise');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class ndax extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'ndax',\n            'name': 'NDAX',\n            'countries': [ 'US' ], // United States\n            'rateLimit': 1000,\n            'pro': true,\n            'has': {\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createDepositAddress': true,\n                'createOrder': true,\n                'editOrder': true,\n                'fetchAccounts': true,\n                'fetchBalance': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchLedger': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrderTrades': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n            },\n            'timeframes': {\n                '1m': '60',\n                '5m': '300',\n                '15m': '900',\n                '30m': '1800',\n                '1h': '3600',\n                '2h': '7200',\n                '4h': '14400',\n                '6h': '21600',\n                '12h': '43200',\n                '1d': '86400',\n                '1w': '604800',\n                '1M': '2419200',\n                '4M': '9676800',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/108623144-67a3ef00-744e-11eb-8140-75c6b851e945.jpg',\n                'test': {\n                    'public': 'https://ndaxmarginstaging.cdnhop.net:8443/AP',\n                    'private': 'https://ndaxmarginstaging.cdnhop.net:8443/AP',\n                },\n                'api': {\n                    'public': 'https://api.ndax.io:8443/AP',\n                    'private': 'https://api.ndax.io:8443/AP',\n                },\n                'www': 'https://ndax.io',\n                'doc': [\n                    'https://apidoc.ndax.io/',\n                ],\n                'fees': 'https://ndax.io/fees',\n                'referral': 'https://one.ndax.io/bfQiSL',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'Activate2FA',\n                        'Authenticate2FA',\n                        'AuthenticateUser',\n                        'GetL2Snapshot',\n                        'GetLevel1',\n                        'GetValidate2FARequiredEndpoints',\n                        'LogOut',\n                        'GetTickerHistory',\n                        'GetProduct',\n                        'GetProducts',\n                        'GetInstrument',\n                        'GetInstruments',\n                        'Ping',\n                        'trades', // undocumented\n                        'GetLastTrades', // undocumented\n                        'SubscribeLevel1',\n                        'SubscribeLevel2',\n                        'SubscribeTicker',\n                        'SubscribeTrades',\n                        'SubscribeBlockTrades',\n                        'UnsubscribeBlockTrades',\n                        'UnsubscribeLevel1',\n                        'UnsubscribeLevel2',\n                        'UnsubscribeTicker',\n                        'UnsubscribeTrades',\n                        'Authenticate', // undocumented\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'GetUserAccountInfos',\n                        'GetUserAccounts',\n                        'GetUserAffiliateCount',\n                        'GetUserAffiliateTag',\n                        'GetUserConfig',\n                        'GetAllUnredactedUserConfigsForUser',\n                        'GetUnredactedUserConfigByKey',\n                        'GetUserDevices',\n                        'GetUserReportTickets',\n                        'GetUserReportWriterResultRecords',\n                        'GetAccountInfo',\n                        'GetAccountPositions',\n                        'GetAllAccountConfigs',\n                        'GetTreasuryProductsForAccount',\n                        'GetAccountTrades',\n                        'GetAccountTransactions',\n                        'GetOpenTradeReports',\n                        'GetAllOpenTradeReports',\n                        'GetTradesHistory',\n                        'GetOpenOrders',\n                        'GetOpenQuotes',\n                        'GetOrderFee',\n                        'GetOrderHistory',\n                        'GetOrdersHistory',\n                        'GetOrderStatus',\n                        'GetOmsFeeTiers',\n                        'GetAccountDepositTransactions',\n                        'GetAccountWithdrawTransactions',\n                        'GetAllDepositRequestInfoTemplates',\n                        'GetDepositInfo',\n                        'GetDepositRequestInfoTemplate',\n                        'GetDeposits',\n                        'GetDepositTicket',\n                        'GetDepositTickets',\n                        'GetOMSWithdrawFees',\n                        'GetWithdrawFee',\n                        'GetWithdraws',\n                        'GetWithdrawTemplate',\n                        'GetWithdrawTemplateTypes',\n                        'GetWithdrawTicket',\n                        'GetWithdrawTickets',\n                    ],\n                    'post': [\n                        'AddUserAffiliateTag',\n                        'CancelUserReport',\n                        'RegisterNewDevice',\n                        'SubscribeAccountEvents',\n                        'UpdateUserAffiliateTag',\n                        'GenerateTradeActivityReport',\n                        'GenerateTransactionActivityReport',\n                        'GenerateTreasuryActivityReport',\n                        'ScheduleTradeActivityReport',\n                        'ScheduleTransactionActivityReport',\n                        'ScheduleTreasuryActivityReport',\n                        'CancelAllOrders',\n                        'CancelOrder',\n                        'CancelQuote',\n                        'CancelReplaceOrder',\n                        'CreateQuote',\n                        'ModifyOrder',\n                        'SendOrder',\n                        'SubmitBlockTrade',\n                        'UpdateQuote',\n                        'CancelWithdraw',\n                        'CreateDepositTicket',\n                        'CreateWithdrawTicket',\n                        'SubmitDepositTicketComment',\n                        'SubmitWithdrawTicketComment',\n                        'GetOrderHistoryByOrderId',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.2 / 100,\n                    'taker': 0.25 / 100,\n                },\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'precisionMode': TICK_SIZE,\n            'exceptions': {\n                'exact': {\n                    'Not_Enough_Funds': InsufficientFunds, // {\"status\":\"Rejected\",\"errormsg\":\"Not_Enough_Funds\",\"errorcode\":101}\n                    'Server Error': ExchangeError, // {\"result\":false,\"errormsg\":\"Server Error\",\"errorcode\":102,\"detail\":null}\n                    'Resource Not Found': OrderNotFound, // {\"result\":false,\"errormsg\":\"Resource Not Found\",\"errorcode\":104,\"detail\":null}\n                },\n                'broad': {\n                    'Invalid InstrumentId': BadSymbol, // {\"result\":false,\"errormsg\":\"Invalid InstrumentId: 10000\",\"errorcode\":100,\"detail\":null}\n                },\n            },\n            'options': {\n                'omsId': 1,\n                'orderTypes': {\n                    'Market': 1,\n                    'Limit': 2,\n                    'StopMarket': 3,\n                    'StopLimit': 4,\n                    'TrailingStopMarket': 5,\n                    'TrailingStopLimit': 6,\n                    'BlockTrade': 7,\n                },\n            },\n        });\n    }\n\n    async fetchCurrencies (params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        const request = {\n            'omsId': omsId,\n        };\n        const response = await this.publicGetGetProducts (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"OMSId\":1,\n        //             \"ProductId\":1,\n        //             \"Product\":\"BTC\",\n        //             \"ProductFullName\":\"Bitcoin\",\n        //             \"ProductType\":\"CryptoCurrency\",\n        //             \"DecimalPlaces\":8,\n        //             \"TickSize\":0.0000000100000000000000000000,\n        //             \"NoFees\":false,\n        //             \"IsDisabled\":false,\n        //             \"MarginEnabled\":false\n        //         },\n        //     ]\n        //\n        const result = {};\n        for (let i = 0; i < response.length; i++) {\n            const currency = response[i];\n            const id = this.safeString (currency, 'ProductId');\n            const name = this.safeString (currency, 'ProductFullName');\n            const type = this.safeString (currency, 'ProductType');\n            const code = this.safeCurrencyCode (this.safeString (currency, 'Product'));\n            const precision = this.safeNumber (currency, 'TickSize');\n            const isDisabled = this.safeValue (currency, 'IsDisabled');\n            const active = !isDisabled;\n            result[code] = {\n                'id': id,\n                'name': name,\n                'code': code,\n                'type': type,\n                'precision': precision,\n                'info': currency,\n                'active': active,\n                'fee': undefined,\n                'limits': this.limits,\n            };\n        }\n        return result;\n    }\n\n    async fetchMarkets (params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        const request = {\n            'omsId': omsId,\n        };\n        const response = await this.publicGetGetInstruments (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"OMSId\":1,\n        //             \"InstrumentId\":3,\n        //             \"Symbol\":\"LTCBTC\",\n        //             \"Product1\":3,\n        //             \"Product1Symbol\":\"LTC\",\n        //             \"Product2\":1,\n        //             \"Product2Symbol\":\"BTC\",\n        //             \"InstrumentType\":\"Standard\",\n        //             \"VenueInstrumentId\":3,\n        //             \"VenueId\":1,\n        //             \"SortIndex\":0,\n        //             \"SessionStatus\":\"Running\",\n        //             \"PreviousSessionStatus\":\"Stopped\",\n        //             \"SessionStatusDateTime\":\"2020-11-25T19:42:15.245Z\",\n        //             \"SelfTradePrevention\":true,\n        //             \"QuantityIncrement\":0.0000000100000000000000000000,\n        //             \"PriceIncrement\":0.0000000100000000000000000000,\n        //             \"MinimumQuantity\":0.0100000000000000000000000000,\n        //             \"MinimumPrice\":0.0000010000000000000000000000,\n        //             \"VenueSymbol\":\"LTCBTC\",\n        //             \"IsDisable\":false,\n        //             \"MasterDataId\":0,\n        //             \"PriceCollarThreshold\":0.0000000000000000000000000000,\n        //             \"PriceCollarPercent\":0.0000000000000000000000000000,\n        //             \"PriceCollarEnabled\":false,\n        //             \"PriceFloorLimit\":0.0000000000000000000000000000,\n        //             \"PriceFloorLimitEnabled\":false,\n        //             \"PriceCeilingLimit\":0.0000000000000000000000000000,\n        //             \"PriceCeilingLimitEnabled\":false,\n        //             \"CreateWithMarketRunning\":true,\n        //             \"AllowOnlyMarketMakerCounterParty\":false,\n        //             \"PriceCollarIndexDifference\":0.0000000000000000000000000000,\n        //             \"PriceCollarConvertToOtcEnabled\":false,\n        //             \"PriceCollarConvertToOtcClientUserId\":0,\n        //             \"PriceCollarConvertToOtcAccountId\":0,\n        //             \"PriceCollarConvertToOtcThreshold\":0.0000000000000000000000000000,\n        //             \"OtcConvertSizeThreshold\":0.0000000000000000000000000000,\n        //             \"OtcConvertSizeEnabled\":false,\n        //             \"OtcTradesPublic\":true,\n        //             \"PriceTier\":0\n        //         },\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const market = response[i];\n            const id = this.safeString (market, 'InstrumentId');\n            // const lowercaseId = this.safeStringLower (market, 'symbol');\n            const baseId = this.safeString (market, 'Product1');\n            const quoteId = this.safeString (market, 'Product2');\n            const base = this.safeCurrencyCode (this.safeString (market, 'Product1Symbol'));\n            const quote = this.safeCurrencyCode (this.safeString (market, 'Product2Symbol'));\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': this.safeNumber (market, 'QuantityIncrement'),\n                'price': this.safeNumber (market, 'PriceIncrement'),\n            };\n            const sessionStatus = this.safeString (market, 'SessionStatus');\n            const isDisable = this.safeValue (market, 'IsDisable');\n            const sessionRunning = (sessionStatus === 'Running');\n            const active = (sessionRunning && !isDisable) ? true : false;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'info': market,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (market, 'MinimumQuantity'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': this.safeNumber (market, 'MinimumPrice'),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    parseOrderBook (orderbook, symbol, timestamp = undefined, bidsKey = 'bids', asksKey = 'asks', priceKey = 6, amountKey = 8) {\n        let nonce = undefined;\n        const result = {\n            'symbol': symbol,\n            'bids': [],\n            'asks': [],\n            'timestamp': undefined,\n            'datetime': undefined,\n            'nonce': undefined,\n        };\n        for (let i = 0; i < orderbook.length; i++) {\n            const level = orderbook[i];\n            if (timestamp === undefined) {\n                timestamp = this.safeInteger (level, 2);\n            } else {\n                const newTimestamp = this.safeInteger (level, 2);\n                timestamp = Math.max (timestamp, newTimestamp);\n            }\n            if (nonce === undefined) {\n                nonce = this.safeInteger (level, 0);\n            } else {\n                const newNonce = this.safeInteger (level, 0);\n                nonce = Math.max (nonce, newNonce);\n            }\n            const bidask = this.parseBidAsk (level, priceKey, amountKey);\n            const levelSide = this.safeInteger (level, 9);\n            const side = levelSide ? asksKey : bidsKey;\n            result[side].push (bidask);\n        }\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        result['timestamp'] = timestamp;\n        result['datetime'] = this.iso8601 (timestamp);\n        result['nonce'] = nonce;\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        limit = (limit === undefined) ? 100 : limit; // default 100\n        const request = {\n            'omsId': omsId,\n            'InstrumentId': market['id'],\n            'Depth': limit, // default 100\n        };\n        const response = await this.publicGetGetL2Snapshot (this.extend (request, params));\n        //\n        //     [\n        //         [\n        //             0,   // 0 MDUpdateId\n        //             1,   // 1 Number of Unique Accounts\n        //             123, // 2 ActionDateTime in Posix format X 1000\n        //             0,   // 3 ActionType 0 (New), 1 (Update), 2(Delete)\n        //             0.0, // 4 LastTradePrice\n        //             0,   // 5 Number of Orders\n        //             0.0, // 6 Price\n        //             0,   // 7 ProductPairCode\n        //             0.0, // 8 Quantity\n        //             0,   // 9 Side\n        //         ],\n        //         [97244115,1,1607456142963,0,19069.32,1,19069.31,8,0.140095,0],\n        //         [97244115,0,1607456142963,0,19069.32,1,19068.64,8,0.0055,0],\n        //         [97244115,0,1607456142963,0,19069.32,1,19068.26,8,0.021291,0],\n        //         [97244115,1,1607456142964,0,19069.32,1,19069.32,8,0.099636,1],\n        //         [97244115,0,1607456142964,0,19069.32,1,19069.98,8,0.1,1],\n        //         [97244115,0,1607456142964,0,19069.32,1,19069.99,8,0.141604,1],\n        //     ]\n        //\n        return this.parseOrderBook (response, symbol);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // fetchTicker\n        //\n        //     {\n        //         \"OMSId\":1,\n        //         \"InstrumentId\":8,\n        //         \"BestBid\":19069.31,\n        //         \"BestOffer\":19069.32,\n        //         \"LastTradedPx\":19069.32,\n        //         \"LastTradedQty\":0.0001,\n        //         \"LastTradeTime\":1607040406424,\n        //         \"SessionOpen\":19069.32,\n        //         \"SessionHigh\":19069.32,\n        //         \"SessionLow\":19069.32,\n        //         \"SessionClose\":19069.32,\n        //         \"Volume\":0.0001,\n        //         \"CurrentDayVolume\":0.0001,\n        //         \"CurrentDayNotional\":1.906932,\n        //         \"CurrentDayNumTrades\":1,\n        //         \"CurrentDayPxChange\":0.00,\n        //         \"Rolling24HrVolume\":0.000000000000000000000000000,\n        //         \"Rolling24HrNotional\":0.00000000000000000000000,\n        //         \"Rolling24NumTrades\":0,\n        //         \"Rolling24HrPxChange\":0,\n        //         \"TimeStamp\":\"1607040406425\",\n        //         \"BidQty\":0,\n        //         \"AskQty\":0,\n        //         \"BidOrderCt\":0,\n        //         \"AskOrderCt\":0,\n        //         \"Rolling24HrPxChangePercent\":0,\n        //     }\n        //\n        const timestamp = this.safeInteger (ticker, 'TimeStamp');\n        const marketId = this.safeString (ticker, 'InstrumentId');\n        const symbol = this.safeSymbol (marketId, market);\n        const last = this.safeNumber (ticker, 'LastTradedPx');\n        const percentage = this.safeNumber (ticker, 'Rolling24HrPxChangePercent');\n        const change = this.safeNumber (ticker, 'Rolling24HrPxChange');\n        const open = this.safeNumber (ticker, 'SessionOpen');\n        let average = undefined;\n        if ((last !== undefined) && (change !== undefined)) {\n            average = this.sum (last, open) / 2;\n        }\n        const baseVolume = this.safeNumber (ticker, 'Rolling24HrVolume');\n        const quoteVolume = this.safeNumber (ticker, 'Rolling24HrNotional');\n        const vwap = this.vwap (baseVolume, quoteVolume);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'SessionHigh'),\n            'low': this.safeNumber (ticker, 'SessionLow'),\n            'bid': this.safeNumber (ticker, 'BestBid'),\n            'bidVolume': undefined, // this.safeNumber (ticker, 'BidQty'), always shows 0\n            'ask': this.safeNumber (ticker, 'BestOffer'),\n            'askVolume': undefined, // this.safeNumber (ticker, 'AskQty'), always shows 0\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'omsId': omsId,\n            'InstrumentId': market['id'],\n        };\n        const response = await this.publicGetGetLevel1 (this.extend (request, params));\n        //\n        //     {\n        //         \"OMSId\":1,\n        //         \"InstrumentId\":8,\n        //         \"BestBid\":19069.31,\n        //         \"BestOffer\":19069.32,\n        //         \"LastTradedPx\":19069.32,\n        //         \"LastTradedQty\":0.0001,\n        //         \"LastTradeTime\":1607040406424,\n        //         \"SessionOpen\":19069.32,\n        //         \"SessionHigh\":19069.32,\n        //         \"SessionLow\":19069.32,\n        //         \"SessionClose\":19069.32,\n        //         \"Volume\":0.0001,\n        //         \"CurrentDayVolume\":0.0001,\n        //         \"CurrentDayNotional\":1.906932,\n        //         \"CurrentDayNumTrades\":1,\n        //         \"CurrentDayPxChange\":0.00,\n        //         \"Rolling24HrVolume\":0.000000000000000000000000000,\n        //         \"Rolling24HrNotional\":0.00000000000000000000000,\n        //         \"Rolling24NumTrades\":0,\n        //         \"Rolling24HrPxChange\":0,\n        //         \"TimeStamp\":\"1607040406425\",\n        //         \"BidQty\":0,\n        //         \"AskQty\":0,\n        //         \"BidOrderCt\":0,\n        //         \"AskOrderCt\":0,\n        //         \"Rolling24HrPxChangePercent\":0,\n        //     }\n        //\n        return this.parseTicker (response, market);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1501603632000, // 0 DateTime\n        //         2700.33,       // 1 High\n        //         2687.01,       // 2 Low\n        //         2687.01,       // 3 Open\n        //         2687.01,       // 4 Close\n        //         24.86100992,   // 5 Volume\n        //         0,             // 6 Inside Bid Price\n        //         2870.95,       // 7 Inside Ask Price\n        //         1              // 8 InstrumentId\n        //     ]\n        //\n        return [\n            this.safeInteger (ohlcv, 0),\n            this.safeNumber (ohlcv, 3),\n            this.safeNumber (ohlcv, 1),\n            this.safeNumber (ohlcv, 2),\n            this.safeNumber (ohlcv, 4),\n            this.safeNumber (ohlcv, 5),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'omsId': omsId,\n            'InstrumentId': market['id'],\n            'Interval': this.timeframes[timeframe],\n        };\n        const duration = this.parseTimeframe (timeframe);\n        const now = this.milliseconds ();\n        if (since === undefined) {\n            if (limit !== undefined) {\n                request['FromDate'] = this.ymdhms (now - duration * limit * 1000);\n                request['ToDate'] = this.ymdhms (now);\n            }\n        } else {\n            request['FromDate'] = this.ymdhms (since);\n            if (limit === undefined) {\n                request['ToDate'] = this.ymdhms (now);\n            } else {\n                request['ToDate'] = this.ymdhms (this.sum (since, duration * limit * 1000));\n            }\n        }\n        const response = await this.publicGetGetTickerHistory (this.extend (request, params));\n        //\n        //     [\n        //         [1607299260000,19069.32,19069.32,19069.32,19069.32,0,19069.31,19069.32,8,1607299200000],\n        //         [1607299320000,19069.32,19069.32,19069.32,19069.32,0,19069.31,19069.32,8,1607299260000],\n        //         [1607299380000,19069.32,19069.32,19069.32,19069.32,0,19069.31,19069.32,8,1607299320000],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     [\n        //         6913253,       //  0 TradeId\n        //         8,             //  1 ProductPairCode\n        //         0.03340802,    //  2 Quantity\n        //         19116.08,      //  3 Price\n        //         2543425077,    //  4 Order1\n        //         2543425482,    //  5 Order2\n        //         1606935922416, //  6 Tradetime\n        //         0,             //  7 Direction\n        //         1,             //  8 TakerSide\n        //         0,             //  9 BlockTrade\n        //         0,             // 10 Either Order1ClientId or Order2ClientId\n        //     ]\n        //\n        // fetchMyTrades (private)\n        //\n        //     {\n        //         \"OMSId\":1,\n        //         \"ExecutionId\":16916567,\n        //         \"TradeId\":14476351,\n        //         \"OrderId\":2543565231,\n        //         \"AccountId\":449,\n        //         \"AccountName\":\"igor@ccxt.trade\",\n        //         \"SubAccountId\":0,\n        //         \"ClientOrderId\":0,\n        //         \"InstrumentId\":8,\n        //         \"Side\":\"Sell\",\n        //         \"OrderType\":\"Market\",\n        //         \"Quantity\":0.1230000000000000000000000000,\n        //         \"RemainingQuantity\":0.0000000000000000000000000000,\n        //         \"Price\":19069.310000000000000000000000,\n        //         \"Value\":2345.5251300000000000000000000,\n        //         \"CounterParty\":\"7\",\n        //         \"OrderTradeRevision\":1,\n        //         \"Direction\":\"NoChange\",\n        //         \"IsBlockTrade\":false,\n        //         \"Fee\":1.1727625650000000000000000000,\n        //         \"FeeProductId\":8,\n        //         \"OrderOriginator\":446,\n        //         \"UserName\":\"igor@ccxt.trade\",\n        //         \"TradeTimeMS\":1607565031569,\n        //         \"MakerTaker\":\"Taker\",\n        //         \"AdapterTradeId\":0,\n        //         \"InsideBid\":19069.310000000000000000000000,\n        //         \"InsideBidSize\":0.2400950000000000000000000000,\n        //         \"InsideAsk\":19069.320000000000000000000000,\n        //         \"InsideAskSize\":0.0997360000000000000000000000,\n        //         \"IsQuote\":false,\n        //         \"CounterPartyClientUserId\":1,\n        //         \"NotionalProductId\":2,\n        //         \"NotionalRate\":1.0000000000000000000000000000,\n        //         \"NotionalValue\":2345.5251300000000000000000000,\n        //         \"NotionalHoldAmount\":0,\n        //         \"TradeTime\":637431618315686826\n        //     }\n        //\n        // fetchOrderTrades\n        //\n        //     {\n        //         \"Side\":\"Sell\",\n        //         \"OrderId\":2543565235,\n        //         \"Price\":18600.000000000000000000000000,\n        //         \"Quantity\":0.0000000000000000000000000000,\n        //         \"DisplayQuantity\":0.0000000000000000000000000000,\n        //         \"Instrument\":8,\n        //         \"Account\":449,\n        //         \"AccountName\":\"igor@ccxt.trade\",\n        //         \"OrderType\":\"Limit\",\n        //         \"ClientOrderId\":0,\n        //         \"OrderState\":\"FullyExecuted\",\n        //         \"ReceiveTime\":1607585844956,\n        //         \"ReceiveTimeTicks\":637431826449564182,\n        //         \"LastUpdatedTime\":1607585844959,\n        //         \"LastUpdatedTimeTicks\":637431826449593893,\n        //         \"OrigQuantity\":0.1230000000000000000000000000,\n        //         \"QuantityExecuted\":0.1230000000000000000000000000,\n        //         \"GrossValueExecuted\":2345.3947500000000000000000000,\n        //         \"ExecutableValue\":0.0000000000000000000000000000,\n        //         \"AvgPrice\":19068.250000000000000000000000,\n        //         \"CounterPartyId\":0,\n        //         \"ChangeReason\":\"Trade\",\n        //         \"OrigOrderId\":2543565235,\n        //         \"OrigClOrdId\":0,\n        //         \"EnteredBy\":446,\n        //         \"UserName\":\"igor@ccxt.trade\",\n        //         \"IsQuote\":false,\n        //         \"InsideAsk\":19069.320000000000000000000000,\n        //         \"InsideAskSize\":0.0997360000000000000000000000,\n        //         \"InsideBid\":19068.250000000000000000000000,\n        //         \"InsideBidSize\":1.3300010000000000000000000000,\n        //         \"LastTradePrice\":19068.250000000000000000000000,\n        //         \"RejectReason\":\"\",\n        //         \"IsLockedIn\":false,\n        //         \"CancelReason\":\"\",\n        //         \"OrderFlag\":\"0\",\n        //         \"UseMargin\":false,\n        //         \"StopPrice\":0.0000000000000000000000000000,\n        //         \"PegPriceType\":\"Unknown\",\n        //         \"PegOffset\":0.0000000000000000000000000000,\n        //         \"PegLimitOffset\":0.0000000000000000000000000000,\n        //         \"IpAddress\":\"5.228.233.138\",\n        //         \"ClientOrderIdUuid\":null,\n        //         \"OMSId\":1\n        //     }\n        //\n        let priceString = undefined;\n        let amountString = undefined;\n        let cost = undefined;\n        let timestamp = undefined;\n        let id = undefined;\n        let marketId = undefined;\n        let side = undefined;\n        let orderId = undefined;\n        let takerOrMaker = undefined;\n        let fee = undefined;\n        let type = undefined;\n        if (Array.isArray (trade)) {\n            priceString = this.safeString (trade, 3);\n            amountString = this.safeString (trade, 2);\n            timestamp = this.safeInteger (trade, 6);\n            id = this.safeString (trade, 0);\n            marketId = this.safeString (trade, 1);\n            const takerSide = this.safeValue (trade, 8);\n            side = takerSide ? 'sell' : 'buy';\n            orderId = this.safeString (trade, 4);\n        } else {\n            timestamp = this.safeInteger2 (trade, 'TradeTimeMS', 'ReceiveTime');\n            id = this.safeString (trade, 'TradeId');\n            orderId = this.safeString2 (trade, 'OrderId', 'OrigOrderId');\n            marketId = this.safeString2 (trade, 'InstrumentId', 'Instrument');\n            priceString = this.safeString (trade, 'Price');\n            amountString = this.safeString (trade, 'Quantity');\n            cost = this.safeNumber2 (trade, 'Value', 'GrossValueExecuted');\n            takerOrMaker = this.safeStringLower (trade, 'MakerTaker');\n            side = this.safeStringLower (trade, 'Side');\n            type = this.safeStringLower (trade, 'OrderType');\n            const feeCost = this.safeNumber (trade, 'Fee');\n            if (feeCost !== undefined) {\n                const feeCurrencyId = this.safeString (trade, 'FeeProductId');\n                const feeCurrencyCode = this.safeCurrencyCode (feeCurrencyId);\n                fee = {\n                    'cost': feeCost,\n                    'currency': feeCurrencyCode,\n                };\n            }\n        }\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        if (cost === undefined) {\n            cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        }\n        const symbol = this.safeSymbol (marketId, market);\n        return {\n            'info': trade,\n            'id': id,\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'order': orderId,\n            'type': type,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'omsId': omsId,\n            'InstrumentId': market['id'],\n        };\n        if (limit !== undefined) {\n            request['Count'] = limit;\n        }\n        const response = await this.publicGetGetLastTrades (this.extend (request, params));\n        //\n        //     [\n        //         [6913253,8,0.03340802,19116.08,2543425077,2543425482,1606935922416,0,1,0,0],\n        //         [6913254,8,0.01391671,19117.42,2543427510,2543427811,1606935927998,1,1,0,0],\n        //         [6913255,8,0.000006,19107.81,2543430495,2543430793,1606935933881,2,0,0,0],\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchAccounts (params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        this.checkRequiredCredentials ();\n        const request = {\n            'omsId': omsId,\n            'UserId': this.uid,\n            'UserName': 'igor@ccxt.trade',\n        };\n        const response = await this.privateGetGetUserAccounts (this.extend (request, params));\n        //\n        //     [ 449 ] // comma-separated list of account ids\n        //\n        const result = [];\n        for (let i = 0; i < response.length; i++) {\n            const accountId = this.safeString (response, i);\n            result.push ({\n                'id': accountId,\n                'type': undefined,\n                'currency': undefined,\n                'info': accountId,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        const request = {\n            'omsId': omsId,\n            'AccountId': accountId,\n        };\n        const response = await this.privateGetGetAccountPositions (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"OMSId\":1,\n        //             \"AccountId\":449,\n        //             \"ProductSymbol\":\"BTC\",\n        //             \"ProductId\":1,\n        //             \"Amount\":10.000000000000000000000000000,\n        //             \"Hold\":0,\n        //             \"PendingDeposits\":0.0000000000000000000000000000,\n        //             \"PendingWithdraws\":0.0000000000000000000000000000,\n        //             \"TotalDayDeposits\":10.000000000000000000000000000,\n        //             \"TotalMonthDeposits\":10.000000000000000000000000000,\n        //             \"TotalYearDeposits\":10.000000000000000000000000000,\n        //             \"TotalDayDepositNotional\":10.000000000000000000000000000,\n        //             \"TotalMonthDepositNotional\":10.000000000000000000000000000,\n        //             \"TotalYearDepositNotional\":10.000000000000000000000000000,\n        //             \"TotalDayWithdraws\":0,\n        //             \"TotalMonthWithdraws\":0,\n        //             \"TotalYearWithdraws\":0,\n        //             \"TotalDayWithdrawNotional\":0,\n        //             \"TotalMonthWithdrawNotional\":0,\n        //             \"TotalYearWithdrawNotional\":0,\n        //             \"NotionalProductId\":8,\n        //             \"NotionalProductSymbol\":\"USDT\",\n        //             \"NotionalValue\":10.000000000000000000000000000,\n        //             \"NotionalHoldAmount\":0,\n        //             \"NotionalRate\":1\n        //         },\n        //     ]\n        //\n        const result = {\n            'info': response,\n            'timestamp': undefined,\n            'datetime': undefined,\n        };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'ProductId');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeString (balance, 'Amount');\n            account['used'] = this.safeString (balance, 'Hold');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    parseLedgerEntryType (type) {\n        const types = {\n            'Trade': 'trade',\n            'Deposit': 'transaction',\n            'Withdraw': 'transaction',\n            'Transfer': 'transfer',\n            'OrderHold': 'trade',\n            'WithdrawHold': 'transaction',\n            'DepositHold': 'transaction',\n            'MarginHold': 'trade',\n            'ManualHold': 'trade',\n            'ManualEntry': 'trade',\n            'MarginAcquisition': 'trade',\n            'MarginRelinquish': 'trade',\n            'MarginQuoteHold': 'trade',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseLedgerEntry (item, currency = undefined) {\n        //\n        //     {\n        //         \"TransactionId\":2663709493,\n        //         \"ReferenceId\":68,\n        //         \"OMSId\":1,\n        //         \"AccountId\":449,\n        //         \"CR\":10.000000000000000000000000000,\n        //         \"DR\":0.0000000000000000000000000000,\n        //         \"Counterparty\":3,\n        //         \"TransactionType\":\"Other\",\n        //         \"ReferenceType\":\"Deposit\",\n        //         \"ProductId\":1,\n        //         \"Balance\":10.000000000000000000000000000,\n        //         \"TimeStamp\":1607532331591\n        //     }\n        //\n        const id = this.safeString (item, 'TransactionId');\n        const account = this.safeString (item, 'AccountId');\n        const referenceId = this.safeString (item, 'ReferenceId');\n        const referenceAccount = this.safeString (item, 'Counterparty');\n        const type = this.parseLedgerEntryType (this.safeString (item, 'ReferenceType'));\n        const currencyId = this.safeString (item, 'ProductId');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const credit = this.safeNumber (item, 'CR');\n        const debit = this.safeNumber (item, 'DR');\n        let amount = undefined;\n        let direction = undefined;\n        if (credit > 0) {\n            amount = credit;\n            direction = 'in';\n        } else if (debit > 0) {\n            amount = debit;\n            direction = 'out';\n        }\n        const timestamp = this.safeInteger (item, 'TimeStamp');\n        let before = undefined;\n        const after = this.safeNumber (item, 'Balance');\n        if (direction === 'out') {\n            before = this.sum (after, amount);\n        } else if (direction === 'in') {\n            before = Math.max (0, after - amount);\n        }\n        const status = 'ok';\n        return {\n            'info': item,\n            'id': id,\n            'direction': direction,\n            'account': account,\n            'referenceId': referenceId,\n            'referenceAccount': referenceAccount,\n            'type': type,\n            'currency': code,\n            'amount': amount,\n            'before': before,\n            'after': after,\n            'status': status,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'fee': undefined,\n        };\n    }\n\n    async fetchLedger (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        const request = {\n            'omsId': omsId,\n            'AccountId': accountId,\n        };\n        if (limit !== undefined) {\n            request['Depth'] = limit;\n        }\n        const response = await this.privateGetGetAccountTransactions (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"TransactionId\":2663709493,\n        //             \"ReferenceId\":68,\n        //             \"OMSId\":1,\n        //             \"AccountId\":449,\n        //             \"CR\":10.000000000000000000000000000,\n        //             \"DR\":0.0000000000000000000000000000,\n        //             \"Counterparty\":3,\n        //             \"TransactionType\":\"Other\",\n        //             \"ReferenceType\":\"Deposit\",\n        //             \"ProductId\":1,\n        //             \"Balance\":10.000000000000000000000000000,\n        //             \"TimeStamp\":1607532331591\n        //         },\n        //     ]\n        //\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        return this.parseLedger (response, currency, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'Accepted': 'open',\n            'Rejected': 'rejected',\n            'Working': 'open',\n            'Canceled': 'canceled',\n            'Expired': 'expired',\n            'FullyExecuted': 'closed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //     {\n        //         \"status\":\"Accepted\",\n        //         \"errormsg\":\"\",\n        //         \"OrderId\": 2543565231\n        //     }\n        //\n        // editOrder\n        //\n        //     {\n        //         \"ReplacementOrderId\": 1234,\n        //         \"ReplacementClOrdId\": 1561,\n        //         \"OrigOrderId\": 5678,\n        //         \"OrigClOrdId\": 91011,\n        //     }\n        //\n        // fetchOpenOrders, fetchClosedOrders\n        //\n        //     {\n        //         \"Side\":\"Buy\",\n        //         \"OrderId\":2543565233,\n        //         \"Price\":19010,\n        //         \"Quantity\":0.345,\n        //         \"DisplayQuantity\":0.345,\n        //         \"Instrument\":8,\n        //         \"Account\":449,\n        //         \"AccountName\":\"igor@ccxt.trade\",\n        //         \"OrderType\":\"Limit\",\n        //         \"ClientOrderId\":0,\n        //         \"OrderState\":\"Working\",\n        //         \"ReceiveTime\":1607579326003,\n        //         \"ReceiveTimeTicks\":637431761260028981,\n        //         \"LastUpdatedTime\":1607579326005,\n        //         \"LastUpdatedTimeTicks\":637431761260054714,\n        //         \"OrigQuantity\":0.345,\n        //         \"QuantityExecuted\":0,\n        //         \"GrossValueExecuted\":0,\n        //         \"ExecutableValue\":0,\n        //         \"AvgPrice\":0,\n        //         \"CounterPartyId\":0,\n        //         \"ChangeReason\":\"NewInputAccepted\",\n        //         \"OrigOrderId\":2543565233,\n        //         \"OrigClOrdId\":0,\n        //         \"EnteredBy\":446,\n        //         \"UserName\":\"igor@ccxt.trade\",\n        //         \"IsQuote\":false,\n        //         \"InsideAsk\":19069.32,\n        //         \"InsideAskSize\":0.099736,\n        //         \"InsideBid\":19068.25,\n        //         \"InsideBidSize\":1.330001,\n        //         \"LastTradePrice\":19068.25,\n        //         \"RejectReason\":\"\",\n        //         \"IsLockedIn\":false,\n        //         \"CancelReason\":\"\",\n        //         \"OrderFlag\":\"AddedToBook\",\n        //         \"UseMargin\":false,\n        //         \"StopPrice\":0,\n        //         \"PegPriceType\":\"Unknown\",\n        //         \"PegOffset\":0,\n        //         \"PegLimitOffset\":0,\n        //         \"IpAddress\":null,\n        //         \"ClientOrderIdUuid\":null,\n        //         \"OMSId\":1\n        //     }\n        //\n        const id = this.safeString2 (order, 'ReplacementOrderId', 'OrderId');\n        const timestamp = this.safeInteger (order, 'ReceiveTime');\n        const lastTradeTimestamp = this.safeInteger (order, 'LastUpdatedTime');\n        const marketId = this.safeString (order, 'Instrument');\n        const symbol = this.safeSymbol (marketId, market);\n        const side = this.safeStringLower (order, 'Side');\n        const type = this.safeStringLower (order, 'OrderType');\n        const clientOrderId = this.safeString2 (order, 'ReplacementClOrdId', 'ClientOrderId');\n        let price = this.safeNumber (order, 'Price', 0.0);\n        price = (price > 0.0) ? price : undefined;\n        const amount = this.safeNumber (order, 'OrigQuantity');\n        const filled = this.safeNumber (order, 'QuantityExecuted');\n        const cost = this.safeNumber (order, 'GrossValueExecuted');\n        let average = this.safeNumber (order, 'AvgPrice', 0.0);\n        average = (average > 0) ? average : undefined;\n        let stopPrice = this.safeNumber (order, 'StopPrice', 0.0);\n        stopPrice = (stopPrice > 0.0) ? stopPrice : undefined;\n        const timeInForce = undefined;\n        const status = this.parseOrderStatus (this.safeString (order, 'OrderState'));\n        const fee = undefined;\n        const trades = undefined;\n        return this.safeOrder ({\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'average': average,\n            'remaining': undefined,\n            'fee': fee,\n            'trades': trades,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        const clientOrderId = this.safeInteger2 (params, 'ClientOrderId', 'clientOrderId');\n        params = this.omit (params, [ 'accountId', 'AccountId', 'clientOrderId', 'ClientOrderId' ]);\n        const market = this.market (symbol);\n        const orderSide = (side === 'buy') ? 0 : 1;\n        const request = {\n            'InstrumentId': parseInt (market['id']),\n            'omsId': omsId,\n            'AccountId': accountId,\n            'TimeInForce': 1, // 0 Unknown, 1 GTC by default, 2 OPG execute as close to opening price as possible, 3 IOC immediate or canceled,  4 FOK fill-or-kill, 5 GTX good 'til executed, 6 GTD good 'til date\n            // 'ClientOrderId': clientOrderId, // defaults to 0\n            // If this order is order A, OrderIdOCO refers to the order ID of an order B (which is not the order being created by this call).\n            // If order B executes, then order A created by this call is canceled.\n            // You can also set up order B to watch order A in the same way, but that may require an update to order B to make it watch this one, which could have implications for priority in the order book.\n            // See CancelReplaceOrder and ModifyOrder.\n            // 'OrderIdOCO': 0, // The order ID if One Cancels the Other.\n            // 'UseDisplayQuantity': false, // If you enter a Limit order with a reserve, you must set UseDisplayQuantity to true\n            'Side': orderSide, // 0 Buy, 1 Sell, 2 Short, 3 unknown an error condition\n            'Quantity': parseFloat (this.amountToPrecision (symbol, amount)),\n            'OrderType': this.safeInteger (this.options['orderTypes'], this.capitalize (type)), // 0 Unknown, 1 Market, 2 Limit, 3 StopMarket, 4 StopLimit, 5 TrailingStopMarket, 6 TrailingStopLimit, 7 BlockTrade\n            // 'PegPriceType': 3, // 1 Last, 2 Bid, 3 Ask, 4 Midpoint\n            // 'LimitPrice': parseFloat (this.priceToPrecision (symbol, price)),\n        };\n        // If OrderType=1 (Market), Side=0 (Buy), and LimitPrice is supplied, the Market order will execute up to the value specified\n        if (price !== undefined) {\n            request['LimitPrice'] = parseFloat (this.priceToPrecision (symbol, price));\n        }\n        if (clientOrderId !== undefined) {\n            request['ClientOrderId'] = clientOrderId;\n        }\n        const response = await this.privatePostSendOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":\"Accepted\",\n        //         \"errormsg\":\"\",\n        //         \"OrderId\": 2543565231\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async editOrder (id, symbol, type, side, amount, price = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        const clientOrderId = this.safeInteger2 (params, 'ClientOrderId', 'clientOrderId');\n        params = this.omit (params, [ 'accountId', 'AccountId', 'clientOrderId', 'ClientOrderId' ]);\n        const market = this.market (symbol);\n        const orderSide = (side === 'buy') ? 0 : 1;\n        const request = {\n            'OrderIdToReplace': parseInt (id),\n            'InstrumentId': parseInt (market['id']),\n            'omsId': omsId,\n            'AccountId': accountId,\n            'TimeInForce': 1, // 0 Unknown, 1 GTC by default, 2 OPG execute as close to opening price as possible, 3 IOC immediate or canceled,  4 FOK fill-or-kill, 5 GTX good 'til executed, 6 GTD good 'til date\n            // 'ClientOrderId': clientOrderId, // defaults to 0\n            // If this order is order A, OrderIdOCO refers to the order ID of an order B (which is not the order being created by this call).\n            // If order B executes, then order A created by this call is canceled.\n            // You can also set up order B to watch order A in the same way, but that may require an update to order B to make it watch this one, which could have implications for priority in the order book.\n            // See CancelReplaceOrder and ModifyOrder.\n            // 'OrderIdOCO': 0, // The order ID if One Cancels the Other.\n            // 'UseDisplayQuantity': false, // If you enter a Limit order with a reserve, you must set UseDisplayQuantity to true\n            'Side': orderSide, // 0 Buy, 1 Sell, 2 Short, 3 unknown an error condition\n            'Quantity': parseFloat (this.amountToPrecision (symbol, amount)),\n            'OrderType': this.safeInteger (this.options['orderTypes'], this.capitalize (type)), // 0 Unknown, 1 Market, 2 Limit, 3 StopMarket, 4 StopLimit, 5 TrailingStopMarket, 6 TrailingStopLimit, 7 BlockTrade\n            // 'PegPriceType': 3, // 1 Last, 2 Bid, 3 Ask, 4 Midpoint\n            // 'LimitPrice': parseFloat (this.priceToPrecision (symbol, price)),\n        };\n        // If OrderType=1 (Market), Side=0 (Buy), and LimitPrice is supplied, the Market order will execute up to the value specified\n        if (price !== undefined) {\n            request['LimitPrice'] = parseFloat (this.priceToPrecision (symbol, price));\n        }\n        if (clientOrderId !== undefined) {\n            request['ClientOrderId'] = clientOrderId;\n        }\n        const response = await this.privatePostCancelReplaceOrder (this.extend (request, params));\n        //\n        //     {\n        //         \"replacementOrderId\": 1234,\n        //         \"replacementClOrdId\": 1561,\n        //         \"origOrderId\": 5678,\n        //         \"origClOrdId\": 91011,\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        const request = {\n            'omsId': omsId,\n            'AccountId': accountId,\n            // 'InstrumentId': market['id'],\n            // 'TradeId': 123, // If you specify TradeId, GetTradesHistory can return all states for a single trade\n            // 'OrderId': 456, // If specified, the call returns all trades associated with the order\n            // 'UserId': integer. The ID of the logged-in user. If not specified, the call returns trades associated with the users belonging to the default account for the logged-in user of this OMS.\n            // 'StartTimeStamp': long integer. The historical date and time at which to begin the trade report, in POSIX format. If not specified, reverts to the start date of this account on the trading venue.\n            // 'EndTimeStamp': long integer. Date at which to end the trade report, in POSIX format.\n            // 'Depth': integer. In this case, the count of trades to return, counting from the StartIndex. If Depth is not specified, returns all trades between BeginTimeStamp and EndTimeStamp, beginning at StartIndex.\n            // 'StartIndex': 0 // from the most recent trade 0 and moving backwards in time\n            // 'ExecutionId': 123, // The ID of the individual buy or sell execution. If not specified, returns all.\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['InstrumentId'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['StartTimeStamp'] = parseInt (since / 1000);\n        }\n        if (limit !== undefined) {\n            request['Depth'] = limit;\n        }\n        const response = await this.privateGetGetTradesHistory (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"OMSId\":1,\n        //             \"ExecutionId\":16916567,\n        //             \"TradeId\":14476351,\n        //             \"OrderId\":2543565231,\n        //             \"AccountId\":449,\n        //             \"AccountName\":\"igor@ccxt.trade\",\n        //             \"SubAccountId\":0,\n        //             \"ClientOrderId\":0,\n        //             \"InstrumentId\":8,\n        //             \"Side\":\"Sell\",\n        //             \"OrderType\":\"Market\",\n        //             \"Quantity\":0.1230000000000000000000000000,\n        //             \"RemainingQuantity\":0.0000000000000000000000000000,\n        //             \"Price\":19069.310000000000000000000000,\n        //             \"Value\":2345.5251300000000000000000000,\n        //             \"CounterParty\":\"7\",\n        //             \"OrderTradeRevision\":1,\n        //             \"Direction\":\"NoChange\",\n        //             \"IsBlockTrade\":false,\n        //             \"Fee\":1.1727625650000000000000000000,\n        //             \"FeeProductId\":8,\n        //             \"OrderOriginator\":446,\n        //             \"UserName\":\"igor@ccxt.trade\",\n        //             \"TradeTimeMS\":1607565031569,\n        //             \"MakerTaker\":\"Taker\",\n        //             \"AdapterTradeId\":0,\n        //             \"InsideBid\":19069.310000000000000000000000,\n        //             \"InsideBidSize\":0.2400950000000000000000000000,\n        //             \"InsideAsk\":19069.320000000000000000000000,\n        //             \"InsideAskSize\":0.0997360000000000000000000000,\n        //             \"IsQuote\":false,\n        //             \"CounterPartyClientUserId\":1,\n        //             \"NotionalProductId\":2,\n        //             \"NotionalRate\":1.0000000000000000000000000000,\n        //             \"NotionalValue\":2345.5251300000000000000000000,\n        //             \"NotionalHoldAmount\":0,\n        //             \"TradeTime\":637431618315686826\n        //         }\n        //     ]\n        //\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        const request = {\n            'omsId': omsId,\n            'AccountId': accountId,\n        };\n        if (symbol !== undefined) {\n            const market = this.market (symbol);\n            request['IntrumentId'] = market['id'];\n        }\n        const response = await this.privatePostCancelAllOrders (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":true,\n        //         \"errormsg\":null,\n        //         \"errorcode\":0,\n        //         \"detail\":null\n        //     }\n        //\n        return response;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        // const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        // const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        // params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = {\n            'omsId': omsId,\n            // 'AccountId': accountId,\n        };\n        const clientOrderId = this.safeInteger2 (params, 'clientOrderId', 'ClOrderId');\n        if (clientOrderId !== undefined) {\n            request['ClOrderId'] = clientOrderId;\n        } else {\n            request['OrderId'] = parseInt (id);\n        }\n        params = this.omit (params, [ 'clientOrderId', 'ClOrderId' ]);\n        const response = await this.privatePostCancelOrder (this.extend (request, params));\n        const order = this.parseOrder (response, market);\n        return this.extend (order, {\n            'id': id,\n            'clientOrderId': clientOrderId,\n        });\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = {\n            'omsId': omsId,\n            'AccountId': accountId,\n        };\n        const response = await this.privateGetGetOpenOrders (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"Side\":\"Buy\",\n        //             \"OrderId\":2543565233,\n        //             \"Price\":19010,\n        //             \"Quantity\":0.345,\n        //             \"DisplayQuantity\":0.345,\n        //             \"Instrument\":8,\n        //             \"Account\":449,\n        //             \"AccountName\":\"igor@ccxt.trade\",\n        //             \"OrderType\":\"Limit\",\n        //             \"ClientOrderId\":0,\n        //             \"OrderState\":\"Working\",\n        //             \"ReceiveTime\":1607579326003,\n        //             \"ReceiveTimeTicks\":637431761260028981,\n        //             \"LastUpdatedTime\":1607579326005,\n        //             \"LastUpdatedTimeTicks\":637431761260054714,\n        //             \"OrigQuantity\":0.345,\n        //             \"QuantityExecuted\":0,\n        //             \"GrossValueExecuted\":0,\n        //             \"ExecutableValue\":0,\n        //             \"AvgPrice\":0,\n        //             \"CounterPartyId\":0,\n        //             \"ChangeReason\":\"NewInputAccepted\",\n        //             \"OrigOrderId\":2543565233,\n        //             \"OrigClOrdId\":0,\n        //             \"EnteredBy\":446,\n        //             \"UserName\":\"igor@ccxt.trade\",\n        //             \"IsQuote\":false,\n        //             \"InsideAsk\":19069.32,\n        //             \"InsideAskSize\":0.099736,\n        //             \"InsideBid\":19068.25,\n        //             \"InsideBidSize\":1.330001,\n        //             \"LastTradePrice\":19068.25,\n        //             \"RejectReason\":\"\",\n        //             \"IsLockedIn\":false,\n        //             \"CancelReason\":\"\",\n        //             \"OrderFlag\":\"AddedToBook\",\n        //             \"UseMargin\":false,\n        //             \"StopPrice\":0,\n        //             \"PegPriceType\":\"Unknown\",\n        //             \"PegOffset\":0,\n        //             \"PegLimitOffset\":0,\n        //             \"IpAddress\":null,\n        //             \"ClientOrderIdUuid\":null,\n        //             \"OMSId\":1\n        //         }\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        const request = {\n            'omsId': omsId,\n            'AccountId': accountId,\n            // 'ClientOrderId': clientOrderId,\n            // 'OriginalOrderId': id,\n            // 'OriginalClientOrderId': long integer,\n            // 'UserId': integer,\n            // 'InstrumentId': market['id'],\n            // 'StartTimestamp': since,\n            // 'EndTimestamp': this.milliseconds (),\n            // 'Depth': limit,\n            // 'StartIndex': 0,\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['InstrumentId'] = market['id'];\n        }\n        if (since !== undefined) {\n            request['StartTimeStamp'] = parseInt (since / 1000);\n        }\n        if (limit !== undefined) {\n            request['Depth'] = limit;\n        }\n        const response = await this.privateGetGetOrdersHistory (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"Side\":\"Buy\",\n        //             \"OrderId\":2543565233,\n        //             \"Price\":19010.000000000000000000000000,\n        //             \"Quantity\":0.0000000000000000000000000000,\n        //             \"DisplayQuantity\":0.3450000000000000000000000000,\n        //             \"Instrument\":8,\n        //             \"Account\":449,\n        //             \"AccountName\":\"igor@ccxt.trade\",\n        //             \"OrderType\":\"Limit\",\n        //             \"ClientOrderId\":0,\n        //             \"OrderState\":\"Canceled\",\n        //             \"ReceiveTime\":1607579326003,\n        //             \"ReceiveTimeTicks\":637431761260028981,\n        //             \"LastUpdatedTime\":1607580965346,\n        //             \"LastUpdatedTimeTicks\":637431777653463754,\n        //             \"OrigQuantity\":0.3450000000000000000000000000,\n        //             \"QuantityExecuted\":0.0000000000000000000000000000,\n        //             \"GrossValueExecuted\":0.0000000000000000000000000000,\n        //             \"ExecutableValue\":0.0000000000000000000000000000,\n        //             \"AvgPrice\":0.0000000000000000000000000000,\n        //             \"CounterPartyId\":0,\n        //             \"ChangeReason\":\"UserModified\",\n        //             \"OrigOrderId\":2543565233,\n        //             \"OrigClOrdId\":0,\n        //             \"EnteredBy\":446,\n        //             \"UserName\":\"igor@ccxt.trade\",\n        //             \"IsQuote\":false,\n        //             \"InsideAsk\":19069.320000000000000000000000,\n        //             \"InsideAskSize\":0.0997360000000000000000000000,\n        //             \"InsideBid\":19068.250000000000000000000000,\n        //             \"InsideBidSize\":1.3300010000000000000000000000,\n        //             \"LastTradePrice\":19068.250000000000000000000000,\n        //             \"RejectReason\":\"\",\n        //             \"IsLockedIn\":false,\n        //             \"CancelReason\":\"UserModified\",\n        //             \"OrderFlag\":\"AddedToBook, RemovedFromBook\",\n        //             \"UseMargin\":false,\n        //             \"StopPrice\":0.0000000000000000000000000000,\n        //             \"PegPriceType\":\"Unknown\",\n        //             \"PegOffset\":0.0000000000000000000000000000,\n        //             \"PegLimitOffset\":0.0000000000000000000000000000,\n        //             \"IpAddress\":\"5.228.233.138\",\n        //             \"ClientOrderIdUuid\":null,\n        //             \"OMSId\":1\n        //         },\n        //     ]\n        //\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = {\n            'omsId': omsId,\n            'AccountId': accountId,\n            'OrderId': parseInt (id),\n        };\n        const response = await this.privateGetGetOrderStatus (this.extend (request, params));\n        //\n        //     {\n        //         \"Side\":\"Sell\",\n        //         \"OrderId\":2543565232,\n        //         \"Price\":0.0000000000000000000000000000,\n        //         \"Quantity\":0.0000000000000000000000000000,\n        //         \"DisplayQuantity\":0.0000000000000000000000000000,\n        //         \"Instrument\":8,\n        //         \"Account\":449,\n        //         \"AccountName\":\"igor@ccxt.trade\",\n        //         \"OrderType\":\"Market\",\n        //         \"ClientOrderId\":0,\n        //         \"OrderState\":\"FullyExecuted\",\n        //         \"ReceiveTime\":1607569475591,\n        //         \"ReceiveTimeTicks\":637431662755912377,\n        //         \"LastUpdatedTime\":1607569475596,\n        //         \"LastUpdatedTimeTicks\":637431662755960902,\n        //         \"OrigQuantity\":1.0000000000000000000000000000,\n        //         \"QuantityExecuted\":1.0000000000000000000000000000,\n        //         \"GrossValueExecuted\":19068.270478610000000000000000,\n        //         \"ExecutableValue\":0.0000000000000000000000000000,\n        //         \"AvgPrice\":19068.270478610000000000000000,\n        //         \"CounterPartyId\":0,\n        //         \"ChangeReason\":\"Trade\",\n        //         \"OrigOrderId\":2543565232,\n        //         \"OrigClOrdId\":0,\n        //         \"EnteredBy\":446,\n        //         \"UserName\":\"igor@ccxt.trade\",\n        //         \"IsQuote\":false,\n        //         \"InsideAsk\":19069.320000000000000000000000,\n        //         \"InsideAskSize\":0.0997360000000000000000000000,\n        //         \"InsideBid\":19069.310000000000000000000000,\n        //         \"InsideBidSize\":0.2400950000000000000000000000,\n        //         \"LastTradePrice\":19069.310000000000000000000000,\n        //         \"RejectReason\":\"\",\n        //         \"IsLockedIn\":false,\n        //         \"CancelReason\":\"\",\n        //         \"OrderFlag\":\"0\",\n        //         \"UseMargin\":false,\n        //         \"StopPrice\":0.0000000000000000000000000000,\n        //         \"PegPriceType\":\"Unknown\",\n        //         \"PegOffset\":0.0000000000000000000000000000,\n        //         \"PegLimitOffset\":0.0000000000000000000000000000,\n        //         \"IpAddress\":\"5.228.233.138\",\n        //         \"ClientOrderIdUuid\":null,\n        //         \"OMSId\":1\n        //     }\n        //\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        // const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        // const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        // params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const request = {\n            'OMSId': parseInt (omsId),\n            // 'AccountId': accountId,\n            'OrderId': id,\n        };\n        const response = await this.privatePostGetOrderHistoryByOrderId (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"Side\":\"Sell\",\n        //             \"OrderId\":2543565235,\n        //             \"Price\":18600.000000000000000000000000,\n        //             \"Quantity\":0.0000000000000000000000000000,\n        //             \"DisplayQuantity\":0.0000000000000000000000000000,\n        //             \"Instrument\":8,\n        //             \"Account\":449,\n        //             \"AccountName\":\"igor@ccxt.trade\",\n        //             \"OrderType\":\"Limit\",\n        //             \"ClientOrderId\":0,\n        //             \"OrderState\":\"FullyExecuted\",\n        //             \"ReceiveTime\":1607585844956,\n        //             \"ReceiveTimeTicks\":637431826449564182,\n        //             \"LastUpdatedTime\":1607585844959,\n        //             \"LastUpdatedTimeTicks\":637431826449593893,\n        //             \"OrigQuantity\":0.1230000000000000000000000000,\n        //             \"QuantityExecuted\":0.1230000000000000000000000000,\n        //             \"GrossValueExecuted\":2345.3947500000000000000000000,\n        //             \"ExecutableValue\":0.0000000000000000000000000000,\n        //             \"AvgPrice\":19068.250000000000000000000000,\n        //             \"CounterPartyId\":0,\n        //             \"ChangeReason\":\"Trade\",\n        //             \"OrigOrderId\":2543565235,\n        //             \"OrigClOrdId\":0,\n        //             \"EnteredBy\":446,\n        //             \"UserName\":\"igor@ccxt.trade\",\n        //             \"IsQuote\":false,\n        //             \"InsideAsk\":19069.320000000000000000000000,\n        //             \"InsideAskSize\":0.0997360000000000000000000000,\n        //             \"InsideBid\":19068.250000000000000000000000,\n        //             \"InsideBidSize\":1.3300010000000000000000000000,\n        //             \"LastTradePrice\":19068.250000000000000000000000,\n        //             \"RejectReason\":\"\",\n        //             \"IsLockedIn\":false,\n        //             \"CancelReason\":\"\",\n        //             \"OrderFlag\":\"0\",\n        //             \"UseMargin\":false,\n        //             \"StopPrice\":0.0000000000000000000000000000,\n        //             \"PegPriceType\":\"Unknown\",\n        //             \"PegOffset\":0.0000000000000000000000000000,\n        //             \"PegLimitOffset\":0.0000000000000000000000000000,\n        //             \"IpAddress\":\"5.228.233.138\",\n        //             \"ClientOrderIdUuid\":null,\n        //             \"OMSId\":1\n        //         },\n        //     ]\n        //\n        const grouped = this.groupBy (response, 'ChangeReason');\n        const trades = this.safeValue (grouped, 'Trade', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        const currency = this.currency (code);\n        const request = {\n            'omsId': omsId,\n            'AccountId': accountId,\n            'ProductId': currency['id'],\n            'GenerateNewKey': false,\n        };\n        const response = await this.privateGetGetDepositInfo (this.extend (request, params));\n        //\n        //     {\n        //         \"result\":true,\n        //         \"errormsg\":null,\n        //         \"statuscode\":0,\n        //         \"AssetManagerId\":1,\n        //         \"AccountId\":57922,\n        //         \"AssetId\":16,\n        //         \"ProviderId\":23,\n        //         \"DepositInfo\":\"[\\\"0x8A27564b5c30b91C93B1591821642420F323a210\\\"]\"\n        //     }\n        //\n        return this.parseDepositAddress (response, currency);\n    }\n\n    parseDepositAddress (depositAddress, currency = undefined) {\n        //\n        // fetchDepositAddress, createDepositAddress\n        //\n        //     {\n        //         \"result\":true,\n        //         \"errormsg\":null,\n        //         \"statuscode\":0,\n        //         \"AssetManagerId\":1,\n        //         \"AccountId\":449,\n        //         \"AssetId\":1,\n        //         \"ProviderId\":1,\n        //         \"DepositInfo\":\"[\\\"r3e95RwVsLH7yCbnMfyh7SA8FdwUJCB4S2?memo=241452010\\\"]\"\n        //     }\n        //\n        const depositInfoString = this.safeString (depositAddress, 'DepositInfo');\n        const depositInfo = JSON.parse (depositInfoString);\n        const depositInfoLength = depositInfo.length;\n        const lastString = this.safeString (depositInfo, depositInfoLength - 1);\n        const parts = lastString.split ('?memo=');\n        const address = this.safeString (parts, 0);\n        const tag = this.safeString (parts, 1);\n        let code = undefined;\n        if (currency !== undefined) {\n            code = currency['code'];\n        }\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': depositAddress,\n        };\n    }\n\n    async createDepositAddress (code, params = {}) {\n        const request = {\n            'GenerateNewKey': true,\n        };\n        return await this.fetchDepositAddress (code, this.extend (request, params));\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const request = {\n            'omsId': omsId,\n            'AccountId': accountId,\n        };\n        const response = await this.privateGetGetDeposits (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"OMSId\":1,\n        //             \"DepositId\":44,\n        //             \"AccountId\":449,\n        //             \"SubAccountId\":0,\n        //             \"ProductId\":4,\n        //             \"Amount\":200.00000000000000000000000000,\n        //             \"LastUpdateTimeStamp\":637431291261187806,\n        //             \"ProductType\":\"CryptoCurrency\",\n        //             \"TicketStatus\":\"FullyProcessed\",\n        //             \"DepositInfo\":\"{}\",\n        //             \"DepositCode\":\"ab0e23d5-a9ce-4d94-865f-9ab464fb1de3\",\n        //             \"TicketNumber\":71,\n        //             \"NotionalProductId\":13,\n        //             \"NotionalValue\":200.00000000000000000000000000,\n        //             \"FeeAmount\":0.0000000000000000000000000000,\n        //         },\n        //     ]\n        //\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        const omsId = this.safeInteger (this.options, 'omsId', 1);\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        const defaultAccountId = this.safeInteger2 (this.options, 'accountId', 'AccountId', parseInt (this.accounts[0]['id']));\n        const accountId = this.safeInteger2 (params, 'accountId', 'AccountId', defaultAccountId);\n        params = this.omit (params, [ 'accountId', 'AccountId' ]);\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const request = {\n            'omsId': omsId,\n            'AccountId': accountId,\n        };\n        const response = await this.privateGetGetWithdraws (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"Amount\": 0.0,\n        //             \"FeeAmount\": 0.0,\n        //             \"NotionalValue\": 0.0,\n        //             \"WithdrawId\": 0,\n        //             \"AssetManagerId\": 0,\n        //             \"AccountId\": 0,\n        //             \"AssetId\": 0,\n        //             \"TemplateForm\": \"{\\\"TemplateType\\\": \\\"TetherRPCWithdraw\\\",\\\"Comment\\\": \\\"TestWithdraw\\\",\\\"ExternalAddress\\\": \\\"ms6C3pKAAr8gRCcnVebs8VRkVrjcvqNYv3\\\"}\",\n        //             \"TemplateFormType\": \"TetherRPCWithdraw\",\n        //             \"omsId\": 0,\n        //             \"TicketStatus\": 0,\n        //             \"TicketNumber\": 0,\n        //             \"WithdrawTransactionDetails\": \"\",\n        //             \"WithdrawType\": \"\",\n        //             \"WithdrawCode\": \"490b4fa3-53fc-44f4-bd29-7e16be86fba3\",\n        //             \"AssetType\": 0,\n        //             \"Reaccepted\": true,\n        //             \"NotionalProductId\": 0\n        //         },\n        //     ]\n        //\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    parseTransactionStatusByType (status, type = undefined) {\n        const statusesByType = {\n            'deposit': {\n                'New': 'pending', // new ticket awaiting operator review\n                'AdminProcessing': 'pending', // an admin is looking at the ticket\n                'Accepted': 'pending', // an admin accepts the ticket\n                'Rejected': 'rejected', // admin rejects the ticket\n                'SystemProcessing': 'pending', // automatic processing; an unlikely status for a deposit\n                'FullyProcessed': 'ok', // the deposit has concluded\n                'Failed': 'failed', // the deposit has failed for some reason\n                'Pending': 'pending', // Account Provider has set status to pending\n                'Confirmed': 'pending', // Account Provider confirms the deposit\n                'AmlProcessing': 'pending', // anti-money-laundering process underway\n                'AmlAccepted': 'pending', // anti-money-laundering process successful\n                'AmlRejected': 'rejected', // deposit did not stand up to anti-money-laundering process\n                'AmlFailed': 'failed', // anti-money-laundering process failed/did not complete\n                'LimitsAccepted': 'pending', // deposit meets limits for fiat or crypto asset\n                'LimitsRejected': 'rejected', // deposit does not meet limits for fiat or crypto asset\n            },\n            'withdrawal': {\n                'New': 'pending', // awaiting operator review\n                'AdminProcessing': 'pending', // An admin is looking at the ticket\n                'Accepted': 'pending', // withdrawal will proceed\n                'Rejected': 'rejected', // admin or automatic rejection\n                'SystemProcessing': 'pending', // automatic processing underway\n                'FullyProcessed': 'ok', // the withdrawal has concluded\n                'Failed': 'failed', // the withdrawal failed for some reason\n                'Pending': 'pending', // the admin has placed the withdrawal in pending status\n                'Pending2Fa': 'pending', // user must click 2-factor authentication confirmation link\n                'AutoAccepted': 'pending', // withdrawal will be automatically processed\n                'Delayed': 'pending', // waiting for funds to be allocated for the withdrawal\n                'UserCanceled': 'canceled', // withdraw canceled by user or Superuser\n                'AdminCanceled': 'canceled', // withdraw canceled by Superuser\n                'AmlProcessing': 'pending', // anti-money-laundering process underway\n                'AmlAccepted': 'pending', // anti-money-laundering process complete\n                'AmlRejected': 'rejected', // withdrawal did not stand up to anti-money-laundering process\n                'AmlFailed': 'failed', // withdrawal did not complete anti-money-laundering process\n                'LimitsAccepted': 'pending', // withdrawal meets limits for fiat or crypto asset\n                'LimitsRejected': 'rejected', // withdrawal does not meet limits for fiat or crypto asset\n                'Submitted': 'pending', // withdrawal sent to Account Provider; awaiting blockchain confirmation\n                'Confirmed': 'pending', // Account Provider confirms that withdrawal is on the blockchain\n                'ManuallyConfirmed': 'pending', // admin has sent withdrawal via wallet or admin function directly; marks ticket as FullyProcessed; debits account\n                'Confirmed2Fa': 'pending', // user has confirmed withdraw via 2-factor authentication.\n            },\n        };\n        const statuses = this.safeValue (statusesByType, type, {});\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"OMSId\":1,\n        //         \"DepositId\":44,\n        //         \"AccountId\":449,\n        //         \"SubAccountId\":0,\n        //         \"ProductId\":4,\n        //         \"Amount\":200.00000000000000000000000000,\n        //         \"LastUpdateTimeStamp\":637431291261187806,\n        //         \"ProductType\":\"CryptoCurrency\",\n        //         \"TicketStatus\":\"FullyProcessed\",\n        //         \"DepositInfo\":\"{}\",\n        //         \"DepositCode\":\"ab0e23d5-a9ce-4d94-865f-9ab464fb1de3\",\n        //         \"TicketNumber\":71,\n        //         \"NotionalProductId\":13,\n        //         \"NotionalValue\":200.00000000000000000000000000,\n        //         \"FeeAmount\":0.0000000000000000000000000000,\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"Amount\": 0.0,\n        //         \"FeeAmount\": 0.0,\n        //         \"NotionalValue\": 0.0,\n        //         \"WithdrawId\": 0,\n        //         \"AssetManagerId\": 0,\n        //         \"AccountId\": 0,\n        //         \"AssetId\": 0,\n        //         \"TemplateForm\": \"{\\\"TemplateType\\\": \\\"TetherRPCWithdraw\\\",\\\"Comment\\\": \\\"TestWithdraw\\\",\\\"ExternalAddress\\\": \\\"ms6C3pKAAr8gRCcnVebs8VRkVrjcvqNYv3\\\"}\",\n        //         \"TemplateFormType\": \"TetherRPCWithdraw\",\n        //         \"omsId\": 0,\n        //         \"TicketStatus\": 0,\n        //         \"TicketNumber\": 0,\n        //         \"WithdrawTransactionDetails\": \"\",\n        //         \"WithdrawType\": \"\",\n        //         \"WithdrawCode\": \"490b4fa3-53fc-44f4-bd29-7e16be86fba3\",\n        //         \"AssetType\": 0,\n        //         \"Reaccepted\": true,\n        //         \"NotionalProductId\": 0\n        //     }\n        //\n        const id = this.safeString (transaction, 'DepositId');\n        let txid = undefined;\n        const currencyId = this.safeString (transaction, 'ProductId');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        let timestamp = undefined;\n        let type = undefined;\n        if ('DepositId' in transaction) {\n            type = 'deposit';\n        } else if ('WithdrawId' in transaction) {\n            type = 'withdrawal';\n        }\n        const templateFormString = this.safeString (transaction, 'TemplateForm');\n        let address = undefined;\n        let updated = this.safeInteger (transaction, 'LastUpdateTimeStamp');\n        if (templateFormString !== undefined) {\n            const templateForm = JSON.parse (templateFormString);\n            address = this.safeString (templateForm, 'ExternalAddress');\n            txid = this.safeString (templateForm, 'TxId');\n            timestamp = this.safeInteger (templateForm, 'TimeSubmitted');\n            updated = this.safeInteger (templateForm, 'LastUpdated', updated);\n        }\n        const addressTo = address;\n        const status = this.parseTransactionStatusByType (this.safeString (transaction, 'TicketStatus'), type);\n        const amount = this.safeNumber (transaction, 'Amount');\n        const feeCost = this.safeNumber (transaction, 'FeeAmount');\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            fee = { 'currency': code, 'cost': feeCost };\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'addressTo': addressTo,\n            'addressFrom': undefined,\n            'tag': undefined,\n            'tagTo': undefined,\n            'tagFrom': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': fee,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const auth = nonce + this.uid + this.apiKey;\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            headers = {\n                'Nonce': nonce,\n                'APIKey': this.apiKey,\n                'Signature': signature,\n                'UserId': this.uid,\n            };\n            if (method === 'POST') {\n                headers['Content-Type'] = 'application/json';\n                body = this.json (query);\n            } else {\n                if (Object.keys (query).length) {\n                    url += '?' + this.urlencode (query);\n                }\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (code === 404) {\n            throw new AuthenticationError (this.id + ' ' + body);\n        }\n        if (response === undefined) {\n            return;\n        }\n        //\n        //     {\"status\":\"Rejected\",\"errormsg\":\"Not_Enough_Funds\",\"errorcode\":101}\n        //     {\"result\":false,\"errormsg\":\"Server Error\",\"errorcode\":102,\"detail\":null}\n        //\n        const message = this.safeString (response, 'errormsg');\n        if ((message !== undefined) && (message !== '')) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], body, feedback);\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}