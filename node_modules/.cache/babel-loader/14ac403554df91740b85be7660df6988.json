{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  InsufficientFunds,\n  InvalidOrder\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class btcturk extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'btcturk',\n      'name': 'BTCTurk',\n      'countries': ['TR'],\n      // Turkey\n      'rateLimit': 1000,\n      'has': {\n        'cancelOrder': true,\n        'CORS': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOrderBook': true,\n        'fetchOpenOrders': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTrades': true,\n        'fetchMyTrades': true\n      },\n      'timeframes': {\n        '1d': '1d'\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87153926-efbef500-c2c0-11ea-9842-05b63612c4b9.jpg',\n        'api': {\n          'public': 'https://api.btcturk.com/api/v2',\n          'private': 'https://api.btcturk.com/api/v1',\n          'graph': 'https://graph-api.btcturk.com/v1'\n        },\n        'www': 'https://www.btcturk.com',\n        'doc': 'https://github.com/BTCTrader/broker-api-docs'\n      },\n      'api': {\n        'public': {\n          'get': ['orderbook', 'ticker', 'trades', // ?last=COUNT (max 50)\n          'server/exchangeinfo']\n        },\n        'private': {\n          'get': ['users/balances', 'openOrders', 'allOrders', 'users/transactions/trade'],\n          'post': ['order', 'cancelOrder'],\n          'delete': ['order']\n        },\n        'graph': {\n          'get': ['ohlcs']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.002 * 1.18,\n          'taker': 0.003 * 1.18\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'FAILED_ORDER_WITH_OPEN_ORDERS': InsufficientFunds,\n          'FAILED_LIMIT_ORDER': InvalidOrder,\n          'FAILED_MARKET_ORDER': InvalidOrder\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.publicGetServerExchangeinfo(params); //\n    //     {\n    //       \"data\": {\n    //         \"timeZone\": \"UTC\",\n    //         \"serverTime\": \"1618826678404\",\n    //         \"symbols\": [\n    //           {\n    //             \"id\": \"1\",\n    //             \"name\": \"BTCTRY\",\n    //             \"nameNormalized\": \"BTC_TRY\",\n    //             \"status\": \"TRADING\",\n    //             \"numerator\": \"BTC\",\n    //             \"denominator\": \"TRY\",\n    //             \"numeratorScale\": \"8\",\n    //             \"denominatorScale\": \"2\",\n    //             \"hasFraction\": false,\n    //             \"filters\": [\n    //               {\n    //                 \"filterType\": \"PRICE_FILTER\",\n    //                 \"minPrice\": \"0.0000000000001\",\n    //                 \"maxPrice\": \"10000000\",\n    //                 \"tickSize\": \"10\",\n    //                 \"minExchangeValue\": \"99.91\",\n    //                 \"minAmount\": null,\n    //                 \"maxAmount\": null\n    //               }\n    //             ],\n    //             \"orderMethods\": [\n    //               \"MARKET\",\n    //               \"LIMIT\",\n    //               \"STOP_MARKET\",\n    //               \"STOP_LIMIT\"\n    //             ],\n    //             \"displayFormat\": \"#,###\",\n    //             \"commissionFromNumerator\": false,\n    //             \"order\": \"1000\",\n    //             \"priceRounding\": false\n    //           },\n    //         },\n    //       ],\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    const markets = this.safeValue(data, 'symbols', []);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const entry = markets[i];\n      const id = this.safeString(entry, 'name');\n      const baseId = this.safeString(entry, 'numerator');\n      const quoteId = this.safeString(entry, 'denominator');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const filters = this.safeValue(entry, 'filters');\n      let minPrice = undefined;\n      let maxPrice = undefined;\n      let minAmount = undefined;\n      let maxAmount = undefined;\n      let minCost = undefined;\n\n      for (let j = 0; j < filters.length; j++) {\n        const filter = filters[j];\n        const filterType = this.safeString(filter, 'filterType');\n\n        if (filterType === 'PRICE_FILTER') {\n          minPrice = this.safeNumber(filter, 'minPrice');\n          maxPrice = this.safeNumber(filter, 'maxPrice');\n          minAmount = this.safeNumber(filter, 'minAmount');\n          maxAmount = this.safeNumber(filter, 'maxAmount');\n          minCost = this.safeNumber(filter, 'minExchangeValue');\n        }\n      }\n\n      const status = this.safeString(entry, 'status');\n      const active = status === 'TRADING';\n      const limits = {\n        'price': {\n          'min': minPrice,\n          'max': maxPrice\n        },\n        'amount': {\n          'min': minAmount,\n          'max': maxAmount\n        },\n        'cost': {\n          'min': minCost,\n          'max': undefined\n        }\n      };\n      const precision = {\n        'price': this.safeInteger(entry, 'denominatorScale'),\n        'amount': this.safeInteger(entry, 'numeratorScale')\n      };\n      result.push({\n        'info': entry,\n        'symbol': symbol,\n        'id': id,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'limits': limits,\n        'precision': precision,\n        'active': active\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetUsersBalances(params); //\n    //     {\n    //       \"data\": [\n    //         {\n    //           \"asset\": \"TRY\",\n    //           \"assetname\": \"Türk Lirası\",\n    //           \"balance\": \"0\",\n    //           \"locked\": \"0\",\n    //           \"free\": \"0\",\n    //           \"orderFund\": \"0\",\n    //           \"requestFund\": \"0\",\n    //           \"precision\": 2\n    //         }\n    //       ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', []);\n    const result = {\n      'info': response,\n      'timestamp': undefined,\n      'datetime': undefined\n    };\n\n    for (let i = 0; i < data.length; i++) {\n      const entry = data[i];\n      const currencyId = this.safeString(entry, 'asset');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeString(entry, 'balance');\n      account['free'] = this.safeString(entry, 'free');\n      account['used'] = this.safeString(entry, 'locked');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pairSymbol': market['id']\n    };\n    const response = await this.publicGetOrderbook(this.extend(request, params)); //     {\n    //       \"data\": {\n    //         \"timestamp\": 1618827901241,\n    //         \"bids\": [\n    //           [\n    //             \"460263.00\",\n    //             \"0.04244000\"\n    //           ]\n    //         ]\n    //       }\n    //     }\n\n    const data = this.safeValue(response, 'data');\n    const timestamp = this.safeInteger(data, 'timestamp');\n    return this.parseOrderBook(data, symbol, timestamp, 'bids', 'asks', 0, 1);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //   {\n    //     \"pair\": \"BTCTRY\",\n    //     \"pairNormalized\": \"BTC_TRY\",\n    //     \"timestamp\": 1618826361234,\n    //     \"last\": 462485,\n    //     \"high\": 473976,\n    //     \"low\": 444201,\n    //     \"bid\": 461928,\n    //     \"ask\": 462485,\n    //     \"open\": 456915,\n    //     \"volume\": 917.41368645,\n    //     \"average\": 462868.29574589,\n    //     \"daily\": 5570,\n    //     \"dailyPercent\": 1.22,\n    //     \"denominatorSymbol\": \"TRY\",\n    //     \"numeratorSymbol\": \"BTC\",\n    //     \"order\": 1000\n    //   }\n    //\n    const marketId = this.safeString(ticker, 'pair');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.safeInteger(ticker, 'timestamp');\n    const last = this.safeNumber(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': this.safeNumber(ticker, 'open'),\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': this.safeNumber(ticker, 'daily'),\n      'percentage': this.safeNumber(ticker, 'dailyPercent'),\n      'average': this.safeNumber(ticker, 'average'),\n      'baseVolume': this.safeNumber(ticker, 'volume'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.publicGetTicker(params);\n    const tickers = this.safeValue(response, 'data');\n    return this.parseTickers(tickers, symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const tickers = await this.fetchTickers([symbol], params);\n    return this.safeValue(tickers, symbol);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades\n    //     {\n    //       \"pair\": \"BTCUSDT\",\n    //       \"pairNormalized\": \"BTC_USDT\",\n    //       \"numerator\": \"BTC\",\n    //       \"denominator\": \"USDT\",\n    //       \"date\": \"1618916879083\",\n    //       \"tid\": \"637545136790672520\",\n    //       \"price\": \"55774\",\n    //       \"amount\": \"0.27917100\",\n    //       \"side\": \"buy\"\n    //     }\n    //\n    // fetchMyTrades\n    //     {\n    //       \"price\": \"56000\",\n    //       \"numeratorSymbol\": \"BTC\",\n    //       \"denominatorSymbol\": \"USDT\",\n    //       \"orderType\": \"buy\",\n    //       \"orderId\": \"2606935102\",\n    //       \"id\": \"320874372\",\n    //       \"timestamp\": \"1618916479593\",\n    //       \"amount\": \"0.00020000\",\n    //       \"fee\": \"0\",\n    //       \"tax\": \"0\"\n    //     }\n    //\n    const timestamp = this.safeInteger2(trade, 'date', 'timestamp');\n    const id = this.safeString2(trade, 'tid', 'id');\n    const order = this.safeString(trade, 'orderId');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = Precise.stringAbs(this.safeString(trade, 'amount'));\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    const marketId = this.safeString(trade, 'pair');\n    const symbol = this.safeSymbol(marketId, market);\n    const side = this.safeString2(trade, 'side', 'orderType');\n    let fee = undefined;\n    const feeAmountString = this.safeString(trade, 'fee');\n\n    if (feeAmountString !== undefined) {\n      const feeCurrency = this.safeString(trade, 'denominatorSymbol');\n      fee = {\n        'cost': this.parseNumber(Precise.stringAbs(feeAmountString)),\n        'currency': this.safeCurrencyCode(feeCurrency)\n      };\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'order': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol); // let maxCount = 50;\n\n    const request = {\n      'pairSymbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['last'] = limit;\n    }\n\n    const response = await this.publicGetTrades(this.extend(request, params)); //\n    //     {\n    //       \"data\": [\n    //         {\n    //           \"pair\": \"BTCTRY\",\n    //           \"pairNormalized\": \"BTC_TRY\",\n    //           \"numerator\": \"BTC\",\n    //           \"denominator\": \"TRY\",\n    //           \"date\": 1618828421497,\n    //           \"tid\": \"637544252214980918\",\n    //           \"price\": \"462585.00\",\n    //           \"amount\": \"0.01618411\",\n    //           \"side\": \"sell\"\n    //         }\n    //       ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //     {\n    //        \"pair\": \"BTCTRY\",\n    //        \"time\": 1508284800,\n    //        \"open\": 20873.689453125,\n    //        \"high\": 20925.0,\n    //        \"low\": 19310.0,\n    //        \"close\": 20679.55078125,\n    //        \"volume\": 402.216101626982,\n    //        \"total\": 8103096.44443274,\n    //        \"average\": 20146.13,\n    //        \"dailyChangeAmount\": -194.14,\n    //        \"dailyChangePercentage\": -0.93\n    //      },\n    return [this.safeTimestamp(ohlcv, 'time'), this.safeNumber(ohlcv, 'open'), this.safeNumber(ohlcv, 'high'), this.safeNumber(ohlcv, 'low'), this.safeNumber(ohlcv, 'close'), this.safeNumber(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1d', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['last'] = limit;\n    }\n\n    const response = await this.graphGetOhlcs(this.extend(request, params));\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'orderType': side,\n      'orderMethod': type,\n      'pairSymbol': market['id'],\n      'quantity': this.amountToPrecision(symbol, amount)\n    };\n\n    if (type !== 'market') {\n      request['price'] = this.priceToPrecision(symbol, price);\n    }\n\n    if ('clientOrderId' in params) {\n      request['newClientOrderId'] = params['clientOrderId'];\n    } else if (!('newClientOrderId' in params)) {\n      request['newClientOrderId'] = this.uuid();\n    }\n\n    const response = await this.privatePostOrder(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    return this.parseOrder(data, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': id\n    };\n    return await this.privateDeleteOrder(this.extend(request, params));\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['pairSymbol'] = market['id'];\n    }\n\n    const response = await this.privateGetOpenOrders(this.extend(request, params));\n    const data = this.safeValue(response, 'data');\n    const bids = this.safeValue(data, 'bids', []);\n    const asks = this.safeValue(data, 'asks', []);\n    return this.parseOrders(this.arrayConcat(bids, asks), market, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pairSymbol': market['id']\n    };\n\n    if (limit !== undefined) {\n      // default 100 max 1000\n      request['last'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = Math.floor(since / 1000);\n    }\n\n    const response = await this.privateGetAllOrders(this.extend(request, params)); // {\n    //   \"data\": [\n    //     {\n    //       \"id\": \"2606012912\",\n    //       \"price\": \"55000\",\n    //       \"amount\": \"0.0003\",\n    //       \"quantity\": \"0.0003\",\n    //       \"stopPrice\": \"0\",\n    //       \"pairSymbol\": \"BTCUSDT\",\n    //       \"pairSymbolNormalized\": \"BTC_USDT\",\n    //       \"type\": \"buy\",\n    //       \"method\": \"limit\",\n    //       \"orderClientId\": \"2ed187bd-59a8-4875-a212-1b793963b85c\",\n    //       \"time\": \"1618913189253\",\n    //       \"updateTime\": \"1618913189253\",\n    //       \"status\": \"Untouched\",\n    //       \"leftAmount\": \"0.0003000000000000\"\n    //     }\n    //   ]\n    // }\n\n    const data = this.safeValue(response, 'data');\n    return this.parseOrders(data, market, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'Untouched': 'open',\n      'Partial': 'open',\n      'Canceled': 'canceled',\n      'Closed': 'closed'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market) {\n    //\n    // fetchOrders / fetchOpenOrders\n    //     {\n    //       \"id\": 2605984008,\n    //       \"price\": \"55000\",\n    //       \"amount\": \"0.00050000\",\n    //       \"quantity\": \"0.00050000\",\n    //       \"stopPrice\": \"0\",\n    //       \"pairSymbol\": \"BTCUSDT\",\n    //       \"pairSymbolNormalized\": \"BTC_USDT\",\n    //       \"type\": \"buy\",\n    //       \"method\": \"limit\",\n    //       \"orderClientId\": \"f479bdb6-0965-4f03-95b5-daeb7aa5a3a5\",\n    //       \"time\": 0,\n    //       \"updateTime\": 1618913083543,\n    //       \"status\": \"Untouched\",\n    //       \"leftAmount\": \"0.00050000\"\n    //     }\n    //\n    // createOrder\n    //     {\n    //       \"id\": \"2606935102\",\n    //       \"quantity\": \"0.0002\",\n    //       \"price\": \"56000\",\n    //       \"stopPrice\": null,\n    //       \"newOrderClientId\": \"98e5c491-7ed9-462b-9666-93553180fb28\",\n    //       \"type\": \"buy\",\n    //       \"method\": \"limit\",\n    //       \"pairSymbol\": \"BTCUSDT\",\n    //       \"pairSymbolNormalized\": \"BTC_USDT\",\n    //       \"datetime\": \"1618916479523\"\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    const priceString = this.safeString(order, 'price');\n    const precisePrice = new Precise(priceString);\n    let price = undefined;\n    const isZero = precisePrice.toString() === '0';\n\n    if (!isZero) {\n      price = this.parseNumber(precisePrice);\n    }\n\n    const amountString = this.safeString(order, 'quantity');\n    const amount = this.parseNumber(Precise.stringAbs(amountString));\n    const remaining = this.safeNumber(order, 'leftAmount');\n    const marketId = this.safeNumber(order, 'pairSymbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const side = this.safeString(order, 'type');\n    const type = this.safeString(order, 'method');\n    const clientOrderId = this.safeString(order, 'orderClientId');\n    const timestamp = this.safeInteger2(order, 'updateTime', 'datetime');\n    const rawStatus = this.safeString(order, 'status');\n    const status = this.parseOrderStatus(rawStatus);\n    return this.safeOrder({\n      'info': order,\n      'id': id,\n      'price': price,\n      'amount': amount,\n      'remaining': remaining,\n      'filled': undefined,\n      'cost': undefined,\n      'average': undefined,\n      'status': status,\n      'side': side,\n      'type': type,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'fee': undefined\n    });\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n    }\n\n    const response = await this.privateGetUsersTransactionsTrade(); //\n    //     {\n    //       \"data\": [\n    //         {\n    //           \"price\": \"56000\",\n    //           \"numeratorSymbol\": \"BTC\",\n    //           \"denominatorSymbol\": \"USDT\",\n    //           \"orderType\": \"buy\",\n    //           \"orderId\": \"2606935102\",\n    //           \"id\": \"320874372\",\n    //           \"timestamp\": \"1618916479593\",\n    //           \"amount\": \"0.00020000\",\n    //           \"fee\": \"0\",\n    //           \"tax\": \"0\"\n    //         }\n    //       ],\n    //       \"success\": true,\n    //       \"message\": \"SUCCESS\",\n    //       \"code\": \"0\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data');\n    return this.parseTrades(data, market, since, limit);\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    if (this.id === 'btctrader') {\n      throw new ExchangeError(this.id + ' is an abstract base API for BTCExchange, BTCTurk');\n    }\n\n    let url = this.urls['api'][api] + '/' + path;\n\n    if (method === 'GET' || method === 'DELETE') {\n      if (Object.keys(params).length) {\n        url += '?' + this.urlencode(params);\n      }\n    } else {\n      body = this.json(params);\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      const secret = this.base64ToBinary(this.secret);\n      const auth = this.apiKey + nonce;\n      headers = {\n        'X-PCK': this.apiKey,\n        'X-Stamp': nonce,\n        'X-Signature': this.hmac(this.encode(auth), secret, 'sha256', 'base64'),\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    const errorCode = this.safeString(response, 'code', '0');\n    const message = this.safeString(response, 'message');\n    const output = message === undefined ? body : message;\n    this.throwExactlyMatchedException(this.exceptions['exact'], message, this.id + ' ' + output);\n\n    if (errorCode !== '0') {\n      throw new ExchangeError(this.id + ' ' + output);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/btcturk.js"],"names":["Exchange","require","ExchangeError","InsufficientFunds","InvalidOrder","Precise","module","exports","btcturk","describe","deepExtend","fetchMarkets","params","response","publicGetServerExchangeinfo","data","safeValue","markets","result","i","length","entry","id","safeString","baseId","quoteId","base","safeCurrencyCode","quote","symbol","filters","minPrice","undefined","maxPrice","minAmount","maxAmount","minCost","j","filter","filterType","safeNumber","status","active","limits","precision","safeInteger","push","fetchBalance","loadMarkets","privateGetUsersBalances","currencyId","code","account","parseBalance","fetchOrderBook","limit","market","request","publicGetOrderbook","extend","timestamp","parseOrderBook","parseTicker","ticker","marketId","safeSymbol","last","iso8601","fetchTickers","symbols","publicGetTicker","tickers","parseTickers","fetchTicker","parseTrade","trade","safeInteger2","safeString2","order","priceString","amountString","stringAbs","price","parseNumber","amount","cost","stringMul","side","fee","feeAmountString","feeCurrency","fetchTrades","since","publicGetTrades","parseTrades","parseOHLCV","ohlcv","safeTimestamp","fetchOHLCV","timeframe","graphGetOhlcs","parseOHLCVs","createOrder","type","amountToPrecision","priceToPrecision","uuid","privatePostOrder","parseOrder","cancelOrder","privateDeleteOrder","fetchOpenOrders","privateGetOpenOrders","bids","asks","parseOrders","arrayConcat","fetchOrders","Math","floor","privateGetAllOrders","parseOrderStatus","statuses","precisePrice","isZero","toString","remaining","clientOrderId","rawStatus","safeOrder","fetchMyTrades","privateGetUsersTransactionsTrade","nonce","milliseconds","sign","path","api","method","headers","body","url","urls","Object","keys","urlencode","json","checkRequiredCredentials","secret","base64ToBinary","auth","apiKey","hmac","encode","handleErrors","reason","requestHeaders","requestBody","errorCode","message","output","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, InsufficientFunds, InvalidOrder } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btcturk extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btcturk',\n            'name': 'BTCTurk',\n            'countries': [ 'TR' ], // Turkey\n            'rateLimit': 1000,\n            'has': {\n                'cancelOrder': true,\n                'CORS': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOrderBook': true,\n                'fetchOpenOrders': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTrades': true,\n                'fetchMyTrades': true,\n            },\n            'timeframes': {\n                '1d': '1d',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87153926-efbef500-c2c0-11ea-9842-05b63612c4b9.jpg',\n                'api': {\n                    'public': 'https://api.btcturk.com/api/v2',\n                    'private': 'https://api.btcturk.com/api/v1',\n                    'graph': 'https://graph-api.btcturk.com/v1',\n                },\n                'www': 'https://www.btcturk.com',\n                'doc': 'https://github.com/BTCTrader/broker-api-docs',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'orderbook',\n                        'ticker',\n                        'trades',   // ?last=COUNT (max 50)\n                        'server/exchangeinfo',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'users/balances',\n                        'openOrders',\n                        'allOrders',\n                        'users/transactions/trade',\n                    ],\n                    'post': [\n                        'order',\n                        'cancelOrder',\n                    ],\n                    'delete': [\n                        'order',\n                    ],\n                },\n                'graph': {\n                    'get': [\n                        'ohlcs',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.002 * 1.18,\n                    'taker': 0.003 * 1.18,\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'FAILED_ORDER_WITH_OPEN_ORDERS': InsufficientFunds,\n                    'FAILED_LIMIT_ORDER': InvalidOrder,\n                    'FAILED_MARKET_ORDER': InvalidOrder,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.publicGetServerExchangeinfo (params);\n        //\n        //     {\n        //       \"data\": {\n        //         \"timeZone\": \"UTC\",\n        //         \"serverTime\": \"1618826678404\",\n        //         \"symbols\": [\n        //           {\n        //             \"id\": \"1\",\n        //             \"name\": \"BTCTRY\",\n        //             \"nameNormalized\": \"BTC_TRY\",\n        //             \"status\": \"TRADING\",\n        //             \"numerator\": \"BTC\",\n        //             \"denominator\": \"TRY\",\n        //             \"numeratorScale\": \"8\",\n        //             \"denominatorScale\": \"2\",\n        //             \"hasFraction\": false,\n        //             \"filters\": [\n        //               {\n        //                 \"filterType\": \"PRICE_FILTER\",\n        //                 \"minPrice\": \"0.0000000000001\",\n        //                 \"maxPrice\": \"10000000\",\n        //                 \"tickSize\": \"10\",\n        //                 \"minExchangeValue\": \"99.91\",\n        //                 \"minAmount\": null,\n        //                 \"maxAmount\": null\n        //               }\n        //             ],\n        //             \"orderMethods\": [\n        //               \"MARKET\",\n        //               \"LIMIT\",\n        //               \"STOP_MARKET\",\n        //               \"STOP_LIMIT\"\n        //             ],\n        //             \"displayFormat\": \"#,###\",\n        //             \"commissionFromNumerator\": false,\n        //             \"order\": \"1000\",\n        //             \"priceRounding\": false\n        //           },\n        //         },\n        //       ],\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        const markets = this.safeValue (data, 'symbols', []);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const entry = markets[i];\n            const id = this.safeString (entry, 'name');\n            const baseId = this.safeString (entry, 'numerator');\n            const quoteId = this.safeString (entry, 'denominator');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const filters = this.safeValue (entry, 'filters');\n            let minPrice = undefined;\n            let maxPrice = undefined;\n            let minAmount = undefined;\n            let maxAmount = undefined;\n            let minCost = undefined;\n            for (let j = 0; j < filters.length; j++) {\n                const filter = filters[j];\n                const filterType = this.safeString (filter, 'filterType');\n                if (filterType === 'PRICE_FILTER') {\n                    minPrice = this.safeNumber (filter, 'minPrice');\n                    maxPrice = this.safeNumber (filter, 'maxPrice');\n                    minAmount = this.safeNumber (filter, 'minAmount');\n                    maxAmount = this.safeNumber (filter, 'maxAmount');\n                    minCost = this.safeNumber (filter, 'minExchangeValue');\n                }\n            }\n            const status = this.safeString (entry, 'status');\n            const active = status === 'TRADING';\n            const limits = {\n                'price': {\n                    'min': minPrice,\n                    'max': maxPrice,\n                },\n                'amount': {\n                    'min': minAmount,\n                    'max': maxAmount,\n                },\n                'cost': {\n                    'min': minCost,\n                    'max': undefined,\n                },\n            };\n            const precision = {\n                'price': this.safeInteger (entry, 'denominatorScale'),\n                'amount': this.safeInteger (entry, 'numeratorScale'),\n            };\n            result.push ({\n                'info': entry,\n                'symbol': symbol,\n                'id': id,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'limits': limits,\n                'precision': precision,\n                'active': active,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetUsersBalances (params);\n        //\n        //     {\n        //       \"data\": [\n        //         {\n        //           \"asset\": \"TRY\",\n        //           \"assetname\": \"Türk Lirası\",\n        //           \"balance\": \"0\",\n        //           \"locked\": \"0\",\n        //           \"free\": \"0\",\n        //           \"orderFund\": \"0\",\n        //           \"requestFund\": \"0\",\n        //           \"precision\": 2\n        //         }\n        //       ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', []);\n        const result = {\n            'info': response,\n            'timestamp': undefined,\n            'datetime': undefined,\n        };\n        for (let i = 0; i < data.length; i++) {\n            const entry = data[i];\n            const currencyId = this.safeString (entry, 'asset');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeString (entry, 'balance');\n            account['free'] = this.safeString (entry, 'free');\n            account['used'] = this.safeString (entry, 'locked');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pairSymbol': market['id'],\n        };\n        const response = await this.publicGetOrderbook (this.extend (request, params));\n        //     {\n        //       \"data\": {\n        //         \"timestamp\": 1618827901241,\n        //         \"bids\": [\n        //           [\n        //             \"460263.00\",\n        //             \"0.04244000\"\n        //           ]\n        //         ]\n        //       }\n        //     }\n        const data = this.safeValue (response, 'data');\n        const timestamp = this.safeInteger (data, 'timestamp');\n        return this.parseOrderBook (data, symbol, timestamp, 'bids', 'asks', 0, 1);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //   {\n        //     \"pair\": \"BTCTRY\",\n        //     \"pairNormalized\": \"BTC_TRY\",\n        //     \"timestamp\": 1618826361234,\n        //     \"last\": 462485,\n        //     \"high\": 473976,\n        //     \"low\": 444201,\n        //     \"bid\": 461928,\n        //     \"ask\": 462485,\n        //     \"open\": 456915,\n        //     \"volume\": 917.41368645,\n        //     \"average\": 462868.29574589,\n        //     \"daily\": 5570,\n        //     \"dailyPercent\": 1.22,\n        //     \"denominatorSymbol\": \"TRY\",\n        //     \"numeratorSymbol\": \"BTC\",\n        //     \"order\": 1000\n        //   }\n        //\n        const marketId = this.safeString (ticker, 'pair');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.safeInteger (ticker, 'timestamp');\n        const last = this.safeNumber (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': this.safeNumber (ticker, 'open'),\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': this.safeNumber (ticker, 'daily'),\n            'percentage': this.safeNumber (ticker, 'dailyPercent'),\n            'average': this.safeNumber (ticker, 'average'),\n            'baseVolume': this.safeNumber (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.publicGetTicker (params);\n        const tickers = this.safeValue (response, 'data');\n        return this.parseTickers (tickers, symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const tickers = await this.fetchTickers ([ symbol ], params);\n        return this.safeValue (tickers, symbol);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades\n        //     {\n        //       \"pair\": \"BTCUSDT\",\n        //       \"pairNormalized\": \"BTC_USDT\",\n        //       \"numerator\": \"BTC\",\n        //       \"denominator\": \"USDT\",\n        //       \"date\": \"1618916879083\",\n        //       \"tid\": \"637545136790672520\",\n        //       \"price\": \"55774\",\n        //       \"amount\": \"0.27917100\",\n        //       \"side\": \"buy\"\n        //     }\n        //\n        // fetchMyTrades\n        //     {\n        //       \"price\": \"56000\",\n        //       \"numeratorSymbol\": \"BTC\",\n        //       \"denominatorSymbol\": \"USDT\",\n        //       \"orderType\": \"buy\",\n        //       \"orderId\": \"2606935102\",\n        //       \"id\": \"320874372\",\n        //       \"timestamp\": \"1618916479593\",\n        //       \"amount\": \"0.00020000\",\n        //       \"fee\": \"0\",\n        //       \"tax\": \"0\"\n        //     }\n        //\n        const timestamp = this.safeInteger2 (trade, 'date', 'timestamp');\n        const id = this.safeString2 (trade, 'tid', 'id');\n        const order = this.safeString (trade, 'orderId');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = Precise.stringAbs (this.safeString (trade, 'amount'));\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        const marketId = this.safeString (trade, 'pair');\n        const symbol = this.safeSymbol (marketId, market);\n        const side = this.safeString2 (trade, 'side', 'orderType');\n        let fee = undefined;\n        const feeAmountString = this.safeString (trade, 'fee');\n        if (feeAmountString !== undefined) {\n            const feeCurrency = this.safeString (trade, 'denominatorSymbol');\n            fee = {\n                'cost': this.parseNumber (Precise.stringAbs (feeAmountString)),\n                'currency': this.safeCurrencyCode (feeCurrency),\n            };\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'order': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        // let maxCount = 50;\n        const request = {\n            'pairSymbol': market['id'],\n        };\n        if (limit !== undefined) {\n            request['last'] = limit;\n        }\n        const response = await this.publicGetTrades (this.extend (request, params));\n        //\n        //     {\n        //       \"data\": [\n        //         {\n        //           \"pair\": \"BTCTRY\",\n        //           \"pairNormalized\": \"BTC_TRY\",\n        //           \"numerator\": \"BTC\",\n        //           \"denominator\": \"TRY\",\n        //           \"date\": 1618828421497,\n        //           \"tid\": \"637544252214980918\",\n        //           \"price\": \"462585.00\",\n        //           \"amount\": \"0.01618411\",\n        //           \"side\": \"sell\"\n        //         }\n        //       ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //     {\n        //        \"pair\": \"BTCTRY\",\n        //        \"time\": 1508284800,\n        //        \"open\": 20873.689453125,\n        //        \"high\": 20925.0,\n        //        \"low\": 19310.0,\n        //        \"close\": 20679.55078125,\n        //        \"volume\": 402.216101626982,\n        //        \"total\": 8103096.44443274,\n        //        \"average\": 20146.13,\n        //        \"dailyChangeAmount\": -194.14,\n        //        \"dailyChangePercentage\": -0.93\n        //      },\n        return [\n            this.safeTimestamp (ohlcv, 'time'),\n            this.safeNumber (ohlcv, 'open'),\n            this.safeNumber (ohlcv, 'high'),\n            this.safeNumber (ohlcv, 'low'),\n            this.safeNumber (ohlcv, 'close'),\n            this.safeNumber (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1d', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        if (limit !== undefined) {\n            request['last'] = limit;\n        }\n        const response = await this.graphGetOhlcs (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'orderType': side,\n            'orderMethod': type,\n            'pairSymbol': market['id'],\n            'quantity': this.amountToPrecision (symbol, amount),\n        };\n        if (type !== 'market') {\n            request['price'] = this.priceToPrecision (symbol, price);\n        }\n        if ('clientOrderId' in params) {\n            request['newClientOrderId'] = params['clientOrderId'];\n        } else if (!('newClientOrderId' in params)) {\n            request['newClientOrderId'] = this.uuid ();\n        }\n        const response = await this.privatePostOrder (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        return this.parseOrder (data, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': id,\n        };\n        return await this.privateDeleteOrder (this.extend (request, params));\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['pairSymbol'] = market['id'];\n        }\n        const response = await this.privateGetOpenOrders (this.extend (request, params));\n        const data = this.safeValue (response, 'data');\n        const bids = this.safeValue (data, 'bids', []);\n        const asks = this.safeValue (data, 'asks', []);\n        return this.parseOrders (this.arrayConcat (bids, asks), market, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pairSymbol': market['id'],\n        };\n        if (limit !== undefined) {\n            // default 100 max 1000\n            request['last'] = limit;\n        }\n        if (since !== undefined) {\n            request['startTime'] = Math.floor (since / 1000);\n        }\n        const response = await this.privateGetAllOrders (this.extend (request, params));\n        // {\n        //   \"data\": [\n        //     {\n        //       \"id\": \"2606012912\",\n        //       \"price\": \"55000\",\n        //       \"amount\": \"0.0003\",\n        //       \"quantity\": \"0.0003\",\n        //       \"stopPrice\": \"0\",\n        //       \"pairSymbol\": \"BTCUSDT\",\n        //       \"pairSymbolNormalized\": \"BTC_USDT\",\n        //       \"type\": \"buy\",\n        //       \"method\": \"limit\",\n        //       \"orderClientId\": \"2ed187bd-59a8-4875-a212-1b793963b85c\",\n        //       \"time\": \"1618913189253\",\n        //       \"updateTime\": \"1618913189253\",\n        //       \"status\": \"Untouched\",\n        //       \"leftAmount\": \"0.0003000000000000\"\n        //     }\n        //   ]\n        // }\n        const data = this.safeValue (response, 'data');\n        return this.parseOrders (data, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'Untouched': 'open',\n            'Partial': 'open',\n            'Canceled': 'canceled',\n            'Closed': 'closed',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market) {\n        //\n        // fetchOrders / fetchOpenOrders\n        //     {\n        //       \"id\": 2605984008,\n        //       \"price\": \"55000\",\n        //       \"amount\": \"0.00050000\",\n        //       \"quantity\": \"0.00050000\",\n        //       \"stopPrice\": \"0\",\n        //       \"pairSymbol\": \"BTCUSDT\",\n        //       \"pairSymbolNormalized\": \"BTC_USDT\",\n        //       \"type\": \"buy\",\n        //       \"method\": \"limit\",\n        //       \"orderClientId\": \"f479bdb6-0965-4f03-95b5-daeb7aa5a3a5\",\n        //       \"time\": 0,\n        //       \"updateTime\": 1618913083543,\n        //       \"status\": \"Untouched\",\n        //       \"leftAmount\": \"0.00050000\"\n        //     }\n        //\n        // createOrder\n        //     {\n        //       \"id\": \"2606935102\",\n        //       \"quantity\": \"0.0002\",\n        //       \"price\": \"56000\",\n        //       \"stopPrice\": null,\n        //       \"newOrderClientId\": \"98e5c491-7ed9-462b-9666-93553180fb28\",\n        //       \"type\": \"buy\",\n        //       \"method\": \"limit\",\n        //       \"pairSymbol\": \"BTCUSDT\",\n        //       \"pairSymbolNormalized\": \"BTC_USDT\",\n        //       \"datetime\": \"1618916479523\"\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        const priceString = this.safeString (order, 'price');\n        const precisePrice = new Precise (priceString);\n        let price = undefined;\n        const isZero = precisePrice.toString () === '0';\n        if (!isZero) {\n            price = this.parseNumber (precisePrice);\n        }\n        const amountString = this.safeString (order, 'quantity');\n        const amount = this.parseNumber (Precise.stringAbs (amountString));\n        const remaining = this.safeNumber (order, 'leftAmount');\n        const marketId = this.safeNumber (order, 'pairSymbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const side = this.safeString (order, 'type');\n        const type = this.safeString (order, 'method');\n        const clientOrderId = this.safeString (order, 'orderClientId');\n        const timestamp = this.safeInteger2 (order, 'updateTime', 'datetime');\n        const rawStatus = this.safeString (order, 'status');\n        const status = this.parseOrderStatus (rawStatus);\n        return this.safeOrder ({\n            'info': order,\n            'id': id,\n            'price': price,\n            'amount': amount,\n            'remaining': remaining,\n            'filled': undefined,\n            'cost': undefined,\n            'average': undefined,\n            'status': status,\n            'side': side,\n            'type': type,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'fee': undefined,\n        });\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n        }\n        const response = await this.privateGetUsersTransactionsTrade ();\n        //\n        //     {\n        //       \"data\": [\n        //         {\n        //           \"price\": \"56000\",\n        //           \"numeratorSymbol\": \"BTC\",\n        //           \"denominatorSymbol\": \"USDT\",\n        //           \"orderType\": \"buy\",\n        //           \"orderId\": \"2606935102\",\n        //           \"id\": \"320874372\",\n        //           \"timestamp\": \"1618916479593\",\n        //           \"amount\": \"0.00020000\",\n        //           \"fee\": \"0\",\n        //           \"tax\": \"0\"\n        //         }\n        //       ],\n        //       \"success\": true,\n        //       \"message\": \"SUCCESS\",\n        //       \"code\": \"0\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data');\n        return this.parseTrades (data, market, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        if (this.id === 'btctrader') {\n            throw new ExchangeError (this.id + ' is an abstract base API for BTCExchange, BTCTurk');\n        }\n        let url = this.urls['api'][api] + '/' + path;\n        if ((method === 'GET') || (method === 'DELETE')) {\n            if (Object.keys (params).length) {\n                url += '?' + this.urlencode (params);\n            }\n        } else {\n            body = this.json (params);\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            const secret = this.base64ToBinary (this.secret);\n            const auth = this.apiKey + nonce;\n            headers = {\n                'X-PCK': this.apiKey,\n                'X-Stamp': nonce,\n                'X-Signature': this.hmac (this.encode (auth), secret, 'sha256', 'base64'),\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        const errorCode = this.safeString (response, 'code', '0');\n        const message = this.safeString (response, 'message');\n        const output = (message === undefined) ? body : message;\n        this.throwExactlyMatchedException (this.exceptions['exact'], message, this.id + ' ' + output);\n        if (errorCode !== '0') {\n            throw new ExchangeError (this.id + ' ' + output);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}