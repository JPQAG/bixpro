{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James Price\\\\Documents\\\\VS Code\\\\bixpro\\\\src\\\\components\\\\cryptX\\\\cards\\\\BitcoinWalletVal.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { CONFIG } from '../../../config/constant'; //API Configuration\n///Import for API Keys from Config\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst secretKey = CONFIG.binance.secretKey;\nconst apiKey = CONFIG.binance.apiKey; //Binance API\n\nconst Binance = require('node-binance-api');\n\nconst binance = new Binance().options({\n  APIKEY: apiKey,\n  APISECRET: secretKey\n});\nbinance.options({\n  APIKEY: apiKey,\n  APISECRET: secretKey,\n  useServerTime: true,\n  recvWindow: 5000,\n  // Set a higher recvWindow to increase response timeout\n  verbose: true,\n  // Add extra output when subscribing to WebSockets, etc\n  log: log => {\n    console.log(log); // You can create your own logger here, or disable console output\n  }\n}); //Refactor Data Function\n\nfunction objectParse(data) {\n  let newData = [];\n\n  for (const prop in data) {\n    newData.push({\n      symbol: prop,\n      available: data[prop].available,\n      onOrder: data[prop].onOrder,\n      marketPrice: data[prop].marketPrice,\n      marketValue: data[prop].marketPrice * data[prop].available\n    });\n  }\n\n  ;\n  return newData;\n}\n\nconst BitcoinWalletValCard = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [bitcoinPrice, setBitcoinPrice] = useState('');\n  const [holdings, setHoldings] = useState('');\n\n  const getHoldings = async () => {\n    _s();\n\n    //Binance API\n    let ticker = await binance.prices(); // console.log(\"TICKER LIST\", ticker);\n\n    await binance.useServerTime();\n    binance.balance((error, balances) => {\n      if (error) return console.error(error);\n\n      for (const holding in balances) {\n        if (balances[holding]['available'] > -10) {\n          const symbol = holding + \"BUSD\";\n          balances[holding]['marketPrice'] = ticker[symbol];\n        }\n\n        ;\n\n        if (balances[holding]['symbol'] === \"BTC\") {\n          setBitcoinPrice(balances[holding]['marketPrice']);\n        }\n\n        ;\n      }\n\n      ;\n      setHoldings(balances);\n      return ticker;\n    });\n  };\n\n  _s(getHoldings, \"ryztZvy2ym7HSTFils++uZK2CyY=\", false, function () {\n    return [binance.useServerTime];\n  });\n\n  useEffect(() => {\n    getHoldings();\n    const interval = setInterval(() => {\n      getHoldings();\n    }, 10000);\n    return () => clearInterval(interval);\n  }, []);\n  const dataOne = objectParse(holdings);\n  const data = dataOne;\n\n  for (const holding in dataOne) {\n    if (dataOne[holding]['symbol'] === \"BTC\") {\n      setBitcoinPrice(dataOne[holding]['marketPrice']);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"theme-bg bitcoin-wallet\",\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"text-white mb-2\",\n          children: \"Bitcoin Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-white mb-3 f-w-300\",\n          children: bitcoinPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white d-block\",\n          children: \"Pricing by Binance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fab fa-bitcoin f-70 text-white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(BitcoinWalletValCard, \"PzFCRvgNS11EjFFMMjAcZgh6TZc=\");\n\n_c = BitcoinWalletValCard;\nexport default BitcoinWalletValCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"BitcoinWalletValCard\");","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/src/components/cryptX/cards/BitcoinWalletVal.js"],"names":["React","useState","useEffect","Card","CONFIG","secretKey","binance","apiKey","Binance","require","options","APIKEY","APISECRET","useServerTime","recvWindow","verbose","log","console","objectParse","data","newData","prop","push","symbol","available","onOrder","marketPrice","marketValue","BitcoinWalletValCard","bitcoinPrice","setBitcoinPrice","holdings","setHoldings","getHoldings","ticker","prices","balance","error","balances","holding","interval","setInterval","clearInterval","dataOne"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport { CONFIG } from '../../../config/constant';\r\n\r\n//API Configuration\r\n///Import for API Keys from Config\r\nconst secretKey = CONFIG.binance.secretKey;\r\nconst apiKey = CONFIG.binance.apiKey;\r\n//Binance API\r\nconst Binance = require('node-binance-api');\r\nconst binance = new Binance().options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey\r\n});\r\nbinance.options({\r\n  APIKEY: apiKey,\r\n  APISECRET: secretKey,\r\n  useServerTime: true,\r\n  recvWindow: 5000, // Set a higher recvWindow to increase response timeout\r\n  verbose: true, // Add extra output when subscribing to WebSockets, etc\r\n  log: log => {\r\n    console.log(log); // You can create your own logger here, or disable console output\r\n  }\r\n});\r\n\r\n//Refactor Data Function\r\nfunction objectParse(data) {\r\n    let newData = [];\r\n    for (const prop in data) {\r\n      newData.push({\r\n        symbol: prop,\r\n        available: data[prop].available,\r\n        onOrder: data[prop].onOrder,\r\n        marketPrice: data[prop].marketPrice,\r\n        marketValue: (data[prop].marketPrice * data[prop].available),\r\n      })\r\n    };\r\n    return newData;\r\n  }\r\n  \r\nconst BitcoinWalletValCard = () => {\r\n    const [ bitcoinPrice, setBitcoinPrice ] = useState('');\r\n    const [ holdings, setHoldings ] = useState('');\r\n\r\n    const getHoldings = async () => {\r\n        //Binance API\r\n        let ticker = await binance.prices();\r\n        // console.log(\"TICKER LIST\", ticker);\r\n        await binance.useServerTime();\r\n        binance.balance((error, balances) => {\r\n          if ( error ) return console.error(error);\r\n          for (const holding in balances) {\r\n            if (balances[holding]['available'] > -10) {\r\n              const symbol = holding + \"BUSD\";\r\n              balances[holding]['marketPrice'] = ticker[symbol];\r\n            };\r\n            if (balances[holding]['symbol'] === \"BTC\") {\r\n                setBitcoinPrice(balances[holding]['marketPrice'])\r\n            };\r\n          };\r\n          setHoldings(balances)\r\n          return ticker;\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHoldings()\r\n  \r\n        const interval=setInterval(() => {\r\n            getHoldings()\r\n        }, 10000)\r\n  \r\n        return() => clearInterval(\r\n            interval\r\n            )\r\n        }, []\r\n    );\r\n\r\n    const dataOne = objectParse(holdings);\r\n\r\n    const data = dataOne;\r\n\r\n    for (const holding in dataOne) {\r\n        if (dataOne[holding]['symbol'] === \"BTC\") {\r\n            setBitcoinPrice(dataOne[holding]['marketPrice']);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className='theme-bg bitcoin-wallet'>\r\n                <Card.Body>\r\n                    <h5 className=\"text-white mb-2\">Bitcoin Wallet</h5>\r\n                    <h2 className=\"text-white mb-3 f-w-300\">{bitcoinPrice}</h2>\r\n                    <span className=\"text-white d-block\">Pricing by Binance</span>\r\n                    <i className=\"fab fa-bitcoin f-70 text-white\"/>\r\n                </Card.Body>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default BitcoinWalletValCard;"]},"metadata":{},"sourceType":"module"}