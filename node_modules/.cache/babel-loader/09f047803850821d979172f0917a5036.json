{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  OrderNotFound\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitflyer extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitflyer',\n      'name': 'bitFlyer',\n      'countries': ['JP'],\n      'version': 'v1',\n      'rateLimit': 1000,\n      // their nonce-timestamp is in seconds...\n      'hostname': 'bitflyer.com',\n      // or bitflyer.com\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': 'emulated',\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOpenOrders': 'emulated',\n        'fetchOrder': 'emulated',\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg',\n        'api': 'https://api.{hostname}',\n        'www': 'https://bitflyer.com',\n        'doc': 'https://lightning.bitflyer.com/docs?lang=en'\n      },\n      'api': {\n        'public': {\n          'get': ['getmarkets/usa', // new (wip)\n          'getmarkets/eu', // new (wip)\n          'getmarkets', // or 'markets'\n          'getboard', // ...\n          'getticker', 'getexecutions', 'gethealth', 'getboardstate', 'getchats']\n        },\n        'private': {\n          'get': ['getpermissions', 'getbalance', 'getbalancehistory', 'getcollateral', 'getcollateralhistory', 'getcollateralaccounts', 'getaddresses', 'getcoinins', 'getcoinouts', 'getbankaccounts', 'getdeposits', 'getwithdrawals', 'getchildorders', 'getparentorders', 'getparentorder', 'getexecutions', 'getpositions', 'gettradingcommission'],\n          'post': ['sendcoin', 'withdraw', 'sendchildorder', 'cancelchildorder', 'sendparentorder', 'cancelparentorder', 'cancelallchildorders']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.2 / 100,\n          'taker': 0.2 / 100\n        },\n        'BTC/JPY': {\n          'maker': 0.15 / 100,\n          'taker': 0.15 / 100\n        }\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const jp_markets = await this.publicGetGetmarkets(params);\n    const us_markets = await this.publicGetGetmarketsUsa(params);\n    const eu_markets = await this.publicGetGetmarketsEu(params);\n    let markets = this.arrayConcat(jp_markets, us_markets);\n    markets = this.arrayConcat(markets, eu_markets);\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'product_code');\n      const currencies = id.split('_');\n      let baseId = undefined;\n      let quoteId = undefined;\n      let base = undefined;\n      let quote = undefined;\n      const numCurrencies = currencies.length;\n\n      if (numCurrencies === 1) {\n        baseId = id.slice(0, 3);\n        quoteId = id.slice(3, 6);\n      } else if (numCurrencies === 2) {\n        baseId = currencies[0];\n        quoteId = currencies[1];\n      } else {\n        baseId = currencies[1];\n        quoteId = currencies[2];\n      }\n\n      base = this.safeCurrencyCode(baseId);\n      quote = this.safeCurrencyCode(quoteId);\n      const symbol = numCurrencies === 2 ? base + '/' + quote : id;\n      const fees = this.safeValue(this.fees, symbol, this.fees['trading']);\n      let maker = this.safeValue(fees, 'maker', this.fees['trading']['maker']);\n      let taker = this.safeValue(fees, 'taker', this.fees['trading']['taker']);\n      let spot = true;\n      let future = false;\n      let type = 'spot';\n\n      if ('alias' in market || currencies[0] === 'FX') {\n        type = 'future';\n        future = true;\n        spot = false;\n        maker = 0.0;\n        taker = 0.0;\n      }\n\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'maker': maker,\n        'taker': taker,\n        'type': type,\n        'spot': spot,\n        'future': future,\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privateGetGetbalance(params); //\n    //     [\n    //         {\n    //             \"currency_code\": \"JPY\",\n    //             \"amount\": 1024078,\n    //             \"available\": 508000\n    //         },\n    //         {\n    //             \"currency_code\": \"BTC\",\n    //             \"amount\": 10.24,\n    //             \"available\": 4.12\n    //         },\n    //         {\n    //             \"currency_code\": \"ETH\",\n    //             \"amount\": 20.48,\n    //             \"available\": 16.38\n    //         }\n    //     ]\n    //\n\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const currencyId = this.safeString(balance, 'currency_code');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['total'] = this.safeString(balance, 'amount');\n      account['free'] = this.safeString(balance, 'available');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'product_code': this.marketId(symbol)\n    };\n    const orderbook = await this.publicGetGetboard(this.extend(request, params));\n    return this.parseOrderBook(orderbook, symbol, undefined, 'bids', 'asks', 'price', 'size');\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'product_code': this.marketId(symbol)\n    };\n    const ticker = await this.publicGetGetticker(this.extend(request, params));\n    const timestamp = this.parse8601(this.safeString(ticker, 'timestamp'));\n    const last = this.safeNumber(ticker, 'ltp');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': undefined,\n      'low': undefined,\n      'bid': this.safeNumber(ticker, 'best_bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'best_ask'),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': this.safeNumber(ticker, 'volume_by_product'),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    let side = this.safeStringLower(trade, 'side');\n\n    if (side !== undefined) {\n      if (side.length < 1) {\n        side = undefined;\n      }\n    }\n\n    let order = undefined;\n\n    if (side !== undefined) {\n      const id = side + '_child_order_acceptance_id';\n\n      if (id in trade) {\n        order = trade[id];\n      }\n    }\n\n    if (order === undefined) {\n      order = this.safeString(trade, 'child_order_acceptance_id');\n    }\n\n    const timestamp = this.parse8601(this.safeString(trade, 'exec_date'));\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'size');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    const id = this.safeString(trade, 'id');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': order,\n      'type': undefined,\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'product_code': market['id']\n    };\n    const response = await this.publicGetGetexecutions(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'product_code': this.marketId(symbol),\n      'child_order_type': type.toUpperCase(),\n      'side': side.toUpperCase(),\n      'price': price,\n      'size': amount\n    };\n    const result = await this.privatePostSendchildorder(this.extend(request, params)); // { \"status\": - 200, \"error_message\": \"Insufficient funds\", \"data\": null }\n\n    const id = this.safeString(result, 'child_order_acceptance_id');\n    return {\n      'info': result,\n      'id': id\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder() requires a `symbol` argument');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'product_code': this.marketId(symbol),\n      'child_order_acceptance_id': id\n    };\n    return await this.privatePostCancelchildorder(this.extend(request, params));\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'ACTIVE': 'open',\n      'COMPLETED': 'closed',\n      'CANCELED': 'canceled',\n      'EXPIRED': 'canceled',\n      'REJECTED': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    const timestamp = this.parse8601(this.safeString(order, 'child_order_date'));\n    const amount = this.safeNumber(order, 'size');\n    const remaining = this.safeNumber(order, 'outstanding_size');\n    const filled = this.safeNumber(order, 'executed_size');\n    const price = this.safeNumber(order, 'price');\n    const status = this.parseOrderStatus(this.safeString(order, 'child_order_state'));\n    const type = this.safeStringLower(order, 'child_order_type');\n    const side = this.safeStringLower(order, 'side');\n    const marketId = this.safeString(order, 'product_code');\n    const symbol = this.safeSymbol(marketId, market);\n    let fee = undefined;\n    const feeCost = this.safeNumber(order, 'total_commission');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': undefined,\n        'rate': undefined\n      };\n    }\n\n    const id = this.safeString(order, 'child_order_acceptance_id');\n    return this.safeOrder({\n      'id': id,\n      'clientOrderId': undefined,\n      'info': order,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': undefined,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'fee': fee,\n      'average': undefined,\n      'trades': undefined\n    });\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = 100, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a `symbol` argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'product_code': market['id'],\n      'count': limit\n    };\n    const response = await this.privateGetGetchildorders(this.extend(request, params));\n    let orders = this.parseOrders(response, market, since, limit);\n\n    if (symbol !== undefined) {\n      orders = this.filterBy(orders, 'symbol', symbol);\n    }\n\n    return orders;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = 100, params = {}) {\n    const request = {\n      'child_order_state': 'ACTIVE'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = 100, params = {}) {\n    const request = {\n      'child_order_state': 'COMPLETED'\n    };\n    return await this.fetchOrders(symbol, since, limit, this.extend(request, params));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder() requires a `symbol` argument');\n    }\n\n    const orders = await this.fetchOrders(symbol);\n    const ordersById = this.indexBy(orders, 'id');\n\n    if (id in ordersById) {\n      return ordersById[id];\n    }\n\n    throw new OrderNotFound(this.id + ' No order found with id ' + id);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchMyTrades() requires a `symbol` argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'product_code': market['id']\n    };\n\n    if (limit !== undefined) {\n      request['count'] = limit;\n    }\n\n    const response = await this.privateGetGetexecutions(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchPositions(symbols = undefined, params = {}) {\n    if (symbols === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchPositions() requires a `symbols` argument, exactly one symbol in an array');\n    }\n\n    await this.loadMarkets();\n    const request = {\n      'product_code': this.marketIds(symbols)\n    };\n    const response = await this.privateGetpositions(this.extend(request, params)); //\n    //     [\n    //         {\n    //             \"product_code\": \"FX_BTC_JPY\",\n    //             \"side\": \"BUY\",\n    //             \"price\": 36000,\n    //             \"size\": 10,\n    //             \"commission\": 0,\n    //             \"swap_point_accumulate\": -35,\n    //             \"require_collateral\": 120000,\n    //             \"open_date\": \"2015-11-03T10:04:45.011\",\n    //             \"leverage\": 3,\n    //             \"pnl\": 965,\n    //             \"sfd\": -0.5\n    //         }\n    //     ]\n    //\n    // todo unify parsePosition/parsePositions\n\n    return response;\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n\n    if (code !== 'JPY' && code !== 'USD' && code !== 'EUR') {\n      throw new ExchangeError(this.id + ' allows withdrawing JPY, USD, EUR only, ' + code + ' is not supported');\n    }\n\n    const currency = this.currency(code);\n    const request = {\n      'currency_code': currency['id'],\n      'amount': amount // 'bank_account_id': 1234,\n\n    };\n    const response = await this.privatePostWithdraw(this.extend(request, params));\n    const id = this.safeString(response, 'message_id');\n    return {\n      'info': response,\n      'id': id\n    };\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/' + this.version + '/';\n\n    if (api === 'private') {\n      request += 'me/';\n    }\n\n    request += path;\n\n    if (method === 'GET') {\n      if (Object.keys(params).length) {\n        request += '?' + this.urlencode(params);\n      }\n    }\n\n    const baseUrl = this.implodeParams(this.urls['api'], {\n      'hostname': this.hostname\n    });\n    const url = baseUrl + request;\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      let auth = [nonce, method, request].join('');\n\n      if (Object.keys(params).length) {\n        if (method !== 'GET') {\n          body = this.json(params);\n          auth += body;\n        }\n      }\n\n      headers = {\n        'ACCESS-KEY': this.apiKey,\n        'ACCESS-TIMESTAMP': nonce,\n        'ACCESS-SIGN': this.hmac(this.encode(auth), this.encode(this.secret)),\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/bitflyer.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","OrderNotFound","Precise","module","exports","bitflyer","describe","deepExtend","fetchMarkets","params","jp_markets","publicGetGetmarkets","us_markets","publicGetGetmarketsUsa","eu_markets","publicGetGetmarketsEu","markets","arrayConcat","result","i","length","market","id","safeString","currencies","split","baseId","undefined","quoteId","base","quote","numCurrencies","slice","safeCurrencyCode","symbol","fees","safeValue","maker","taker","spot","future","type","push","fetchBalance","loadMarkets","response","privateGetGetbalance","balance","currencyId","code","account","parseBalance","fetchOrderBook","limit","request","marketId","orderbook","publicGetGetboard","extend","parseOrderBook","fetchTicker","ticker","publicGetGetticker","timestamp","parse8601","last","safeNumber","iso8601","parseTrade","trade","side","safeStringLower","order","priceString","amountString","price","parseNumber","amount","cost","stringMul","fetchTrades","since","publicGetGetexecutions","parseTrades","createOrder","toUpperCase","privatePostSendchildorder","cancelOrder","privatePostCancelchildorder","parseOrderStatus","status","statuses","parseOrder","remaining","filled","safeSymbol","fee","feeCost","safeOrder","fetchOrders","privateGetGetchildorders","orders","parseOrders","filterBy","fetchOpenOrders","fetchClosedOrders","fetchOrder","ordersById","indexBy","fetchMyTrades","privateGetGetexecutions","fetchPositions","symbols","marketIds","privateGetpositions","withdraw","address","tag","checkAddress","currency","privatePostWithdraw","sign","path","api","method","headers","body","version","Object","keys","urlencode","baseUrl","implodeParams","urls","hostname","url","checkRequiredCredentials","nonce","toString","auth","join","json","apiKey","hmac","encode","secret"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAE,iBAAF,CAAxB;;AACA,MAAM;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,iBAAjB;AAAoCC,EAAAA;AAApC,IAAsDH,OAAO,CAAE,eAAF,CAAnE;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAE,gBAAF,CAAvB,C,CAEA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,MAAMC,QAAN,SAAuBR,QAAvB,CAAgC;AAC7CS,EAAAA,QAAQ,GAAI;AACR,WAAO,KAAKC,UAAL,CAAiB,MAAMD,QAAN,EAAjB,EAAoC;AACvC,YAAM,UADiC;AAEvC,cAAQ,UAF+B;AAGvC,mBAAa,CAAE,IAAF,CAH0B;AAIvC,iBAAW,IAJ4B;AAKvC,mBAAa,IAL0B;AAKpB;AACnB,kBAAY,cAN2B;AAMX;AAC5B,aAAO;AACH,uBAAe,IADZ;AAEH,gBAAQ,KAFL;AAGH,uBAAe,IAHZ;AAIH,wBAAgB,IAJb;AAKH,6BAAqB,UALlB;AAMH,wBAAgB,IANb;AAOH,yBAAiB,IAPd;AAQH,2BAAmB,UARhB;AASH,sBAAc,UATX;AAUH,0BAAkB,IAVf;AAWH,uBAAe,IAXZ;AAYH,uBAAe,IAZZ;AAaH,uBAAe,IAbZ;AAcH,oBAAY;AAdT,OAPgC;AAuBvC,cAAQ;AACJ,gBAAQ,qGADJ;AAEJ,eAAO,wBAFH;AAGJ,eAAO,sBAHH;AAIJ,eAAO;AAJH,OAvB+B;AA6BvC,aAAO;AACH,kBAAU;AACN,iBAAO,CACH,gBADG,EACe;AAClB,yBAFG,EAEe;AAClB,sBAHG,EAGe;AAClB,oBAJG,EAIe;AAClB,qBALG,EAMH,eANG,EAOH,WAPG,EAQH,eARG,EASH,UATG;AADD,SADP;AAcH,mBAAW;AACP,iBAAO,CACH,gBADG,EAEH,YAFG,EAGH,mBAHG,EAIH,eAJG,EAKH,sBALG,EAMH,uBANG,EAOH,cAPG,EAQH,YARG,EASH,aATG,EAUH,iBAVG,EAWH,aAXG,EAYH,gBAZG,EAaH,gBAbG,EAcH,iBAdG,EAeH,gBAfG,EAgBH,eAhBG,EAiBH,cAjBG,EAkBH,sBAlBG,CADA;AAqBP,kBAAQ,CACJ,UADI,EAEJ,UAFI,EAGJ,gBAHI,EAIJ,kBAJI,EAKJ,iBALI,EAMJ,mBANI,EAOJ,sBAPI;AArBD;AAdR,OA7BgC;AA2EvC,cAAQ;AACJ,mBAAW;AACP,mBAAS,MAAM,GADR;AAEP,mBAAS,MAAM;AAFR,SADP;AAKJ,mBAAW;AACP,mBAAS,OAAO,GADT;AAEP,mBAAS,OAAO;AAFT;AALP;AA3E+B,KAApC,CAAP;AAsFH;;AAED,QAAME,YAAN,CAAoBC,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAMC,UAAU,GAAG,MAAM,KAAKC,mBAAL,CAA0BF,MAA1B,CAAzB;AACA,UAAMG,UAAU,GAAG,MAAM,KAAKC,sBAAL,CAA6BJ,MAA7B,CAAzB;AACA,UAAMK,UAAU,GAAG,MAAM,KAAKC,qBAAL,CAA4BN,MAA5B,CAAzB;AACA,QAAIO,OAAO,GAAG,KAAKC,WAAL,CAAkBP,UAAlB,EAA8BE,UAA9B,CAAd;AACAI,IAAAA,OAAO,GAAG,KAAKC,WAAL,CAAkBD,OAAlB,EAA2BF,UAA3B,CAAV;AACA,UAAMI,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAME,MAAM,GAAGL,OAAO,CAACG,CAAD,CAAtB;AACA,YAAMG,EAAE,GAAG,KAAKC,UAAL,CAAiBF,MAAjB,EAAyB,cAAzB,CAAX;AACA,YAAMG,UAAU,GAAGF,EAAE,CAACG,KAAH,CAAU,GAAV,CAAnB;AACA,UAAIC,MAAM,GAAGC,SAAb;AACA,UAAIC,OAAO,GAAGD,SAAd;AACA,UAAIE,IAAI,GAAGF,SAAX;AACA,UAAIG,KAAK,GAAGH,SAAZ;AACA,YAAMI,aAAa,GAAGP,UAAU,CAACJ,MAAjC;;AACA,UAAIW,aAAa,KAAK,CAAtB,EAAyB;AACrBL,QAAAA,MAAM,GAAGJ,EAAE,CAACU,KAAH,CAAU,CAAV,EAAa,CAAb,CAAT;AACAJ,QAAAA,OAAO,GAAGN,EAAE,CAACU,KAAH,CAAU,CAAV,EAAa,CAAb,CAAV;AACH,OAHD,MAGO,IAAID,aAAa,KAAK,CAAtB,EAAyB;AAC5BL,QAAAA,MAAM,GAAGF,UAAU,CAAC,CAAD,CAAnB;AACAI,QAAAA,OAAO,GAAGJ,UAAU,CAAC,CAAD,CAApB;AACH,OAHM,MAGA;AACHE,QAAAA,MAAM,GAAGF,UAAU,CAAC,CAAD,CAAnB;AACAI,QAAAA,OAAO,GAAGJ,UAAU,CAAC,CAAD,CAApB;AACH;;AACDK,MAAAA,IAAI,GAAG,KAAKI,gBAAL,CAAuBP,MAAvB,CAAP;AACAI,MAAAA,KAAK,GAAG,KAAKG,gBAAL,CAAuBL,OAAvB,CAAR;AACA,YAAMM,MAAM,GAAIH,aAAa,KAAK,CAAnB,GAAyBF,IAAI,GAAG,GAAP,GAAaC,KAAtC,GAA+CR,EAA9D;AACA,YAAMa,IAAI,GAAG,KAAKC,SAAL,CAAgB,KAAKD,IAArB,EAA2BD,MAA3B,EAAmC,KAAKC,IAAL,CAAU,SAAV,CAAnC,CAAb;AACA,UAAIE,KAAK,GAAG,KAAKD,SAAL,CAAgBD,IAAhB,EAAsB,OAAtB,EAA+B,KAAKA,IAAL,CAAU,SAAV,EAAqB,OAArB,CAA/B,CAAZ;AACA,UAAIG,KAAK,GAAG,KAAKF,SAAL,CAAgBD,IAAhB,EAAsB,OAAtB,EAA+B,KAAKA,IAAL,CAAU,SAAV,EAAqB,OAArB,CAA/B,CAAZ;AACA,UAAII,IAAI,GAAG,IAAX;AACA,UAAIC,MAAM,GAAG,KAAb;AACA,UAAIC,IAAI,GAAG,MAAX;;AACA,UAAK,WAAWpB,MAAZ,IAAwBG,UAAU,CAAC,CAAD,CAAV,KAAkB,IAA9C,EAAqD;AACjDiB,QAAAA,IAAI,GAAG,QAAP;AACAD,QAAAA,MAAM,GAAG,IAAT;AACAD,QAAAA,IAAI,GAAG,KAAP;AACAF,QAAAA,KAAK,GAAG,GAAR;AACAC,QAAAA,KAAK,GAAG,GAAR;AACH;;AACDpB,MAAAA,MAAM,CAACwB,IAAP,CAAa;AACT,cAAMpB,EADG;AAET,kBAAUY,MAFD;AAGT,gBAAQL,IAHC;AAIT,iBAASC,KAJA;AAKT,kBAAUJ,MALD;AAMT,mBAAWE,OANF;AAOT,iBAASS,KAPA;AAQT,iBAASC,KARA;AAST,gBAAQG,IATC;AAUT,gBAAQF,IAVC;AAWT,kBAAUC,MAXD;AAYT,gBAAQnB;AAZC,OAAb;AAcH;;AACD,WAAOH,MAAP;AACH;;AAED,QAAMyB,YAAN,CAAoBlC,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAM,KAAKmC,WAAL,EAAN;AACA,UAAMC,QAAQ,GAAG,MAAM,KAAKC,oBAAL,CAA2BrC,MAA3B,CAAvB,CAF6B,CAG7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMS,MAAM,GAAG;AAAE,cAAQ2B;AAAV,KAAf;;AACA,SAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0B,QAAQ,CAACzB,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,YAAM4B,OAAO,GAAGF,QAAQ,CAAC1B,CAAD,CAAxB;AACA,YAAM6B,UAAU,GAAG,KAAKzB,UAAL,CAAiBwB,OAAjB,EAA0B,eAA1B,CAAnB;AACA,YAAME,IAAI,GAAG,KAAKhB,gBAAL,CAAuBe,UAAvB,CAAb;AACA,YAAME,OAAO,GAAG,KAAKA,OAAL,EAAhB;AACAA,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,KAAK3B,UAAL,CAAiBwB,OAAjB,EAA0B,QAA1B,CAAnB;AACAG,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkB,KAAK3B,UAAL,CAAiBwB,OAAjB,EAA0B,WAA1B,CAAlB;AACA7B,MAAAA,MAAM,CAAC+B,IAAD,CAAN,GAAeC,OAAf;AACH;;AACD,WAAO,KAAKC,YAAL,CAAmBjC,MAAnB,EAA2B,KAA3B,CAAP;AACH;;AAED,QAAMkC,cAAN,CAAsBlB,MAAtB,EAA8BmB,KAAK,GAAG1B,SAAtC,EAAiDlB,MAAM,GAAG,EAA1D,EAA8D;AAC1D,UAAM,KAAKmC,WAAL,EAAN;AACA,UAAMU,OAAO,GAAG;AACZ,sBAAgB,KAAKC,QAAL,CAAerB,MAAf;AADJ,KAAhB;AAGA,UAAMsB,SAAS,GAAG,MAAM,KAAKC,iBAAL,CAAwB,KAAKC,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAAxB,CAAxB;AACA,WAAO,KAAKkD,cAAL,CAAqBH,SAArB,EAAgCtB,MAAhC,EAAwCP,SAAxC,EAAmD,MAAnD,EAA2D,MAA3D,EAAmE,OAAnE,EAA4E,MAA5E,CAAP;AACH;;AAED,QAAMiC,WAAN,CAAmB1B,MAAnB,EAA2BzB,MAAM,GAAG,EAApC,EAAwC;AACpC,UAAM,KAAKmC,WAAL,EAAN;AACA,UAAMU,OAAO,GAAG;AACZ,sBAAgB,KAAKC,QAAL,CAAerB,MAAf;AADJ,KAAhB;AAGA,UAAM2B,MAAM,GAAG,MAAM,KAAKC,kBAAL,CAAyB,KAAKJ,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAAzB,CAArB;AACA,UAAMsD,SAAS,GAAG,KAAKC,SAAL,CAAgB,KAAKzC,UAAL,CAAiBsC,MAAjB,EAAyB,WAAzB,CAAhB,CAAlB;AACA,UAAMI,IAAI,GAAG,KAAKC,UAAL,CAAiBL,MAAjB,EAAyB,KAAzB,CAAb;AACA,WAAO;AACH,gBAAU3B,MADP;AAEH,mBAAa6B,SAFV;AAGH,kBAAY,KAAKI,OAAL,CAAcJ,SAAd,CAHT;AAIH,cAAQpC,SAJL;AAKH,aAAOA,SALJ;AAMH,aAAO,KAAKuC,UAAL,CAAiBL,MAAjB,EAAyB,UAAzB,CANJ;AAOH,mBAAalC,SAPV;AAQH,aAAO,KAAKuC,UAAL,CAAiBL,MAAjB,EAAyB,UAAzB,CARJ;AASH,mBAAalC,SATV;AAUH,cAAQA,SAVL;AAWH,cAAQA,SAXL;AAYH,eAASsC,IAZN;AAaH,cAAQA,IAbL;AAcH,uBAAiBtC,SAdd;AAeH,gBAAUA,SAfP;AAgBH,oBAAcA,SAhBX;AAiBH,iBAAWA,SAjBR;AAkBH,oBAAc,KAAKuC,UAAL,CAAiBL,MAAjB,EAAyB,mBAAzB,CAlBX;AAmBH,qBAAelC,SAnBZ;AAoBH,cAAQkC;AApBL,KAAP;AAsBH;;AAEDO,EAAAA,UAAU,CAAEC,KAAF,EAAShD,MAAM,GAAGM,SAAlB,EAA6B;AACnC,QAAI2C,IAAI,GAAG,KAAKC,eAAL,CAAsBF,KAAtB,EAA6B,MAA7B,CAAX;;AACA,QAAIC,IAAI,KAAK3C,SAAb,EAAwB;AACpB,UAAI2C,IAAI,CAAClD,MAAL,GAAc,CAAlB,EAAqB;AACjBkD,QAAAA,IAAI,GAAG3C,SAAP;AACH;AACJ;;AACD,QAAI6C,KAAK,GAAG7C,SAAZ;;AACA,QAAI2C,IAAI,KAAK3C,SAAb,EAAwB;AACpB,YAAML,EAAE,GAAGgD,IAAI,GAAG,4BAAlB;;AACA,UAAIhD,EAAE,IAAI+C,KAAV,EAAiB;AACbG,QAAAA,KAAK,GAAGH,KAAK,CAAC/C,EAAD,CAAb;AACH;AACJ;;AACD,QAAIkD,KAAK,KAAK7C,SAAd,EAAyB;AACrB6C,MAAAA,KAAK,GAAG,KAAKjD,UAAL,CAAiB8C,KAAjB,EAAwB,2BAAxB,CAAR;AACH;;AACD,UAAMN,SAAS,GAAG,KAAKC,SAAL,CAAgB,KAAKzC,UAAL,CAAiB8C,KAAjB,EAAwB,WAAxB,CAAhB,CAAlB;AACA,UAAMI,WAAW,GAAG,KAAKlD,UAAL,CAAiB8C,KAAjB,EAAwB,OAAxB,CAApB;AACA,UAAMK,YAAY,GAAG,KAAKnD,UAAL,CAAiB8C,KAAjB,EAAwB,MAAxB,CAArB;AACA,UAAMM,KAAK,GAAG,KAAKC,WAAL,CAAkBH,WAAlB,CAAd;AACA,UAAMI,MAAM,GAAG,KAAKD,WAAL,CAAkBF,YAAlB,CAAf;AACA,UAAMI,IAAI,GAAG,KAAKF,WAAL,CAAkB1E,OAAO,CAAC6E,SAAR,CAAmBN,WAAnB,EAAgCC,YAAhC,CAAlB,CAAb;AACA,UAAMpD,EAAE,GAAG,KAAKC,UAAL,CAAiB8C,KAAjB,EAAwB,IAAxB,CAAX;AACA,QAAInC,MAAM,GAAGP,SAAb;;AACA,QAAIN,MAAM,KAAKM,SAAf,EAA0B;AACtBO,MAAAA,MAAM,GAAGb,MAAM,CAAC,QAAD,CAAf;AACH;;AACD,WAAO;AACH,YAAMC,EADH;AAEH,cAAQ+C,KAFL;AAGH,mBAAaN,SAHV;AAIH,kBAAY,KAAKI,OAAL,CAAcJ,SAAd,CAJT;AAKH,gBAAU7B,MALP;AAMH,eAASsC,KANN;AAOH,cAAQ7C,SAPL;AAQH,cAAQ2C,IARL;AASH,sBAAgB3C,SATb;AAUH,eAASgD,KAVN;AAWH,gBAAUE,MAXP;AAYH,cAAQC,IAZL;AAaH,aAAOnD;AAbJ,KAAP;AAeH;;AAED,QAAMqD,WAAN,CAAmB9C,MAAnB,EAA2B+C,KAAK,GAAGtD,SAAnC,EAA8C0B,KAAK,GAAG1B,SAAtD,EAAiElB,MAAM,GAAG,EAA1E,EAA8E;AAC1E,UAAM,KAAKmC,WAAL,EAAN;AACA,UAAMvB,MAAM,GAAG,KAAKA,MAAL,CAAaa,MAAb,CAAf;AACA,UAAMoB,OAAO,GAAG;AACZ,sBAAgBjC,MAAM,CAAC,IAAD;AADV,KAAhB;AAGA,UAAMwB,QAAQ,GAAG,MAAM,KAAKqC,sBAAL,CAA6B,KAAKxB,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAA7B,CAAvB;AACA,WAAO,KAAK0E,WAAL,CAAkBtC,QAAlB,EAA4BxB,MAA5B,EAAoC4D,KAApC,EAA2C5B,KAA3C,CAAP;AACH;;AAED,QAAM+B,WAAN,CAAmBlD,MAAnB,EAA2BO,IAA3B,EAAiC6B,IAAjC,EAAuCO,MAAvC,EAA+CF,KAAK,GAAGhD,SAAvD,EAAkElB,MAAM,GAAG,EAA3E,EAA+E;AAC3E,UAAM,KAAKmC,WAAL,EAAN;AACA,UAAMU,OAAO,GAAG;AACZ,sBAAgB,KAAKC,QAAL,CAAerB,MAAf,CADJ;AAEZ,0BAAoBO,IAAI,CAAC4C,WAAL,EAFR;AAGZ,cAAQf,IAAI,CAACe,WAAL,EAHI;AAIZ,eAASV,KAJG;AAKZ,cAAQE;AALI,KAAhB;AAOA,UAAM3D,MAAM,GAAG,MAAM,KAAKoE,yBAAL,CAAgC,KAAK5B,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAAhC,CAArB,CAT2E,CAU3E;;AACA,UAAMa,EAAE,GAAG,KAAKC,UAAL,CAAiBL,MAAjB,EAAyB,2BAAzB,CAAX;AACA,WAAO;AACH,cAAQA,MADL;AAEH,YAAMI;AAFH,KAAP;AAIH;;AAED,QAAMiE,WAAN,CAAmBjE,EAAnB,EAAuBY,MAAM,GAAGP,SAAhC,EAA2ClB,MAAM,GAAG,EAApD,EAAwD;AACpD,QAAIyB,MAAM,KAAKP,SAAf,EAA0B;AACtB,YAAM,IAAI3B,iBAAJ,CAAuB,KAAKsB,EAAL,GAAU,6CAAjC,CAAN;AACH;;AACD,UAAM,KAAKsB,WAAL,EAAN;AACA,UAAMU,OAAO,GAAG;AACZ,sBAAgB,KAAKC,QAAL,CAAerB,MAAf,CADJ;AAEZ,mCAA6BZ;AAFjB,KAAhB;AAIA,WAAO,MAAM,KAAKkE,2BAAL,CAAkC,KAAK9B,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAAlC,CAAb;AACH;;AAEDgF,EAAAA,gBAAgB,CAAEC,MAAF,EAAU;AACtB,UAAMC,QAAQ,GAAG;AACb,gBAAU,MADG;AAEb,mBAAa,QAFA;AAGb,kBAAY,UAHC;AAIb,iBAAW,UAJE;AAKb,kBAAY;AALC,KAAjB;AAOA,WAAO,KAAKpE,UAAL,CAAiBoE,QAAjB,EAA2BD,MAA3B,EAAmCA,MAAnC,CAAP;AACH;;AAEDE,EAAAA,UAAU,CAAEpB,KAAF,EAASnD,MAAM,GAAGM,SAAlB,EAA6B;AACnC,UAAMoC,SAAS,GAAG,KAAKC,SAAL,CAAgB,KAAKzC,UAAL,CAAiBiD,KAAjB,EAAwB,kBAAxB,CAAhB,CAAlB;AACA,UAAMK,MAAM,GAAG,KAAKX,UAAL,CAAiBM,KAAjB,EAAwB,MAAxB,CAAf;AACA,UAAMqB,SAAS,GAAG,KAAK3B,UAAL,CAAiBM,KAAjB,EAAwB,kBAAxB,CAAlB;AACA,UAAMsB,MAAM,GAAG,KAAK5B,UAAL,CAAiBM,KAAjB,EAAwB,eAAxB,CAAf;AACA,UAAMG,KAAK,GAAG,KAAKT,UAAL,CAAiBM,KAAjB,EAAwB,OAAxB,CAAd;AACA,UAAMkB,MAAM,GAAG,KAAKD,gBAAL,CAAuB,KAAKlE,UAAL,CAAiBiD,KAAjB,EAAwB,mBAAxB,CAAvB,CAAf;AACA,UAAM/B,IAAI,GAAG,KAAK8B,eAAL,CAAsBC,KAAtB,EAA6B,kBAA7B,CAAb;AACA,UAAMF,IAAI,GAAG,KAAKC,eAAL,CAAsBC,KAAtB,EAA6B,MAA7B,CAAb;AACA,UAAMjB,QAAQ,GAAG,KAAKhC,UAAL,CAAiBiD,KAAjB,EAAwB,cAAxB,CAAjB;AACA,UAAMtC,MAAM,GAAG,KAAK6D,UAAL,CAAiBxC,QAAjB,EAA2BlC,MAA3B,CAAf;AACA,QAAI2E,GAAG,GAAGrE,SAAV;AACA,UAAMsE,OAAO,GAAG,KAAK/B,UAAL,CAAiBM,KAAjB,EAAwB,kBAAxB,CAAhB;;AACA,QAAIyB,OAAO,KAAKtE,SAAhB,EAA2B;AACvBqE,MAAAA,GAAG,GAAG;AACF,gBAAQC,OADN;AAEF,oBAAYtE,SAFV;AAGF,gBAAQA;AAHN,OAAN;AAKH;;AACD,UAAML,EAAE,GAAG,KAAKC,UAAL,CAAiBiD,KAAjB,EAAwB,2BAAxB,CAAX;AACA,WAAO,KAAK0B,SAAL,CAAgB;AACnB,YAAM5E,EADa;AAEnB,uBAAiBK,SAFE;AAGnB,cAAQ6C,KAHW;AAInB,mBAAaT,SAJM;AAKnB,kBAAY,KAAKI,OAAL,CAAcJ,SAAd,CALO;AAMnB,4BAAsBpC,SANH;AAOnB,gBAAU+D,MAPS;AAQnB,gBAAUxD,MARS;AASnB,cAAQO,IATW;AAUnB,qBAAed,SAVI;AAWnB,kBAAYA,SAXO;AAYnB,cAAQ2C,IAZW;AAanB,eAASK,KAbU;AAcnB,mBAAahD,SAdM;AAenB,cAAQA,SAfW;AAgBnB,gBAAUkD,MAhBS;AAiBnB,gBAAUiB,MAjBS;AAkBnB,mBAAaD,SAlBM;AAmBnB,aAAOG,GAnBY;AAoBnB,iBAAWrE,SApBQ;AAqBnB,gBAAUA;AArBS,KAAhB,CAAP;AAuBH;;AAED,QAAMwE,WAAN,CAAmBjE,MAAM,GAAGP,SAA5B,EAAuCsD,KAAK,GAAGtD,SAA/C,EAA0D0B,KAAK,GAAG,GAAlE,EAAuE5C,MAAM,GAAG,EAAhF,EAAoF;AAChF,QAAIyB,MAAM,KAAKP,SAAf,EAA0B;AACtB,YAAM,IAAI3B,iBAAJ,CAAuB,KAAKsB,EAAL,GAAU,6CAAjC,CAAN;AACH;;AACD,UAAM,KAAKsB,WAAL,EAAN;AACA,UAAMvB,MAAM,GAAG,KAAKA,MAAL,CAAaa,MAAb,CAAf;AACA,UAAMoB,OAAO,GAAG;AACZ,sBAAgBjC,MAAM,CAAC,IAAD,CADV;AAEZ,eAASgC;AAFG,KAAhB;AAIA,UAAMR,QAAQ,GAAG,MAAM,KAAKuD,wBAAL,CAA+B,KAAK1C,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAA/B,CAAvB;AACA,QAAI4F,MAAM,GAAG,KAAKC,WAAL,CAAkBzD,QAAlB,EAA4BxB,MAA5B,EAAoC4D,KAApC,EAA2C5B,KAA3C,CAAb;;AACA,QAAInB,MAAM,KAAKP,SAAf,EAA0B;AACtB0E,MAAAA,MAAM,GAAG,KAAKE,QAAL,CAAeF,MAAf,EAAuB,QAAvB,EAAiCnE,MAAjC,CAAT;AACH;;AACD,WAAOmE,MAAP;AACH;;AAED,QAAMG,eAAN,CAAuBtE,MAAM,GAAGP,SAAhC,EAA2CsD,KAAK,GAAGtD,SAAnD,EAA8D0B,KAAK,GAAG,GAAtE,EAA2E5C,MAAM,GAAG,EAApF,EAAwF;AACpF,UAAM6C,OAAO,GAAG;AACZ,2BAAqB;AADT,KAAhB;AAGA,WAAO,MAAM,KAAK6C,WAAL,CAAkBjE,MAAlB,EAA0B+C,KAA1B,EAAiC5B,KAAjC,EAAwC,KAAKK,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAAxC,CAAb;AACH;;AAED,QAAMgG,iBAAN,CAAyBvE,MAAM,GAAGP,SAAlC,EAA6CsD,KAAK,GAAGtD,SAArD,EAAgE0B,KAAK,GAAG,GAAxE,EAA6E5C,MAAM,GAAG,EAAtF,EAA0F;AACtF,UAAM6C,OAAO,GAAG;AACZ,2BAAqB;AADT,KAAhB;AAGA,WAAO,MAAM,KAAK6C,WAAL,CAAkBjE,MAAlB,EAA0B+C,KAA1B,EAAiC5B,KAAjC,EAAwC,KAAKK,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAAxC,CAAb;AACH;;AAED,QAAMiG,UAAN,CAAkBpF,EAAlB,EAAsBY,MAAM,GAAGP,SAA/B,EAA0ClB,MAAM,GAAG,EAAnD,EAAuD;AACnD,QAAIyB,MAAM,KAAKP,SAAf,EAA0B;AACtB,YAAM,IAAI3B,iBAAJ,CAAuB,KAAKsB,EAAL,GAAU,4CAAjC,CAAN;AACH;;AACD,UAAM+E,MAAM,GAAG,MAAM,KAAKF,WAAL,CAAkBjE,MAAlB,CAArB;AACA,UAAMyE,UAAU,GAAG,KAAKC,OAAL,CAAcP,MAAd,EAAsB,IAAtB,CAAnB;;AACA,QAAI/E,EAAE,IAAIqF,UAAV,EAAsB;AAClB,aAAOA,UAAU,CAACrF,EAAD,CAAjB;AACH;;AACD,UAAM,IAAIrB,aAAJ,CAAmB,KAAKqB,EAAL,GAAU,0BAAV,GAAuCA,EAA1D,CAAN;AACH;;AAED,QAAMuF,aAAN,CAAqB3E,MAAM,GAAGP,SAA9B,EAAyCsD,KAAK,GAAGtD,SAAjD,EAA4D0B,KAAK,GAAG1B,SAApE,EAA+ElB,MAAM,GAAG,EAAxF,EAA4F;AACxF,QAAIyB,MAAM,KAAKP,SAAf,EAA0B;AACtB,YAAM,IAAI3B,iBAAJ,CAAuB,KAAKsB,EAAL,GAAU,+CAAjC,CAAN;AACH;;AACD,UAAM,KAAKsB,WAAL,EAAN;AACA,UAAMvB,MAAM,GAAG,KAAKA,MAAL,CAAaa,MAAb,CAAf;AACA,UAAMoB,OAAO,GAAG;AACZ,sBAAgBjC,MAAM,CAAC,IAAD;AADV,KAAhB;;AAGA,QAAIgC,KAAK,KAAK1B,SAAd,EAAyB;AACrB2B,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBD,KAAnB;AACH;;AACD,UAAMR,QAAQ,GAAG,MAAM,KAAKiE,uBAAL,CAA8B,KAAKpD,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAA9B,CAAvB;AACA,WAAO,KAAK0E,WAAL,CAAkBtC,QAAlB,EAA4BxB,MAA5B,EAAoC4D,KAApC,EAA2C5B,KAA3C,CAAP;AACH;;AAED,QAAM0D,cAAN,CAAsBC,OAAO,GAAGrF,SAAhC,EAA2ClB,MAAM,GAAG,EAApD,EAAwD;AACpD,QAAIuG,OAAO,KAAKrF,SAAhB,EAA2B;AACvB,YAAM,IAAI3B,iBAAJ,CAAuB,KAAKsB,EAAL,GAAU,iFAAjC,CAAN;AACH;;AACD,UAAM,KAAKsB,WAAL,EAAN;AACA,UAAMU,OAAO,GAAG;AACZ,sBAAgB,KAAK2D,SAAL,CAAgBD,OAAhB;AADJ,KAAhB;AAGA,UAAMnE,QAAQ,GAAG,MAAM,KAAKqE,mBAAL,CAA0B,KAAKxD,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAA1B,CAAvB,CARoD,CASpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAOoC,QAAP;AACH;;AAED,QAAMsE,QAAN,CAAgBlE,IAAhB,EAAsB4B,MAAtB,EAA8BuC,OAA9B,EAAuCC,GAAG,GAAG1F,SAA7C,EAAwDlB,MAAM,GAAG,EAAjE,EAAqE;AACjE,SAAK6G,YAAL,CAAmBF,OAAnB;AACA,UAAM,KAAKxE,WAAL,EAAN;;AACA,QAAIK,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA3B,IAAoCA,IAAI,KAAK,KAAjD,EAAwD;AACpD,YAAM,IAAIlD,aAAJ,CAAmB,KAAKuB,EAAL,GAAU,0CAAV,GAAuD2B,IAAvD,GAA8D,mBAAjF,CAAN;AACH;;AACD,UAAMsE,QAAQ,GAAG,KAAKA,QAAL,CAAetE,IAAf,CAAjB;AACA,UAAMK,OAAO,GAAG;AACZ,uBAAiBiE,QAAQ,CAAC,IAAD,CADb;AAEZ,gBAAU1C,MAFE,CAGZ;;AAHY,KAAhB;AAKA,UAAMhC,QAAQ,GAAG,MAAM,KAAK2E,mBAAL,CAA0B,KAAK9D,MAAL,CAAaJ,OAAb,EAAsB7C,MAAtB,CAA1B,CAAvB;AACA,UAAMa,EAAE,GAAG,KAAKC,UAAL,CAAiBsB,QAAjB,EAA2B,YAA3B,CAAX;AACA,WAAO;AACH,cAAQA,QADL;AAEH,YAAMvB;AAFH,KAAP;AAIH;;AAEDmG,EAAAA,IAAI,CAAEC,IAAF,EAAQC,GAAG,GAAG,QAAd,EAAwBC,MAAM,GAAG,KAAjC,EAAwCnH,MAAM,GAAG,EAAjD,EAAqDoH,OAAO,GAAGlG,SAA/D,EAA0EmG,IAAI,GAAGnG,SAAjF,EAA4F;AAC5F,QAAI2B,OAAO,GAAG,MAAM,KAAKyE,OAAX,GAAqB,GAAnC;;AACA,QAAIJ,GAAG,KAAK,SAAZ,EAAuB;AACnBrE,MAAAA,OAAO,IAAI,KAAX;AACH;;AACDA,IAAAA,OAAO,IAAIoE,IAAX;;AACA,QAAIE,MAAM,KAAK,KAAf,EAAsB;AAClB,UAAII,MAAM,CAACC,IAAP,CAAaxH,MAAb,EAAqBW,MAAzB,EAAiC;AAC7BkC,QAAAA,OAAO,IAAI,MAAM,KAAK4E,SAAL,CAAgBzH,MAAhB,CAAjB;AACH;AACJ;;AACD,UAAM0H,OAAO,GAAG,KAAKC,aAAL,CAAoB,KAAKC,IAAL,CAAU,KAAV,CAApB,EAAsC;AAAE,kBAAY,KAAKC;AAAnB,KAAtC,CAAhB;AACA,UAAMC,GAAG,GAAGJ,OAAO,GAAG7E,OAAtB;;AACA,QAAIqE,GAAG,KAAK,SAAZ,EAAuB;AACnB,WAAKa,wBAAL;AACA,YAAMC,KAAK,GAAG,KAAKA,KAAL,GAAcC,QAAd,EAAd;AACA,UAAIC,IAAI,GAAG,CAAEF,KAAF,EAASb,MAAT,EAAiBtE,OAAjB,EAA2BsF,IAA3B,CAAiC,EAAjC,CAAX;;AACA,UAAIZ,MAAM,CAACC,IAAP,CAAaxH,MAAb,EAAqBW,MAAzB,EAAiC;AAC7B,YAAIwG,MAAM,KAAK,KAAf,EAAsB;AAClBE,UAAAA,IAAI,GAAG,KAAKe,IAAL,CAAWpI,MAAX,CAAP;AACAkI,UAAAA,IAAI,IAAIb,IAAR;AACH;AACJ;;AACDD,MAAAA,OAAO,GAAG;AACN,sBAAc,KAAKiB,MADb;AAEN,4BAAoBL,KAFd;AAGN,uBAAe,KAAKM,IAAL,CAAW,KAAKC,MAAL,CAAaL,IAAb,CAAX,EAA+B,KAAKK,MAAL,CAAa,KAAKC,MAAlB,CAA/B,CAHT;AAIN,wBAAgB;AAJV,OAAV;AAMH;;AACD,WAAO;AAAE,aAAOV,GAAT;AAAc,gBAAUX,MAAxB;AAAgC,cAAQE,IAAxC;AAA8C,iBAAWD;AAAzD,KAAP;AACH;;AA7f4C,CAAjD","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, OrderNotFound } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitflyer extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitflyer',\n            'name': 'bitFlyer',\n            'countries': [ 'JP' ],\n            'version': 'v1',\n            'rateLimit': 1000, // their nonce-timestamp is in seconds...\n            'hostname': 'bitflyer.com', // or bitflyer.com\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': 'emulated',\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOpenOrders': 'emulated',\n                'fetchOrder': 'emulated',\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg',\n                'api': 'https://api.{hostname}',\n                'www': 'https://bitflyer.com',\n                'doc': 'https://lightning.bitflyer.com/docs?lang=en',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'getmarkets/usa', // new (wip)\n                        'getmarkets/eu',  // new (wip)\n                        'getmarkets',     // or 'markets'\n                        'getboard',       // ...\n                        'getticker',\n                        'getexecutions',\n                        'gethealth',\n                        'getboardstate',\n                        'getchats',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'getpermissions',\n                        'getbalance',\n                        'getbalancehistory',\n                        'getcollateral',\n                        'getcollateralhistory',\n                        'getcollateralaccounts',\n                        'getaddresses',\n                        'getcoinins',\n                        'getcoinouts',\n                        'getbankaccounts',\n                        'getdeposits',\n                        'getwithdrawals',\n                        'getchildorders',\n                        'getparentorders',\n                        'getparentorder',\n                        'getexecutions',\n                        'getpositions',\n                        'gettradingcommission',\n                    ],\n                    'post': [\n                        'sendcoin',\n                        'withdraw',\n                        'sendchildorder',\n                        'cancelchildorder',\n                        'sendparentorder',\n                        'cancelparentorder',\n                        'cancelallchildorders',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n                'BTC/JPY': {\n                    'maker': 0.15 / 100,\n                    'taker': 0.15 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const jp_markets = await this.publicGetGetmarkets (params);\n        const us_markets = await this.publicGetGetmarketsUsa (params);\n        const eu_markets = await this.publicGetGetmarketsEu (params);\n        let markets = this.arrayConcat (jp_markets, us_markets);\n        markets = this.arrayConcat (markets, eu_markets);\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'product_code');\n            const currencies = id.split ('_');\n            let baseId = undefined;\n            let quoteId = undefined;\n            let base = undefined;\n            let quote = undefined;\n            const numCurrencies = currencies.length;\n            if (numCurrencies === 1) {\n                baseId = id.slice (0, 3);\n                quoteId = id.slice (3, 6);\n            } else if (numCurrencies === 2) {\n                baseId = currencies[0];\n                quoteId = currencies[1];\n            } else {\n                baseId = currencies[1];\n                quoteId = currencies[2];\n            }\n            base = this.safeCurrencyCode (baseId);\n            quote = this.safeCurrencyCode (quoteId);\n            const symbol = (numCurrencies === 2) ? (base + '/' + quote) : id;\n            const fees = this.safeValue (this.fees, symbol, this.fees['trading']);\n            let maker = this.safeValue (fees, 'maker', this.fees['trading']['maker']);\n            let taker = this.safeValue (fees, 'taker', this.fees['trading']['taker']);\n            let spot = true;\n            let future = false;\n            let type = 'spot';\n            if (('alias' in market) || (currencies[0] === 'FX')) {\n                type = 'future';\n                future = true;\n                spot = false;\n                maker = 0.0;\n                taker = 0.0;\n            }\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'maker': maker,\n                'taker': taker,\n                'type': type,\n                'spot': spot,\n                'future': future,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privateGetGetbalance (params);\n        //\n        //     [\n        //         {\n        //             \"currency_code\": \"JPY\",\n        //             \"amount\": 1024078,\n        //             \"available\": 508000\n        //         },\n        //         {\n        //             \"currency_code\": \"BTC\",\n        //             \"amount\": 10.24,\n        //             \"available\": 4.12\n        //         },\n        //         {\n        //             \"currency_code\": \"ETH\",\n        //             \"amount\": 20.48,\n        //             \"available\": 16.38\n        //         }\n        //     ]\n        //\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const currencyId = this.safeString (balance, 'currency_code');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['total'] = this.safeString (balance, 'amount');\n            account['free'] = this.safeString (balance, 'available');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'product_code': this.marketId (symbol),\n        };\n        const orderbook = await this.publicGetGetboard (this.extend (request, params));\n        return this.parseOrderBook (orderbook, symbol, undefined, 'bids', 'asks', 'price', 'size');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'product_code': this.marketId (symbol),\n        };\n        const ticker = await this.publicGetGetticker (this.extend (request, params));\n        const timestamp = this.parse8601 (this.safeString (ticker, 'timestamp'));\n        const last = this.safeNumber (ticker, 'ltp');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': this.safeNumber (ticker, 'best_bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'best_ask'),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeNumber (ticker, 'volume_by_product'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let side = this.safeStringLower (trade, 'side');\n        if (side !== undefined) {\n            if (side.length < 1) {\n                side = undefined;\n            }\n        }\n        let order = undefined;\n        if (side !== undefined) {\n            const id = side + '_child_order_acceptance_id';\n            if (id in trade) {\n                order = trade[id];\n            }\n        }\n        if (order === undefined) {\n            order = this.safeString (trade, 'child_order_acceptance_id');\n        }\n        const timestamp = this.parse8601 (this.safeString (trade, 'exec_date'));\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'size');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        const id = this.safeString (trade, 'id');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': order,\n            'type': undefined,\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'product_code': market['id'],\n        };\n        const response = await this.publicGetGetexecutions (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'product_code': this.marketId (symbol),\n            'child_order_type': type.toUpperCase (),\n            'side': side.toUpperCase (),\n            'price': price,\n            'size': amount,\n        };\n        const result = await this.privatePostSendchildorder (this.extend (request, params));\n        // { \"status\": - 200, \"error_message\": \"Insufficient funds\", \"data\": null }\n        const id = this.safeString (result, 'child_order_acceptance_id');\n        return {\n            'info': result,\n            'id': id,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder() requires a `symbol` argument');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'product_code': this.marketId (symbol),\n            'child_order_acceptance_id': id,\n        };\n        return await this.privatePostCancelchildorder (this.extend (request, params));\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'ACTIVE': 'open',\n            'COMPLETED': 'closed',\n            'CANCELED': 'canceled',\n            'EXPIRED': 'canceled',\n            'REJECTED': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        const timestamp = this.parse8601 (this.safeString (order, 'child_order_date'));\n        const amount = this.safeNumber (order, 'size');\n        const remaining = this.safeNumber (order, 'outstanding_size');\n        const filled = this.safeNumber (order, 'executed_size');\n        const price = this.safeNumber (order, 'price');\n        const status = this.parseOrderStatus (this.safeString (order, 'child_order_state'));\n        const type = this.safeStringLower (order, 'child_order_type');\n        const side = this.safeStringLower (order, 'side');\n        const marketId = this.safeString (order, 'product_code');\n        const symbol = this.safeSymbol (marketId, market);\n        let fee = undefined;\n        const feeCost = this.safeNumber (order, 'total_commission');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': undefined,\n                'rate': undefined,\n            };\n        }\n        const id = this.safeString (order, 'child_order_acceptance_id');\n        return this.safeOrder ({\n            'id': id,\n            'clientOrderId': undefined,\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': undefined,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'fee': fee,\n            'average': undefined,\n            'trades': undefined,\n        });\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = 100, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a `symbol` argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'product_code': market['id'],\n            'count': limit,\n        };\n        const response = await this.privateGetGetchildorders (this.extend (request, params));\n        let orders = this.parseOrders (response, market, since, limit);\n        if (symbol !== undefined) {\n            orders = this.filterBy (orders, 'symbol', symbol);\n        }\n        return orders;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = 100, params = {}) {\n        const request = {\n            'child_order_state': 'ACTIVE',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = 100, params = {}) {\n        const request = {\n            'child_order_state': 'COMPLETED',\n        };\n        return await this.fetchOrders (symbol, since, limit, this.extend (request, params));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder() requires a `symbol` argument');\n        }\n        const orders = await this.fetchOrders (symbol);\n        const ordersById = this.indexBy (orders, 'id');\n        if (id in ordersById) {\n            return ordersById[id];\n        }\n        throw new OrderNotFound (this.id + ' No order found with id ' + id);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchMyTrades() requires a `symbol` argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'product_code': market['id'],\n        };\n        if (limit !== undefined) {\n            request['count'] = limit;\n        }\n        const response = await this.privateGetGetexecutions (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchPositions (symbols = undefined, params = {}) {\n        if (symbols === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchPositions() requires a `symbols` argument, exactly one symbol in an array');\n        }\n        await this.loadMarkets ();\n        const request = {\n            'product_code': this.marketIds (symbols),\n        };\n        const response = await this.privateGetpositions (this.extend (request, params));\n        //\n        //     [\n        //         {\n        //             \"product_code\": \"FX_BTC_JPY\",\n        //             \"side\": \"BUY\",\n        //             \"price\": 36000,\n        //             \"size\": 10,\n        //             \"commission\": 0,\n        //             \"swap_point_accumulate\": -35,\n        //             \"require_collateral\": 120000,\n        //             \"open_date\": \"2015-11-03T10:04:45.011\",\n        //             \"leverage\": 3,\n        //             \"pnl\": 965,\n        //             \"sfd\": -0.5\n        //         }\n        //     ]\n        //\n        // todo unify parsePosition/parsePositions\n        return response;\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        if (code !== 'JPY' && code !== 'USD' && code !== 'EUR') {\n            throw new ExchangeError (this.id + ' allows withdrawing JPY, USD, EUR only, ' + code + ' is not supported');\n        }\n        const currency = this.currency (code);\n        const request = {\n            'currency_code': currency['id'],\n            'amount': amount,\n            // 'bank_account_id': 1234,\n        };\n        const response = await this.privatePostWithdraw (this.extend (request, params));\n        const id = this.safeString (response, 'message_id');\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/' + this.version + '/';\n        if (api === 'private') {\n            request += 'me/';\n        }\n        request += path;\n        if (method === 'GET') {\n            if (Object.keys (params).length) {\n                request += '?' + this.urlencode (params);\n            }\n        }\n        const baseUrl = this.implodeParams (this.urls['api'], { 'hostname': this.hostname });\n        const url = baseUrl + request;\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            let auth = [ nonce, method, request ].join ('');\n            if (Object.keys (params).length) {\n                if (method !== 'GET') {\n                    body = this.json (params);\n                    auth += body;\n                }\n            }\n            headers = {\n                'ACCESS-KEY': this.apiKey,\n                'ACCESS-TIMESTAMP': nonce,\n                'ACCESS-SIGN': this.hmac (this.encode (auth), this.encode (this.secret)),\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n};\n"]},"metadata":{},"sourceType":"script"}