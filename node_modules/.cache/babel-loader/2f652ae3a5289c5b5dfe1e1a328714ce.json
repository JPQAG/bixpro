{"ast":null,"code":"'use strict'; // ----------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  BadSymbol,\n  AuthenticationError,\n  InsufficientFunds,\n  InvalidOrder,\n  ArgumentsRequired,\n  OrderNotFound,\n  BadRequest,\n  PermissionDenied,\n  AccountSuspended,\n  CancelPending,\n  DDoSProtection,\n  DuplicateOrderId,\n  NotSupported\n} = require('./base/errors');\n\nconst {\n  TICK_SIZE,\n  ROUND,\n  DECIMAL_PLACES\n} = require('./base/functions/number'); // ----------------------------------------------------------------------------\n\n\nmodule.exports = class phemex extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'phemex',\n      'name': 'Phemex',\n      'countries': ['CN'],\n      // China\n      'rateLimit': 100,\n      'version': 'v1',\n      'certified': false,\n      'pro': true,\n      'hostname': 'api.phemex.com',\n      'has': {\n        'cancelAllOrders': true,\n        // swap contracts only\n        'cancelOrder': true,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchDeposits': true,\n        'fetchMarkets': true,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'fetchWithdrawals': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/85225056-221eb600-b3d7-11ea-930d-564d2690e3f6.jpg',\n        'test': {\n          'v1': 'https://testnet-api.phemex.com/v1',\n          'public': 'https://testnet-api.phemex.com/exchange/public',\n          'private': 'https://testnet-api.phemex.com'\n        },\n        'api': {\n          'v1': 'https://{hostname}/v1',\n          'public': 'https://{hostname}/exchange/public',\n          'private': 'https://{hostname}'\n        },\n        'www': 'https://phemex.com',\n        'doc': 'https://github.com/phemex/phemex-api-docs',\n        'fees': 'https://phemex.com/fees-conditions',\n        'referral': 'https://phemex.com/register?referralCode=EDNVJ'\n      },\n      'timeframes': {\n        '1m': '60',\n        '3m': '180',\n        '5m': '300',\n        '15m': '900',\n        '30m': '1800',\n        '1h': '3600',\n        '2h': '7200',\n        '3h': '10800',\n        '4h': '14400',\n        '6h': '21600',\n        '12h': '43200',\n        '1d': '86400',\n        '1w': '604800',\n        '1M': '2592000'\n      },\n      'api': {\n        'public': {\n          'get': ['cfg/v2/products', // spot + contracts\n          'products', // contracts only\n          'nomics/trades', // ?market=<symbol>&since=<since>\n          'md/kline' // ?from=1589811875&resolution=1800&symbol=sBTCUSDT&to=1592457935\n          ]\n        },\n        'v1': {\n          'get': ['md/orderbook', // ?symbol=<symbol>&id=<id>\n          'md/trade', // ?symbol=<symbol>&id=<id>\n          'md/ticker/24hr', // ?symbol=<symbol>&id=<id>\n          'md/ticker/24hr/all', // ?id=<id>\n          'md/spot/ticker/24hr', // ?symbol=<symbol>&id=<id>\n          'md/spot/ticker/24hr/all', // ?symbol=<symbol>&id=<id>\n          'exchange/public/products' // contracts only\n          ]\n        },\n        'private': {\n          'get': [// spot\n          'spot/orders/active', // ?symbol=<symbol>&orderID=<orderID>\n          // 'spot/orders/active', // ?symbol=<symbol>&clOrDID=<clOrdID>\n          'spot/orders', // ?symbol=<symbol>\n          'spot/wallets', // ?currency=<currency>\n          'exchange/spot/order', // ?symbol=<symbol>&ordStatus=<ordStatus1,orderStatus2>ordType=<ordType1,orderType2>&start=<start>&end=<end>&limit=<limit>&offset=<offset>\n          'exchange/spot/order/trades', // ?symbol=<symbol>&start=<start>&end=<end>&limit=<limit>&offset=<offset>\n          // swap\n          'accounts/accountPositions', // ?currency=<currency>\n          'accounts/positions', // ?currency=<currency>\n          'orders/activeList', // ?symbol=<symbol>\n          'exchange/order/list', // ?symbol=<symbol>&start=<start>&end=<end>&offset=<offset>&limit=<limit>&ordStatus=<ordStatus>&withCount=<withCount>\n          'exchange/order', // ?symbol=<symbol>&orderID=<orderID1,orderID2>\n          // 'exchange/order', // ?symbol=<symbol>&clOrdID=<clOrdID1,clOrdID2>\n          'exchange/order/trade', // ?symbol=<symbol>&start=<start>&end=<end>&limit=<limit>&offset=<offset>&withCount=<withCount>\n          'phemex-user/users/children', // ?offset=<offset>&limit=<limit>&withCount=<withCount>\n          'phemex-user/wallets/v2/depositAddress', // ?_t=1592722635531&currency=USDT\n          'exchange/margins/transfer', // ?start=<start>&end=<end>&offset=<offset>&limit=<limit>&withCount=<withCount>\n          'exchange/wallets/confirm/withdraw', // ?code=<withdrawConfirmCode>\n          'exchange/wallets/withdrawList', // ?currency=<currency>&limit=<limit>&offset=<offset>&withCount=<withCount>\n          'exchange/wallets/depositList', // ?currency=<currency>&offset=<offset>&limit=<limit>\n          'exchange/wallets/v2/depositAddress' // ?currency=<currency>\n          ],\n          'post': [// spot\n          'spot/orders', // swap\n          'orders', 'positions/assign', // ?symbol=<symbol>&posBalance=<posBalance>&posBalanceEv=<posBalanceEv>\n          'exchange/wallets/transferOut', 'exchange/wallets/transferIn', 'exchange/margins', 'exchange/wallets/createWithdraw', // ?otpCode=<otpCode>\n          'exchange/wallets/cancelWithdraw', 'exchange/wallets/createWithdrawAddress' // ?otpCode={optCode}\n          ],\n          'put': [// spot\n          'spot/orders', // ?symbol=<symbol>&orderID=<orderID>&origClOrdID=<origClOrdID>&clOrdID=<clOrdID>&priceEp=<priceEp>&baseQtyEV=<baseQtyEV>&quoteQtyEv=<quoteQtyEv>&stopPxEp=<stopPxEp>\n          // swap\n          'orders/replace', // ?symbol=<symbol>&orderID=<orderID>&origClOrdID=<origClOrdID>&clOrdID=<clOrdID>&price=<price>&priceEp=<priceEp>&orderQty=<orderQty>&stopPx=<stopPx>&stopPxEp=<stopPxEp>&takeProfit=<takeProfit>&takeProfitEp=<takeProfitEp>&stopLoss=<stopLoss>&stopLossEp=<stopLossEp>&pegOffsetValueEp=<pegOffsetValueEp>&pegPriceType=<pegPriceType>\n          'positions/leverage', // ?symbol=<symbol>&leverage=<leverage>&leverageEr=<leverageEr>\n          'positions/riskLimit' // ?symbol=<symbol>&riskLimit=<riskLimit>&riskLimitEv=<riskLimitEv>\n          ],\n          'delete': [// spot\n          'spot/orders', // ?symbol=<symbol>&orderID=<orderID>\n          // 'spot/orders', // ?symbol=<symbol>&clOrdID=<clOrdID>\n          // swap\n          'orders/cancel', // ?symbol=<symbol>&orderID=<orderID>\n          'orders', // ?symbol=<symbol>&orderID=<orderID1>,<orderID2>,<orderID3>\n          'orders/all' // ?symbol=<symbol>&untriggered=<untriggered>&text=<text>\n          ]\n        }\n      },\n      'precisionMode': TICK_SIZE,\n      'fees': {\n        'trading': {\n          'tierBased': false,\n          'percentage': true,\n          'taker': 0.1 / 100,\n          'maker': 0.1 / 100\n        }\n      },\n      'requiredCredentials': {\n        'apiKey': true,\n        'secret': true\n      },\n      'exceptions': {\n        'exact': {\n          // not documented\n          '412': BadRequest,\n          // {\"code\":412,\"msg\":\"Missing parameter - resolution\",\"data\":null}\n          '6001': BadRequest,\n          // {\"error\":{\"code\":6001,\"message\":\"invalid argument\"},\"id\":null,\"result\":null}\n          // documented\n          '19999': BadRequest,\n          // REQUEST_IS_DUPLICATED Duplicated request ID\n          '10001': DuplicateOrderId,\n          // OM_DUPLICATE_ORDERID Duplicated order ID\n          '10002': OrderNotFound,\n          // OM_ORDER_NOT_FOUND Cannot find order ID\n          '10003': CancelPending,\n          // OM_ORDER_PENDING_CANCEL Cannot cancel while order is already in pending cancel status\n          '10004': CancelPending,\n          // OM_ORDER_PENDING_REPLACE Cannot cancel while order is already in pending cancel status\n          '10005': CancelPending,\n          // OM_ORDER_PENDING Cannot cancel while order is already in pending cancel status\n          '11001': InsufficientFunds,\n          // TE_NO_ENOUGH_AVAILABLE_BALANCE Insufficient available balance\n          '11002': InvalidOrder,\n          // TE_INVALID_RISK_LIMIT Invalid risk limit value\n          '11003': InsufficientFunds,\n          // TE_NO_ENOUGH_BALANCE_FOR_NEW_RISK_LIMIT Insufficient available balance\n          '11004': InvalidOrder,\n          // TE_INVALID_LEVERAGE invalid input or new leverage is over maximum allowed leverage\n          '11005': InsufficientFunds,\n          // TE_NO_ENOUGH_BALANCE_FOR_NEW_LEVERAGE Insufficient available balance\n          '11006': ExchangeError,\n          // TE_CANNOT_CHANGE_POSITION_MARGIN_WITHOUT_POSITION Position size is zero. Cannot change margin\n          '11007': ExchangeError,\n          // TE_CANNOT_CHANGE_POSITION_MARGIN_FOR_CROSS_MARGIN Cannot change margin under CrossMargin\n          '11008': ExchangeError,\n          // TE_CANNOT_REMOVE_POSITION_MARGIN_MORE_THAN_ADDED exceeds the maximum removable Margin\n          '11009': ExchangeError,\n          // TE_CANNOT_REMOVE_POSITION_MARGIN_DUE_TO_UNREALIZED_PNL exceeds the maximum removable Margin\n          '11010': InsufficientFunds,\n          // TE_CANNOT_ADD_POSITION_MARGIN_DUE_TO_NO_ENOUGH_AVAILABLE_BALANCE Insufficient available balance\n          '11011': InvalidOrder,\n          // TE_REDUCE_ONLY_ABORT Cannot accept reduce only order\n          '11012': InvalidOrder,\n          // TE_REPLACE_TO_INVALID_QTY Order quantity Error\n          '11013': InvalidOrder,\n          // TE_CONDITIONAL_NO_POSITION Position size is zero. Cannot determine conditional order's quantity\n          '11014': InvalidOrder,\n          // TE_CONDITIONAL_CLOSE_POSITION_WRONG_SIDE Close position conditional order has the same side\n          '11015': InvalidOrder,\n          // TE_CONDITIONAL_TRIGGERED_OR_CANCELED\n          '11016': BadRequest,\n          // TE_ADL_NOT_TRADING_REQUESTED_ACCOUNT Request is routed to the wrong trading engine\n          '11017': ExchangeError,\n          // TE_ADL_CANNOT_FIND_POSITION Cannot find requested position on current account\n          '11018': ExchangeError,\n          // TE_NO_NEED_TO_SETTLE_FUNDING The current account does not need to pay a funding fee\n          '11019': ExchangeError,\n          // TE_FUNDING_ALREADY_SETTLED The current account already pays the funding fee\n          '11020': ExchangeError,\n          // TE_CANNOT_TRANSFER_OUT_DUE_TO_BONUS Withdraw to wallet needs to remove all remaining bonus. However if bonus is used by position or order cost, withdraw fails.\n          '11021': ExchangeError,\n          // TE_INVALID_BONOUS_AMOUNT // Grpc command cannot be negative number Invalid bonus amount\n          '11022': AccountSuspended,\n          // TE_REJECT_DUE_TO_BANNED Account is banned\n          '11023': ExchangeError,\n          // TE_REJECT_DUE_TO_IN_PROCESS_OF_LIQ Account is in the process of liquidation\n          '11024': ExchangeError,\n          // TE_REJECT_DUE_TO_IN_PROCESS_OF_ADL Account is in the process of auto-deleverage\n          '11025': BadRequest,\n          // TE_ROUTE_ERROR Request is routed to the wrong trading engine\n          '11026': ExchangeError,\n          // TE_UID_ACCOUNT_MISMATCH\n          '11027': BadSymbol,\n          // TE_SYMBOL_INVALID Invalid number ID or name\n          '11028': BadSymbol,\n          // TE_CURRENCY_INVALID Invalid currency ID or name\n          '11029': ExchangeError,\n          // TE_ACTION_INVALID Unrecognized request type\n          '11030': ExchangeError,\n          // TE_ACTION_BY_INVALID\n          '11031': DDoSProtection,\n          // TE_SO_NUM_EXCEEDS Number of total conditional orders exceeds the max limit\n          '11032': DDoSProtection,\n          // TE_AO_NUM_EXCEEDS Number of total active orders exceeds the max limit\n          '11033': DuplicateOrderId,\n          // TE_ORDER_ID_DUPLICATE Duplicated order ID\n          '11034': InvalidOrder,\n          // TE_SIDE_INVALID Invalid side\n          '11035': InvalidOrder,\n          // TE_ORD_TYPE_INVALID Invalid OrderType\n          '11036': InvalidOrder,\n          // TE_TIME_IN_FORCE_INVALID Invalid TimeInForce\n          '11037': InvalidOrder,\n          // TE_EXEC_INST_INVALID Invalid ExecType\n          '11038': InvalidOrder,\n          // TE_TRIGGER_INVALID Invalid trigger type\n          '11039': InvalidOrder,\n          // TE_STOP_DIRECTION_INVALID Invalid stop direction type\n          '11040': InvalidOrder,\n          // TE_NO_MARK_PRICE Cannot get valid mark price to create conditional order\n          '11041': InvalidOrder,\n          // TE_NO_INDEX_PRICE Cannot get valid index price to create conditional order\n          '11042': InvalidOrder,\n          // TE_NO_LAST_PRICE Cannot get valid last market price to create conditional order\n          '11043': InvalidOrder,\n          // TE_RISING_TRIGGER_DIRECTLY Conditional order would be triggered immediately\n          '11044': InvalidOrder,\n          // TE_FALLING_TRIGGER_DIRECTLY Conditional order would be triggered immediately\n          '11045': InvalidOrder,\n          // TE_TRIGGER_PRICE_TOO_LARGE Conditional order trigger price is too high\n          '11046': InvalidOrder,\n          // TE_TRIGGER_PRICE_TOO_SMALL Conditional order trigger price is too low\n          '11047': InvalidOrder,\n          // TE_BUY_TP_SHOULD_GT_BASE TakeProfile BUY conditional order trigger price needs to be greater than reference price\n          '11048': InvalidOrder,\n          // TE_BUY_SL_SHOULD_LT_BASE StopLoss BUY condition order price needs to be less than the reference price\n          '11049': InvalidOrder,\n          // TE_BUY_SL_SHOULD_GT_LIQ StopLoss BUY condition order price needs to be greater than liquidation price or it will not trigger\n          '11050': InvalidOrder,\n          // TE_SELL_TP_SHOULD_LT_BASE TakeProfile SELL conditional order trigger price needs to be less than reference price\n          '11051': InvalidOrder,\n          // TE_SELL_SL_SHOULD_LT_LIQ StopLoss SELL condition order price needs to be less than liquidation price or it will not trigger\n          '11052': InvalidOrder,\n          // TE_SELL_SL_SHOULD_GT_BASE StopLoss SELL condition order price needs to be greater than the reference price\n          '11053': InvalidOrder,\n          // TE_PRICE_TOO_LARGE\n          '11054': InvalidOrder,\n          // TE_PRICE_WORSE_THAN_BANKRUPT Order price cannot be more aggressive than bankrupt price if this order has instruction to close a position\n          '11055': InvalidOrder,\n          // TE_PRICE_TOO_SMALL Order price is too low\n          '11056': InvalidOrder,\n          // TE_QTY_TOO_LARGE Order quantity is too large\n          '11057': InvalidOrder,\n          // TE_QTY_NOT_MATCH_REDUCE_ONLY Does not allow ReduceOnly order without position\n          '11058': InvalidOrder,\n          // TE_QTY_TOO_SMALL Order quantity is too small\n          '11059': InvalidOrder,\n          // TE_TP_SL_QTY_NOT_MATCH_POS Position size is zero. Cannot accept any TakeProfit or StopLoss order\n          '11060': InvalidOrder,\n          // TE_SIDE_NOT_CLOSE_POS TakeProfit or StopLoss order has wrong side. Cannot close position\n          '11061': CancelPending,\n          // TE_ORD_ALREADY_PENDING_CANCEL Repeated cancel request\n          '11062': InvalidOrder,\n          // TE_ORD_ALREADY_CANCELED Order is already canceled\n          '11063': InvalidOrder,\n          // TE_ORD_STATUS_CANNOT_CANCEL Order is not able to be canceled under current status\n          '11064': InvalidOrder,\n          // TE_ORD_ALREADY_PENDING_REPLACE Replace request is rejected because order is already in pending replace status\n          '11065': InvalidOrder,\n          // TE_ORD_REPLACE_NOT_MODIFIED Replace request does not modify any parameters of the order\n          '11066': InvalidOrder,\n          // TE_ORD_STATUS_CANNOT_REPLACE Order is not able to be replaced under current status\n          '11067': InvalidOrder,\n          // TE_CANNOT_REPLACE_PRICE Market conditional order cannot change price\n          '11068': InvalidOrder,\n          // TE_CANNOT_REPLACE_QTY Condtional order for closing position cannot change order quantity, since the order quantity is determined by position size already\n          '11069': ExchangeError,\n          // TE_ACCOUNT_NOT_IN_RANGE The account ID in the request is not valid or is not in the range of the current process\n          '11070': BadSymbol,\n          // TE_SYMBOL_NOT_IN_RANGE The symbol is invalid\n          '11071': InvalidOrder,\n          // TE_ORD_STATUS_CANNOT_TRIGGER\n          '11072': InvalidOrder,\n          // TE_TKFR_NOT_IN_RANGE The fee value is not valid\n          '11073': InvalidOrder,\n          // TE_MKFR_NOT_IN_RANGE The fee value is not valid\n          '11074': InvalidOrder,\n          // TE_CANNOT_ATTACH_TP_SL Order request cannot contain TP/SL parameters when the account already has positions\n          '11075': InvalidOrder,\n          // TE_TP_TOO_LARGE TakeProfit price is too large\n          '11076': InvalidOrder,\n          // TE_TP_TOO_SMALL TakeProfit price is too small\n          '11077': InvalidOrder,\n          // TE_TP_TRIGGER_INVALID Invalid trigger type\n          '11078': InvalidOrder,\n          // TE_SL_TOO_LARGE StopLoss price is too large\n          '11079': InvalidOrder,\n          // TE_SL_TOO_SMALL StopLoss price is too small\n          '11080': InvalidOrder,\n          // TE_SL_TRIGGER_INVALID Invalid trigger type\n          '11081': InvalidOrder,\n          // TE_RISK_LIMIT_EXCEEDS Total potential position breaches current risk limit\n          '11082': InsufficientFunds,\n          // TE_CANNOT_COVER_ESTIMATE_ORDER_LOSS The remaining balance cannot cover the potential unrealized PnL for this new order\n          '11083': InvalidOrder,\n          // TE_TAKE_PROFIT_ORDER_DUPLICATED TakeProfit order already exists\n          '11084': InvalidOrder,\n          // TE_STOP_LOSS_ORDER_DUPLICATED StopLoss order already exists\n          '11085': DuplicateOrderId,\n          // TE_CL_ORD_ID_DUPLICATE ClOrdId is duplicated\n          '11086': InvalidOrder,\n          // TE_PEG_PRICE_TYPE_INVALID PegPriceType is invalid\n          '11087': InvalidOrder,\n          // TE_BUY_TS_SHOULD_LT_BASE The trailing order's StopPrice should be less than the current last price\n          '11088': InvalidOrder,\n          // TE_BUY_TS_SHOULD_GT_LIQ The traling order's StopPrice should be greater than the current liquidation price\n          '11089': InvalidOrder,\n          // TE_SELL_TS_SHOULD_LT_LIQ The traling order's StopPrice should be greater than the current last price\n          '11090': InvalidOrder,\n          // TE_SELL_TS_SHOULD_GT_BASE The traling order's StopPrice should be less than the current liquidation price\n          '11091': InvalidOrder,\n          // TE_BUY_REVERT_VALUE_SHOULD_LT_ZERO The PegOffset should be less than zero\n          '11092': InvalidOrder,\n          // TE_SELL_REVERT_VALUE_SHOULD_GT_ZERO The PegOffset should be greater than zero\n          '11093': InvalidOrder,\n          // TE_BUY_TTP_SHOULD_ACTIVATE_ABOVE_BASE The activation price should be greater than the current last price\n          '11094': InvalidOrder,\n          // TE_SELL_TTP_SHOULD_ACTIVATE_BELOW_BASE The activation price should be less than the current last price\n          '11095': InvalidOrder,\n          // TE_TRAILING_ORDER_DUPLICATED A trailing order exists already\n          '11096': InvalidOrder,\n          // TE_CLOSE_ORDER_CANNOT_ATTACH_TP_SL An order to close position cannot have trailing instruction\n          '11097': BadRequest,\n          // TE_CANNOT_FIND_WALLET_OF_THIS_CURRENCY This crypto is not supported\n          '11098': BadRequest,\n          // TE_WALLET_INVALID_ACTION Invalid action on wallet\n          '11099': ExchangeError,\n          // TE_WALLET_VID_UNMATCHED Wallet operation request has a wrong wallet vid\n          '11100': InsufficientFunds,\n          // TE_WALLET_INSUFFICIENT_BALANCE Wallet has insufficient balance\n          '11101': InsufficientFunds,\n          // TE_WALLET_INSUFFICIENT_LOCKED_BALANCE Locked balance in wallet is not enough for unlock/withdraw request\n          '11102': BadRequest,\n          // TE_WALLET_INVALID_DEPOSIT_AMOUNT Deposit amount must be greater than zero\n          '11103': BadRequest,\n          // TE_WALLET_INVALID_WITHDRAW_AMOUNT Withdraw amount must be less than zero\n          '11104': BadRequest,\n          // TE_WALLET_REACHED_MAX_AMOUNT Deposit makes wallet exceed max amount allowed\n          '11105': InsufficientFunds,\n          // TE_PLACE_ORDER_INSUFFICIENT_BASE_BALANCE Insufficient funds in base wallet\n          '11106': InsufficientFunds,\n          // TE_PLACE_ORDER_INSUFFICIENT_QUOTE_BALANCE Insufficient funds in quote wallet\n          '11107': ExchangeError,\n          // TE_CANNOT_CONNECT_TO_REQUEST_SEQ TradingEngine failed to connect with CrossEngine\n          '11108': InvalidOrder,\n          // TE_CANNOT_REPLACE_OR_CANCEL_MARKET_ORDER Cannot replace/amend market order\n          '11109': InvalidOrder,\n          // TE_CANNOT_REPLACE_OR_CANCEL_IOC_ORDER Cannot replace/amend ImmediateOrCancel order\n          '11110': InvalidOrder,\n          // TE_CANNOT_REPLACE_OR_CANCEL_FOK_ORDER Cannot replace/amend FillOrKill order\n          '11111': InvalidOrder,\n          // TE_MISSING_ORDER_ID OrderId is missing\n          '11112': InvalidOrder,\n          // TE_QTY_TYPE_INVALID QtyType is invalid\n          '11113': BadRequest,\n          // TE_USER_ID_INVALID UserId is invalid\n          '11114': InvalidOrder,\n          // TE_ORDER_VALUE_TOO_LARGE Order value is too large\n          '11115': InvalidOrder,\n          // TE_ORDER_VALUE_TOO_SMALL Order value is too small\n          // not documented\n          '30018': BadRequest,\n          // {\"code\":30018,\"msg\":\"phemex.data.size.uplimt\",\"data\":null}\n          '39996': PermissionDenied // {\"code\": \"39996\",\"msg\": \"Access denied.\"}\n\n        },\n        'broad': {\n          'Failed to find api-key': AuthenticationError,\n          // {\"msg\":\"Failed to find api-key 1c5ec63fd-660d-43ea-847a-0d3ba69e106e\",\"code\":10500}\n          'Missing required parameter': BadRequest,\n          // {\"msg\":\"Missing required parameter\",\"code\":10500}\n          'API Signature verification failed': AuthenticationError // {\"msg\":\"API Signature verification failed.\",\"code\":10500}\n\n        }\n      },\n      'options': {\n        'x-phemex-request-expiry': 60,\n        // in seconds\n        'createOrderByQuoteRequiresPrice': true\n      }\n    });\n  }\n\n  parseSafeNumber(value = undefined) {\n    if (value === undefined) {\n      return value;\n    }\n\n    value = value.replace(',', '');\n    const parts = value.split(' ');\n    return this.safeNumber(parts, 0);\n  }\n\n  parseSwapMarket(market) {\n    //\n    //     {\n    //         \"symbol\":\"BTCUSD\",\n    //         \"displaySymbol\":\"BTC / USD\",\n    //         \"indexSymbol\":\".BTC\",\n    //         \"markSymbol\":\".MBTC\",\n    //         \"fundingRateSymbol\":\".BTCFR\",\n    //         \"fundingRate8hSymbol\":\".BTCFR8H\",\n    //         \"contractUnderlyingAssets\":\"USD\",\n    //         \"settleCurrency\":\"BTC\",\n    //         \"quoteCurrency\":\"USD\",\n    //         \"contractSize\":\"1 USD\",\n    //         \"lotSize\":1,\n    //         \"tickSize\":0.5,\n    //         \"priceScale\":4,\n    //         \"ratioScale\":8,\n    //         \"pricePrecision\":1,\n    //         \"minPriceEp\":5000,\n    //         \"maxPriceEp\":10000000000,\n    //         \"maxOrderQty\":1000000,\n    //         \"type\":\"Perpetual\",\n    //         \"status\":\"Listed\",\n    //         \"tipOrderQty\":1000000,\n    //         \"steps\":\"50\",\n    //         \"riskLimits\":[\n    //             {\"limit\":100,\"initialMargin\":\"1.0%\",\"initialMarginEr\":1000000,\"maintenanceMargin\":\"0.5%\",\"maintenanceMarginEr\":500000},\n    //             {\"limit\":150,\"initialMargin\":\"1.5%\",\"initialMarginEr\":1500000,\"maintenanceMargin\":\"1.0%\",\"maintenanceMarginEr\":1000000},\n    //             {\"limit\":200,\"initialMargin\":\"2.0%\",\"initialMarginEr\":2000000,\"maintenanceMargin\":\"1.5%\",\"maintenanceMarginEr\":1500000},\n    //         ],\n    //         \"underlyingSymbol\":\".BTC\",\n    //         \"baseCurrency\":\"BTC\",\n    //         \"settlementCurrency\":\"BTC\",\n    //         \"valueScale\":8,\n    //         \"defaultLeverage\":0,\n    //         \"maxLeverage\":100,\n    //         \"initMarginEr\":\"1000000\",\n    //         \"maintMarginEr\":\"500000\",\n    //         \"defaultRiskLimitEv\":10000000000,\n    //         \"deleverage\":true,\n    //         \"makerFeeRateEr\":-250000,\n    //         \"takerFeeRateEr\":750000,\n    //         \"fundingInterval\":8,\n    //         \"marketUrl\":\"https://phemex.com/trade/BTCUSD\",\n    //         \"description\":\"BTCUSD is a BTC/USD perpetual contract priced on the .BTC Index. Each contract is worth 1 USD of Bitcoin. Funding is paid and received every 8 hours. At UTC time: 00:00, 08:00, 16:00.\",\n    //     }\n    //\n    const id = this.safeString(market, 'symbol');\n    const baseId = this.safeString2(market, 'baseCurrency', 'contractUnderlyingAssets');\n    const quoteId = this.safeString(market, 'quoteCurrency');\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    const symbol = base + '/' + quote;\n    const type = this.safeStringLower(market, 'type');\n    let taker = undefined;\n    let maker = undefined;\n    let inverse = false;\n    const spot = false;\n    const swap = true;\n    const settlementCurrencyId = this.safeString(market, 'settlementCurrency');\n\n    if (settlementCurrencyId !== quoteId) {\n      inverse = true;\n    }\n\n    const linear = !inverse;\n    const precision = {\n      'amount': this.safeNumber(market, 'lotSize'),\n      'price': this.safeNumber(market, 'tickSize')\n    };\n    const priceScale = this.safeInteger(market, 'priceScale');\n    const ratioScale = this.safeInteger(market, 'ratioScale');\n    const valueScale = this.safeInteger(market, 'valueScale');\n    const minPriceEp = this.safeNumber(market, 'minPriceEp');\n    const maxPriceEp = this.safeNumber(market, 'maxPriceEp');\n    const makerFeeRateEr = this.safeNumber(market, 'makerFeeRateEr');\n    const takerFeeRateEr = this.safeNumber(market, 'takerFeeRateEr');\n\n    if (makerFeeRateEr !== undefined) {\n      maker = this.fromEn(makerFeeRateEr, ratioScale, 0.00000001);\n    }\n\n    if (takerFeeRateEr !== undefined) {\n      taker = this.fromEn(takerFeeRateEr, ratioScale, 0.00000001);\n    }\n\n    const limits = {\n      'amount': {\n        'min': precision['amount'],\n        'max': undefined\n      },\n      'price': {\n        'min': this.fromEn(minPriceEp, priceScale, precision['price']),\n        'max': this.fromEn(maxPriceEp, priceScale, precision['price'])\n      },\n      'cost': {\n        'min': undefined,\n        'max': this.parseSafeNumber(this.safeString(market, 'maxOrderQty'))\n      }\n    };\n    const status = this.safeString(market, 'status');\n    const active = status === 'Listed';\n    return {\n      'id': id,\n      'symbol': symbol,\n      'base': base,\n      'quote': quote,\n      'baseId': baseId,\n      'quoteId': quoteId,\n      'info': market,\n      'type': type,\n      'spot': spot,\n      'swap': swap,\n      'linear': linear,\n      'inverse': inverse,\n      'active': active,\n      'taker': taker,\n      'maker': maker,\n      'priceScale': priceScale,\n      'valueScale': valueScale,\n      'ratioScale': ratioScale,\n      'precision': precision,\n      'limits': limits\n    };\n  }\n\n  parseSpotMarket(market) {\n    //\n    //     {\n    //         \"symbol\":\"sBTCUSDT\",\n    //         \"displaySymbol\":\"BTC / USDT\",\n    //         \"quoteCurrency\":\"USDT\",\n    //         \"pricePrecision\":2,\n    //         \"type\":\"Spot\",\n    //         \"baseCurrency\":\"BTC\",\n    //         \"baseTickSize\":\"0.000001 BTC\",\n    //         \"baseTickSizeEv\":100,\n    //         \"quoteTickSize\":\"0.01 USDT\",\n    //         \"quoteTickSizeEv\":1000000,\n    //         \"minOrderValue\":\"10 USDT\",\n    //         \"minOrderValueEv\":1000000000,\n    //         \"maxBaseOrderSize\":\"1000 BTC\",\n    //         \"maxBaseOrderSizeEv\":100000000000,\n    //         \"maxOrderValue\":\"5,000,000 USDT\",\n    //         \"maxOrderValueEv\":500000000000000,\n    //         \"defaultTakerFee\":\"0.001\",\n    //         \"defaultTakerFeeEr\":100000,\n    //         \"defaultMakerFee\":\"0.001\",\n    //         \"defaultMakerFeeEr\":100000,\n    //         \"baseQtyPrecision\":6,\n    //         \"quoteQtyPrecision\":2,\n    //         \"status\":\"Listed\",\n    //         \"tipOrderQty\":20\n    //     }\n    //\n    const type = this.safeStringLower(market, 'type');\n    const id = this.safeString(market, 'symbol');\n    const quoteId = this.safeString(market, 'quoteCurrency');\n    const baseId = this.safeString(market, 'baseCurrency');\n    const linear = undefined;\n    const inverse = undefined;\n    const spot = true;\n    const swap = false;\n    const taker = this.safeNumber(market, 'defaultTakerFee');\n    const maker = this.safeNumber(market, 'defaultMakerFee');\n    const precision = {\n      'amount': this.parseSafeNumber(this.safeString(market, 'baseTickSize')),\n      'price': this.parseSafeNumber(this.safeString(market, 'quoteTickSize'))\n    };\n    const limits = {\n      'amount': {\n        'min': precision['amount'],\n        'max': this.parseSafeNumber(this.safeString(market, 'maxBaseOrderSize'))\n      },\n      'price': {\n        'min': precision['price'],\n        'max': undefined\n      },\n      'cost': {\n        'min': this.parseSafeNumber(this.safeString(market, 'minOrderValue')),\n        'max': this.parseSafeNumber(this.safeString(market, 'maxOrderValue'))\n      }\n    };\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    const symbol = base + '/' + quote;\n    const status = this.safeString(market, 'status');\n    const active = status === 'Listed';\n    return {\n      'id': id,\n      'symbol': symbol,\n      'base': base,\n      'quote': quote,\n      'baseId': baseId,\n      'quoteId': quoteId,\n      'info': market,\n      'type': type,\n      'spot': spot,\n      'swap': swap,\n      'linear': linear,\n      'inverse': inverse,\n      'active': active,\n      'taker': taker,\n      'maker': maker,\n      'precision': precision,\n      'priceScale': 8,\n      'valueScale': 8,\n      'ratioScale': 8,\n      'limits': limits\n    };\n  }\n\n  async fetchMarkets(params = {}) {\n    const v2Products = await this.publicGetCfgV2Products(params); //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"OK\",\n    //         \"data\":{\n    //             \"ratioScale\":8,\n    //             \"currencies\":[\n    //                 {\"currency\":\"BTC\",\"valueScale\":8,\"minValueEv\":1,\"maxValueEv\":5000000000000000000,\"name\":\"Bitcoin\"},\n    //                 {\"currency\":\"USD\",\"valueScale\":4,\"minValueEv\":1,\"maxValueEv\":500000000000000,\"name\":\"USD\"},\n    //                 {\"currency\":\"USDT\",\"valueScale\":8,\"minValueEv\":1,\"maxValueEv\":5000000000000000000,\"name\":\"TetherUS\"},\n    //             ],\n    //             \"products\":[\n    //                 {\n    //                     \"symbol\":\"BTCUSD\",\n    //                     \"displaySymbol\":\"BTC / USD\",\n    //                     \"indexSymbol\":\".BTC\",\n    //                     \"markSymbol\":\".MBTC\",\n    //                     \"fundingRateSymbol\":\".BTCFR\",\n    //                     \"fundingRate8hSymbol\":\".BTCFR8H\",\n    //                     \"contractUnderlyingAssets\":\"USD\",\n    //                     \"settleCurrency\":\"BTC\",\n    //                     \"quoteCurrency\":\"USD\",\n    //                     \"contractSize\":1.0,\n    //                     \"lotSize\":1,\n    //                     \"tickSize\":0.5,\n    //                     \"priceScale\":4,\n    //                     \"ratioScale\":8,\n    //                     \"pricePrecision\":1,\n    //                     \"minPriceEp\":5000,\n    //                     \"maxPriceEp\":10000000000,\n    //                     \"maxOrderQty\":1000000,\n    //                     \"type\":\"Perpetual\"\n    //                 },\n    //                 {\n    //                     \"symbol\":\"sBTCUSDT\",\n    //                     \"displaySymbol\":\"BTC / USDT\",\n    //                     \"quoteCurrency\":\"USDT\",\n    //                     \"pricePrecision\":2,\n    //                     \"type\":\"Spot\",\n    //                     \"baseCurrency\":\"BTC\",\n    //                     \"baseTickSize\":\"0.000001 BTC\",\n    //                     \"baseTickSizeEv\":100,\n    //                     \"quoteTickSize\":\"0.01 USDT\",\n    //                     \"quoteTickSizeEv\":1000000,\n    //                     \"minOrderValue\":\"10 USDT\",\n    //                     \"minOrderValueEv\":1000000000,\n    //                     \"maxBaseOrderSize\":\"1000 BTC\",\n    //                     \"maxBaseOrderSizeEv\":100000000000,\n    //                     \"maxOrderValue\":\"5,000,000 USDT\",\n    //                     \"maxOrderValueEv\":500000000000000,\n    //                     \"defaultTakerFee\":\"0.001\",\n    //                     \"defaultTakerFeeEr\":100000,\n    //                     \"defaultMakerFee\":\"0.001\",\n    //                     \"defaultMakerFeeEr\":100000,\n    //                     \"baseQtyPrecision\":6,\n    //                     \"quoteQtyPrecision\":2\n    //                 },\n    //             ],\n    //             \"riskLimits\":[\n    //                 {\n    //                     \"symbol\":\"BTCUSD\",\n    //                     \"steps\":\"50\",\n    //                     \"riskLimits\":[\n    //                         {\"limit\":100,\"initialMargin\":\"1.0%\",\"initialMarginEr\":1000000,\"maintenanceMargin\":\"0.5%\",\"maintenanceMarginEr\":500000},\n    //                         {\"limit\":150,\"initialMargin\":\"1.5%\",\"initialMarginEr\":1500000,\"maintenanceMargin\":\"1.0%\",\"maintenanceMarginEr\":1000000},\n    //                         {\"limit\":200,\"initialMargin\":\"2.0%\",\"initialMarginEr\":2000000,\"maintenanceMargin\":\"1.5%\",\"maintenanceMarginEr\":1500000},\n    //                     ]\n    //                 },\n    //             ],\n    //             \"leverages\":[\n    //                 {\"initialMargin\":\"1.0%\",\"initialMarginEr\":1000000,\"options\":[1,2,3,5,10,25,50,100]},\n    //                 {\"initialMargin\":\"1.5%\",\"initialMarginEr\":1500000,\"options\":[1,2,3,5,10,25,50,66]},\n    //                 {\"initialMargin\":\"2.0%\",\"initialMarginEr\":2000000,\"options\":[1,2,3,5,10,25,33,50]},\n    //             ]\n    //         }\n    //     }\n    //\n\n    const v1Products = await this.v1GetExchangePublicProducts(params);\n    const v1ProductsData = this.safeValue(v1Products, 'data', []); //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"OK\",\n    //         \"data\":[\n    //             {\n    //                 \"symbol\":\"BTCUSD\",\n    //                 \"underlyingSymbol\":\".BTC\",\n    //                 \"quoteCurrency\":\"USD\",\n    //                 \"baseCurrency\":\"BTC\",\n    //                 \"settlementCurrency\":\"BTC\",\n    //                 \"maxOrderQty\":1000000,\n    //                 \"maxPriceEp\":100000000000000,\n    //                 \"lotSize\":1,\n    //                 \"tickSize\":\"0.5\",\n    //                 \"contractSize\":\"1 USD\",\n    //                 \"priceScale\":4,\n    //                 \"ratioScale\":8,\n    //                 \"valueScale\":8,\n    //                 \"defaultLeverage\":0,\n    //                 \"maxLeverage\":100,\n    //                 \"initMarginEr\":\"1000000\",\n    //                 \"maintMarginEr\":\"500000\",\n    //                 \"defaultRiskLimitEv\":10000000000,\n    //                 \"deleverage\":true,\n    //                 \"makerFeeRateEr\":-250000,\n    //                 \"takerFeeRateEr\":750000,\n    //                 \"fundingInterval\":8,\n    //                 \"marketUrl\":\"https://phemex.com/trade/BTCUSD\",\n    //                 \"description\":\"BTCUSD is a BTC/USD perpetual contract priced on the .BTC Index. Each contract is worth 1 USD of Bitcoin. Funding is paid and received every 8 hours. At UTC time: 00:00, 08:00, 16:00.\",\n    //                 \"type\":\"Perpetual\"\n    //             },\n    //         ]\n    //     }\n    //\n\n    const v2ProductsData = this.safeValue(v2Products, 'data', {});\n    const products = this.safeValue(v2ProductsData, 'products', []);\n    const riskLimits = this.safeValue(v2ProductsData, 'riskLimits', []);\n    const riskLimitsById = this.indexBy(riskLimits, 'symbol');\n    const v1ProductsById = this.indexBy(v1ProductsData, 'symbol');\n    const result = [];\n\n    for (let i = 0; i < products.length; i++) {\n      let market = products[i];\n      const type = this.safeStringLower(market, 'type');\n\n      if (type === 'perpetual') {\n        const id = this.safeString(market, 'symbol');\n        const riskLimitValues = this.safeValue(riskLimitsById, id, {});\n        market = this.extend(market, riskLimitValues);\n        const v1ProductsValues = this.safeValue(v1ProductsById, id, {});\n        market = this.extend(market, v1ProductsValues);\n        market = this.parseSwapMarket(market);\n      } else {\n        market = this.parseSpotMarket(market);\n      }\n\n      result.push(market);\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const response = await this.publicGetCfgV2Products(params); //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"OK\",\n    //         \"data\":{\n    //             ...,\n    //             \"currencies\":[\n    //                 {\"currency\":\"BTC\",\"valueScale\":8,\"minValueEv\":1,\"maxValueEv\":5000000000000000000,\"name\":\"Bitcoin\"},\n    //                 {\"currency\":\"USD\",\"valueScale\":4,\"minValueEv\":1,\"maxValueEv\":500000000000000,\"name\":\"USD\"},\n    //                 {\"currency\":\"USDT\",\"valueScale\":8,\"minValueEv\":1,\"maxValueEv\":5000000000000000000,\"name\":\"TetherUS\"},\n    //             ],\n    //             ...\n    //         }\n    //     }\n\n    const data = this.safeValue(response, 'data', {});\n    const currencies = this.safeValue(data, 'currencies', []);\n    const result = {};\n\n    for (let i = 0; i < currencies.length; i++) {\n      const currency = currencies[i];\n      const id = this.safeString(currency, 'currency');\n      const name = this.safeString(currency, 'name');\n      const code = this.safeCurrencyCode(id);\n      const valueScale = this.safeInteger(currency, 'valueScale');\n      const minValueEv = this.safeNumber(currency, 'minValueEv');\n      const maxValueEv = this.safeNumber(currency, 'maxValueEv');\n      let minAmount = undefined;\n      let maxAmount = undefined;\n      let precision = undefined;\n\n      if (valueScale !== undefined) {\n        precision = Math.pow(10, -valueScale);\n        precision = parseFloat(this.decimalToPrecision(precision, ROUND, 0.00000001, this.precisionMode));\n\n        if (minValueEv !== undefined) {\n          minAmount = parseFloat(this.decimalToPrecision(minValueEv * precision, ROUND, 0.00000001, this.precisionMode));\n        }\n\n        if (maxValueEv !== undefined) {\n          maxAmount = parseFloat(this.decimalToPrecision(maxValueEv * precision, ROUND, 0.00000001, this.precisionMode));\n        }\n      }\n\n      result[code] = {\n        'id': id,\n        'info': currency,\n        'code': code,\n        'name': name,\n        'active': undefined,\n        'fee': undefined,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': minAmount,\n            'max': maxAmount\n          },\n          'withdraw': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'valueScale': valueScale\n      };\n    }\n\n    return result;\n  }\n\n  parseBidAsk(bidask, priceKey = 0, amountKey = 1, market = undefined) {\n    if (market === undefined) {\n      throw new ArgumentsRequired(this.id + ' parseBidAsk() requires a market argument');\n    }\n\n    let amount = this.safeNumber(bidask, amountKey);\n\n    if (market['spot']) {\n      amount = this.fromEv(amount, market);\n    }\n\n    return [this.fromEp(this.safeNumber(bidask, priceKey), market), amount];\n  }\n\n  parseOrderBook(orderbook, symbol, timestamp = undefined, bidsKey = 'bids', asksKey = 'asks', priceKey = 0, amountKey = 1, market = undefined) {\n    const result = {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'nonce': undefined\n    };\n    const sides = [bidsKey, asksKey];\n\n    for (let i = 0; i < sides.length; i++) {\n      const side = sides[i];\n      const orders = [];\n      const bidasks = this.safeValue(orderbook, side);\n\n      for (let k = 0; k < bidasks.length; k++) {\n        orders.push(this.parseBidAsk(bidasks[k], priceKey, amountKey, market));\n      }\n\n      result[side] = orders;\n    }\n\n    result[bidsKey] = this.sortBy(result[bidsKey], 0, true);\n    result[asksKey] = this.sortBy(result[asksKey], 0);\n    return result;\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'] // 'id': 123456789, // optional request id\n\n    };\n    const response = await this.v1GetMdOrderbook(this.extend(request, params)); //\n    //     {\n    //         \"error\": null,\n    //         \"id\": 0,\n    //         \"result\": {\n    //             \"book\": {\n    //                 \"asks\": [\n    //                     [ 23415000000, 105262000 ],\n    //                     [ 23416000000, 147914000 ],\n    //                     [ 23419000000, 160914000 ],\n    //                 ],\n    //                 \"bids\": [\n    //                     [ 23360000000, 32995000 ],\n    //                     [ 23359000000, 221887000 ],\n    //                     [ 23356000000, 284599000 ],\n    //                 ],\n    //             },\n    //             \"depth\": 30,\n    //             \"sequence\": 1592059928,\n    //             \"symbol\": \"sETHUSDT\",\n    //             \"timestamp\": 1592387340020000955,\n    //             \"type\": \"snapshot\"\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const book = this.safeValue(result, 'book', {});\n    const timestamp = this.safeIntegerProduct(result, 'timestamp', 0.000001);\n    const orderbook = this.parseOrderBook(book, symbol, timestamp, 'bids', 'asks', 0, 1, market);\n    orderbook['nonce'] = this.safeInteger(result, 'sequence');\n    return orderbook;\n  }\n\n  toEn(n, scale, precision) {\n    return parseInt(this.decimalToPrecision(n * Math.pow(10, scale), ROUND, precision, DECIMAL_PLACES));\n  }\n\n  toEv(amount, market = undefined) {\n    if (amount === undefined || market === undefined) {\n      return amount;\n    }\n\n    return this.toEn(amount, market['valueScale'], 0);\n  }\n\n  toEp(price, market = undefined) {\n    if (price === undefined || market === undefined) {\n      return price;\n    }\n\n    return this.toEn(price, market['priceScale'], 0);\n  }\n\n  fromEn(en, scale, precision, precisionMode = undefined) {\n    if (en === undefined) {\n      return en;\n    }\n\n    precisionMode = precisionMode === undefined ? this.precisionMode : precisionMode;\n    return parseFloat(this.decimalToPrecision(en * Math.pow(10, -scale), ROUND, precision, precisionMode));\n  }\n\n  fromEp(ep, market = undefined) {\n    if (ep === undefined || market === undefined) {\n      return ep;\n    }\n\n    return this.fromEn(ep, market['priceScale'], market['precision']['price']);\n  }\n\n  fromEv(ev, market = undefined) {\n    if (ev === undefined || market === undefined) {\n      return ev;\n    }\n\n    if (market['spot']) {\n      return this.fromEn(ev, market['valueScale'], market['precision']['amount']);\n    } else {\n      return this.fromEn(ev, market['valueScale'], 1 / Math.pow(10, market['valueScale']));\n    }\n  }\n\n  fromEr(er, market = undefined) {\n    if (er === undefined || market === undefined) {\n      return er;\n    }\n\n    return this.fromEn(er, market['ratioScale'], 0.00000001);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     [\n    //         1592467200, // timestamp\n    //         300, // interval\n    //         23376000000, // last\n    //         23322000000, // open\n    //         23381000000, // high\n    //         23315000000, // low\n    //         23367000000, // close\n    //         208671000, // base volume\n    //         48759063370, // quote volume\n    //     ]\n    //\n    let baseVolume = undefined;\n\n    if (market !== undefined && market['spot']) {\n      baseVolume = this.fromEv(this.safeNumber(ohlcv, 7), market);\n    } else {\n      baseVolume = this.safeInteger(ohlcv, 7);\n    }\n\n    return [this.safeTimestamp(ohlcv, 0), this.fromEp(this.safeNumber(ohlcv, 3), market), this.fromEp(this.safeNumber(ohlcv, 4), market), this.fromEp(this.safeNumber(ohlcv, 5), market), this.fromEp(this.safeNumber(ohlcv, 6), market), baseVolume];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    const request = {\n      // 'symbol': market['id'],\n      'resolution': this.timeframes[timeframe] // 'from': 1588830682, // seconds\n      // 'to': this.seconds (),\n\n    };\n    const duration = this.parseTimeframe(timeframe);\n    const now = this.seconds();\n\n    if (since !== undefined) {\n      if (limit === undefined) {\n        limit = 2000; // max 2000\n      }\n\n      since = parseInt(since / 1000);\n      request['from'] = since; // time ranges ending in the future are not accepted\n      // https://github.com/ccxt/ccxt/issues/8050\n\n      request['to'] = Math.min(now, this.sum(since, duration * limit));\n    } else if (limit !== undefined) {\n      limit = Math.min(limit, 2000);\n      request['from'] = now - duration * this.sum(limit, 1);\n      request['to'] = now;\n    } else {\n      throw new ArgumentsRequired(this.id + ' fetchOHLCV() requires a since argument, or a limit argument, or both');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    request['symbol'] = market['id'];\n    const response = await this.publicGetMdKline(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"OK\",\n    //         \"data\":{\n    //             \"total\":-1,\n    //             \"rows\":[\n    //                 [1592467200,300,23376000000,23322000000,23381000000,23315000000,23367000000,208671000,48759063370],\n    //                 [1592467500,300,23367000000,23314000000,23390000000,23311000000,23331000000,234820000,54848948710],\n    //                 [1592467800,300,23331000000,23385000000,23391000000,23326000000,23387000000,152931000,35747882250],\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const rows = this.safeValue(data, 'rows', []);\n    return this.parseOHLCVs(rows, market, timeframe, since, limit);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    // spot\n    //\n    //     {\n    //         \"askEp\": 943836000000,\n    //         \"bidEp\": 943601000000,\n    //         \"highEp\": 955946000000,\n    //         \"lastEp\": 943803000000,\n    //         \"lowEp\": 924973000000,\n    //         \"openEp\": 948693000000,\n    //         \"symbol\": \"sBTCUSDT\",\n    //         \"timestamp\": 1592471203505728630,\n    //         \"turnoverEv\": 111822826123103,\n    //         \"volumeEv\": 11880532281\n    //     }\n    //\n    // swap\n    //\n    //     {\n    //         \"askEp\": 2332500,\n    //         \"bidEp\": 2331000,\n    //         \"fundingRateEr\": 10000,\n    //         \"highEp\": 2380000,\n    //         \"indexEp\": 2329057,\n    //         \"lastEp\": 2331500,\n    //         \"lowEp\": 2274000,\n    //         \"markEp\": 2329232,\n    //         \"openEp\": 2337500,\n    //         \"openInterest\": 1298050,\n    //         \"predFundingRateEr\": 19921,\n    //         \"symbol\": \"ETHUSD\",\n    //         \"timestamp\": 1592474241582701416,\n    //         \"turnoverEv\": 47228362330,\n    //         \"volume\": 4053863\n    //     }\n    //\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const timestamp = this.safeIntegerProduct(ticker, 'timestamp', 0.000001);\n    const last = this.fromEp(this.safeNumber(ticker, 'lastEp'), market);\n    const quoteVolume = this.fromEp(this.safeNumber(ticker, 'turnoverEv'), market);\n    let baseVolume = this.safeNumber(ticker, 'volume');\n\n    if (baseVolume === undefined) {\n      baseVolume = this.fromEv(this.safeNumber(ticker, 'volumeEv'));\n    }\n\n    let vwap = undefined;\n\n    if (market !== undefined && market['spot']) {\n      vwap = this.vwap(baseVolume, quoteVolume);\n    }\n\n    let change = undefined;\n    let percentage = undefined;\n    let average = undefined;\n    const open = this.fromEp(this.safeNumber(ticker, 'openEp'), market);\n\n    if (open !== undefined && last !== undefined) {\n      change = last - open;\n\n      if (open > 0) {\n        percentage = change / open * 100;\n      }\n\n      average = this.sum(open, last) / 2;\n    }\n\n    const result = {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.fromEp(this.safeNumber(ticker, 'highEp'), market),\n      'low': this.fromEp(this.safeNumber(ticker, 'lowEp'), market),\n      'bid': this.fromEp(this.safeNumber(ticker, 'bidEp'), market),\n      'bidVolume': undefined,\n      'ask': this.fromEp(this.safeNumber(ticker, 'askEp'), market),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      // previous day close\n      'change': change,\n      'percentage': percentage,\n      'average': average,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n    return result;\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'] // 'id': 123456789, // optional request id\n\n    };\n    const method = market['spot'] ? 'v1GetMdSpotTicker24hr' : 'v1GetMdTicker24hr';\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"error\": null,\n    //         \"id\": 0,\n    //         \"result\": {\n    //             \"askEp\": 943836000000,\n    //             \"bidEp\": 943601000000,\n    //             \"highEp\": 955946000000,\n    //             \"lastEp\": 943803000000,\n    //             \"lowEp\": 924973000000,\n    //             \"openEp\": 948693000000,\n    //             \"symbol\": \"sBTCUSDT\",\n    //             \"timestamp\": 1592471203505728630,\n    //             \"turnoverEv\": 111822826123103,\n    //             \"volumeEv\": 11880532281\n    //         }\n    //     }\n    //\n    // swap\n    //\n    //     {\n    //         \"error\": null,\n    //         \"id\": 0,\n    //         \"result\": {\n    //             \"askEp\": 2332500,\n    //             \"bidEp\": 2331000,\n    //             \"fundingRateEr\": 10000,\n    //             \"highEp\": 2380000,\n    //             \"indexEp\": 2329057,\n    //             \"lastEp\": 2331500,\n    //             \"lowEp\": 2274000,\n    //             \"markEp\": 2329232,\n    //             \"openEp\": 2337500,\n    //             \"openInterest\": 1298050,\n    //             \"predFundingRateEr\": 19921,\n    //             \"symbol\": \"ETHUSD\",\n    //             \"timestamp\": 1592474241582701416,\n    //             \"turnoverEv\": 47228362330,\n    //             \"volume\": 4053863\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    return this.parseTicker(result, market);\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'] // 'id': 123456789, // optional request id\n\n    };\n    const response = await this.v1GetMdTrade(this.extend(request, params)); //\n    //     {\n    //         \"error\": null,\n    //         \"id\": 0,\n    //         \"result\": {\n    //             \"sequence\": 1315644947,\n    //             \"symbol\": \"BTCUSD\",\n    //             \"trades\": [\n    //                 [ 1592541746712239749, 13156448570000, \"Buy\", 93070000, 40173 ],\n    //                 [ 1592541740434625085, 13156447110000, \"Sell\", 93065000, 5000 ],\n    //                 [ 1592541732958241616, 13156441390000, \"Buy\", 93070000, 3460 ],\n    //             ],\n    //             \"type\": \"snapshot\"\n    //         }\n    //     }\n    //\n\n    const result = this.safeValue(response, 'result', {});\n    const trades = this.safeValue(result, 'trades', []);\n    return this.parseTrades(trades, market, since, limit);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     [\n    //         1592541746712239749,\n    //         13156448570000,\n    //         \"Buy\",\n    //         93070000,\n    //         40173\n    //     ]\n    //\n    // fetchMyTrades (private)\n    //\n    // spot\n    //\n    //     {\n    //         \"qtyType\": \"ByQuote\",\n    //         \"transactTimeNs\": 1589450974800550100,\n    //         \"clOrdID\": \"8ba59d40-df25-d4b0-14cf-0703f44e9690\",\n    //         \"orderID\": \"b2b7018d-f02f-4c59-b4cf-051b9c2d2e83\",\n    //         \"symbol\": \"sBTCUSDT\",\n    //         \"side\": \"Buy\",\n    //         \"priceEP\": 970056000000,\n    //         \"baseQtyEv\": 0,\n    //         \"quoteQtyEv\": 1000000000,\n    //         \"action\": \"New\",\n    //         \"execStatus\": \"MakerFill\",\n    //         \"ordStatus\": \"Filled\",\n    //         \"ordType\": \"Limit\",\n    //         \"execInst\": \"None\",\n    //         \"timeInForce\": \"GoodTillCancel\",\n    //         \"stopDirection\": \"UNSPECIFIED\",\n    //         \"tradeType\": \"Trade\",\n    //         \"stopPxEp\": 0,\n    //         \"execId\": \"c6bd8979-07ba-5946-b07e-f8b65135dbb1\",\n    //         \"execPriceEp\": 970056000000,\n    //         \"execBaseQtyEv\": 103000,\n    //         \"execQuoteQtyEv\": 999157680,\n    //         \"leavesBaseQtyEv\": 0,\n    //         \"leavesQuoteQtyEv\": 0,\n    //         \"execFeeEv\": 0,\n    //         \"feeRateEr\": 0\n    //     }\n    //\n    // swap\n    //\n    //     {\n    //         \"transactTimeNs\": 1578026629824704800,\n    //         \"symbol\": \"BTCUSD\",\n    //         \"currency\": \"BTC\",\n    //         \"action\": \"Replace\",\n    //         \"side\": \"Sell\",\n    //         \"tradeType\": \"Trade\",\n    //         \"execQty\": 700,\n    //         \"execPriceEp\": 71500000,\n    //         \"orderQty\": 700,\n    //         \"priceEp\": 71500000,\n    //         \"execValueEv\": 9790209,\n    //         \"feeRateEr\": -25000,\n    //         \"execFeeEv\": -2447,\n    //         \"ordType\": \"Limit\",\n    //         \"execID\": \"b01671a1-5ddc-5def-b80a-5311522fd4bf\",\n    //         \"orderID\": \"b63bc982-be3a-45e0-8974-43d6375fb626\",\n    //         \"clOrdID\": \"uuid-1577463487504\",\n    //         \"execStatus\": \"MakerFill\"\n    //     }\n    //\n    let price = undefined;\n    let amount = undefined;\n    let timestamp = undefined;\n    let id = undefined;\n    let side = undefined;\n    let cost = undefined;\n    let type = undefined;\n    let fee = undefined;\n    const marketId = this.safeString(trade, 'symbol');\n    market = this.safeMarket(marketId, market);\n    const symbol = market['symbol'];\n    let orderId = undefined;\n    let takerOrMaker = undefined;\n\n    if (Array.isArray(trade)) {\n      const tradeLength = trade.length;\n      timestamp = this.safeIntegerProduct(trade, 0, 0.000001);\n\n      if (tradeLength > 4) {\n        id = this.safeString(trade, tradeLength - 4);\n      }\n\n      side = this.safeStringLower(trade, tradeLength - 3);\n      price = this.fromEp(this.safeNumber(trade, tradeLength - 2), market);\n      amount = this.fromEv(this.safeNumber(trade, tradeLength - 1), market);\n\n      if (market['spot']) {\n        if (price !== undefined && amount !== undefined) {\n          cost = price * amount;\n        }\n      }\n    } else {\n      timestamp = this.safeIntegerProduct(trade, 'transactTimeNs', 0.000001);\n      id = this.safeString2(trade, 'execId', 'execID');\n      orderId = this.safeString(trade, 'orderID');\n      side = this.safeStringLower(trade, 'side');\n      type = this.parseOrderType(this.safeString(trade, 'ordType'));\n      const execStatus = this.safeString(trade, 'execStatus');\n\n      if (execStatus === 'MakerFill') {\n        takerOrMaker = 'maker';\n      }\n\n      price = this.fromEp(this.safeNumber(trade, 'execPriceEp'), market);\n      amount = this.fromEv(this.safeNumber(trade, 'execBaseQtyEv'), market);\n      amount = this.safeNumber(trade, 'execQty', amount);\n      cost = this.fromEv(this.safeNumber2(trade, 'execQuoteQtyEv', 'execValueEv'), market);\n      const feeCost = this.fromEv(this.safeNumber(trade, 'execFeeEv'), market);\n\n      if (feeCost !== undefined) {\n        let feeRate = undefined;\n        let feeRateEr = this.safeNumber(trade, 'feeRateEr');\n\n        if (feeRateEr < 0) {\n          feeRateEr = Math.abs(feeRateEr);\n          feeRate = this.fromEr(feeRateEr, market);\n          feeRate = -feeRate;\n        } else {\n          feeRate = this.fromEr(feeRateEr, market);\n        }\n\n        let feeCurrencyCode = undefined;\n\n        if (market['spot']) {\n          feeCurrencyCode = side === 'buy' ? market['base'] : market['quote'];\n        } else {\n          const info = this.safeValue(market, 'info');\n\n          if (info !== undefined) {\n            const settlementCurrencyId = this.safeString(info, 'settlementCurrency');\n            feeCurrencyCode = this.safeCurrencyCode(settlementCurrencyId);\n          }\n        }\n\n        fee = {\n          'cost': feeCost,\n          'rate': feeRate,\n          'currency': feeCurrencyCode\n        };\n      }\n    }\n\n    return {\n      'info': trade,\n      'id': id,\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'order': orderId,\n      'type': type,\n      'side': side,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee\n    };\n  }\n\n  parseSpotBalance(response) {\n    //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"\",\n    //         \"data\":[\n    //             {\n    //                 \"currency\":\"USDT\",\n    //                 \"balanceEv\":0,\n    //                 \"lockedTradingBalanceEv\":0,\n    //                 \"lockedWithdrawEv\":0,\n    //                 \"lastUpdateTimeNs\":1592065834511322514,\n    //                 \"walletVid\":0\n    //             },\n    //             {\n    //                 \"currency\":\"ETH\",\n    //                 \"balanceEv\":0,\n    //                 \"lockedTradingBalanceEv\":0,\n    //                 \"lockedWithdrawEv\":0,\n    //                 \"lastUpdateTimeNs\":1592065834511322514,\n    //                 \"walletVid\":0\n    //             }\n    //         ]\n    //     }\n    //\n    let timestamp = undefined;\n    const result = {\n      'info': response\n    };\n    const data = this.safeValue(response, 'data', []);\n\n    for (let i = 0; i < data.length; i++) {\n      const balance = data[i];\n      const currencyId = this.safeString(balance, 'currency');\n      const code = this.safeCurrencyCode(currencyId);\n      const currency = this.safeValue(this.currencies, code, {});\n      const scale = this.safeInteger(currency, 'valueScale', 8);\n      const account = this.account();\n      const balanceEv = this.safeNumber(balance, 'balanceEv');\n      const lockedTradingBalanceEv = this.safeNumber(balance, 'lockedTradingBalanceEv');\n      const lockedWithdrawEv = this.safeNumber(balance, 'lockedWithdrawEv');\n      const total = this.fromEn(balanceEv, scale, scale, DECIMAL_PLACES);\n      const lockedTradingBalance = this.fromEn(lockedTradingBalanceEv, scale, scale, DECIMAL_PLACES);\n      const lockedWithdraw = this.fromEn(lockedWithdrawEv, scale, scale, DECIMAL_PLACES);\n      const used = this.sum(lockedTradingBalance, lockedWithdraw);\n      const lastUpdateTimeNs = this.safeIntegerProduct(balance, 'lastUpdateTimeNs', 0.000001);\n      timestamp = timestamp === undefined ? lastUpdateTimeNs : Math.max(timestamp, lastUpdateTimeNs);\n      account['total'] = total;\n      account['used'] = used;\n      result[code] = account;\n    }\n\n    result['timestamp'] = timestamp;\n    result['datetime'] = this.iso8601(timestamp);\n    return this.parseBalance(result);\n  }\n\n  parseSwapBalance(response) {\n    //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"\",\n    //         \"data\":{\n    //             \"account\":{\n    //                 \"accountId\":6192120001,\n    //                 \"currency\":\"BTC\",\n    //                 \"accountBalanceEv\":1254744,\n    //                 \"totalUsedBalanceEv\":0,\n    //                 \"bonusBalanceEv\":1254744\n    //             },\n    //             \"positions\":[\n    //                 {\n    //                     \"accountID\":6192120001,\n    //                     \"symbol\":\"BTCUSD\",\n    //                     \"currency\":\"BTC\",\n    //                     \"side\":\"None\",\n    //                     \"positionStatus\":\"Normal\",\n    //                     \"crossMargin\":false,\n    //                     \"leverageEr\":0,\n    //                     \"leverage\":0E-8,\n    //                     \"initMarginReqEr\":1000000,\n    //                     \"initMarginReq\":0.01000000,\n    //                     \"maintMarginReqEr\":500000,\n    //                     \"maintMarginReq\":0.00500000,\n    //                     \"riskLimitEv\":10000000000,\n    //                     \"riskLimit\":100.00000000,\n    //                     \"size\":0,\n    //                     \"value\":0E-8,\n    //                     \"valueEv\":0,\n    //                     \"avgEntryPriceEp\":0,\n    //                     \"avgEntryPrice\":0E-8,\n    //                     \"posCostEv\":0,\n    //                     \"posCost\":0E-8,\n    //                     \"assignedPosBalanceEv\":0,\n    //                     \"assignedPosBalance\":0E-8,\n    //                     \"bankruptCommEv\":0,\n    //                     \"bankruptComm\":0E-8,\n    //                     \"bankruptPriceEp\":0,\n    //                     \"bankruptPrice\":0E-8,\n    //                     \"positionMarginEv\":0,\n    //                     \"positionMargin\":0E-8,\n    //                     \"liquidationPriceEp\":0,\n    //                     \"liquidationPrice\":0E-8,\n    //                     \"deleveragePercentileEr\":0,\n    //                     \"deleveragePercentile\":0E-8,\n    //                     \"buyValueToCostEr\":1150750,\n    //                     \"buyValueToCost\":0.01150750,\n    //                     \"sellValueToCostEr\":1149250,\n    //                     \"sellValueToCost\":0.01149250,\n    //                     \"markPriceEp\":96359083,\n    //                     \"markPrice\":9635.90830000,\n    //                     \"markValueEv\":0,\n    //                     \"markValue\":null,\n    //                     \"unRealisedPosLossEv\":0,\n    //                     \"unRealisedPosLoss\":null,\n    //                     \"estimatedOrdLossEv\":0,\n    //                     \"estimatedOrdLoss\":0E-8,\n    //                     \"usedBalanceEv\":0,\n    //                     \"usedBalance\":0E-8,\n    //                     \"takeProfitEp\":0,\n    //                     \"takeProfit\":null,\n    //                     \"stopLossEp\":0,\n    //                     \"stopLoss\":null,\n    //                     \"realisedPnlEv\":0,\n    //                     \"realisedPnl\":null,\n    //                     \"cumRealisedPnlEv\":0,\n    //                     \"cumRealisedPnl\":null\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n    const result = {\n      'info': response\n    };\n    const data = this.safeValue(response, 'data', {});\n    const balance = this.safeValue(data, 'account', {});\n    const currencyId = this.safeString(balance, 'currency');\n    const code = this.safeCurrencyCode(currencyId);\n    const currency = this.currency(code);\n    const account = this.account();\n    const accountBalanceEv = this.safeNumber(balance, 'accountBalanceEv');\n    const totalUsedBalanceEv = this.safeNumber(balance, 'totalUsedBalanceEv');\n    const valueScale = this.safeInteger(currency, 'valueScale', 8);\n    account['total'] = this.fromEn(accountBalanceEv, valueScale, valueScale, DECIMAL_PLACES);\n    account['used'] = this.fromEn(totalUsedBalanceEv, valueScale, valueScale, DECIMAL_PLACES);\n    result[code] = account;\n    return this.parseBalance(result);\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const defaultType = this.safeString2(this.options, 'defaultType', 'fetchBalance', 'spot');\n    const type = this.safeString(params, 'type', defaultType);\n    let method = 'privateGetSpotWallets';\n    const request = {};\n\n    if (type === 'swap') {\n      const code = this.safeString(params, 'code');\n\n      if (code !== undefined) {\n        const currency = this.currency(code);\n        request['currency'] = currency['id'];\n        params = this.omit(params, 'code');\n      } else {\n        const currency = this.safeString(params, 'currency');\n\n        if (currency === undefined) {\n          throw new ArgumentsRequired(this.id + ' fetchBalance() requires a code parameter or a currency parameter for ' + type + ' type');\n        }\n      }\n\n      method = 'privateGetAccountsAccountPositions';\n    }\n\n    params = this.omit(params, 'type');\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"\",\n    //         \"data\":[\n    //             {\n    //                 \"currency\":\"USDT\",\n    //                 \"balanceEv\":0,\n    //                 \"lockedTradingBalanceEv\":0,\n    //                 \"lockedWithdrawEv\":0,\n    //                 \"lastUpdateTimeNs\":1592065834511322514,\n    //                 \"walletVid\":0\n    //             },\n    //             {\n    //                 \"currency\":\"ETH\",\n    //                 \"balanceEv\":0,\n    //                 \"lockedTradingBalanceEv\":0,\n    //                 \"lockedWithdrawEv\":0,\n    //                 \"lastUpdateTimeNs\":1592065834511322514,\n    //                 \"walletVid\":0\n    //             }\n    //         ]\n    //     }\n    //\n    // swap\n    //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"\",\n    //         \"data\":{\n    //             \"account\":{\n    //                 \"accountId\":6192120001,\n    //                 \"currency\":\"BTC\",\n    //                 \"accountBalanceEv\":1254744,\n    //                 \"totalUsedBalanceEv\":0,\n    //                 \"bonusBalanceEv\":1254744\n    //             },\n    //             \"positions\":[\n    //                 {\n    //                     \"accountID\":6192120001,\n    //                     \"symbol\":\"BTCUSD\",\n    //                     \"currency\":\"BTC\",\n    //                     \"side\":\"None\",\n    //                     \"positionStatus\":\"Normal\",\n    //                     \"crossMargin\":false,\n    //                     \"leverageEr\":0,\n    //                     \"leverage\":0E-8,\n    //                     \"initMarginReqEr\":1000000,\n    //                     \"initMarginReq\":0.01000000,\n    //                     \"maintMarginReqEr\":500000,\n    //                     \"maintMarginReq\":0.00500000,\n    //                     \"riskLimitEv\":10000000000,\n    //                     \"riskLimit\":100.00000000,\n    //                     \"size\":0,\n    //                     \"value\":0E-8,\n    //                     \"valueEv\":0,\n    //                     \"avgEntryPriceEp\":0,\n    //                     \"avgEntryPrice\":0E-8,\n    //                     \"posCostEv\":0,\n    //                     \"posCost\":0E-8,\n    //                     \"assignedPosBalanceEv\":0,\n    //                     \"assignedPosBalance\":0E-8,\n    //                     \"bankruptCommEv\":0,\n    //                     \"bankruptComm\":0E-8,\n    //                     \"bankruptPriceEp\":0,\n    //                     \"bankruptPrice\":0E-8,\n    //                     \"positionMarginEv\":0,\n    //                     \"positionMargin\":0E-8,\n    //                     \"liquidationPriceEp\":0,\n    //                     \"liquidationPrice\":0E-8,\n    //                     \"deleveragePercentileEr\":0,\n    //                     \"deleveragePercentile\":0E-8,\n    //                     \"buyValueToCostEr\":1150750,\n    //                     \"buyValueToCost\":0.01150750,\n    //                     \"sellValueToCostEr\":1149250,\n    //                     \"sellValueToCost\":0.01149250,\n    //                     \"markPriceEp\":96359083,\n    //                     \"markPrice\":9635.90830000,\n    //                     \"markValueEv\":0,\n    //                     \"markValue\":null,\n    //                     \"unRealisedPosLossEv\":0,\n    //                     \"unRealisedPosLoss\":null,\n    //                     \"estimatedOrdLossEv\":0,\n    //                     \"estimatedOrdLoss\":0E-8,\n    //                     \"usedBalanceEv\":0,\n    //                     \"usedBalance\":0E-8,\n    //                     \"takeProfitEp\":0,\n    //                     \"takeProfit\":null,\n    //                     \"stopLossEp\":0,\n    //                     \"stopLoss\":null,\n    //                     \"realisedPnlEv\":0,\n    //                     \"realisedPnl\":null,\n    //                     \"cumRealisedPnlEv\":0,\n    //                     \"cumRealisedPnl\":null\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const result = type === 'swap' ? this.parseSwapBalance(response) : this.parseSpotBalance(response);\n    return result;\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      'Created': 'open',\n      'Untriggered': 'open',\n      'Deactivated': 'closed',\n      'Triggered': 'open',\n      'Rejected': 'rejected',\n      'New': 'open',\n      'PartiallyFilled': 'open',\n      'Filled': 'closed',\n      'Canceled': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrderType(type) {\n    const types = {\n      'Limit': 'limit',\n      'Market': 'market'\n    };\n    return this.safeString(types, type, type);\n  }\n\n  parseTimeInForce(timeInForce) {\n    const timeInForces = {\n      'GoodTillCancel': 'GTC',\n      'PostOnly': 'PO',\n      'ImmediateOrCancel': 'IOC',\n      'FillOrKill': 'FOK'\n    };\n    return this.safeString(timeInForces, timeInForce, timeInForce);\n  }\n\n  parseSpotOrder(order, market = undefined) {\n    //\n    // spot\n    //\n    //     {\n    //         \"orderID\": \"d1d09454-cabc-4a23-89a7-59d43363f16d\",\n    //         \"clOrdID\": \"309bcd5c-9f6e-4a68-b775-4494542eb5cb\",\n    //         \"priceEp\": 0,\n    //         \"action\": \"New\",\n    //         \"trigger\": \"UNSPECIFIED\",\n    //         \"pegPriceType\": \"UNSPECIFIED\",\n    //         \"stopDirection\": \"UNSPECIFIED\",\n    //         \"bizError\": 0,\n    //         \"symbol\": \"sBTCUSDT\",\n    //         \"side\": \"Buy\",\n    //         \"baseQtyEv\": 0,\n    //         \"ordType\": \"Limit\",\n    //         \"timeInForce\": \"GoodTillCancel\",\n    //         \"ordStatus\": \"Created\",\n    //         \"cumFeeEv\": 0,\n    //         \"cumBaseQtyEv\": 0,\n    //         \"cumQuoteQtyEv\": 0,\n    //         \"leavesBaseQtyEv\": 0,\n    //         \"leavesQuoteQtyEv\": 0,\n    //         \"avgPriceEp\": 0,\n    //         \"cumBaseAmountEv\": 0,\n    //         \"cumQuoteAmountEv\": 0,\n    //         \"quoteQtyEv\": 0,\n    //         \"qtyType\": \"ByBase\",\n    //         \"stopPxEp\": 0,\n    //         \"pegOffsetValueEp\": 0\n    //     }\n    //\n    //     {\n    //         \"orderID\":\"99232c3e-3d6a-455f-98cc-2061cdfe91bc\",\n    //         \"stopPxEp\":0,\n    //         \"avgPriceEp\":0,\n    //         \"qtyType\":\"ByBase\",\n    //         \"leavesBaseQtyEv\":0,\n    //         \"leavesQuoteQtyEv\":0,\n    //         \"baseQtyEv\":\"1000000000\",\n    //         \"feeCurrency\":\"4\",\n    //         \"stopDirection\":\"UNSPECIFIED\",\n    //         \"symbol\":\"sETHUSDT\",\n    //         \"side\":\"Buy\",\n    //         \"quoteQtyEv\":250000000000,\n    //         \"priceEp\":25000000000,\n    //         \"ordType\":\"Limit\",\n    //         \"timeInForce\":\"GoodTillCancel\",\n    //         \"ordStatus\":\"Rejected\",\n    //         \"execStatus\":\"NewRejected\",\n    //         \"createTimeNs\":1592675305266037130,\n    //         \"cumFeeEv\":0,\n    //         \"cumBaseValueEv\":0,\n    //         \"cumQuoteValueEv\":0\n    //     }\n    //\n    const id = this.safeString(order, 'orderID');\n    let clientOrderId = this.safeString(order, 'clOrdID');\n\n    if (clientOrderId !== undefined && clientOrderId.length < 1) {\n      clientOrderId = undefined;\n    }\n\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    let price = this.fromEp(this.safeNumber(order, 'priceEp'), market);\n\n    if (price === 0) {\n      price = undefined;\n    }\n\n    const amount = this.fromEv(this.safeNumber(order, 'baseQtyEv'), market);\n    const remaining = this.fromEv(this.safeNumber(order, 'leavesBaseQtyEv'), market);\n    let filled = this.fromEv(this.safeNumber(order, 'cumBaseQtyEv'), market);\n    const cost = this.fromEv(this.safeNumber(order, 'quoteQtyEv'), market);\n    const average = this.fromEp(this.safeNumber(order, 'avgPriceEp'), market);\n    const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));\n    const side = this.safeStringLower(order, 'side');\n    const type = this.parseOrderType(this.safeString(order, 'ordType'));\n    const timestamp = this.safeIntegerProduct2(order, 'actionTimeNs', 'createTimeNs', 0.000001);\n    let fee = undefined;\n    const feeCost = this.fromEv(this.safeNumber(order, 'cumFeeEv'), market);\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'currency': undefined\n      };\n    }\n\n    if (filled === undefined) {\n      if (amount !== undefined && remaining !== undefined) {\n        filled = Math.min(0, amount - remaining);\n      }\n    }\n\n    const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));\n    const stopPrice = this.fromEp(this.safeNumber(order, 'stopPxEp', market));\n    const postOnly = timeInForce === 'PO';\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'cost': cost,\n      'average': average,\n      'filled': filled,\n      'remaining': remaining,\n      'status': status,\n      'fee': fee,\n      'trades': undefined\n    };\n  }\n\n  parseSwapOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"bizError\":0,\n    //         \"orderID\":\"7a1ad384-44a3-4e54-a102-de4195a29e32\",\n    //         \"clOrdID\":\"\",\n    //         \"symbol\":\"ETHUSD\",\n    //         \"side\":\"Buy\",\n    //         \"actionTimeNs\":1592668973945065381,\n    //         \"transactTimeNs\":0,\n    //         \"orderType\":\"Market\",\n    //         \"priceEp\":2267500,\n    //         \"price\":226.75000000,\n    //         \"orderQty\":1,\n    //         \"displayQty\":0,\n    //         \"timeInForce\":\"ImmediateOrCancel\",\n    //         \"reduceOnly\":false,\n    //         \"closedPnlEv\":0,\n    //         \"closedPnl\":0E-8,\n    //         \"closedSize\":0,\n    //         \"cumQty\":0,\n    //         \"cumValueEv\":0,\n    //         \"cumValue\":0E-8,\n    //         \"leavesQty\":1,\n    //         \"leavesValueEv\":11337,\n    //         \"leavesValue\":1.13370000,\n    //         \"stopDirection\":\"UNSPECIFIED\",\n    //         \"stopPxEp\":0,\n    //         \"stopPx\":0E-8,\n    //         \"trigger\":\"UNSPECIFIED\",\n    //         \"pegOffsetValueEp\":0,\n    //         \"execStatus\":\"PendingNew\",\n    //         \"pegPriceType\":\"UNSPECIFIED\",\n    //         \"ordStatus\":\"Created\"\n    //     }\n    //\n    const id = this.safeString(order, 'orderID');\n    let clientOrderId = this.safeString(order, 'clOrdID');\n\n    if (clientOrderId !== undefined && clientOrderId.length < 1) {\n      clientOrderId = undefined;\n    }\n\n    const marketId = this.safeString(order, 'symbol');\n    const symbol = this.safeSymbol(marketId, market);\n    const status = this.parseOrderStatus(this.safeString(order, 'ordStatus'));\n    const side = this.safeStringLower(order, 'side');\n    const type = this.parseOrderType(this.safeString(order, 'orderType'));\n    const price = this.fromEp(this.safeNumber(order, 'priceEp'), market);\n    const amount = this.safeNumber(order, 'orderQty');\n    const filled = this.safeNumber(order, 'cumQty');\n    const remaining = this.safeNumber(order, 'leavesQty');\n    const timestamp = this.safeIntegerProduct(order, 'actionTimeNs', 0.000001);\n    const cost = this.safeNumber(order, 'cumValue');\n    let lastTradeTimestamp = this.safeIntegerProduct(order, 'transactTimeNs', 0.000001);\n\n    if (lastTradeTimestamp === 0) {\n      lastTradeTimestamp = undefined;\n    }\n\n    const timeInForce = this.parseTimeInForce(this.safeString(order, 'timeInForce'));\n    const stopPrice = this.safeNumber(order, 'stopPx');\n    const postOnly = timeInForce === 'PO';\n    return {\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': lastTradeTimestamp,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': timeInForce,\n      'postOnly': postOnly,\n      'side': side,\n      'price': price,\n      'stopPrice': stopPrice,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'cost': cost,\n      'average': undefined,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    };\n  }\n\n  parseOrder(order, market = undefined) {\n    if ('closedPnl' in order) {\n      return this.parseSwapOrder(order, market);\n    }\n\n    return this.parseSpotOrder(order, market);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    side = this.capitalize(side);\n    type = this.capitalize(type);\n    const request = {\n      // common\n      'symbol': market['id'],\n      'side': side,\n      // Sell, Buy\n      'ordType': type // Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched or Pegged for swap orders\n      // 'stopPxEp': this.toEp (stopPx, market), // for conditional orders\n      // 'priceEp': this.toEp (price, market), // required for limit orders\n      // 'timeInForce': 'GoodTillCancel', // GoodTillCancel, PostOnly, ImmediateOrCancel, FillOrKill\n      // ----------------------------------------------------------------\n      // spot\n      // 'qtyType': 'ByBase', // ByBase, ByQuote\n      // 'quoteQtyEv': this.toEp (cost, market),\n      // 'baseQtyEv': this.toEv (amount, market),\n      // 'trigger': 'ByLastPrice', // required for conditional orders\n      // ----------------------------------------------------------------\n      // swap\n      // 'clOrdID': this.uuid (), // max length 40\n      // 'orderQty': this.amountToPrecision (amount, symbol),\n      // 'reduceOnly': false,\n      // 'closeOnTrigger': false, // implicit reduceOnly and cancel other orders in the same direction\n      // 'takeProfitEp': this.toEp (takeProfit, market),\n      // 'stopLossEp': this.toEp (stopLossEp, market),\n      // 'triggerType': 'ByMarkPrice', // ByMarkPrice, ByLastPrice\n      // 'pegOffsetValueEp': integer, // Trailing offset from current price. Negative value when position is long, positive when position is short\n      // 'pegPriceType': 'TrailingStopPeg', // TrailingTakeProfitPeg\n      // 'text': 'comment',\n\n    };\n\n    if (market['spot']) {\n      let qtyType = this.safeValue(params, 'qtyType', 'ByBase');\n\n      if (type === 'Market' || type === 'Stop' || type === 'MarketIfTouched') {\n        if (price !== undefined) {\n          qtyType = 'ByQuote';\n        }\n      }\n\n      request['qtyType'] = qtyType;\n\n      if (qtyType === 'ByQuote') {\n        let cost = this.safeNumber(params, 'cost');\n        params = this.omit(params, 'cost');\n\n        if (this.options['createOrderByQuoteRequiresPrice']) {\n          if (price !== undefined) {\n            cost = amount * price;\n          } else if (cost === undefined) {\n            throw new ArgumentsRequired(this.id + ' createOrder() ' + qtyType + ' requires a price argument or a cost parameter');\n          }\n        }\n\n        cost = cost === undefined ? amount : cost;\n        request['quoteQtyEv'] = this.toEp(cost, market);\n      } else {\n        request['baseQtyEv'] = this.toEv(amount, market);\n      }\n    } else if (market['swap']) {\n      request['orderQty'] = parseInt(amount);\n    }\n\n    if (type === 'Limit') {\n      request['priceEp'] = this.toEp(price, market);\n    }\n\n    const stopPrice = this.safeNumber2(params, 'stopPx', 'stopPrice');\n\n    if (stopPrice !== undefined) {\n      request['stopPxEp'] = this.toEp(stopPrice, market);\n    }\n\n    params = this.omit(params, ['stopPx', 'stopPrice']);\n    const method = market['spot'] ? 'privatePostSpotOrders' : 'privatePostOrders';\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"code\": 0,\n    //         \"msg\": \"\",\n    //         \"data\": {\n    //             \"orderID\": \"d1d09454-cabc-4a23-89a7-59d43363f16d\",\n    //             \"clOrdID\": \"309bcd5c-9f6e-4a68-b775-4494542eb5cb\",\n    //             \"priceEp\": 0,\n    //             \"action\": \"New\",\n    //             \"trigger\": \"UNSPECIFIED\",\n    //             \"pegPriceType\": \"UNSPECIFIED\",\n    //             \"stopDirection\": \"UNSPECIFIED\",\n    //             \"bizError\": 0,\n    //             \"symbol\": \"sBTCUSDT\",\n    //             \"side\": \"Buy\",\n    //             \"baseQtyEv\": 0,\n    //             \"ordType\": \"Limit\",\n    //             \"timeInForce\": \"GoodTillCancel\",\n    //             \"ordStatus\": \"Created\",\n    //             \"cumFeeEv\": 0,\n    //             \"cumBaseQtyEv\": 0,\n    //             \"cumQuoteQtyEv\": 0,\n    //             \"leavesBaseQtyEv\": 0,\n    //             \"leavesQuoteQtyEv\": 0,\n    //             \"avgPriceEp\": 0,\n    //             \"cumBaseAmountEv\": 0,\n    //             \"cumQuoteAmountEv\": 0,\n    //             \"quoteQtyEv\": 0,\n    //             \"qtyType\": \"ByBase\",\n    //             \"stopPxEp\": 0,\n    //             \"pegOffsetValueEp\": 0\n    //         }\n    //     }\n    //\n    // swap\n    //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"\",\n    //         \"data\":{\n    //             \"bizError\":0,\n    //             \"orderID\":\"7a1ad384-44a3-4e54-a102-de4195a29e32\",\n    //             \"clOrdID\":\"\",\n    //             \"symbol\":\"ETHUSD\",\n    //             \"side\":\"Buy\",\n    //             \"actionTimeNs\":1592668973945065381,\n    //             \"transactTimeNs\":0,\n    //             \"orderType\":\"Market\",\n    //             \"priceEp\":2267500,\n    //             \"price\":226.75000000,\n    //             \"orderQty\":1,\n    //             \"displayQty\":0,\n    //             \"timeInForce\":\"ImmediateOrCancel\",\n    //             \"reduceOnly\":false,\n    //             \"closedPnlEv\":0,\n    //             \"closedPnl\":0E-8,\n    //             \"closedSize\":0,\n    //             \"cumQty\":0,\n    //             \"cumValueEv\":0,\n    //             \"cumValue\":0E-8,\n    //             \"leavesQty\":1,\n    //             \"leavesValueEv\":11337,\n    //             \"leavesValue\":1.13370000,\n    //             \"stopDirection\":\"UNSPECIFIED\",\n    //             \"stopPxEp\":0,\n    //             \"stopPx\":0E-8,\n    //             \"trigger\":\"UNSPECIFIED\",\n    //             \"pegOffsetValueEp\":0,\n    //             \"execStatus\":\"PendingNew\",\n    //             \"pegPriceType\":\"UNSPECIFIED\",\n    //             \"ordStatus\":\"Created\"\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' cancelOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'clOrdID');\n    params = this.omit(params, ['clientOrderId', 'clOrdID']);\n\n    if (clientOrderId !== undefined) {\n      request['clOrdID'] = clientOrderId;\n    } else {\n      request['orderID'] = id;\n    }\n\n    const method = market['spot'] ? 'privateDeleteSpotOrders' : 'privateDeleteOrdersCancel';\n    const response = await this[method](this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    return this.parseOrder(data, market);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {// 'symbol': market['id'],\n      // 'untriggerred': false, // false to cancel non-conditional orders, true to cancel conditional orders\n      // 'text': 'up to 40 characters max',\n    };\n    let market = undefined;\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n\n      if (!market['swap']) {\n        throw new NotSupported(this.id + ' cancelAllOrders() supports swap market type orders only');\n      }\n\n      request['symbol'] = market['id'];\n    }\n\n    return await this.privateDeleteOrdersAll(this.extend(request, params));\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrder() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const method = market['spot'] ? 'privateGetSpotOrdersActive' : 'privateGetExchangeOrder';\n    const request = {\n      'symbol': market['id']\n    };\n    const clientOrderId = this.safeString2(params, 'clientOrderId', 'clOrdID');\n    params = this.omit(params, ['clientOrderId', 'clOrdID']);\n\n    if (clientOrderId !== undefined) {\n      request['clOrdID'] = clientOrderId;\n    } else {\n      request['orderID'] = id;\n    }\n\n    const response = await this[method](this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    let order = data;\n\n    if (Array.isArray(data)) {\n      const numOrders = data.length;\n\n      if (numOrders < 1) {\n        if (clientOrderId !== undefined) {\n          throw new OrderNotFound(this.id + ' fetchOrder ' + symbol + ' order with clientOrderId ' + clientOrderId + ' not found');\n        } else {\n          throw new OrderNotFound(this.id + ' fetchOrder ' + symbol + ' order with id ' + id + ' not found');\n        }\n      }\n\n      order = this.safeValue(data, 0, {});\n    }\n\n    return this.parseOrder(order, market);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const method = market['spot'] ? 'privateGetSpotOrders' : 'privateGetExchangeOrderList';\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this[method](this.extend(request, params));\n    const data = this.safeValue(response, 'data', {});\n    const rows = this.safeValue(data, 'rows', []);\n    return this.parseOrders(rows, market, since, limit);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const method = market['spot'] ? 'privateGetSpotOrders' : 'privateGetOrdersActiveList';\n    const request = {\n      'symbol': market['id']\n    };\n\n    try {\n      const response = await this[method](this.extend(request, params));\n      const data = this.safeValue(response, 'data', {});\n\n      if (Array.isArray(data)) {\n        return this.parseOrders(data, market, since, limit);\n      } else {\n        const rows = this.safeValue(data, 'rows', []);\n        return this.parseOrders(rows, market, since, limit);\n      }\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchClosedOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const method = market['spot'] ? 'privateGetExchangeSpotOrder' : 'privateGetExchangeOrderList';\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"OK\",\n    //         \"data\":{\n    //             \"total\":8,\n    //             \"rows\":[\n    //                 {\n    //                     \"orderID\":\"99232c3e-3d6a-455f-98cc-2061cdfe91bc\",\n    //                     \"stopPxEp\":0,\n    //                     \"avgPriceEp\":0,\n    //                     \"qtyType\":\"ByBase\",\n    //                     \"leavesBaseQtyEv\":0,\n    //                     \"leavesQuoteQtyEv\":0,\n    //                     \"baseQtyEv\":\"1000000000\",\n    //                     \"feeCurrency\":\"4\",\n    //                     \"stopDirection\":\"UNSPECIFIED\",\n    //                     \"symbol\":\"sETHUSDT\",\n    //                     \"side\":\"Buy\",\n    //                     \"quoteQtyEv\":250000000000,\n    //                     \"priceEp\":25000000000,\n    //                     \"ordType\":\"Limit\",\n    //                     \"timeInForce\":\"GoodTillCancel\",\n    //                     \"ordStatus\":\"Rejected\",\n    //                     \"execStatus\":\"NewRejected\",\n    //                     \"createTimeNs\":1592675305266037130,\n    //                     \"cumFeeEv\":0,\n    //                     \"cumBaseValueEv\":0,\n    //                     \"cumQuoteValueEv\":0\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n\n    if (Array.isArray(data)) {\n      return this.parseOrders(data, market, since, limit);\n    } else {\n      const rows = this.safeValue(data, 'rows', []);\n      return this.parseOrders(rows, market, since, limit);\n    }\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchClosedOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const method = market['spot'] ? 'privateGetExchangeSpotOrderTrades' : 'privateGetExchangeOrderTrade';\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (market['swap'] && limit !== undefined) {\n      request['limit'] = limit;\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    // spot\n    //\n    //     {\n    //         \"code\": 0,\n    //         \"msg\": \"OK\",\n    //         \"data\": {\n    //             \"total\": 1,\n    //             \"rows\": [\n    //                 {\n    //                     \"qtyType\": \"ByQuote\",\n    //                     \"transactTimeNs\": 1589450974800550100,\n    //                     \"clOrdID\": \"8ba59d40-df25-d4b0-14cf-0703f44e9690\",\n    //                     \"orderID\": \"b2b7018d-f02f-4c59-b4cf-051b9c2d2e83\",\n    //                     \"symbol\": \"sBTCUSDT\",\n    //                     \"side\": \"Buy\",\n    //                     \"priceEP\": 970056000000,\n    //                     \"baseQtyEv\": 0,\n    //                     \"quoteQtyEv\": 1000000000,\n    //                     \"action\": \"New\",\n    //                     \"execStatus\": \"MakerFill\",\n    //                     \"ordStatus\": \"Filled\",\n    //                     \"ordType\": \"Limit\",\n    //                     \"execInst\": \"None\",\n    //                     \"timeInForce\": \"GoodTillCancel\",\n    //                     \"stopDirection\": \"UNSPECIFIED\",\n    //                     \"tradeType\": \"Trade\",\n    //                     \"stopPxEp\": 0,\n    //                     \"execId\": \"c6bd8979-07ba-5946-b07e-f8b65135dbb1\",\n    //                     \"execPriceEp\": 970056000000,\n    //                     \"execBaseQtyEv\": 103000,\n    //                     \"execQuoteQtyEv\": 999157680,\n    //                     \"leavesBaseQtyEv\": 0,\n    //                     \"leavesQuoteQtyEv\": 0,\n    //                     \"execFeeEv\": 0,\n    //                     \"feeRateEr\": 0\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n    //\n    // swap\n    //\n    //     {\n    //         \"code\": 0,\n    //         \"msg\": \"OK\",\n    //         \"data\": {\n    //             \"total\": 79,\n    //             \"rows\": [\n    //                 {\n    //                     \"transactTimeNs\": 1606054879331565300,\n    //                     \"symbol\": \"BTCUSD\",\n    //                     \"currency\": \"BTC\",\n    //                     \"action\": \"New\",\n    //                     \"side\": \"Buy\",\n    //                     \"tradeType\": \"Trade\",\n    //                     \"execQty\": 5,\n    //                     \"execPriceEp\": 182990000,\n    //                     \"orderQty\": 5,\n    //                     \"priceEp\": 183870000,\n    //                     \"execValueEv\": 27323,\n    //                     \"feeRateEr\": 75000,\n    //                     \"execFeeEv\": 21,\n    //                     \"ordType\": \"Market\",\n    //                     \"execID\": \"5eee56a4-04a9-5677-8eb0-c2fe22ae3645\",\n    //                     \"orderID\": \"ee0acb82-f712-4543-a11d-d23efca73197\",\n    //                     \"clOrdID\": \"\",\n    //                     \"execStatus\": \"TakerFill\"\n    //                 },\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const rows = this.safeValue(data, 'rows', []);\n    return this.parseTrades(rows, market, since, limit);\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'currency': currency['id']\n    };\n    const response = await this.privateGetPhemexUserWalletsV2DepositAddress(this.extend(request, params)); //     {\n    //         \"code\":0,\n    //         \"msg\":\"OK\",\n    //         \"data\":{\n    //             \"address\":\"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad\",\n    //             \"tag\":null\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const address = this.safeString(data, 'address');\n    const tag = this.safeString(data, 'tag');\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const response = await this.privateGetExchangeWalletsDepositList(params); //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"OK\",\n    //         \"data\":[\n    //             {\n    //                 \"id\":29200,\n    //                 \"currency\":\"USDT\",\n    //                 \"currencyCode\":3,\n    //                 \"txHash\":\"0x0bdbdc47807769a03b158d5753f54dfc58b92993d2f5e818db21863e01238e5d\",\n    //                 \"address\":\"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad\",\n    //                 \"amountEv\":3000000000,\n    //                 \"confirmations\":13,\n    //                 \"type\":\"Deposit\",\n    //                 \"status\":\"Success\",\n    //                 \"createdAt\":1592722565000\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n    }\n\n    const response = await this.privateGetExchangeWalletsWithdrawList(params); //\n    //     {\n    //         \"code\":0,\n    //         \"msg\":\"OK\",\n    //         \"data\":[\n    //             {\n    //                 \"address\": \"1Lxxxxxxxxxxx\"\n    //                 \"amountEv\": 200000\n    //                 \"currency\": \"BTC\"\n    //                 \"currencyCode\": 1\n    //                 \"expiredTime\": 0\n    //                 \"feeEv\": 50000\n    //                 \"rejectReason\": null\n    //                 \"status\": \"Succeed\"\n    //                 \"txHash\": \"44exxxxxxxxxxxxxxxxxxxxxx\"\n    //                 \"withdrawStatus: \"\"\n    //             }\n    //         ]\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTransactions(data, currency, since, limit);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'Success': 'ok',\n      'Succeed': 'ok'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // withdraw\n    //\n    //     ...\n    //\n    // fetchDeposits\n    //\n    //     {\n    //         \"id\":29200,\n    //         \"currency\":\"USDT\",\n    //         \"currencyCode\":3,\n    //         \"txHash\":\"0x0bdbdc47807769a03b158d5753f54dfc58b92993d2f5e818db21863e01238e5d\",\n    //         \"address\":\"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad\",\n    //         \"amountEv\":3000000000,\n    //         \"confirmations\":13,\n    //         \"type\":\"Deposit\",\n    //         \"status\":\"Success\",\n    //         \"createdAt\":1592722565000\n    //     }\n    //\n    // fetchWithdrawals\n    //\n    //     {\n    //         \"address\": \"1Lxxxxxxxxxxx\"\n    //         \"amountEv\": 200000\n    //         \"currency\": \"BTC\"\n    //         \"currencyCode\": 1\n    //         \"expiredTime\": 0\n    //         \"feeEv\": 50000\n    //         \"rejectReason\": null\n    //         \"status\": \"Succeed\"\n    //         \"txHash\": \"44exxxxxxxxxxxxxxxxxxxxxx\"\n    //         \"withdrawStatus: \"\"\n    //     }\n    //\n    const id = this.safeString(transaction, 'id');\n    const address = this.safeString(transaction, 'address');\n    const tag = undefined;\n    const txid = this.safeString(transaction, 'txHash');\n    const currencyId = this.safeString(transaction, 'currency');\n    currency = this.safeCurrency(currencyId, currency);\n    const code = currency['code'];\n    const timestamp = this.safeInteger2(transaction, 'createdAt', 'submitedAt');\n    let type = this.safeStringLower(transaction, 'type');\n    const feeCost = this.fromEn(this.safeNumber(transaction, 'feeEv'), currency['valueScale'], currency['precision']);\n    let fee = undefined;\n\n    if (feeCost !== undefined) {\n      type = 'withdrawal';\n      fee = {\n        'cost': feeCost,\n        'currency': code\n      };\n    }\n\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    const amount = this.fromEn(this.safeNumber(transaction, 'amountEv'), currency['valueScale'], currency['precision']);\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': address,\n      'addressTo': address,\n      'addressFrom': undefined,\n      'tag': tag,\n      'tagTo': tag,\n      'tagFrom': undefined,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': undefined,\n      'fee': fee\n    };\n  }\n\n  async fetchPositions(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const code = this.safeString(params, 'code');\n    const request = {};\n\n    if (code === undefined) {\n      const currencyId = this.safeString(params, 'currency');\n\n      if (currencyId === undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchPositions() requires a currency parameter or a code parameter');\n      }\n    } else {\n      const currency = this.currency(code);\n      params = this.omit(params, 'code');\n      request['currency'] = currency['id'];\n    }\n\n    const response = await this.privateGetAccountsAccountPositions(this.extend(request, params)); //\n    //     {\n    //         \"code\":0,\"msg\":\"\",\n    //         \"data\":{\n    //             \"account\":{\n    //                 \"accountId\":6192120001,\n    //                 \"currency\":\"BTC\",\n    //                 \"accountBalanceEv\":1254744,\n    //                 \"totalUsedBalanceEv\":0,\n    //                 \"bonusBalanceEv\":1254744\n    //             },\n    //             \"positions\":[\n    //                 {\n    //                     \"accountID\":6192120001,\n    //                     \"symbol\":\"BTCUSD\",\n    //                     \"currency\":\"BTC\",\n    //                     \"side\":\"None\",\n    //                     \"positionStatus\":\"Normal\",\n    //                     \"crossMargin\":false,\n    //                     \"leverageEr\":100000000,\n    //                     \"leverage\":1.00000000,\n    //                     \"initMarginReqEr\":100000000,\n    //                     \"initMarginReq\":1.00000000,\n    //                     \"maintMarginReqEr\":500000,\n    //                     \"maintMarginReq\":0.00500000,\n    //                     \"riskLimitEv\":10000000000,\n    //                     \"riskLimit\":100.00000000,\n    //                     \"size\":0,\n    //                     \"value\":0E-8,\n    //                     \"valueEv\":0,\n    //                     \"avgEntryPriceEp\":0,\n    //                     \"avgEntryPrice\":0E-8,\n    //                     \"posCostEv\":0,\n    //                     \"posCost\":0E-8,\n    //                     \"assignedPosBalanceEv\":0,\n    //                     \"assignedPosBalance\":0E-8,\n    //                     \"bankruptCommEv\":0,\n    //                     \"bankruptComm\":0E-8,\n    //                     \"bankruptPriceEp\":0,\n    //                     \"bankruptPrice\":0E-8,\n    //                     \"positionMarginEv\":0,\n    //                     \"positionMargin\":0E-8,\n    //                     \"liquidationPriceEp\":0,\n    //                     \"liquidationPrice\":0E-8,\n    //                     \"deleveragePercentileEr\":0,\n    //                     \"deleveragePercentile\":0E-8,\n    //                     \"buyValueToCostEr\":100225000,\n    //                     \"buyValueToCost\":1.00225000,\n    //                     \"sellValueToCostEr\":100075000,\n    //                     \"sellValueToCost\":1.00075000,\n    //                     \"markPriceEp\":135736070,\n    //                     \"markPrice\":13573.60700000,\n    //                     \"markValueEv\":0,\n    //                     \"markValue\":null,\n    //                     \"unRealisedPosLossEv\":0,\n    //                     \"unRealisedPosLoss\":null,\n    //                     \"estimatedOrdLossEv\":0,\n    //                     \"estimatedOrdLoss\":0E-8,\n    //                     \"usedBalanceEv\":0,\n    //                     \"usedBalance\":0E-8,\n    //                     \"takeProfitEp\":0,\n    //                     \"takeProfit\":null,\n    //                     \"stopLossEp\":0,\n    //                     \"stopLoss\":null,\n    //                     \"cumClosedPnlEv\":0,\n    //                     \"cumFundingFeeEv\":0,\n    //                     \"cumTransactFeeEv\":0,\n    //                     \"realisedPnlEv\":0,\n    //                     \"realisedPnl\":null,\n    //                     \"cumRealisedPnlEv\":0,\n    //                     \"cumRealisedPnl\":null\n    //                 }\n    //             ]\n    //         }\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const positions = this.safeValue(data, 'positions', []); // todo unify parsePosition/parsePositions\n\n    return positions;\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const query = this.omit(params, this.extractParams(path));\n    const requestPath = '/' + this.implodeParams(path, params);\n    let url = requestPath;\n    let queryString = '';\n\n    if (method === 'GET' || method === 'DELETE' || method === 'PUT') {\n      if (Object.keys(query).length) {\n        queryString = this.urlencodeWithArrayRepeat(query);\n        url += '?' + queryString;\n      }\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const timestamp = this.seconds();\n      const xPhemexRequestExpiry = this.safeInteger(this.options, 'x-phemex-request-expiry', 60);\n      const expiry = this.sum(timestamp, xPhemexRequestExpiry);\n      const expiryString = expiry.toString();\n      headers = {\n        'x-phemex-access-token': this.apiKey,\n        'x-phemex-request-expiry': expiryString\n      };\n      let payload = '';\n\n      if (method === 'POST') {\n        payload = this.json(params);\n        body = payload;\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const auth = requestPath + queryString + expiryString + payload;\n      headers['x-phemex-request-signature'] = this.hmac(this.encode(auth), this.encode(this.secret));\n    }\n\n    url = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    }) + url;\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    } //\n    //     {\"code\":30018,\"msg\":\"phemex.data.size.uplimt\",\"data\":null}\n    //     {\"code\":412,\"msg\":\"Missing parameter - resolution\",\"data\":null}\n    //     {\"code\":412,\"msg\":\"Missing parameter - to\",\"data\":null}\n    //     {\"error\":{\"code\":6001,\"message\":\"invalid argument\"},\"id\":null,\"result\":null}\n    //\n\n\n    const error = this.safeValue(response, 'error', response);\n    const errorCode = this.safeString(error, 'code');\n    const message = this.safeString(error, 'msg');\n\n    if (errorCode !== undefined && errorCode !== '0') {\n      const feedback = this.id + ' ' + body;\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/phemex.js"],"names":["Exchange","require","ExchangeError","BadSymbol","AuthenticationError","InsufficientFunds","InvalidOrder","ArgumentsRequired","OrderNotFound","BadRequest","PermissionDenied","AccountSuspended","CancelPending","DDoSProtection","DuplicateOrderId","NotSupported","TICK_SIZE","ROUND","DECIMAL_PLACES","module","exports","phemex","describe","deepExtend","parseSafeNumber","value","undefined","replace","parts","split","safeNumber","parseSwapMarket","market","id","safeString","baseId","safeString2","quoteId","base","safeCurrencyCode","quote","symbol","type","safeStringLower","taker","maker","inverse","spot","swap","settlementCurrencyId","linear","precision","priceScale","safeInteger","ratioScale","valueScale","minPriceEp","maxPriceEp","makerFeeRateEr","takerFeeRateEr","fromEn","limits","status","active","parseSpotMarket","fetchMarkets","params","v2Products","publicGetCfgV2Products","v1Products","v1GetExchangePublicProducts","v1ProductsData","safeValue","v2ProductsData","products","riskLimits","riskLimitsById","indexBy","v1ProductsById","result","i","length","riskLimitValues","extend","v1ProductsValues","push","fetchCurrencies","response","data","currencies","currency","name","code","minValueEv","maxValueEv","minAmount","maxAmount","Math","pow","parseFloat","decimalToPrecision","precisionMode","parseBidAsk","bidask","priceKey","amountKey","amount","fromEv","fromEp","parseOrderBook","orderbook","timestamp","bidsKey","asksKey","iso8601","sides","side","orders","bidasks","k","sortBy","fetchOrderBook","limit","loadMarkets","request","v1GetMdOrderbook","book","safeIntegerProduct","toEn","n","scale","parseInt","toEv","toEp","price","en","ep","ev","fromEr","er","parseOHLCV","ohlcv","baseVolume","safeTimestamp","fetchOHLCV","timeframe","since","timeframes","duration","parseTimeframe","now","seconds","min","sum","publicGetMdKline","rows","parseOHLCVs","parseTicker","ticker","marketId","safeSymbol","last","quoteVolume","vwap","change","percentage","average","open","fetchTicker","method","fetchTrades","v1GetMdTrade","trades","parseTrades","parseTrade","trade","cost","fee","safeMarket","orderId","takerOrMaker","Array","isArray","tradeLength","parseOrderType","execStatus","safeNumber2","feeCost","feeRate","feeRateEr","abs","feeCurrencyCode","info","parseSpotBalance","balance","currencyId","account","balanceEv","lockedTradingBalanceEv","lockedWithdrawEv","total","lockedTradingBalance","lockedWithdraw","used","lastUpdateTimeNs","max","parseBalance","parseSwapBalance","accountBalanceEv","totalUsedBalanceEv","fetchBalance","defaultType","options","omit","parseOrderStatus","statuses","types","parseTimeInForce","timeInForce","timeInForces","parseSpotOrder","order","clientOrderId","remaining","filled","safeIntegerProduct2","stopPrice","postOnly","parseSwapOrder","lastTradeTimestamp","parseOrder","createOrder","capitalize","qtyType","cancelOrder","cancelAllOrders","privateDeleteOrdersAll","fetchOrder","numOrders","fetchOrders","parseOrders","fetchOpenOrders","e","fetchClosedOrders","fetchMyTrades","fetchDepositAddress","privateGetPhemexUserWalletsV2DepositAddress","address","tag","checkAddress","fetchDeposits","privateGetExchangeWalletsDepositList","parseTransactions","fetchWithdrawals","privateGetExchangeWalletsWithdrawList","parseTransactionStatus","parseTransaction","transaction","txid","safeCurrency","safeInteger2","fetchPositions","symbols","privateGetAccountsAccountPositions","positions","sign","path","api","headers","body","query","extractParams","requestPath","implodeParams","url","queryString","Object","keys","urlencodeWithArrayRepeat","checkRequiredCredentials","xPhemexRequestExpiry","expiry","expiryString","toString","apiKey","payload","json","auth","hmac","encode","secret","urls","hostname","handleErrors","httpCode","reason","requestHeaders","requestBody","error","errorCode","message","feedback","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException"],"mappings":"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,IATL;AAUH,cAAQC,IAVL;AAWH,gBAAUE,MAXP;AAYH,iBAAWJ,OAZR;AAaH,gBAAUiB,MAbP;AAcH,eAASnB,KAdN;AAeH,eAASC,KAfN;AAgBH,mBAAaM,SAhBV;AAiBH,oBAAc,CAjBX;AAkBH,oBAAc,CAlBX;AAmBH,oBAAc,CAnBX;AAoBH,gBAAUU;AApBP,KAAP;AAsBH;;AAED,QAAMI,YAAN,CAAoBC,MAAM,GAAG,EAA7B,EAAiC;AAC7B,UAAMC,UAAU,GAAG,MAAM,KAAKC,sBAAL,CAA6BF,MAA7B,CAAzB,CAD6B,CAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMG,UAAU,GAAG,MAAM,KAAKC,2BAAL,CAAkCJ,MAAlC,CAAzB;AACA,UAAMK,cAAc,GAAG,KAAKC,SAAL,CAAgBH,UAAhB,EAA4B,MAA5B,EAAoC,EAApC,CAAvB,CAhF6B,CAiF7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMI,cAAc,GAAG,KAAKD,SAAL,CAAgBL,UAAhB,EAA4B,MAA5B,EAAoC,EAApC,CAAvB;AACA,UAAMO,QAAQ,GAAG,KAAKF,SAAL,CAAgBC,cAAhB,EAAgC,UAAhC,EAA4C,EAA5C,CAAjB;AACA,UAAME,UAAU,GAAG,KAAKH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","sourcesContent":["'use strict';\n\n// ----------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, BadSymbol, AuthenticationError, InsufficientFunds, InvalidOrder, ArgumentsRequired, OrderNotFound, BadRequest, PermissionDenied, AccountSuspended, CancelPending, DDoSProtection, DuplicateOrderId, NotSupported } = require ('./base/errors');\nconst { TICK_SIZE, ROUND, DECIMAL_PLACES } = require ('./base/functions/number');\n\n// ----------------------------------------------------------------------------\n\nmodule.exports = class phemex extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'phemex',\n            'name': 'Phemex',\n            'countries': [ 'CN' ], // China\n            'rateLimit': 100,\n            'version': 'v1',\n            'certified': false,\n            'pro': true,\n            'hostname': 'api.phemex.com',\n            'has': {\n                'cancelAllOrders': true, // swap contracts only\n                'cancelOrder': true,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchDeposits': true,\n                'fetchMarkets': true,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'fetchWithdrawals': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/85225056-221eb600-b3d7-11ea-930d-564d2690e3f6.jpg',\n                'test': {\n                    'v1': 'https://testnet-api.phemex.com/v1',\n                    'public': 'https://testnet-api.phemex.com/exchange/public',\n                    'private': 'https://testnet-api.phemex.com',\n                },\n                'api': {\n                    'v1': 'https://{hostname}/v1',\n                    'public': 'https://{hostname}/exchange/public',\n                    'private': 'https://{hostname}',\n                },\n                'www': 'https://phemex.com',\n                'doc': 'https://github.com/phemex/phemex-api-docs',\n                'fees': 'https://phemex.com/fees-conditions',\n                'referral': 'https://phemex.com/register?referralCode=EDNVJ',\n            },\n            'timeframes': {\n                '1m': '60',\n                '3m': '180',\n                '5m': '300',\n                '15m': '900',\n                '30m': '1800',\n                '1h': '3600',\n                '2h': '7200',\n                '3h': '10800',\n                '4h': '14400',\n                '6h': '21600',\n                '12h': '43200',\n                '1d': '86400',\n                '1w': '604800',\n                '1M': '2592000',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'cfg/v2/products', // spot + contracts\n                        'products', // contracts only\n                        'nomics/trades', // ?market=<symbol>&since=<since>\n                        'md/kline', // ?from=1589811875&resolution=1800&symbol=sBTCUSDT&to=1592457935\n                    ],\n                },\n                'v1': {\n                    'get': [\n                        'md/orderbook', // ?symbol=<symbol>&id=<id>\n                        'md/trade', // ?symbol=<symbol>&id=<id>\n                        'md/ticker/24hr', // ?symbol=<symbol>&id=<id>\n                        'md/ticker/24hr/all', // ?id=<id>\n                        'md/spot/ticker/24hr', // ?symbol=<symbol>&id=<id>\n                        'md/spot/ticker/24hr/all', // ?symbol=<symbol>&id=<id>\n                        'exchange/public/products', // contracts only\n                    ],\n                },\n                'private': {\n                    'get': [\n                        // spot\n                        'spot/orders/active', // ?symbol=<symbol>&orderID=<orderID>\n                        // 'spot/orders/active', // ?symbol=<symbol>&clOrDID=<clOrdID>\n                        'spot/orders', // ?symbol=<symbol>\n                        'spot/wallets', // ?currency=<currency>\n                        'exchange/spot/order', // ?symbol=<symbol>&ordStatus=<ordStatus1,orderStatus2>ordType=<ordType1,orderType2>&start=<start>&end=<end>&limit=<limit>&offset=<offset>\n                        'exchange/spot/order/trades', // ?symbol=<symbol>&start=<start>&end=<end>&limit=<limit>&offset=<offset>\n                        // swap\n                        'accounts/accountPositions', // ?currency=<currency>\n                        'accounts/positions', // ?currency=<currency>\n                        'orders/activeList', // ?symbol=<symbol>\n                        'exchange/order/list', // ?symbol=<symbol>&start=<start>&end=<end>&offset=<offset>&limit=<limit>&ordStatus=<ordStatus>&withCount=<withCount>\n                        'exchange/order', // ?symbol=<symbol>&orderID=<orderID1,orderID2>\n                        // 'exchange/order', // ?symbol=<symbol>&clOrdID=<clOrdID1,clOrdID2>\n                        'exchange/order/trade', // ?symbol=<symbol>&start=<start>&end=<end>&limit=<limit>&offset=<offset>&withCount=<withCount>\n                        'phemex-user/users/children', // ?offset=<offset>&limit=<limit>&withCount=<withCount>\n                        'phemex-user/wallets/v2/depositAddress', // ?_t=1592722635531&currency=USDT\n                        'exchange/margins/transfer', // ?start=<start>&end=<end>&offset=<offset>&limit=<limit>&withCount=<withCount>\n                        'exchange/wallets/confirm/withdraw', // ?code=<withdrawConfirmCode>\n                        'exchange/wallets/withdrawList', // ?currency=<currency>&limit=<limit>&offset=<offset>&withCount=<withCount>\n                        'exchange/wallets/depositList', // ?currency=<currency>&offset=<offset>&limit=<limit>\n                        'exchange/wallets/v2/depositAddress', // ?currency=<currency>\n                    ],\n                    'post': [\n                        // spot\n                        'spot/orders',\n                        // swap\n                        'orders',\n                        'positions/assign', // ?symbol=<symbol>&posBalance=<posBalance>&posBalanceEv=<posBalanceEv>\n                        'exchange/wallets/transferOut',\n                        'exchange/wallets/transferIn',\n                        'exchange/margins',\n                        'exchange/wallets/createWithdraw', // ?otpCode=<otpCode>\n                        'exchange/wallets/cancelWithdraw',\n                        'exchange/wallets/createWithdrawAddress', // ?otpCode={optCode}\n                    ],\n                    'put': [\n                        // spot\n                        'spot/orders', // ?symbol=<symbol>&orderID=<orderID>&origClOrdID=<origClOrdID>&clOrdID=<clOrdID>&priceEp=<priceEp>&baseQtyEV=<baseQtyEV>&quoteQtyEv=<quoteQtyEv>&stopPxEp=<stopPxEp>\n                        // swap\n                        'orders/replace', // ?symbol=<symbol>&orderID=<orderID>&origClOrdID=<origClOrdID>&clOrdID=<clOrdID>&price=<price>&priceEp=<priceEp>&orderQty=<orderQty>&stopPx=<stopPx>&stopPxEp=<stopPxEp>&takeProfit=<takeProfit>&takeProfitEp=<takeProfitEp>&stopLoss=<stopLoss>&stopLossEp=<stopLossEp>&pegOffsetValueEp=<pegOffsetValueEp>&pegPriceType=<pegPriceType>\n                        'positions/leverage', // ?symbol=<symbol>&leverage=<leverage>&leverageEr=<leverageEr>\n                        'positions/riskLimit', // ?symbol=<symbol>&riskLimit=<riskLimit>&riskLimitEv=<riskLimitEv>\n                    ],\n                    'delete': [\n                        // spot\n                        'spot/orders', // ?symbol=<symbol>&orderID=<orderID>\n                        // 'spot/orders', // ?symbol=<symbol>&clOrdID=<clOrdID>\n                        // swap\n                        'orders/cancel', // ?symbol=<symbol>&orderID=<orderID>\n                        'orders', // ?symbol=<symbol>&orderID=<orderID1>,<orderID2>,<orderID3>\n                        'orders/all', // ?symbol=<symbol>&untriggered=<untriggered>&text=<text>\n                    ],\n                },\n            },\n            'precisionMode': TICK_SIZE,\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.1 / 100,\n                    'maker': 0.1 / 100,\n                },\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n            },\n            'exceptions': {\n                'exact': {\n                    // not documented\n                    '412': BadRequest, // {\"code\":412,\"msg\":\"Missing parameter - resolution\",\"data\":null}\n                    '6001': BadRequest, // {\"error\":{\"code\":6001,\"message\":\"invalid argument\"},\"id\":null,\"result\":null}\n                    // documented\n                    '19999': BadRequest, // REQUEST_IS_DUPLICATED Duplicated request ID\n                    '10001': DuplicateOrderId, // OM_DUPLICATE_ORDERID Duplicated order ID\n                    '10002': OrderNotFound, // OM_ORDER_NOT_FOUND Cannot find order ID\n                    '10003': CancelPending, // OM_ORDER_PENDING_CANCEL Cannot cancel while order is already in pending cancel status\n                    '10004': CancelPending, // OM_ORDER_PENDING_REPLACE Cannot cancel while order is already in pending cancel status\n                    '10005': CancelPending, // OM_ORDER_PENDING Cannot cancel while order is already in pending cancel status\n                    '11001': InsufficientFunds, // TE_NO_ENOUGH_AVAILABLE_BALANCE Insufficient available balance\n                    '11002': InvalidOrder, // TE_INVALID_RISK_LIMIT Invalid risk limit value\n                    '11003': InsufficientFunds, // TE_NO_ENOUGH_BALANCE_FOR_NEW_RISK_LIMIT Insufficient available balance\n                    '11004': InvalidOrder, // TE_INVALID_LEVERAGE invalid input or new leverage is over maximum allowed leverage\n                    '11005': InsufficientFunds, // TE_NO_ENOUGH_BALANCE_FOR_NEW_LEVERAGE Insufficient available balance\n                    '11006': ExchangeError, // TE_CANNOT_CHANGE_POSITION_MARGIN_WITHOUT_POSITION Position size is zero. Cannot change margin\n                    '11007': ExchangeError, // TE_CANNOT_CHANGE_POSITION_MARGIN_FOR_CROSS_MARGIN Cannot change margin under CrossMargin\n                    '11008': ExchangeError, // TE_CANNOT_REMOVE_POSITION_MARGIN_MORE_THAN_ADDED exceeds the maximum removable Margin\n                    '11009': ExchangeError, // TE_CANNOT_REMOVE_POSITION_MARGIN_DUE_TO_UNREALIZED_PNL exceeds the maximum removable Margin\n                    '11010': InsufficientFunds, // TE_CANNOT_ADD_POSITION_MARGIN_DUE_TO_NO_ENOUGH_AVAILABLE_BALANCE Insufficient available balance\n                    '11011': InvalidOrder, // TE_REDUCE_ONLY_ABORT Cannot accept reduce only order\n                    '11012': InvalidOrder, // TE_REPLACE_TO_INVALID_QTY Order quantity Error\n                    '11013': InvalidOrder, // TE_CONDITIONAL_NO_POSITION Position size is zero. Cannot determine conditional order's quantity\n                    '11014': InvalidOrder, // TE_CONDITIONAL_CLOSE_POSITION_WRONG_SIDE Close position conditional order has the same side\n                    '11015': InvalidOrder, // TE_CONDITIONAL_TRIGGERED_OR_CANCELED\n                    '11016': BadRequest, // TE_ADL_NOT_TRADING_REQUESTED_ACCOUNT Request is routed to the wrong trading engine\n                    '11017': ExchangeError, // TE_ADL_CANNOT_FIND_POSITION Cannot find requested position on current account\n                    '11018': ExchangeError, // TE_NO_NEED_TO_SETTLE_FUNDING The current account does not need to pay a funding fee\n                    '11019': ExchangeError, // TE_FUNDING_ALREADY_SETTLED The current account already pays the funding fee\n                    '11020': ExchangeError, // TE_CANNOT_TRANSFER_OUT_DUE_TO_BONUS Withdraw to wallet needs to remove all remaining bonus. However if bonus is used by position or order cost, withdraw fails.\n                    '11021': ExchangeError, // TE_INVALID_BONOUS_AMOUNT // Grpc command cannot be negative number Invalid bonus amount\n                    '11022': AccountSuspended, // TE_REJECT_DUE_TO_BANNED Account is banned\n                    '11023': ExchangeError, // TE_REJECT_DUE_TO_IN_PROCESS_OF_LIQ Account is in the process of liquidation\n                    '11024': ExchangeError, // TE_REJECT_DUE_TO_IN_PROCESS_OF_ADL Account is in the process of auto-deleverage\n                    '11025': BadRequest, // TE_ROUTE_ERROR Request is routed to the wrong trading engine\n                    '11026': ExchangeError, // TE_UID_ACCOUNT_MISMATCH\n                    '11027': BadSymbol, // TE_SYMBOL_INVALID Invalid number ID or name\n                    '11028': BadSymbol, // TE_CURRENCY_INVALID Invalid currency ID or name\n                    '11029': ExchangeError, // TE_ACTION_INVALID Unrecognized request type\n                    '11030': ExchangeError, // TE_ACTION_BY_INVALID\n                    '11031': DDoSProtection, // TE_SO_NUM_EXCEEDS Number of total conditional orders exceeds the max limit\n                    '11032': DDoSProtection, // TE_AO_NUM_EXCEEDS Number of total active orders exceeds the max limit\n                    '11033': DuplicateOrderId, // TE_ORDER_ID_DUPLICATE Duplicated order ID\n                    '11034': InvalidOrder, // TE_SIDE_INVALID Invalid side\n                    '11035': InvalidOrder, // TE_ORD_TYPE_INVALID Invalid OrderType\n                    '11036': InvalidOrder, // TE_TIME_IN_FORCE_INVALID Invalid TimeInForce\n                    '11037': InvalidOrder, // TE_EXEC_INST_INVALID Invalid ExecType\n                    '11038': InvalidOrder, // TE_TRIGGER_INVALID Invalid trigger type\n                    '11039': InvalidOrder, // TE_STOP_DIRECTION_INVALID Invalid stop direction type\n                    '11040': InvalidOrder, // TE_NO_MARK_PRICE Cannot get valid mark price to create conditional order\n                    '11041': InvalidOrder, // TE_NO_INDEX_PRICE Cannot get valid index price to create conditional order\n                    '11042': InvalidOrder, // TE_NO_LAST_PRICE Cannot get valid last market price to create conditional order\n                    '11043': InvalidOrder, // TE_RISING_TRIGGER_DIRECTLY Conditional order would be triggered immediately\n                    '11044': InvalidOrder, // TE_FALLING_TRIGGER_DIRECTLY Conditional order would be triggered immediately\n                    '11045': InvalidOrder, // TE_TRIGGER_PRICE_TOO_LARGE Conditional order trigger price is too high\n                    '11046': InvalidOrder, // TE_TRIGGER_PRICE_TOO_SMALL Conditional order trigger price is too low\n                    '11047': InvalidOrder, // TE_BUY_TP_SHOULD_GT_BASE TakeProfile BUY conditional order trigger price needs to be greater than reference price\n                    '11048': InvalidOrder, // TE_BUY_SL_SHOULD_LT_BASE StopLoss BUY condition order price needs to be less than the reference price\n                    '11049': InvalidOrder, // TE_BUY_SL_SHOULD_GT_LIQ StopLoss BUY condition order price needs to be greater than liquidation price or it will not trigger\n                    '11050': InvalidOrder, // TE_SELL_TP_SHOULD_LT_BASE TakeProfile SELL conditional order trigger price needs to be less than reference price\n                    '11051': InvalidOrder, // TE_SELL_SL_SHOULD_LT_LIQ StopLoss SELL condition order price needs to be less than liquidation price or it will not trigger\n                    '11052': InvalidOrder, // TE_SELL_SL_SHOULD_GT_BASE StopLoss SELL condition order price needs to be greater than the reference price\n                    '11053': InvalidOrder, // TE_PRICE_TOO_LARGE\n                    '11054': InvalidOrder, // TE_PRICE_WORSE_THAN_BANKRUPT Order price cannot be more aggressive than bankrupt price if this order has instruction to close a position\n                    '11055': InvalidOrder, // TE_PRICE_TOO_SMALL Order price is too low\n                    '11056': InvalidOrder, // TE_QTY_TOO_LARGE Order quantity is too large\n                    '11057': InvalidOrder, // TE_QTY_NOT_MATCH_REDUCE_ONLY Does not allow ReduceOnly order without position\n                    '11058': InvalidOrder, // TE_QTY_TOO_SMALL Order quantity is too small\n                    '11059': InvalidOrder, // TE_TP_SL_QTY_NOT_MATCH_POS Position size is zero. Cannot accept any TakeProfit or StopLoss order\n                    '11060': InvalidOrder, // TE_SIDE_NOT_CLOSE_POS TakeProfit or StopLoss order has wrong side. Cannot close position\n                    '11061': CancelPending, // TE_ORD_ALREADY_PENDING_CANCEL Repeated cancel request\n                    '11062': InvalidOrder, // TE_ORD_ALREADY_CANCELED Order is already canceled\n                    '11063': InvalidOrder, // TE_ORD_STATUS_CANNOT_CANCEL Order is not able to be canceled under current status\n                    '11064': InvalidOrder, // TE_ORD_ALREADY_PENDING_REPLACE Replace request is rejected because order is already in pending replace status\n                    '11065': InvalidOrder, // TE_ORD_REPLACE_NOT_MODIFIED Replace request does not modify any parameters of the order\n                    '11066': InvalidOrder, // TE_ORD_STATUS_CANNOT_REPLACE Order is not able to be replaced under current status\n                    '11067': InvalidOrder, // TE_CANNOT_REPLACE_PRICE Market conditional order cannot change price\n                    '11068': InvalidOrder, // TE_CANNOT_REPLACE_QTY Condtional order for closing position cannot change order quantity, since the order quantity is determined by position size already\n                    '11069': ExchangeError, // TE_ACCOUNT_NOT_IN_RANGE The account ID in the request is not valid or is not in the range of the current process\n                    '11070': BadSymbol, // TE_SYMBOL_NOT_IN_RANGE The symbol is invalid\n                    '11071': InvalidOrder, // TE_ORD_STATUS_CANNOT_TRIGGER\n                    '11072': InvalidOrder, // TE_TKFR_NOT_IN_RANGE The fee value is not valid\n                    '11073': InvalidOrder, // TE_MKFR_NOT_IN_RANGE The fee value is not valid\n                    '11074': InvalidOrder, // TE_CANNOT_ATTACH_TP_SL Order request cannot contain TP/SL parameters when the account already has positions\n                    '11075': InvalidOrder, // TE_TP_TOO_LARGE TakeProfit price is too large\n                    '11076': InvalidOrder, // TE_TP_TOO_SMALL TakeProfit price is too small\n                    '11077': InvalidOrder, // TE_TP_TRIGGER_INVALID Invalid trigger type\n                    '11078': InvalidOrder, // TE_SL_TOO_LARGE StopLoss price is too large\n                    '11079': InvalidOrder, // TE_SL_TOO_SMALL StopLoss price is too small\n                    '11080': InvalidOrder, // TE_SL_TRIGGER_INVALID Invalid trigger type\n                    '11081': InvalidOrder, // TE_RISK_LIMIT_EXCEEDS Total potential position breaches current risk limit\n                    '11082': InsufficientFunds, // TE_CANNOT_COVER_ESTIMATE_ORDER_LOSS The remaining balance cannot cover the potential unrealized PnL for this new order\n                    '11083': InvalidOrder, // TE_TAKE_PROFIT_ORDER_DUPLICATED TakeProfit order already exists\n                    '11084': InvalidOrder, // TE_STOP_LOSS_ORDER_DUPLICATED StopLoss order already exists\n                    '11085': DuplicateOrderId, // TE_CL_ORD_ID_DUPLICATE ClOrdId is duplicated\n                    '11086': InvalidOrder, // TE_PEG_PRICE_TYPE_INVALID PegPriceType is invalid\n                    '11087': InvalidOrder, // TE_BUY_TS_SHOULD_LT_BASE The trailing order's StopPrice should be less than the current last price\n                    '11088': InvalidOrder, // TE_BUY_TS_SHOULD_GT_LIQ The traling order's StopPrice should be greater than the current liquidation price\n                    '11089': InvalidOrder, // TE_SELL_TS_SHOULD_LT_LIQ The traling order's StopPrice should be greater than the current last price\n                    '11090': InvalidOrder, // TE_SELL_TS_SHOULD_GT_BASE The traling order's StopPrice should be less than the current liquidation price\n                    '11091': InvalidOrder, // TE_BUY_REVERT_VALUE_SHOULD_LT_ZERO The PegOffset should be less than zero\n                    '11092': InvalidOrder, // TE_SELL_REVERT_VALUE_SHOULD_GT_ZERO The PegOffset should be greater than zero\n                    '11093': InvalidOrder, // TE_BUY_TTP_SHOULD_ACTIVATE_ABOVE_BASE The activation price should be greater than the current last price\n                    '11094': InvalidOrder, // TE_SELL_TTP_SHOULD_ACTIVATE_BELOW_BASE The activation price should be less than the current last price\n                    '11095': InvalidOrder, // TE_TRAILING_ORDER_DUPLICATED A trailing order exists already\n                    '11096': InvalidOrder, // TE_CLOSE_ORDER_CANNOT_ATTACH_TP_SL An order to close position cannot have trailing instruction\n                    '11097': BadRequest, // TE_CANNOT_FIND_WALLET_OF_THIS_CURRENCY This crypto is not supported\n                    '11098': BadRequest, // TE_WALLET_INVALID_ACTION Invalid action on wallet\n                    '11099': ExchangeError, // TE_WALLET_VID_UNMATCHED Wallet operation request has a wrong wallet vid\n                    '11100': InsufficientFunds, // TE_WALLET_INSUFFICIENT_BALANCE Wallet has insufficient balance\n                    '11101': InsufficientFunds, // TE_WALLET_INSUFFICIENT_LOCKED_BALANCE Locked balance in wallet is not enough for unlock/withdraw request\n                    '11102': BadRequest, // TE_WALLET_INVALID_DEPOSIT_AMOUNT Deposit amount must be greater than zero\n                    '11103': BadRequest, // TE_WALLET_INVALID_WITHDRAW_AMOUNT Withdraw amount must be less than zero\n                    '11104': BadRequest, // TE_WALLET_REACHED_MAX_AMOUNT Deposit makes wallet exceed max amount allowed\n                    '11105': InsufficientFunds, // TE_PLACE_ORDER_INSUFFICIENT_BASE_BALANCE Insufficient funds in base wallet\n                    '11106': InsufficientFunds, // TE_PLACE_ORDER_INSUFFICIENT_QUOTE_BALANCE Insufficient funds in quote wallet\n                    '11107': ExchangeError, // TE_CANNOT_CONNECT_TO_REQUEST_SEQ TradingEngine failed to connect with CrossEngine\n                    '11108': InvalidOrder, // TE_CANNOT_REPLACE_OR_CANCEL_MARKET_ORDER Cannot replace/amend market order\n                    '11109': InvalidOrder, // TE_CANNOT_REPLACE_OR_CANCEL_IOC_ORDER Cannot replace/amend ImmediateOrCancel order\n                    '11110': InvalidOrder, // TE_CANNOT_REPLACE_OR_CANCEL_FOK_ORDER Cannot replace/amend FillOrKill order\n                    '11111': InvalidOrder, // TE_MISSING_ORDER_ID OrderId is missing\n                    '11112': InvalidOrder, // TE_QTY_TYPE_INVALID QtyType is invalid\n                    '11113': BadRequest, // TE_USER_ID_INVALID UserId is invalid\n                    '11114': InvalidOrder, // TE_ORDER_VALUE_TOO_LARGE Order value is too large\n                    '11115': InvalidOrder, // TE_ORDER_VALUE_TOO_SMALL Order value is too small\n                    // not documented\n                    '30018': BadRequest, // {\"code\":30018,\"msg\":\"phemex.data.size.uplimt\",\"data\":null}\n                    '39996': PermissionDenied, // {\"code\": \"39996\",\"msg\": \"Access denied.\"}\n                },\n                'broad': {\n                    'Failed to find api-key': AuthenticationError, // {\"msg\":\"Failed to find api-key 1c5ec63fd-660d-43ea-847a-0d3ba69e106e\",\"code\":10500}\n                    'Missing required parameter': BadRequest, // {\"msg\":\"Missing required parameter\",\"code\":10500}\n                    'API Signature verification failed': AuthenticationError, // {\"msg\":\"API Signature verification failed.\",\"code\":10500}\n                },\n            },\n            'options': {\n                'x-phemex-request-expiry': 60, // in seconds\n                'createOrderByQuoteRequiresPrice': true,\n            },\n        });\n    }\n\n    parseSafeNumber (value = undefined) {\n        if (value === undefined) {\n            return value;\n        }\n        value = value.replace (',', '');\n        const parts = value.split (' ');\n        return this.safeNumber (parts, 0);\n    }\n\n    parseSwapMarket (market) {\n        //\n        //     {\n        //         \"symbol\":\"BTCUSD\",\n        //         \"displaySymbol\":\"BTC / USD\",\n        //         \"indexSymbol\":\".BTC\",\n        //         \"markSymbol\":\".MBTC\",\n        //         \"fundingRateSymbol\":\".BTCFR\",\n        //         \"fundingRate8hSymbol\":\".BTCFR8H\",\n        //         \"contractUnderlyingAssets\":\"USD\",\n        //         \"settleCurrency\":\"BTC\",\n        //         \"quoteCurrency\":\"USD\",\n        //         \"contractSize\":\"1 USD\",\n        //         \"lotSize\":1,\n        //         \"tickSize\":0.5,\n        //         \"priceScale\":4,\n        //         \"ratioScale\":8,\n        //         \"pricePrecision\":1,\n        //         \"minPriceEp\":5000,\n        //         \"maxPriceEp\":10000000000,\n        //         \"maxOrderQty\":1000000,\n        //         \"type\":\"Perpetual\",\n        //         \"status\":\"Listed\",\n        //         \"tipOrderQty\":1000000,\n        //         \"steps\":\"50\",\n        //         \"riskLimits\":[\n        //             {\"limit\":100,\"initialMargin\":\"1.0%\",\"initialMarginEr\":1000000,\"maintenanceMargin\":\"0.5%\",\"maintenanceMarginEr\":500000},\n        //             {\"limit\":150,\"initialMargin\":\"1.5%\",\"initialMarginEr\":1500000,\"maintenanceMargin\":\"1.0%\",\"maintenanceMarginEr\":1000000},\n        //             {\"limit\":200,\"initialMargin\":\"2.0%\",\"initialMarginEr\":2000000,\"maintenanceMargin\":\"1.5%\",\"maintenanceMarginEr\":1500000},\n        //         ],\n        //         \"underlyingSymbol\":\".BTC\",\n        //         \"baseCurrency\":\"BTC\",\n        //         \"settlementCurrency\":\"BTC\",\n        //         \"valueScale\":8,\n        //         \"defaultLeverage\":0,\n        //         \"maxLeverage\":100,\n        //         \"initMarginEr\":\"1000000\",\n        //         \"maintMarginEr\":\"500000\",\n        //         \"defaultRiskLimitEv\":10000000000,\n        //         \"deleverage\":true,\n        //         \"makerFeeRateEr\":-250000,\n        //         \"takerFeeRateEr\":750000,\n        //         \"fundingInterval\":8,\n        //         \"marketUrl\":\"https://phemex.com/trade/BTCUSD\",\n        //         \"description\":\"BTCUSD is a BTC/USD perpetual contract priced on the .BTC Index. Each contract is worth 1 USD of Bitcoin. Funding is paid and received every 8 hours. At UTC time: 00:00, 08:00, 16:00.\",\n        //     }\n        //\n        const id = this.safeString (market, 'symbol');\n        const baseId = this.safeString2 (market, 'baseCurrency', 'contractUnderlyingAssets');\n        const quoteId = this.safeString (market, 'quoteCurrency');\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        const symbol = base + '/' + quote;\n        const type = this.safeStringLower (market, 'type');\n        let taker = undefined;\n        let maker = undefined;\n        let inverse = false;\n        const spot = false;\n        const swap = true;\n        const settlementCurrencyId = this.safeString (market, 'settlementCurrency');\n        if (settlementCurrencyId !== quoteId) {\n            inverse = true;\n        }\n        const linear = !inverse;\n        const precision = {\n            'amount': this.safeNumber (market, 'lotSize'),\n            'price': this.safeNumber (market, 'tickSize'),\n        };\n        const priceScale = this.safeInteger (market, 'priceScale');\n        const ratioScale = this.safeInteger (market, 'ratioScale');\n        const valueScale = this.safeInteger (market, 'valueScale');\n        const minPriceEp = this.safeNumber (market, 'minPriceEp');\n        const maxPriceEp = this.safeNumber (market, 'maxPriceEp');\n        const makerFeeRateEr = this.safeNumber (market, 'makerFeeRateEr');\n        const takerFeeRateEr = this.safeNumber (market, 'takerFeeRateEr');\n        if (makerFeeRateEr !== undefined) {\n            maker = this.fromEn (makerFeeRateEr, ratioScale, 0.00000001);\n        }\n        if (takerFeeRateEr !== undefined) {\n            taker = this.fromEn (takerFeeRateEr, ratioScale, 0.00000001);\n        }\n        const limits = {\n            'amount': {\n                'min': precision['amount'],\n                'max': undefined,\n            },\n            'price': {\n                'min': this.fromEn (minPriceEp, priceScale, precision['price']),\n                'max': this.fromEn (maxPriceEp, priceScale, precision['price']),\n            },\n            'cost': {\n                'min': undefined,\n                'max': this.parseSafeNumber (this.safeString (market, 'maxOrderQty')),\n            },\n        };\n        const status = this.safeString (market, 'status');\n        const active = status === 'Listed';\n        return {\n            'id': id,\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n            'info': market,\n            'type': type,\n            'spot': spot,\n            'swap': swap,\n            'linear': linear,\n            'inverse': inverse,\n            'active': active,\n            'taker': taker,\n            'maker': maker,\n            'priceScale': priceScale,\n            'valueScale': valueScale,\n            'ratioScale': ratioScale,\n            'precision': precision,\n            'limits': limits,\n        };\n    }\n\n    parseSpotMarket (market) {\n        //\n        //     {\n        //         \"symbol\":\"sBTCUSDT\",\n        //         \"displaySymbol\":\"BTC / USDT\",\n        //         \"quoteCurrency\":\"USDT\",\n        //         \"pricePrecision\":2,\n        //         \"type\":\"Spot\",\n        //         \"baseCurrency\":\"BTC\",\n        //         \"baseTickSize\":\"0.000001 BTC\",\n        //         \"baseTickSizeEv\":100,\n        //         \"quoteTickSize\":\"0.01 USDT\",\n        //         \"quoteTickSizeEv\":1000000,\n        //         \"minOrderValue\":\"10 USDT\",\n        //         \"minOrderValueEv\":1000000000,\n        //         \"maxBaseOrderSize\":\"1000 BTC\",\n        //         \"maxBaseOrderSizeEv\":100000000000,\n        //         \"maxOrderValue\":\"5,000,000 USDT\",\n        //         \"maxOrderValueEv\":500000000000000,\n        //         \"defaultTakerFee\":\"0.001\",\n        //         \"defaultTakerFeeEr\":100000,\n        //         \"defaultMakerFee\":\"0.001\",\n        //         \"defaultMakerFeeEr\":100000,\n        //         \"baseQtyPrecision\":6,\n        //         \"quoteQtyPrecision\":2,\n        //         \"status\":\"Listed\",\n        //         \"tipOrderQty\":20\n        //     }\n        //\n        const type = this.safeStringLower (market, 'type');\n        const id = this.safeString (market, 'symbol');\n        const quoteId = this.safeString (market, 'quoteCurrency');\n        const baseId = this.safeString (market, 'baseCurrency');\n        const linear = undefined;\n        const inverse = undefined;\n        const spot = true;\n        const swap = false;\n        const taker = this.safeNumber (market, 'defaultTakerFee');\n        const maker = this.safeNumber (market, 'defaultMakerFee');\n        const precision = {\n            'amount': this.parseSafeNumber (this.safeString (market, 'baseTickSize')),\n            'price': this.parseSafeNumber (this.safeString (market, 'quoteTickSize')),\n        };\n        const limits = {\n            'amount': {\n                'min': precision['amount'],\n                'max': this.parseSafeNumber (this.safeString (market, 'maxBaseOrderSize')),\n            },\n            'price': {\n                'min': precision['price'],\n                'max': undefined,\n            },\n            'cost': {\n                'min': this.parseSafeNumber (this.safeString (market, 'minOrderValue')),\n                'max': this.parseSafeNumber (this.safeString (market, 'maxOrderValue')),\n            },\n        };\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        const symbol = base + '/' + quote;\n        const status = this.safeString (market, 'status');\n        const active = status === 'Listed';\n        return {\n            'id': id,\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n            'info': market,\n            'type': type,\n            'spot': spot,\n            'swap': swap,\n            'linear': linear,\n            'inverse': inverse,\n            'active': active,\n            'taker': taker,\n            'maker': maker,\n            'precision': precision,\n            'priceScale': 8,\n            'valueScale': 8,\n            'ratioScale': 8,\n            'limits': limits,\n        };\n    }\n\n    async fetchMarkets (params = {}) {\n        const v2Products = await this.publicGetCfgV2Products (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"OK\",\n        //         \"data\":{\n        //             \"ratioScale\":8,\n        //             \"currencies\":[\n        //                 {\"currency\":\"BTC\",\"valueScale\":8,\"minValueEv\":1,\"maxValueEv\":5000000000000000000,\"name\":\"Bitcoin\"},\n        //                 {\"currency\":\"USD\",\"valueScale\":4,\"minValueEv\":1,\"maxValueEv\":500000000000000,\"name\":\"USD\"},\n        //                 {\"currency\":\"USDT\",\"valueScale\":8,\"minValueEv\":1,\"maxValueEv\":5000000000000000000,\"name\":\"TetherUS\"},\n        //             ],\n        //             \"products\":[\n        //                 {\n        //                     \"symbol\":\"BTCUSD\",\n        //                     \"displaySymbol\":\"BTC / USD\",\n        //                     \"indexSymbol\":\".BTC\",\n        //                     \"markSymbol\":\".MBTC\",\n        //                     \"fundingRateSymbol\":\".BTCFR\",\n        //                     \"fundingRate8hSymbol\":\".BTCFR8H\",\n        //                     \"contractUnderlyingAssets\":\"USD\",\n        //                     \"settleCurrency\":\"BTC\",\n        //                     \"quoteCurrency\":\"USD\",\n        //                     \"contractSize\":1.0,\n        //                     \"lotSize\":1,\n        //                     \"tickSize\":0.5,\n        //                     \"priceScale\":4,\n        //                     \"ratioScale\":8,\n        //                     \"pricePrecision\":1,\n        //                     \"minPriceEp\":5000,\n        //                     \"maxPriceEp\":10000000000,\n        //                     \"maxOrderQty\":1000000,\n        //                     \"type\":\"Perpetual\"\n        //                 },\n        //                 {\n        //                     \"symbol\":\"sBTCUSDT\",\n        //                     \"displaySymbol\":\"BTC / USDT\",\n        //                     \"quoteCurrency\":\"USDT\",\n        //                     \"pricePrecision\":2,\n        //                     \"type\":\"Spot\",\n        //                     \"baseCurrency\":\"BTC\",\n        //                     \"baseTickSize\":\"0.000001 BTC\",\n        //                     \"baseTickSizeEv\":100,\n        //                     \"quoteTickSize\":\"0.01 USDT\",\n        //                     \"quoteTickSizeEv\":1000000,\n        //                     \"minOrderValue\":\"10 USDT\",\n        //                     \"minOrderValueEv\":1000000000,\n        //                     \"maxBaseOrderSize\":\"1000 BTC\",\n        //                     \"maxBaseOrderSizeEv\":100000000000,\n        //                     \"maxOrderValue\":\"5,000,000 USDT\",\n        //                     \"maxOrderValueEv\":500000000000000,\n        //                     \"defaultTakerFee\":\"0.001\",\n        //                     \"defaultTakerFeeEr\":100000,\n        //                     \"defaultMakerFee\":\"0.001\",\n        //                     \"defaultMakerFeeEr\":100000,\n        //                     \"baseQtyPrecision\":6,\n        //                     \"quoteQtyPrecision\":2\n        //                 },\n        //             ],\n        //             \"riskLimits\":[\n        //                 {\n        //                     \"symbol\":\"BTCUSD\",\n        //                     \"steps\":\"50\",\n        //                     \"riskLimits\":[\n        //                         {\"limit\":100,\"initialMargin\":\"1.0%\",\"initialMarginEr\":1000000,\"maintenanceMargin\":\"0.5%\",\"maintenanceMarginEr\":500000},\n        //                         {\"limit\":150,\"initialMargin\":\"1.5%\",\"initialMarginEr\":1500000,\"maintenanceMargin\":\"1.0%\",\"maintenanceMarginEr\":1000000},\n        //                         {\"limit\":200,\"initialMargin\":\"2.0%\",\"initialMarginEr\":2000000,\"maintenanceMargin\":\"1.5%\",\"maintenanceMarginEr\":1500000},\n        //                     ]\n        //                 },\n        //             ],\n        //             \"leverages\":[\n        //                 {\"initialMargin\":\"1.0%\",\"initialMarginEr\":1000000,\"options\":[1,2,3,5,10,25,50,100]},\n        //                 {\"initialMargin\":\"1.5%\",\"initialMarginEr\":1500000,\"options\":[1,2,3,5,10,25,50,66]},\n        //                 {\"initialMargin\":\"2.0%\",\"initialMarginEr\":2000000,\"options\":[1,2,3,5,10,25,33,50]},\n        //             ]\n        //         }\n        //     }\n        //\n        const v1Products = await this.v1GetExchangePublicProducts (params);\n        const v1ProductsData = this.safeValue (v1Products, 'data', []);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"OK\",\n        //         \"data\":[\n        //             {\n        //                 \"symbol\":\"BTCUSD\",\n        //                 \"underlyingSymbol\":\".BTC\",\n        //                 \"quoteCurrency\":\"USD\",\n        //                 \"baseCurrency\":\"BTC\",\n        //                 \"settlementCurrency\":\"BTC\",\n        //                 \"maxOrderQty\":1000000,\n        //                 \"maxPriceEp\":100000000000000,\n        //                 \"lotSize\":1,\n        //                 \"tickSize\":\"0.5\",\n        //                 \"contractSize\":\"1 USD\",\n        //                 \"priceScale\":4,\n        //                 \"ratioScale\":8,\n        //                 \"valueScale\":8,\n        //                 \"defaultLeverage\":0,\n        //                 \"maxLeverage\":100,\n        //                 \"initMarginEr\":\"1000000\",\n        //                 \"maintMarginEr\":\"500000\",\n        //                 \"defaultRiskLimitEv\":10000000000,\n        //                 \"deleverage\":true,\n        //                 \"makerFeeRateEr\":-250000,\n        //                 \"takerFeeRateEr\":750000,\n        //                 \"fundingInterval\":8,\n        //                 \"marketUrl\":\"https://phemex.com/trade/BTCUSD\",\n        //                 \"description\":\"BTCUSD is a BTC/USD perpetual contract priced on the .BTC Index. Each contract is worth 1 USD of Bitcoin. Funding is paid and received every 8 hours. At UTC time: 00:00, 08:00, 16:00.\",\n        //                 \"type\":\"Perpetual\"\n        //             },\n        //         ]\n        //     }\n        //\n        const v2ProductsData = this.safeValue (v2Products, 'data', {});\n        const products = this.safeValue (v2ProductsData, 'products', []);\n        const riskLimits = this.safeValue (v2ProductsData, 'riskLimits', []);\n        const riskLimitsById = this.indexBy (riskLimits, 'symbol');\n        const v1ProductsById = this.indexBy (v1ProductsData, 'symbol');\n        const result = [];\n        for (let i = 0; i < products.length; i++) {\n            let market = products[i];\n            const type = this.safeStringLower (market, 'type');\n            if (type === 'perpetual') {\n                const id = this.safeString (market, 'symbol');\n                const riskLimitValues = this.safeValue (riskLimitsById, id, {});\n                market = this.extend (market, riskLimitValues);\n                const v1ProductsValues = this.safeValue (v1ProductsById, id, {});\n                market = this.extend (market, v1ProductsValues);\n                market = this.parseSwapMarket (market);\n            } else {\n                market = this.parseSpotMarket (market);\n            }\n            result.push (market);\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const response = await this.publicGetCfgV2Products (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"OK\",\n        //         \"data\":{\n        //             ...,\n        //             \"currencies\":[\n        //                 {\"currency\":\"BTC\",\"valueScale\":8,\"minValueEv\":1,\"maxValueEv\":5000000000000000000,\"name\":\"Bitcoin\"},\n        //                 {\"currency\":\"USD\",\"valueScale\":4,\"minValueEv\":1,\"maxValueEv\":500000000000000,\"name\":\"USD\"},\n        //                 {\"currency\":\"USDT\",\"valueScale\":8,\"minValueEv\":1,\"maxValueEv\":5000000000000000000,\"name\":\"TetherUS\"},\n        //             ],\n        //             ...\n        //         }\n        //     }\n        const data = this.safeValue (response, 'data', {});\n        const currencies = this.safeValue (data, 'currencies', []);\n        const result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            const currency = currencies[i];\n            const id = this.safeString (currency, 'currency');\n            const name = this.safeString (currency, 'name');\n            const code = this.safeCurrencyCode (id);\n            const valueScale = this.safeInteger (currency, 'valueScale');\n            const minValueEv = this.safeNumber (currency, 'minValueEv');\n            const maxValueEv = this.safeNumber (currency, 'maxValueEv');\n            let minAmount = undefined;\n            let maxAmount = undefined;\n            let precision = undefined;\n            if (valueScale !== undefined) {\n                precision = Math.pow (10, -valueScale);\n                precision = parseFloat (this.decimalToPrecision (precision, ROUND, 0.00000001, this.precisionMode));\n                if (minValueEv !== undefined) {\n                    minAmount = parseFloat (this.decimalToPrecision (minValueEv * precision, ROUND, 0.00000001, this.precisionMode));\n                }\n                if (maxValueEv !== undefined) {\n                    maxAmount = parseFloat (this.decimalToPrecision (maxValueEv * precision, ROUND, 0.00000001, this.precisionMode));\n                }\n            }\n            result[code] = {\n                'id': id,\n                'info': currency,\n                'code': code,\n                'name': name,\n                'active': undefined,\n                'fee': undefined,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': minAmount,\n                        'max': maxAmount,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'valueScale': valueScale,\n            };\n        }\n        return result;\n    }\n\n    parseBidAsk (bidask, priceKey = 0, amountKey = 1, market = undefined) {\n        if (market === undefined) {\n            throw new ArgumentsRequired (this.id + ' parseBidAsk() requires a market argument');\n        }\n        let amount = this.safeNumber (bidask, amountKey);\n        if (market['spot']) {\n            amount = this.fromEv (amount, market);\n        }\n        return [\n            this.fromEp (this.safeNumber (bidask, priceKey), market),\n            amount,\n        ];\n    }\n\n    parseOrderBook (orderbook, symbol, timestamp = undefined, bidsKey = 'bids', asksKey = 'asks', priceKey = 0, amountKey = 1, market = undefined) {\n        const result = {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'nonce': undefined,\n        };\n        const sides = [ bidsKey, asksKey ];\n        for (let i = 0; i < sides.length; i++) {\n            const side = sides[i];\n            const orders = [];\n            const bidasks = this.safeValue (orderbook, side);\n            for (let k = 0; k < bidasks.length; k++) {\n                orders.push (this.parseBidAsk (bidasks[k], priceKey, amountKey, market));\n            }\n            result[side] = orders;\n        }\n        result[bidsKey] = this.sortBy (result[bidsKey], 0, true);\n        result[asksKey] = this.sortBy (result[asksKey], 0);\n        return result;\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            // 'id': 123456789, // optional request id\n        };\n        const response = await this.v1GetMdOrderbook (this.extend (request, params));\n        //\n        //     {\n        //         \"error\": null,\n        //         \"id\": 0,\n        //         \"result\": {\n        //             \"book\": {\n        //                 \"asks\": [\n        //                     [ 23415000000, 105262000 ],\n        //                     [ 23416000000, 147914000 ],\n        //                     [ 23419000000, 160914000 ],\n        //                 ],\n        //                 \"bids\": [\n        //                     [ 23360000000, 32995000 ],\n        //                     [ 23359000000, 221887000 ],\n        //                     [ 23356000000, 284599000 ],\n        //                 ],\n        //             },\n        //             \"depth\": 30,\n        //             \"sequence\": 1592059928,\n        //             \"symbol\": \"sETHUSDT\",\n        //             \"timestamp\": 1592387340020000955,\n        //             \"type\": \"snapshot\"\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const book = this.safeValue (result, 'book', {});\n        const timestamp = this.safeIntegerProduct (result, 'timestamp', 0.000001);\n        const orderbook = this.parseOrderBook (book, symbol, timestamp, 'bids', 'asks', 0, 1, market);\n        orderbook['nonce'] = this.safeInteger (result, 'sequence');\n        return orderbook;\n    }\n\n    toEn (n, scale, precision) {\n        return parseInt (this.decimalToPrecision (n * Math.pow (10, scale), ROUND, precision, DECIMAL_PLACES));\n    }\n\n    toEv (amount, market = undefined) {\n        if ((amount === undefined) || (market === undefined)) {\n            return amount;\n        }\n        return this.toEn (amount, market['valueScale'], 0);\n    }\n\n    toEp (price, market = undefined) {\n        if ((price === undefined) || (market === undefined)) {\n            return price;\n        }\n        return this.toEn (price, market['priceScale'], 0);\n    }\n\n    fromEn (en, scale, precision, precisionMode = undefined) {\n        if (en === undefined) {\n            return en;\n        }\n        precisionMode = (precisionMode === undefined) ? this.precisionMode : precisionMode;\n        return parseFloat (this.decimalToPrecision (en * Math.pow (10, -scale), ROUND, precision, precisionMode));\n    }\n\n    fromEp (ep, market = undefined) {\n        if ((ep === undefined) || (market === undefined)) {\n            return ep;\n        }\n        return this.fromEn (ep, market['priceScale'], market['precision']['price']);\n    }\n\n    fromEv (ev, market = undefined) {\n        if ((ev === undefined) || (market === undefined)) {\n            return ev;\n        }\n        if (market['spot']) {\n            return this.fromEn (ev, market['valueScale'], market['precision']['amount']);\n        } else {\n            return this.fromEn (ev, market['valueScale'], 1 / Math.pow (10, market['valueScale']));\n        }\n    }\n\n    fromEr (er, market = undefined) {\n        if ((er === undefined) || (market === undefined)) {\n            return er;\n        }\n        return this.fromEn (er, market['ratioScale'], 0.00000001);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     [\n        //         1592467200, // timestamp\n        //         300, // interval\n        //         23376000000, // last\n        //         23322000000, // open\n        //         23381000000, // high\n        //         23315000000, // low\n        //         23367000000, // close\n        //         208671000, // base volume\n        //         48759063370, // quote volume\n        //     ]\n        //\n        let baseVolume = undefined;\n        if ((market !== undefined) && market['spot']) {\n            baseVolume = this.fromEv (this.safeNumber (ohlcv, 7), market);\n        } else {\n            baseVolume = this.safeInteger (ohlcv, 7);\n        }\n        return [\n            this.safeTimestamp (ohlcv, 0),\n            this.fromEp (this.safeNumber (ohlcv, 3), market),\n            this.fromEp (this.safeNumber (ohlcv, 4), market),\n            this.fromEp (this.safeNumber (ohlcv, 5), market),\n            this.fromEp (this.safeNumber (ohlcv, 6), market),\n            baseVolume,\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        const request = {\n            // 'symbol': market['id'],\n            'resolution': this.timeframes[timeframe],\n            // 'from': 1588830682, // seconds\n            // 'to': this.seconds (),\n        };\n        const duration = this.parseTimeframe (timeframe);\n        const now = this.seconds ();\n        if (since !== undefined) {\n            if (limit === undefined) {\n                limit = 2000; // max 2000\n            }\n            since = parseInt (since / 1000);\n            request['from'] = since;\n            // time ranges ending in the future are not accepted\n            // https://github.com/ccxt/ccxt/issues/8050\n            request['to'] = Math.min (now, this.sum (since, duration * limit));\n        } else if (limit !== undefined) {\n            limit = Math.min (limit, 2000);\n            request['from'] = now - duration * this.sum (limit, 1);\n            request['to'] = now;\n        } else {\n            throw new ArgumentsRequired (this.id + ' fetchOHLCV() requires a since argument, or a limit argument, or both');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        request['symbol'] = market['id'];\n        const response = await this.publicGetMdKline (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"OK\",\n        //         \"data\":{\n        //             \"total\":-1,\n        //             \"rows\":[\n        //                 [1592467200,300,23376000000,23322000000,23381000000,23315000000,23367000000,208671000,48759063370],\n        //                 [1592467500,300,23367000000,23314000000,23390000000,23311000000,23331000000,234820000,54848948710],\n        //                 [1592467800,300,23331000000,23385000000,23391000000,23326000000,23387000000,152931000,35747882250],\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const rows = this.safeValue (data, 'rows', []);\n        return this.parseOHLCVs (rows, market, timeframe, since, limit);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        // spot\n        //\n        //     {\n        //         \"askEp\": 943836000000,\n        //         \"bidEp\": 943601000000,\n        //         \"highEp\": 955946000000,\n        //         \"lastEp\": 943803000000,\n        //         \"lowEp\": 924973000000,\n        //         \"openEp\": 948693000000,\n        //         \"symbol\": \"sBTCUSDT\",\n        //         \"timestamp\": 1592471203505728630,\n        //         \"turnoverEv\": 111822826123103,\n        //         \"volumeEv\": 11880532281\n        //     }\n        //\n        // swap\n        //\n        //     {\n        //         \"askEp\": 2332500,\n        //         \"bidEp\": 2331000,\n        //         \"fundingRateEr\": 10000,\n        //         \"highEp\": 2380000,\n        //         \"indexEp\": 2329057,\n        //         \"lastEp\": 2331500,\n        //         \"lowEp\": 2274000,\n        //         \"markEp\": 2329232,\n        //         \"openEp\": 2337500,\n        //         \"openInterest\": 1298050,\n        //         \"predFundingRateEr\": 19921,\n        //         \"symbol\": \"ETHUSD\",\n        //         \"timestamp\": 1592474241582701416,\n        //         \"turnoverEv\": 47228362330,\n        //         \"volume\": 4053863\n        //     }\n        //\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const timestamp = this.safeIntegerProduct (ticker, 'timestamp', 0.000001);\n        const last = this.fromEp (this.safeNumber (ticker, 'lastEp'), market);\n        const quoteVolume = this.fromEp (this.safeNumber (ticker, 'turnoverEv'), market);\n        let baseVolume = this.safeNumber (ticker, 'volume');\n        if (baseVolume === undefined) {\n            baseVolume = this.fromEv (this.safeNumber (ticker, 'volumeEv'));\n        }\n        let vwap = undefined;\n        if ((market !== undefined) && (market['spot'])) {\n            vwap = this.vwap (baseVolume, quoteVolume);\n        }\n        let change = undefined;\n        let percentage = undefined;\n        let average = undefined;\n        const open = this.fromEp (this.safeNumber (ticker, 'openEp'), market);\n        if ((open !== undefined) && (last !== undefined)) {\n            change = last - open;\n            if (open > 0) {\n                percentage = change / open * 100;\n            }\n            average = this.sum (open, last) / 2;\n        }\n        const result = {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.fromEp (this.safeNumber (ticker, 'highEp'), market),\n            'low': this.fromEp (this.safeNumber (ticker, 'lowEp'), market),\n            'bid': this.fromEp (this.safeNumber (ticker, 'bidEp'), market),\n            'bidVolume': undefined,\n            'ask': this.fromEp (this.safeNumber (ticker, 'askEp'), market),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined, // previous day close\n            'change': change,\n            'percentage': percentage,\n            'average': average,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            // 'id': 123456789, // optional request id\n        };\n        const method = market['spot'] ? 'v1GetMdSpotTicker24hr' : 'v1GetMdTicker24hr';\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"error\": null,\n        //         \"id\": 0,\n        //         \"result\": {\n        //             \"askEp\": 943836000000,\n        //             \"bidEp\": 943601000000,\n        //             \"highEp\": 955946000000,\n        //             \"lastEp\": 943803000000,\n        //             \"lowEp\": 924973000000,\n        //             \"openEp\": 948693000000,\n        //             \"symbol\": \"sBTCUSDT\",\n        //             \"timestamp\": 1592471203505728630,\n        //             \"turnoverEv\": 111822826123103,\n        //             \"volumeEv\": 11880532281\n        //         }\n        //     }\n        //\n        // swap\n        //\n        //     {\n        //         \"error\": null,\n        //         \"id\": 0,\n        //         \"result\": {\n        //             \"askEp\": 2332500,\n        //             \"bidEp\": 2331000,\n        //             \"fundingRateEr\": 10000,\n        //             \"highEp\": 2380000,\n        //             \"indexEp\": 2329057,\n        //             \"lastEp\": 2331500,\n        //             \"lowEp\": 2274000,\n        //             \"markEp\": 2329232,\n        //             \"openEp\": 2337500,\n        //             \"openInterest\": 1298050,\n        //             \"predFundingRateEr\": 19921,\n        //             \"symbol\": \"ETHUSD\",\n        //             \"timestamp\": 1592474241582701416,\n        //             \"turnoverEv\": 47228362330,\n        //             \"volume\": 4053863\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        return this.parseTicker (result, market);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            // 'id': 123456789, // optional request id\n        };\n        const response = await this.v1GetMdTrade (this.extend (request, params));\n        //\n        //     {\n        //         \"error\": null,\n        //         \"id\": 0,\n        //         \"result\": {\n        //             \"sequence\": 1315644947,\n        //             \"symbol\": \"BTCUSD\",\n        //             \"trades\": [\n        //                 [ 1592541746712239749, 13156448570000, \"Buy\", 93070000, 40173 ],\n        //                 [ 1592541740434625085, 13156447110000, \"Sell\", 93065000, 5000 ],\n        //                 [ 1592541732958241616, 13156441390000, \"Buy\", 93070000, 3460 ],\n        //             ],\n        //             \"type\": \"snapshot\"\n        //         }\n        //     }\n        //\n        const result = this.safeValue (response, 'result', {});\n        const trades = this.safeValue (result, 'trades', []);\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     [\n        //         1592541746712239749,\n        //         13156448570000,\n        //         \"Buy\",\n        //         93070000,\n        //         40173\n        //     ]\n        //\n        // fetchMyTrades (private)\n        //\n        // spot\n        //\n        //     {\n        //         \"qtyType\": \"ByQuote\",\n        //         \"transactTimeNs\": 1589450974800550100,\n        //         \"clOrdID\": \"8ba59d40-df25-d4b0-14cf-0703f44e9690\",\n        //         \"orderID\": \"b2b7018d-f02f-4c59-b4cf-051b9c2d2e83\",\n        //         \"symbol\": \"sBTCUSDT\",\n        //         \"side\": \"Buy\",\n        //         \"priceEP\": 970056000000,\n        //         \"baseQtyEv\": 0,\n        //         \"quoteQtyEv\": 1000000000,\n        //         \"action\": \"New\",\n        //         \"execStatus\": \"MakerFill\",\n        //         \"ordStatus\": \"Filled\",\n        //         \"ordType\": \"Limit\",\n        //         \"execInst\": \"None\",\n        //         \"timeInForce\": \"GoodTillCancel\",\n        //         \"stopDirection\": \"UNSPECIFIED\",\n        //         \"tradeType\": \"Trade\",\n        //         \"stopPxEp\": 0,\n        //         \"execId\": \"c6bd8979-07ba-5946-b07e-f8b65135dbb1\",\n        //         \"execPriceEp\": 970056000000,\n        //         \"execBaseQtyEv\": 103000,\n        //         \"execQuoteQtyEv\": 999157680,\n        //         \"leavesBaseQtyEv\": 0,\n        //         \"leavesQuoteQtyEv\": 0,\n        //         \"execFeeEv\": 0,\n        //         \"feeRateEr\": 0\n        //     }\n        //\n        // swap\n        //\n        //     {\n        //         \"transactTimeNs\": 1578026629824704800,\n        //         \"symbol\": \"BTCUSD\",\n        //         \"currency\": \"BTC\",\n        //         \"action\": \"Replace\",\n        //         \"side\": \"Sell\",\n        //         \"tradeType\": \"Trade\",\n        //         \"execQty\": 700,\n        //         \"execPriceEp\": 71500000,\n        //         \"orderQty\": 700,\n        //         \"priceEp\": 71500000,\n        //         \"execValueEv\": 9790209,\n        //         \"feeRateEr\": -25000,\n        //         \"execFeeEv\": -2447,\n        //         \"ordType\": \"Limit\",\n        //         \"execID\": \"b01671a1-5ddc-5def-b80a-5311522fd4bf\",\n        //         \"orderID\": \"b63bc982-be3a-45e0-8974-43d6375fb626\",\n        //         \"clOrdID\": \"uuid-1577463487504\",\n        //         \"execStatus\": \"MakerFill\"\n        //     }\n        //\n        let price = undefined;\n        let amount = undefined;\n        let timestamp = undefined;\n        let id = undefined;\n        let side = undefined;\n        let cost = undefined;\n        let type = undefined;\n        let fee = undefined;\n        const marketId = this.safeString (trade, 'symbol');\n        market = this.safeMarket (marketId, market);\n        const symbol = market['symbol'];\n        let orderId = undefined;\n        let takerOrMaker = undefined;\n        if (Array.isArray (trade)) {\n            const tradeLength = trade.length;\n            timestamp = this.safeIntegerProduct (trade, 0, 0.000001);\n            if (tradeLength > 4) {\n                id = this.safeString (trade, tradeLength - 4);\n            }\n            side = this.safeStringLower (trade, tradeLength - 3);\n            price = this.fromEp (this.safeNumber (trade, tradeLength - 2), market);\n            amount = this.fromEv (this.safeNumber (trade, tradeLength - 1), market);\n            if (market['spot']) {\n                if ((price !== undefined) && (amount !== undefined)) {\n                    cost = price * amount;\n                }\n            }\n        } else {\n            timestamp = this.safeIntegerProduct (trade, 'transactTimeNs', 0.000001);\n            id = this.safeString2 (trade, 'execId', 'execID');\n            orderId = this.safeString (trade, 'orderID');\n            side = this.safeStringLower (trade, 'side');\n            type = this.parseOrderType (this.safeString (trade, 'ordType'));\n            const execStatus = this.safeString (trade, 'execStatus');\n            if (execStatus === 'MakerFill') {\n                takerOrMaker = 'maker';\n            }\n            price = this.fromEp (this.safeNumber (trade, 'execPriceEp'), market);\n            amount = this.fromEv (this.safeNumber (trade, 'execBaseQtyEv'), market);\n            amount = this.safeNumber (trade, 'execQty', amount);\n            cost = this.fromEv (this.safeNumber2 (trade, 'execQuoteQtyEv', 'execValueEv'), market);\n            const feeCost = this.fromEv (this.safeNumber (trade, 'execFeeEv'), market);\n            if (feeCost !== undefined) {\n                let feeRate = undefined;\n                let feeRateEr = this.safeNumber (trade, 'feeRateEr');\n                if (feeRateEr < 0) {\n                    feeRateEr = Math.abs (feeRateEr);\n                    feeRate = this.fromEr (feeRateEr, market);\n                    feeRate = -feeRate;\n                } else {\n                    feeRate = this.fromEr (feeRateEr, market);\n                }\n                let feeCurrencyCode = undefined;\n                if (market['spot']) {\n                    feeCurrencyCode = (side === 'buy') ? market['base'] : market['quote'];\n                } else {\n                    const info = this.safeValue (market, 'info');\n                    if (info !== undefined) {\n                        const settlementCurrencyId = this.safeString (info, 'settlementCurrency');\n                        feeCurrencyCode = this.safeCurrencyCode (settlementCurrencyId);\n                    }\n                }\n                fee = {\n                    'cost': feeCost,\n                    'rate': feeRate,\n                    'currency': feeCurrencyCode,\n                };\n            }\n        }\n        return {\n            'info': trade,\n            'id': id,\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'order': orderId,\n            'type': type,\n            'side': side,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    parseSpotBalance (response) {\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"\",\n        //         \"data\":[\n        //             {\n        //                 \"currency\":\"USDT\",\n        //                 \"balanceEv\":0,\n        //                 \"lockedTradingBalanceEv\":0,\n        //                 \"lockedWithdrawEv\":0,\n        //                 \"lastUpdateTimeNs\":1592065834511322514,\n        //                 \"walletVid\":0\n        //             },\n        //             {\n        //                 \"currency\":\"ETH\",\n        //                 \"balanceEv\":0,\n        //                 \"lockedTradingBalanceEv\":0,\n        //                 \"lockedWithdrawEv\":0,\n        //                 \"lastUpdateTimeNs\":1592065834511322514,\n        //                 \"walletVid\":0\n        //             }\n        //         ]\n        //     }\n        //\n        let timestamp = undefined;\n        const result = { 'info': response };\n        const data = this.safeValue (response, 'data', []);\n        for (let i = 0; i < data.length; i++) {\n            const balance = data[i];\n            const currencyId = this.safeString (balance, 'currency');\n            const code = this.safeCurrencyCode (currencyId);\n            const currency = this.safeValue (this.currencies, code, {});\n            const scale = this.safeInteger (currency, 'valueScale', 8);\n            const account = this.account ();\n            const balanceEv = this.safeNumber (balance, 'balanceEv');\n            const lockedTradingBalanceEv = this.safeNumber (balance, 'lockedTradingBalanceEv');\n            const lockedWithdrawEv = this.safeNumber (balance, 'lockedWithdrawEv');\n            const total = this.fromEn (balanceEv, scale, scale, DECIMAL_PLACES);\n            const lockedTradingBalance = this.fromEn (lockedTradingBalanceEv, scale, scale, DECIMAL_PLACES);\n            const lockedWithdraw = this.fromEn (lockedWithdrawEv, scale, scale, DECIMAL_PLACES);\n            const used = this.sum (lockedTradingBalance, lockedWithdraw);\n            const lastUpdateTimeNs = this.safeIntegerProduct (balance, 'lastUpdateTimeNs', 0.000001);\n            timestamp = (timestamp === undefined) ? lastUpdateTimeNs : Math.max (timestamp, lastUpdateTimeNs);\n            account['total'] = total;\n            account['used'] = used;\n            result[code] = account;\n        }\n        result['timestamp'] = timestamp;\n        result['datetime'] = this.iso8601 (timestamp);\n        return this.parseBalance (result);\n    }\n\n    parseSwapBalance (response) {\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"\",\n        //         \"data\":{\n        //             \"account\":{\n        //                 \"accountId\":6192120001,\n        //                 \"currency\":\"BTC\",\n        //                 \"accountBalanceEv\":1254744,\n        //                 \"totalUsedBalanceEv\":0,\n        //                 \"bonusBalanceEv\":1254744\n        //             },\n        //             \"positions\":[\n        //                 {\n        //                     \"accountID\":6192120001,\n        //                     \"symbol\":\"BTCUSD\",\n        //                     \"currency\":\"BTC\",\n        //                     \"side\":\"None\",\n        //                     \"positionStatus\":\"Normal\",\n        //                     \"crossMargin\":false,\n        //                     \"leverageEr\":0,\n        //                     \"leverage\":0E-8,\n        //                     \"initMarginReqEr\":1000000,\n        //                     \"initMarginReq\":0.01000000,\n        //                     \"maintMarginReqEr\":500000,\n        //                     \"maintMarginReq\":0.00500000,\n        //                     \"riskLimitEv\":10000000000,\n        //                     \"riskLimit\":100.00000000,\n        //                     \"size\":0,\n        //                     \"value\":0E-8,\n        //                     \"valueEv\":0,\n        //                     \"avgEntryPriceEp\":0,\n        //                     \"avgEntryPrice\":0E-8,\n        //                     \"posCostEv\":0,\n        //                     \"posCost\":0E-8,\n        //                     \"assignedPosBalanceEv\":0,\n        //                     \"assignedPosBalance\":0E-8,\n        //                     \"bankruptCommEv\":0,\n        //                     \"bankruptComm\":0E-8,\n        //                     \"bankruptPriceEp\":0,\n        //                     \"bankruptPrice\":0E-8,\n        //                     \"positionMarginEv\":0,\n        //                     \"positionMargin\":0E-8,\n        //                     \"liquidationPriceEp\":0,\n        //                     \"liquidationPrice\":0E-8,\n        //                     \"deleveragePercentileEr\":0,\n        //                     \"deleveragePercentile\":0E-8,\n        //                     \"buyValueToCostEr\":1150750,\n        //                     \"buyValueToCost\":0.01150750,\n        //                     \"sellValueToCostEr\":1149250,\n        //                     \"sellValueToCost\":0.01149250,\n        //                     \"markPriceEp\":96359083,\n        //                     \"markPrice\":9635.90830000,\n        //                     \"markValueEv\":0,\n        //                     \"markValue\":null,\n        //                     \"unRealisedPosLossEv\":0,\n        //                     \"unRealisedPosLoss\":null,\n        //                     \"estimatedOrdLossEv\":0,\n        //                     \"estimatedOrdLoss\":0E-8,\n        //                     \"usedBalanceEv\":0,\n        //                     \"usedBalance\":0E-8,\n        //                     \"takeProfitEp\":0,\n        //                     \"takeProfit\":null,\n        //                     \"stopLossEp\":0,\n        //                     \"stopLoss\":null,\n        //                     \"realisedPnlEv\":0,\n        //                     \"realisedPnl\":null,\n        //                     \"cumRealisedPnlEv\":0,\n        //                     \"cumRealisedPnl\":null\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const result = { 'info': response };\n        const data = this.safeValue (response, 'data', {});\n        const balance = this.safeValue (data, 'account', {});\n        const currencyId = this.safeString (balance, 'currency');\n        const code = this.safeCurrencyCode (currencyId);\n        const currency = this.currency (code);\n        const account = this.account ();\n        const accountBalanceEv = this.safeNumber (balance, 'accountBalanceEv');\n        const totalUsedBalanceEv = this.safeNumber (balance, 'totalUsedBalanceEv');\n        const valueScale = this.safeInteger (currency, 'valueScale', 8);\n        account['total'] = this.fromEn (accountBalanceEv, valueScale, valueScale, DECIMAL_PLACES);\n        account['used'] = this.fromEn (totalUsedBalanceEv, valueScale, valueScale, DECIMAL_PLACES);\n        result[code] = account;\n        return this.parseBalance (result);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const defaultType = this.safeString2 (this.options, 'defaultType', 'fetchBalance', 'spot');\n        const type = this.safeString (params, 'type', defaultType);\n        let method = 'privateGetSpotWallets';\n        const request = {};\n        if (type === 'swap') {\n            const code = this.safeString (params, 'code');\n            if (code !== undefined) {\n                const currency = this.currency (code);\n                request['currency'] = currency['id'];\n                params = this.omit (params, 'code');\n            } else {\n                const currency = this.safeString (params, 'currency');\n                if (currency === undefined) {\n                    throw new ArgumentsRequired (this.id + ' fetchBalance() requires a code parameter or a currency parameter for ' + type + ' type');\n                }\n            }\n            method = 'privateGetAccountsAccountPositions';\n        }\n        params = this.omit (params, 'type');\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"\",\n        //         \"data\":[\n        //             {\n        //                 \"currency\":\"USDT\",\n        //                 \"balanceEv\":0,\n        //                 \"lockedTradingBalanceEv\":0,\n        //                 \"lockedWithdrawEv\":0,\n        //                 \"lastUpdateTimeNs\":1592065834511322514,\n        //                 \"walletVid\":0\n        //             },\n        //             {\n        //                 \"currency\":\"ETH\",\n        //                 \"balanceEv\":0,\n        //                 \"lockedTradingBalanceEv\":0,\n        //                 \"lockedWithdrawEv\":0,\n        //                 \"lastUpdateTimeNs\":1592065834511322514,\n        //                 \"walletVid\":0\n        //             }\n        //         ]\n        //     }\n        //\n        // swap\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"\",\n        //         \"data\":{\n        //             \"account\":{\n        //                 \"accountId\":6192120001,\n        //                 \"currency\":\"BTC\",\n        //                 \"accountBalanceEv\":1254744,\n        //                 \"totalUsedBalanceEv\":0,\n        //                 \"bonusBalanceEv\":1254744\n        //             },\n        //             \"positions\":[\n        //                 {\n        //                     \"accountID\":6192120001,\n        //                     \"symbol\":\"BTCUSD\",\n        //                     \"currency\":\"BTC\",\n        //                     \"side\":\"None\",\n        //                     \"positionStatus\":\"Normal\",\n        //                     \"crossMargin\":false,\n        //                     \"leverageEr\":0,\n        //                     \"leverage\":0E-8,\n        //                     \"initMarginReqEr\":1000000,\n        //                     \"initMarginReq\":0.01000000,\n        //                     \"maintMarginReqEr\":500000,\n        //                     \"maintMarginReq\":0.00500000,\n        //                     \"riskLimitEv\":10000000000,\n        //                     \"riskLimit\":100.00000000,\n        //                     \"size\":0,\n        //                     \"value\":0E-8,\n        //                     \"valueEv\":0,\n        //                     \"avgEntryPriceEp\":0,\n        //                     \"avgEntryPrice\":0E-8,\n        //                     \"posCostEv\":0,\n        //                     \"posCost\":0E-8,\n        //                     \"assignedPosBalanceEv\":0,\n        //                     \"assignedPosBalance\":0E-8,\n        //                     \"bankruptCommEv\":0,\n        //                     \"bankruptComm\":0E-8,\n        //                     \"bankruptPriceEp\":0,\n        //                     \"bankruptPrice\":0E-8,\n        //                     \"positionMarginEv\":0,\n        //                     \"positionMargin\":0E-8,\n        //                     \"liquidationPriceEp\":0,\n        //                     \"liquidationPrice\":0E-8,\n        //                     \"deleveragePercentileEr\":0,\n        //                     \"deleveragePercentile\":0E-8,\n        //                     \"buyValueToCostEr\":1150750,\n        //                     \"buyValueToCost\":0.01150750,\n        //                     \"sellValueToCostEr\":1149250,\n        //                     \"sellValueToCost\":0.01149250,\n        //                     \"markPriceEp\":96359083,\n        //                     \"markPrice\":9635.90830000,\n        //                     \"markValueEv\":0,\n        //                     \"markValue\":null,\n        //                     \"unRealisedPosLossEv\":0,\n        //                     \"unRealisedPosLoss\":null,\n        //                     \"estimatedOrdLossEv\":0,\n        //                     \"estimatedOrdLoss\":0E-8,\n        //                     \"usedBalanceEv\":0,\n        //                     \"usedBalance\":0E-8,\n        //                     \"takeProfitEp\":0,\n        //                     \"takeProfit\":null,\n        //                     \"stopLossEp\":0,\n        //                     \"stopLoss\":null,\n        //                     \"realisedPnlEv\":0,\n        //                     \"realisedPnl\":null,\n        //                     \"cumRealisedPnlEv\":0,\n        //                     \"cumRealisedPnl\":null\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const result = (type === 'swap') ? this.parseSwapBalance (response) : this.parseSpotBalance (response);\n        return result;\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            'Created': 'open',\n            'Untriggered': 'open',\n            'Deactivated': 'closed',\n            'Triggered': 'open',\n            'Rejected': 'rejected',\n            'New': 'open',\n            'PartiallyFilled': 'open',\n            'Filled': 'closed',\n            'Canceled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrderType (type) {\n        const types = {\n            'Limit': 'limit',\n            'Market': 'market',\n        };\n        return this.safeString (types, type, type);\n    }\n\n    parseTimeInForce (timeInForce) {\n        const timeInForces = {\n            'GoodTillCancel': 'GTC',\n            'PostOnly': 'PO',\n            'ImmediateOrCancel': 'IOC',\n            'FillOrKill': 'FOK',\n        };\n        return this.safeString (timeInForces, timeInForce, timeInForce);\n    }\n\n    parseSpotOrder (order, market = undefined) {\n        //\n        // spot\n        //\n        //     {\n        //         \"orderID\": \"d1d09454-cabc-4a23-89a7-59d43363f16d\",\n        //         \"clOrdID\": \"309bcd5c-9f6e-4a68-b775-4494542eb5cb\",\n        //         \"priceEp\": 0,\n        //         \"action\": \"New\",\n        //         \"trigger\": \"UNSPECIFIED\",\n        //         \"pegPriceType\": \"UNSPECIFIED\",\n        //         \"stopDirection\": \"UNSPECIFIED\",\n        //         \"bizError\": 0,\n        //         \"symbol\": \"sBTCUSDT\",\n        //         \"side\": \"Buy\",\n        //         \"baseQtyEv\": 0,\n        //         \"ordType\": \"Limit\",\n        //         \"timeInForce\": \"GoodTillCancel\",\n        //         \"ordStatus\": \"Created\",\n        //         \"cumFeeEv\": 0,\n        //         \"cumBaseQtyEv\": 0,\n        //         \"cumQuoteQtyEv\": 0,\n        //         \"leavesBaseQtyEv\": 0,\n        //         \"leavesQuoteQtyEv\": 0,\n        //         \"avgPriceEp\": 0,\n        //         \"cumBaseAmountEv\": 0,\n        //         \"cumQuoteAmountEv\": 0,\n        //         \"quoteQtyEv\": 0,\n        //         \"qtyType\": \"ByBase\",\n        //         \"stopPxEp\": 0,\n        //         \"pegOffsetValueEp\": 0\n        //     }\n        //\n        //     {\n        //         \"orderID\":\"99232c3e-3d6a-455f-98cc-2061cdfe91bc\",\n        //         \"stopPxEp\":0,\n        //         \"avgPriceEp\":0,\n        //         \"qtyType\":\"ByBase\",\n        //         \"leavesBaseQtyEv\":0,\n        //         \"leavesQuoteQtyEv\":0,\n        //         \"baseQtyEv\":\"1000000000\",\n        //         \"feeCurrency\":\"4\",\n        //         \"stopDirection\":\"UNSPECIFIED\",\n        //         \"symbol\":\"sETHUSDT\",\n        //         \"side\":\"Buy\",\n        //         \"quoteQtyEv\":250000000000,\n        //         \"priceEp\":25000000000,\n        //         \"ordType\":\"Limit\",\n        //         \"timeInForce\":\"GoodTillCancel\",\n        //         \"ordStatus\":\"Rejected\",\n        //         \"execStatus\":\"NewRejected\",\n        //         \"createTimeNs\":1592675305266037130,\n        //         \"cumFeeEv\":0,\n        //         \"cumBaseValueEv\":0,\n        //         \"cumQuoteValueEv\":0\n        //     }\n        //\n        const id = this.safeString (order, 'orderID');\n        let clientOrderId = this.safeString (order, 'clOrdID');\n        if ((clientOrderId !== undefined) && (clientOrderId.length < 1)) {\n            clientOrderId = undefined;\n        }\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        let price = this.fromEp (this.safeNumber (order, 'priceEp'), market);\n        if (price === 0) {\n            price = undefined;\n        }\n        const amount = this.fromEv (this.safeNumber (order, 'baseQtyEv'), market);\n        const remaining = this.fromEv (this.safeNumber (order, 'leavesBaseQtyEv'), market);\n        let filled = this.fromEv (this.safeNumber (order, 'cumBaseQtyEv'), market);\n        const cost = this.fromEv (this.safeNumber (order, 'quoteQtyEv'), market);\n        const average = this.fromEp (this.safeNumber (order, 'avgPriceEp'), market);\n        const status = this.parseOrderStatus (this.safeString (order, 'ordStatus'));\n        const side = this.safeStringLower (order, 'side');\n        const type = this.parseOrderType (this.safeString (order, 'ordType'));\n        const timestamp = this.safeIntegerProduct2 (order, 'actionTimeNs', 'createTimeNs', 0.000001);\n        let fee = undefined;\n        const feeCost = this.fromEv (this.safeNumber (order, 'cumFeeEv'), market);\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'currency': undefined,\n            };\n        }\n        if (filled === undefined) {\n            if ((amount !== undefined) && (remaining !== undefined)) {\n                filled = Math.min (0, amount - remaining);\n            }\n        }\n        const timeInForce = this.parseTimeInForce (this.safeString (order, 'timeInForce'));\n        const stopPrice = this.fromEp (this.safeNumber (order, 'stopPxEp', market));\n        const postOnly = (timeInForce === 'PO');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'cost': cost,\n            'average': average,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n            'trades': undefined,\n        };\n    }\n\n    parseSwapOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"bizError\":0,\n        //         \"orderID\":\"7a1ad384-44a3-4e54-a102-de4195a29e32\",\n        //         \"clOrdID\":\"\",\n        //         \"symbol\":\"ETHUSD\",\n        //         \"side\":\"Buy\",\n        //         \"actionTimeNs\":1592668973945065381,\n        //         \"transactTimeNs\":0,\n        //         \"orderType\":\"Market\",\n        //         \"priceEp\":2267500,\n        //         \"price\":226.75000000,\n        //         \"orderQty\":1,\n        //         \"displayQty\":0,\n        //         \"timeInForce\":\"ImmediateOrCancel\",\n        //         \"reduceOnly\":false,\n        //         \"closedPnlEv\":0,\n        //         \"closedPnl\":0E-8,\n        //         \"closedSize\":0,\n        //         \"cumQty\":0,\n        //         \"cumValueEv\":0,\n        //         \"cumValue\":0E-8,\n        //         \"leavesQty\":1,\n        //         \"leavesValueEv\":11337,\n        //         \"leavesValue\":1.13370000,\n        //         \"stopDirection\":\"UNSPECIFIED\",\n        //         \"stopPxEp\":0,\n        //         \"stopPx\":0E-8,\n        //         \"trigger\":\"UNSPECIFIED\",\n        //         \"pegOffsetValueEp\":0,\n        //         \"execStatus\":\"PendingNew\",\n        //         \"pegPriceType\":\"UNSPECIFIED\",\n        //         \"ordStatus\":\"Created\"\n        //     }\n        //\n        const id = this.safeString (order, 'orderID');\n        let clientOrderId = this.safeString (order, 'clOrdID');\n        if ((clientOrderId !== undefined) && (clientOrderId.length < 1)) {\n            clientOrderId = undefined;\n        }\n        const marketId = this.safeString (order, 'symbol');\n        const symbol = this.safeSymbol (marketId, market);\n        const status = this.parseOrderStatus (this.safeString (order, 'ordStatus'));\n        const side = this.safeStringLower (order, 'side');\n        const type = this.parseOrderType (this.safeString (order, 'orderType'));\n        const price = this.fromEp (this.safeNumber (order, 'priceEp'), market);\n        const amount = this.safeNumber (order, 'orderQty');\n        const filled = this.safeNumber (order, 'cumQty');\n        const remaining = this.safeNumber (order, 'leavesQty');\n        const timestamp = this.safeIntegerProduct (order, 'actionTimeNs', 0.000001);\n        const cost = this.safeNumber (order, 'cumValue');\n        let lastTradeTimestamp = this.safeIntegerProduct (order, 'transactTimeNs', 0.000001);\n        if (lastTradeTimestamp === 0) {\n            lastTradeTimestamp = undefined;\n        }\n        const timeInForce = this.parseTimeInForce (this.safeString (order, 'timeInForce'));\n        const stopPrice = this.safeNumber (order, 'stopPx');\n        const postOnly = (timeInForce === 'PO');\n        return {\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': lastTradeTimestamp,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': timeInForce,\n            'postOnly': postOnly,\n            'side': side,\n            'price': price,\n            'stopPrice': stopPrice,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'cost': cost,\n            'average': undefined,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        };\n    }\n\n    parseOrder (order, market = undefined) {\n        if ('closedPnl' in order) {\n            return this.parseSwapOrder (order, market);\n        }\n        return this.parseSpotOrder (order, market);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        side = this.capitalize (side);\n        type = this.capitalize (type);\n        const request = {\n            // common\n            'symbol': market['id'],\n            'side': side, // Sell, Buy\n            'ordType': type, // Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched or Pegged for swap orders\n            // 'stopPxEp': this.toEp (stopPx, market), // for conditional orders\n            // 'priceEp': this.toEp (price, market), // required for limit orders\n            // 'timeInForce': 'GoodTillCancel', // GoodTillCancel, PostOnly, ImmediateOrCancel, FillOrKill\n            // ----------------------------------------------------------------\n            // spot\n            // 'qtyType': 'ByBase', // ByBase, ByQuote\n            // 'quoteQtyEv': this.toEp (cost, market),\n            // 'baseQtyEv': this.toEv (amount, market),\n            // 'trigger': 'ByLastPrice', // required for conditional orders\n            // ----------------------------------------------------------------\n            // swap\n            // 'clOrdID': this.uuid (), // max length 40\n            // 'orderQty': this.amountToPrecision (amount, symbol),\n            // 'reduceOnly': false,\n            // 'closeOnTrigger': false, // implicit reduceOnly and cancel other orders in the same direction\n            // 'takeProfitEp': this.toEp (takeProfit, market),\n            // 'stopLossEp': this.toEp (stopLossEp, market),\n            // 'triggerType': 'ByMarkPrice', // ByMarkPrice, ByLastPrice\n            // 'pegOffsetValueEp': integer, // Trailing offset from current price. Negative value when position is long, positive when position is short\n            // 'pegPriceType': 'TrailingStopPeg', // TrailingTakeProfitPeg\n            // 'text': 'comment',\n        };\n        if (market['spot']) {\n            let qtyType = this.safeValue (params, 'qtyType', 'ByBase');\n            if ((type === 'Market') || (type === 'Stop') || (type === 'MarketIfTouched')) {\n                if (price !== undefined) {\n                    qtyType = 'ByQuote';\n                }\n            }\n            request['qtyType'] = qtyType;\n            if (qtyType === 'ByQuote') {\n                let cost = this.safeNumber (params, 'cost');\n                params = this.omit (params, 'cost');\n                if (this.options['createOrderByQuoteRequiresPrice']) {\n                    if (price !== undefined) {\n                        cost = amount * price;\n                    } else if (cost === undefined) {\n                        throw new ArgumentsRequired (this.id + ' createOrder() ' + qtyType + ' requires a price argument or a cost parameter');\n                    }\n                }\n                cost = (cost === undefined) ? amount : cost;\n                request['quoteQtyEv'] = this.toEp (cost, market);\n            } else {\n                request['baseQtyEv'] = this.toEv (amount, market);\n            }\n        } else if (market['swap']) {\n            request['orderQty'] = parseInt (amount);\n        }\n        if (type === 'Limit') {\n            request['priceEp'] = this.toEp (price, market);\n        }\n        const stopPrice = this.safeNumber2 (params, 'stopPx', 'stopPrice');\n        if (stopPrice !== undefined) {\n            request['stopPxEp'] = this.toEp (stopPrice, market);\n        }\n        params = this.omit (params, [ 'stopPx', 'stopPrice' ]);\n        const method = market['spot'] ? 'privatePostSpotOrders' : 'privatePostOrders';\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"msg\": \"\",\n        //         \"data\": {\n        //             \"orderID\": \"d1d09454-cabc-4a23-89a7-59d43363f16d\",\n        //             \"clOrdID\": \"309bcd5c-9f6e-4a68-b775-4494542eb5cb\",\n        //             \"priceEp\": 0,\n        //             \"action\": \"New\",\n        //             \"trigger\": \"UNSPECIFIED\",\n        //             \"pegPriceType\": \"UNSPECIFIED\",\n        //             \"stopDirection\": \"UNSPECIFIED\",\n        //             \"bizError\": 0,\n        //             \"symbol\": \"sBTCUSDT\",\n        //             \"side\": \"Buy\",\n        //             \"baseQtyEv\": 0,\n        //             \"ordType\": \"Limit\",\n        //             \"timeInForce\": \"GoodTillCancel\",\n        //             \"ordStatus\": \"Created\",\n        //             \"cumFeeEv\": 0,\n        //             \"cumBaseQtyEv\": 0,\n        //             \"cumQuoteQtyEv\": 0,\n        //             \"leavesBaseQtyEv\": 0,\n        //             \"leavesQuoteQtyEv\": 0,\n        //             \"avgPriceEp\": 0,\n        //             \"cumBaseAmountEv\": 0,\n        //             \"cumQuoteAmountEv\": 0,\n        //             \"quoteQtyEv\": 0,\n        //             \"qtyType\": \"ByBase\",\n        //             \"stopPxEp\": 0,\n        //             \"pegOffsetValueEp\": 0\n        //         }\n        //     }\n        //\n        // swap\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"\",\n        //         \"data\":{\n        //             \"bizError\":0,\n        //             \"orderID\":\"7a1ad384-44a3-4e54-a102-de4195a29e32\",\n        //             \"clOrdID\":\"\",\n        //             \"symbol\":\"ETHUSD\",\n        //             \"side\":\"Buy\",\n        //             \"actionTimeNs\":1592668973945065381,\n        //             \"transactTimeNs\":0,\n        //             \"orderType\":\"Market\",\n        //             \"priceEp\":2267500,\n        //             \"price\":226.75000000,\n        //             \"orderQty\":1,\n        //             \"displayQty\":0,\n        //             \"timeInForce\":\"ImmediateOrCancel\",\n        //             \"reduceOnly\":false,\n        //             \"closedPnlEv\":0,\n        //             \"closedPnl\":0E-8,\n        //             \"closedSize\":0,\n        //             \"cumQty\":0,\n        //             \"cumValueEv\":0,\n        //             \"cumValue\":0E-8,\n        //             \"leavesQty\":1,\n        //             \"leavesValueEv\":11337,\n        //             \"leavesValue\":1.13370000,\n        //             \"stopDirection\":\"UNSPECIFIED\",\n        //             \"stopPxEp\":0,\n        //             \"stopPx\":0E-8,\n        //             \"trigger\":\"UNSPECIFIED\",\n        //             \"pegOffsetValueEp\":0,\n        //             \"execStatus\":\"PendingNew\",\n        //             \"pegPriceType\":\"UNSPECIFIED\",\n        //             \"ordStatus\":\"Created\"\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' cancelOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'clOrdID');\n        params = this.omit (params, [ 'clientOrderId', 'clOrdID' ]);\n        if (clientOrderId !== undefined) {\n            request['clOrdID'] = clientOrderId;\n        } else {\n            request['orderID'] = id;\n        }\n        const method = market['spot'] ? 'privateDeleteSpotOrders' : 'privateDeleteOrdersCancel';\n        const response = await this[method] (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        return this.parseOrder (data, market);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            // 'symbol': market['id'],\n            // 'untriggerred': false, // false to cancel non-conditional orders, true to cancel conditional orders\n            // 'text': 'up to 40 characters max',\n        };\n        let market = undefined;\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            if (!market['swap']) {\n                throw new NotSupported (this.id + ' cancelAllOrders() supports swap market type orders only');\n            }\n            request['symbol'] = market['id'];\n        }\n        return await this.privateDeleteOrdersAll (this.extend (request, params));\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrder() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const method = market['spot'] ? 'privateGetSpotOrdersActive' : 'privateGetExchangeOrder';\n        const request = {\n            'symbol': market['id'],\n        };\n        const clientOrderId = this.safeString2 (params, 'clientOrderId', 'clOrdID');\n        params = this.omit (params, [ 'clientOrderId', 'clOrdID' ]);\n        if (clientOrderId !== undefined) {\n            request['clOrdID'] = clientOrderId;\n        } else {\n            request['orderID'] = id;\n        }\n        const response = await this[method] (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        let order = data;\n        if (Array.isArray (data)) {\n            const numOrders = data.length;\n            if (numOrders < 1) {\n                if (clientOrderId !== undefined) {\n                    throw new OrderNotFound (this.id + ' fetchOrder ' + symbol + ' order with clientOrderId ' + clientOrderId + ' not found');\n                } else {\n                    throw new OrderNotFound (this.id + ' fetchOrder ' + symbol + ' order with id ' + id + ' not found');\n                }\n            }\n            order = this.safeValue (data, 0, {});\n        }\n        return this.parseOrder (order, market);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const method = market['spot'] ? 'privateGetSpotOrders' : 'privateGetExchangeOrderList';\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this[method] (this.extend (request, params));\n        const data = this.safeValue (response, 'data', {});\n        const rows = this.safeValue (data, 'rows', []);\n        return this.parseOrders (rows, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const method = market['spot'] ? 'privateGetSpotOrders' : 'privateGetOrdersActiveList';\n        const request = {\n            'symbol': market['id'],\n        };\n        try {\n            const response = await this[method] (this.extend (request, params));\n            const data = this.safeValue (response, 'data', {});\n            if (Array.isArray (data)) {\n                return this.parseOrders (data, market, since, limit);\n            } else {\n                const rows = this.safeValue (data, 'rows', []);\n                return this.parseOrders (rows, market, since, limit);\n            }\n        } catch (e) {\n            return [];\n        }\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchClosedOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const method = market['spot'] ? 'privateGetExchangeSpotOrder' : 'privateGetExchangeOrderList';\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"OK\",\n        //         \"data\":{\n        //             \"total\":8,\n        //             \"rows\":[\n        //                 {\n        //                     \"orderID\":\"99232c3e-3d6a-455f-98cc-2061cdfe91bc\",\n        //                     \"stopPxEp\":0,\n        //                     \"avgPriceEp\":0,\n        //                     \"qtyType\":\"ByBase\",\n        //                     \"leavesBaseQtyEv\":0,\n        //                     \"leavesQuoteQtyEv\":0,\n        //                     \"baseQtyEv\":\"1000000000\",\n        //                     \"feeCurrency\":\"4\",\n        //                     \"stopDirection\":\"UNSPECIFIED\",\n        //                     \"symbol\":\"sETHUSDT\",\n        //                     \"side\":\"Buy\",\n        //                     \"quoteQtyEv\":250000000000,\n        //                     \"priceEp\":25000000000,\n        //                     \"ordType\":\"Limit\",\n        //                     \"timeInForce\":\"GoodTillCancel\",\n        //                     \"ordStatus\":\"Rejected\",\n        //                     \"execStatus\":\"NewRejected\",\n        //                     \"createTimeNs\":1592675305266037130,\n        //                     \"cumFeeEv\":0,\n        //                     \"cumBaseValueEv\":0,\n        //                     \"cumQuoteValueEv\":0\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        if (Array.isArray (data)) {\n            return this.parseOrders (data, market, since, limit);\n        } else {\n            const rows = this.safeValue (data, 'rows', []);\n            return this.parseOrders (rows, market, since, limit);\n        }\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchClosedOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const method = market['spot'] ? 'privateGetExchangeSpotOrderTrades' : 'privateGetExchangeOrderTrade';\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (market['swap'] && (limit !== undefined)) {\n            request['limit'] = limit;\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        // spot\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"msg\": \"OK\",\n        //         \"data\": {\n        //             \"total\": 1,\n        //             \"rows\": [\n        //                 {\n        //                     \"qtyType\": \"ByQuote\",\n        //                     \"transactTimeNs\": 1589450974800550100,\n        //                     \"clOrdID\": \"8ba59d40-df25-d4b0-14cf-0703f44e9690\",\n        //                     \"orderID\": \"b2b7018d-f02f-4c59-b4cf-051b9c2d2e83\",\n        //                     \"symbol\": \"sBTCUSDT\",\n        //                     \"side\": \"Buy\",\n        //                     \"priceEP\": 970056000000,\n        //                     \"baseQtyEv\": 0,\n        //                     \"quoteQtyEv\": 1000000000,\n        //                     \"action\": \"New\",\n        //                     \"execStatus\": \"MakerFill\",\n        //                     \"ordStatus\": \"Filled\",\n        //                     \"ordType\": \"Limit\",\n        //                     \"execInst\": \"None\",\n        //                     \"timeInForce\": \"GoodTillCancel\",\n        //                     \"stopDirection\": \"UNSPECIFIED\",\n        //                     \"tradeType\": \"Trade\",\n        //                     \"stopPxEp\": 0,\n        //                     \"execId\": \"c6bd8979-07ba-5946-b07e-f8b65135dbb1\",\n        //                     \"execPriceEp\": 970056000000,\n        //                     \"execBaseQtyEv\": 103000,\n        //                     \"execQuoteQtyEv\": 999157680,\n        //                     \"leavesBaseQtyEv\": 0,\n        //                     \"leavesQuoteQtyEv\": 0,\n        //                     \"execFeeEv\": 0,\n        //                     \"feeRateEr\": 0\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        //\n        // swap\n        //\n        //     {\n        //         \"code\": 0,\n        //         \"msg\": \"OK\",\n        //         \"data\": {\n        //             \"total\": 79,\n        //             \"rows\": [\n        //                 {\n        //                     \"transactTimeNs\": 1606054879331565300,\n        //                     \"symbol\": \"BTCUSD\",\n        //                     \"currency\": \"BTC\",\n        //                     \"action\": \"New\",\n        //                     \"side\": \"Buy\",\n        //                     \"tradeType\": \"Trade\",\n        //                     \"execQty\": 5,\n        //                     \"execPriceEp\": 182990000,\n        //                     \"orderQty\": 5,\n        //                     \"priceEp\": 183870000,\n        //                     \"execValueEv\": 27323,\n        //                     \"feeRateEr\": 75000,\n        //                     \"execFeeEv\": 21,\n        //                     \"ordType\": \"Market\",\n        //                     \"execID\": \"5eee56a4-04a9-5677-8eb0-c2fe22ae3645\",\n        //                     \"orderID\": \"ee0acb82-f712-4543-a11d-d23efca73197\",\n        //                     \"clOrdID\": \"\",\n        //                     \"execStatus\": \"TakerFill\"\n        //                 },\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const rows = this.safeValue (data, 'rows', []);\n        return this.parseTrades (rows, market, since, limit);\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'currency': currency['id'],\n        };\n        const response = await this.privateGetPhemexUserWalletsV2DepositAddress (this.extend (request, params));\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"OK\",\n        //         \"data\":{\n        //             \"address\":\"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad\",\n        //             \"tag\":null\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const address = this.safeString (data, 'address');\n        const tag = this.safeString (data, 'tag');\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const response = await this.privateGetExchangeWalletsDepositList (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"OK\",\n        //         \"data\":[\n        //             {\n        //                 \"id\":29200,\n        //                 \"currency\":\"USDT\",\n        //                 \"currencyCode\":3,\n        //                 \"txHash\":\"0x0bdbdc47807769a03b158d5753f54dfc58b92993d2f5e818db21863e01238e5d\",\n        //                 \"address\":\"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad\",\n        //                 \"amountEv\":3000000000,\n        //                 \"confirmations\":13,\n        //                 \"type\":\"Deposit\",\n        //                 \"status\":\"Success\",\n        //                 \"createdAt\":1592722565000\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        if (code !== undefined) {\n            currency = this.currency (code);\n        }\n        const response = await this.privateGetExchangeWalletsWithdrawList (params);\n        //\n        //     {\n        //         \"code\":0,\n        //         \"msg\":\"OK\",\n        //         \"data\":[\n        //             {\n        //                 \"address\": \"1Lxxxxxxxxxxx\"\n        //                 \"amountEv\": 200000\n        //                 \"currency\": \"BTC\"\n        //                 \"currencyCode\": 1\n        //                 \"expiredTime\": 0\n        //                 \"feeEv\": 50000\n        //                 \"rejectReason\": null\n        //                 \"status\": \"Succeed\"\n        //                 \"txHash\": \"44exxxxxxxxxxxxxxxxxxxxxx\"\n        //                 \"withdrawStatus: \"\"\n        //             }\n        //         ]\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTransactions (data, currency, since, limit);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'Success': 'ok',\n            'Succeed': 'ok',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // withdraw\n        //\n        //     ...\n        //\n        // fetchDeposits\n        //\n        //     {\n        //         \"id\":29200,\n        //         \"currency\":\"USDT\",\n        //         \"currencyCode\":3,\n        //         \"txHash\":\"0x0bdbdc47807769a03b158d5753f54dfc58b92993d2f5e818db21863e01238e5d\",\n        //         \"address\":\"0x5bfbf60e0fa7f63598e6cfd8a7fd3ffac4ccc6ad\",\n        //         \"amountEv\":3000000000,\n        //         \"confirmations\":13,\n        //         \"type\":\"Deposit\",\n        //         \"status\":\"Success\",\n        //         \"createdAt\":1592722565000\n        //     }\n        //\n        // fetchWithdrawals\n        //\n        //     {\n        //         \"address\": \"1Lxxxxxxxxxxx\"\n        //         \"amountEv\": 200000\n        //         \"currency\": \"BTC\"\n        //         \"currencyCode\": 1\n        //         \"expiredTime\": 0\n        //         \"feeEv\": 50000\n        //         \"rejectReason\": null\n        //         \"status\": \"Succeed\"\n        //         \"txHash\": \"44exxxxxxxxxxxxxxxxxxxxxx\"\n        //         \"withdrawStatus: \"\"\n        //     }\n        //\n        const id = this.safeString (transaction, 'id');\n        const address = this.safeString (transaction, 'address');\n        const tag = undefined;\n        const txid = this.safeString (transaction, 'txHash');\n        const currencyId = this.safeString (transaction, 'currency');\n        currency = this.safeCurrency (currencyId, currency);\n        const code = currency['code'];\n        const timestamp = this.safeInteger2 (transaction, 'createdAt', 'submitedAt');\n        let type = this.safeStringLower (transaction, 'type');\n        const feeCost = this.fromEn (this.safeNumber (transaction, 'feeEv'), currency['valueScale'], currency['precision']);\n        let fee = undefined;\n        if (feeCost !== undefined) {\n            type = 'withdrawal';\n            fee = {\n                'cost': feeCost,\n                'currency': code,\n            };\n        }\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        const amount = this.fromEn (this.safeNumber (transaction, 'amountEv'), currency['valueScale'], currency['precision']);\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': address,\n            'addressTo': address,\n            'addressFrom': undefined,\n            'tag': tag,\n            'tagTo': tag,\n            'tagFrom': undefined,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': undefined,\n            'fee': fee,\n        };\n    }\n\n    async fetchPositions (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const code = this.safeString (params, 'code');\n        const request = {};\n        if (code === undefined) {\n            const currencyId = this.safeString (params, 'currency');\n            if (currencyId === undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchPositions() requires a currency parameter or a code parameter');\n            }\n        } else {\n            const currency = this.currency (code);\n            params = this.omit (params, 'code');\n            request['currency'] = currency['id'];\n        }\n        const response = await this.privateGetAccountsAccountPositions (this.extend (request, params));\n        //\n        //     {\n        //         \"code\":0,\"msg\":\"\",\n        //         \"data\":{\n        //             \"account\":{\n        //                 \"accountId\":6192120001,\n        //                 \"currency\":\"BTC\",\n        //                 \"accountBalanceEv\":1254744,\n        //                 \"totalUsedBalanceEv\":0,\n        //                 \"bonusBalanceEv\":1254744\n        //             },\n        //             \"positions\":[\n        //                 {\n        //                     \"accountID\":6192120001,\n        //                     \"symbol\":\"BTCUSD\",\n        //                     \"currency\":\"BTC\",\n        //                     \"side\":\"None\",\n        //                     \"positionStatus\":\"Normal\",\n        //                     \"crossMargin\":false,\n        //                     \"leverageEr\":100000000,\n        //                     \"leverage\":1.00000000,\n        //                     \"initMarginReqEr\":100000000,\n        //                     \"initMarginReq\":1.00000000,\n        //                     \"maintMarginReqEr\":500000,\n        //                     \"maintMarginReq\":0.00500000,\n        //                     \"riskLimitEv\":10000000000,\n        //                     \"riskLimit\":100.00000000,\n        //                     \"size\":0,\n        //                     \"value\":0E-8,\n        //                     \"valueEv\":0,\n        //                     \"avgEntryPriceEp\":0,\n        //                     \"avgEntryPrice\":0E-8,\n        //                     \"posCostEv\":0,\n        //                     \"posCost\":0E-8,\n        //                     \"assignedPosBalanceEv\":0,\n        //                     \"assignedPosBalance\":0E-8,\n        //                     \"bankruptCommEv\":0,\n        //                     \"bankruptComm\":0E-8,\n        //                     \"bankruptPriceEp\":0,\n        //                     \"bankruptPrice\":0E-8,\n        //                     \"positionMarginEv\":0,\n        //                     \"positionMargin\":0E-8,\n        //                     \"liquidationPriceEp\":0,\n        //                     \"liquidationPrice\":0E-8,\n        //                     \"deleveragePercentileEr\":0,\n        //                     \"deleveragePercentile\":0E-8,\n        //                     \"buyValueToCostEr\":100225000,\n        //                     \"buyValueToCost\":1.00225000,\n        //                     \"sellValueToCostEr\":100075000,\n        //                     \"sellValueToCost\":1.00075000,\n        //                     \"markPriceEp\":135736070,\n        //                     \"markPrice\":13573.60700000,\n        //                     \"markValueEv\":0,\n        //                     \"markValue\":null,\n        //                     \"unRealisedPosLossEv\":0,\n        //                     \"unRealisedPosLoss\":null,\n        //                     \"estimatedOrdLossEv\":0,\n        //                     \"estimatedOrdLoss\":0E-8,\n        //                     \"usedBalanceEv\":0,\n        //                     \"usedBalance\":0E-8,\n        //                     \"takeProfitEp\":0,\n        //                     \"takeProfit\":null,\n        //                     \"stopLossEp\":0,\n        //                     \"stopLoss\":null,\n        //                     \"cumClosedPnlEv\":0,\n        //                     \"cumFundingFeeEv\":0,\n        //                     \"cumTransactFeeEv\":0,\n        //                     \"realisedPnlEv\":0,\n        //                     \"realisedPnl\":null,\n        //                     \"cumRealisedPnlEv\":0,\n        //                     \"cumRealisedPnl\":null\n        //                 }\n        //             ]\n        //         }\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const positions = this.safeValue (data, 'positions', []);\n        // todo unify parsePosition/parsePositions\n        return positions;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const query = this.omit (params, this.extractParams (path));\n        const requestPath = '/' + this.implodeParams (path, params);\n        let url = requestPath;\n        let queryString = '';\n        if ((method === 'GET') || (method === 'DELETE') || (method === 'PUT')) {\n            if (Object.keys (query).length) {\n                queryString = this.urlencodeWithArrayRepeat (query);\n                url += '?' + queryString;\n            }\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const timestamp = this.seconds ();\n            const xPhemexRequestExpiry = this.safeInteger (this.options, 'x-phemex-request-expiry', 60);\n            const expiry = this.sum (timestamp, xPhemexRequestExpiry);\n            const expiryString = expiry.toString ();\n            headers = {\n                'x-phemex-access-token': this.apiKey,\n                'x-phemex-request-expiry': expiryString,\n            };\n            let payload = '';\n            if (method === 'POST') {\n                payload = this.json (params);\n                body = payload;\n                headers['Content-Type'] = 'application/json';\n            }\n            const auth = requestPath + queryString + expiryString + payload;\n            headers['x-phemex-request-signature'] = this.hmac (this.encode (auth), this.encode (this.secret));\n        }\n        url = this.implodeParams (this.urls['api'][api], { 'hostname': this.hostname }) + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        //\n        //     {\"code\":30018,\"msg\":\"phemex.data.size.uplimt\",\"data\":null}\n        //     {\"code\":412,\"msg\":\"Missing parameter - resolution\",\"data\":null}\n        //     {\"code\":412,\"msg\":\"Missing parameter - to\",\"data\":null}\n        //     {\"error\":{\"code\":6001,\"message\":\"invalid argument\"},\"id\":null,\"result\":null}\n        //\n        const error = this.safeValue (response, 'error', response);\n        const errorCode = this.safeString (error, 'code');\n        const message = this.safeString (error, 'msg');\n        if ((errorCode !== undefined) && (errorCode !== '0')) {\n            const feedback = this.id + ' ' + body;\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], message, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}