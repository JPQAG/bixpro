{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  ArgumentsRequired,\n  ExchangeNotAvailable,\n  PermissionDenied,\n  InvalidOrder,\n  AuthenticationError,\n  InsufficientFunds,\n  OrderNotFound,\n  DDoSProtection,\n  OnMaintenance,\n  RateLimitExceeded\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitz extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitz',\n      'name': 'Bit-Z',\n      'countries': ['HK'],\n      'rateLimit': 2000,\n      'version': 'v2',\n      'userAgent': this.userAgents['chrome'],\n      'has': {\n        'cancelOrder': true,\n        'cancelOrders': true,\n        'createOrder': true,\n        'createMarketOrder': false,\n        'fetchBalance': true,\n        'fetchDeposits': true,\n        'fetchClosedOrders': true,\n        'fetchMarkets': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': true,\n        'fetchOrderBook': true,\n        'fetchOrders': true,\n        'fetchTicker': true,\n        'fetchTickers': true,\n        'fetchTime': true,\n        'fetchTrades': true,\n        'fetchTransactions': false,\n        'fetchWithdrawals': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1min',\n        '5m': '5min',\n        '15m': '15min',\n        '30m': '30min',\n        '1h': '60min',\n        '4h': '4hour',\n        '1d': '1day',\n        '5d': '5day',\n        '1w': '1week',\n        '1M': '1mon'\n      },\n      'hostname': 'apiv2.bitz.com',\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/51840849/87443304-fec5e000-c5fd-11ea-98f8-ba8e67f7eaff.jpg',\n        'api': {\n          'market': 'https://{hostname}',\n          'trade': 'https://{hostname}',\n          'assets': 'https://{hostname}'\n        },\n        'www': 'https://www.bitz.com',\n        'doc': 'https://apidocv2.bitz.plus/en/',\n        'fees': 'https://www.bitz.com/fee?type=1',\n        'referral': 'https://u.bitz.com/register?invite_code=1429193'\n      },\n      'api': {\n        'market': {\n          'get': ['ticker', 'depth', 'order', // trades\n          'tickerall', 'kline', 'symbolList', 'getServerTime', 'currencyRate', 'currencyCoinRate', 'coinRate', 'getContractCoin', 'getContractKline', 'getContractOrderBook', 'getContractTradesHistory', 'getContractTickers']\n        },\n        'trade': {\n          'post': ['addEntrustSheet', 'cancelEntrustSheet', 'cancelAllEntrustSheet', 'coinOut', // withdraw\n          'getUserHistoryEntrustSheet', // closed orders\n          'getUserNowEntrustSheet', // open orders\n          'getEntrustSheetInfo', // order\n          'depositOrWithdraw', // transactions\n          'getCoinAddress', 'getCoinAddressList', 'marketTrade', 'addEntrustSheetBatch']\n        },\n        'assets': {\n          'post': ['getUserAssets']\n        },\n        'contract': {\n          'post': ['addContractTrade', 'cancelContractTrade', 'getContractActivePositions', 'getContractAccountInfo', 'getContractMyPositions', 'getContractOrderResult', 'getContractTradeResult', 'getContractOrder', 'getContractMyHistoryTrade', 'getContractMyTrades']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.002,\n          'taker': 0.002\n        },\n        'funding': {\n          'withdraw': {\n            'BTC': '0.5%',\n            'DKKT': '0.5%',\n            'ETH': 0.01,\n            'USDT': '0.5%',\n            'LTC': '0.5%',\n            'FCT': '0.5%',\n            'LSK': '0.5%',\n            'HXI': '0.8%',\n            'ZEC': '0.5%',\n            'DOGE': '0.5%',\n            'MZC': '0.5%',\n            'ETC': '0.5%',\n            'GXS': '0.5%',\n            'XPM': '0.5%',\n            'PPC': '0.5%',\n            'BLK': '0.5%',\n            'XAS': '0.5%',\n            'HSR': '0.5%',\n            'NULS': 5.0,\n            'VOISE': 350.0,\n            'PAY': 1.5,\n            'EOS': 0.6,\n            'YBCT': 35.0,\n            'OMG': 0.3,\n            'OTN': 0.4,\n            'BTX': '0.5%',\n            'QTUM': '0.5%',\n            'DASH': '0.5%',\n            'GAME': '0.5%',\n            'BCH': '0.5%',\n            'GNT': 9.0,\n            'SSS': 1500.0,\n            'ARK': '0.5%',\n            'PART': '0.5%',\n            'LEO': '0.5%',\n            'DGB': '0.5%',\n            'ZSC': 130.0,\n            'VIU': 350.0,\n            'BTG': '0.5%',\n            'ARN': 10.0,\n            'VTC': '0.5%',\n            'BCD': '0.5%',\n            'TRX': 200.0,\n            'HWC': '0.5%',\n            'UNIT': '0.5%',\n            'OXY': '0.5%',\n            'MCO': 0.3500,\n            'SBTC': '0.5%',\n            'BCX': '0.5%',\n            'ETF': '0.5%',\n            'PYLNT': 0.4000,\n            'XRB': '0.5%',\n            'ETP': '0.5%'\n          }\n        }\n      },\n      'precision': {\n        'amount': 8,\n        'price': 8\n      },\n      'options': {\n        'fetchOHLCVVolume': true,\n        'fetchOHLCVWarning': true,\n        'lastNonceTimestamp': 0\n      },\n      'commonCurrencies': {\n        // https://github.com/ccxt/ccxt/issues/3881\n        // https://support.bit-z.pro/hc/en-us/articles/360007500654-BOX-BOX-Token-\n        'BOX': 'BOX Token',\n        'LEO': 'LeoCoin',\n        'XRB': 'NANO',\n        'PXC': 'Pixiecoin',\n        'VTC': 'VoteCoin',\n        'TTC': 'TimesChain'\n      },\n      'exceptions': {\n        // '200': Success\n        '-102': ExchangeError,\n        // Invalid parameter\n        '-103': AuthenticationError,\n        // Verification failed\n        '-104': ExchangeNotAvailable,\n        // Network Error-1\n        '-105': AuthenticationError,\n        // Invalid api signature\n        '-106': ExchangeNotAvailable,\n        // Network Error-2\n        '-109': AuthenticationError,\n        // Invalid scretKey\n        '-110': DDoSProtection,\n        // The number of access requests exceeded\n        '-111': PermissionDenied,\n        // Current IP is not in the range of trusted IP\n        '-112': OnMaintenance,\n        // Service is under maintenance\n        '-114': RateLimitExceeded,\n        // The number of daily requests has reached the limit\n        '-117': AuthenticationError,\n        // The apikey expires\n        '-100015': AuthenticationError,\n        // Trade password error\n        '-100044': ExchangeError,\n        // Fail to request data\n        '-100101': ExchangeError,\n        // Invalid symbol\n        '-100201': ExchangeError,\n        // Invalid symbol\n        '-100301': ExchangeError,\n        // Invalid symbol\n        '-100401': ExchangeError,\n        // Invalid symbol\n        '-100302': ExchangeError,\n        // Type of K-line error\n        '-100303': ExchangeError,\n        // Size of K-line error\n        '-200003': AuthenticationError,\n        // Please set trade password\n        '-200005': PermissionDenied,\n        // This account can not trade\n        '-200025': ExchangeNotAvailable,\n        // Temporary trading halt\n        '-200027': InvalidOrder,\n        // Price Error\n        '-200028': InvalidOrder,\n        // Amount must be greater than 0\n        '-200029': InvalidOrder,\n        // Number must be between %s and %d\n        '-200030': InvalidOrder,\n        // Over price range\n        '-200031': InsufficientFunds,\n        // Insufficient assets\n        '-200032': ExchangeError,\n        // System error. Please contact customer service\n        '-200033': ExchangeError,\n        // Fail to trade\n        '-200034': OrderNotFound,\n        // The order does not exist\n        '-200035': OrderNotFound,\n        // Cancellation error, order filled\n        '-200037': InvalidOrder,\n        // Trade direction error\n        '-200038': ExchangeError,\n        // Trading Market Error\n        '-200055': OrderNotFound,\n        // Order record does not exist\n        '-300069': AuthenticationError,\n        // api_key is illegal\n        '-300101': ExchangeError,\n        // Transaction type error\n        '-300102': InvalidOrder,\n        // Price or number cannot be less than 0\n        '-300103': AuthenticationError,\n        // Trade password error\n        '-301001': ExchangeNotAvailable // Network Error-3\n\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const response = await this.marketGetSymbolList(params); //\n    //     {    status:    200,\n    //             msg:   \"\",\n    //            data: {   ltc_btc: {          id: \"1\",\n    //                                        name: \"ltc_btc\",\n    //                                    coinFrom: \"ltc\",\n    //                                      coinTo: \"btc\",\n    //                                 numberFloat: \"4\",\n    //                                  priceFloat: \"8\",\n    //                                      status: \"1\",\n    //                                    minTrade: \"0.010\",\n    //                                    maxTrade: \"500000000.000\" },\n    //                    qtum_usdt: {          id: \"196\",\n    //                                        name: \"qtum_usdt\",\n    //                                    coinFrom: \"qtum\",\n    //                                      coinTo: \"usdt\",\n    //                                 numberFloat: \"4\",\n    //                                  priceFloat: \"2\",\n    //                                      status: \"1\",\n    //                                    minTrade: \"0.100\",\n    //                                    maxTrade: \"500000000.000\" },  },\n    //            time:    1535969146,\n    //       microtime:   \"0.66955600 1535969146\",\n    //          source:   \"api\"                                           }\n    //\n\n    const markets = this.safeValue(response, 'data');\n    const ids = Object.keys(markets);\n    const result = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const market = markets[id];\n      const numericId = this.safeString(market, 'id');\n      const baseId = this.safeString(market, 'coinFrom');\n      const quoteId = this.safeString(market, 'coinTo');\n      let base = baseId.toUpperCase();\n      let quote = quoteId.toUpperCase();\n      base = this.safeCurrencyCode(base);\n      quote = this.safeCurrencyCode(quote);\n      const symbol = base + '/' + quote;\n      const pricePrecisionString = this.safeString(market, 'priceFloat');\n      const minPrice = this.parsePrecision(pricePrecisionString);\n      const precision = {\n        'amount': this.safeInteger(market, 'numberFloat'),\n        'price': parseInt(pricePrecisionString)\n      };\n      const minAmount = this.safeString(market, 'minTrade');\n      result.push({\n        'info': market,\n        'id': id,\n        'numericId': numericId,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': this.parseNumber(minAmount),\n            'max': this.safeNumber(market, 'maxTrade')\n          },\n          'price': {\n            'min': this.parseNumber(minPrice),\n            'max': undefined\n          },\n          'cost': {\n            'min': this.parseNumber(Precise.stringMul(minPrice, minAmount)),\n            'max': undefined\n          }\n        }\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.assetsPostGetUserAssets(params); //\n    //     {\n    //         status: 200,\n    //         msg: \"\",\n    //         data: {\n    //             cny: 0,\n    //             usd: 0,\n    //             btc_total: 0,\n    //             info: [{\n    //                 \"name\": \"zpr\",\n    //                 \"num\": \"37.49067275\",\n    //                 \"over\": \"37.49067275\",\n    //                 \"lock\": \"0.00000000\",\n    //                 \"btc\": \"0.00000000\",\n    //                 \"usd\": \"0.00000000\",\n    //                 \"cny\": \"0.00000000\",\n    //             }],\n    //         },\n    //         time: 1535983966,\n    //         microtime: \"0.70400500 1535983966\",\n    //         source: \"api\",\n    //     }\n    //\n\n    const balances = this.safeValue(response['data'], 'info');\n    const timestamp = this.parseMicrotime(this.safeString(response, 'microtime'));\n    const result = {\n      'info': response,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp)\n    };\n\n    for (let i = 0; i < balances.length; i++) {\n      const balance = balances[i];\n      const currencyId = this.safeString(balance, 'name');\n      const code = this.safeCurrencyCode(currencyId);\n      const account = this.account();\n      account['used'] = this.safeString(balance, 'lock');\n      account['total'] = this.safeString(balance, 'num');\n      account['free'] = this.safeString(balance, 'over');\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  parseTicker(ticker, market = undefined) {\n    //\n    //      {          symbol: \"eth_btc\",\n    //            quoteVolume: \"3905.72\",\n    //                 volume: \"97058.21\",\n    //            priceChange: \"-1.72\",\n    //         priceChange24h: \"-1.65\",\n    //               askPrice: \"0.03971272\",\n    //                 askQty: \"0.0663\",\n    //               bidPrice: \"0.03961469\",\n    //                 bidQty: \"19.5451\",\n    //                   open: \"0.04036769\",\n    //                   high: \"0.04062988\",\n    //                    low: \"0.03956123\",\n    //                    now: \"0.03970100\",\n    //                firstId:  115567767,\n    //                 lastId:  115795316,\n    //              dealCount:  14078,\n    //        numberPrecision:  4,\n    //         pricePrecision:  8,\n    //                    cny: \"1959.05\",\n    //                    usd: \"287.10\",\n    //                    krw: \"318655.82\"   }\n    //\n    const timestamp = undefined;\n    const marketId = this.safeString(ticker, 'symbol');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const last = this.safeNumber(ticker, 'now');\n    const open = this.safeNumber(ticker, 'open');\n    let change = undefined;\n    let average = undefined;\n\n    if (last !== undefined && open !== undefined) {\n      change = last - open;\n      average = this.sum(last, open) / 2;\n    }\n\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bidPrice'),\n      'bidVolume': this.safeNumber(ticker, 'bidQty'),\n      'ask': this.safeNumber(ticker, 'askPrice'),\n      'askVolume': this.safeNumber(ticker, 'askQty'),\n      'vwap': undefined,\n      'open': open,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': change,\n      'percentage': this.safeNumber(ticker, 'priceChange24h'),\n      'average': average,\n      'baseVolume': this.safeNumber(ticker, 'volume'),\n      'quoteVolume': this.safeNumber(ticker, 'quoteVolume'),\n      'info': ticker\n    };\n  }\n\n  parseMicrotime(microtime) {\n    if (microtime === undefined) {\n      return microtime;\n    }\n\n    const parts = microtime.split(' ');\n    const milliseconds = parseFloat(parts[0]);\n    const seconds = parseInt(parts[1]);\n    const total = this.sum(seconds, milliseconds);\n    return parseInt(total * 1000);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.marketGetTicker(this.extend(request, params)); //\n    //     {    status:    200,\n    //             msg:   \"\",\n    //            data: {          symbol: \"eth_btc\",\n    //                        quoteVolume: \"3905.72\",\n    //                             volume: \"97058.21\",\n    //                        priceChange: \"-1.72\",\n    //                     priceChange24h: \"-1.65\",\n    //                           askPrice: \"0.03971272\",\n    //                             askQty: \"0.0663\",\n    //                           bidPrice: \"0.03961469\",\n    //                             bidQty: \"19.5451\",\n    //                               open: \"0.04036769\",\n    //                               high: \"0.04062988\",\n    //                                low: \"0.03956123\",\n    //                                now: \"0.03970100\",\n    //                            firstId:  115567767,\n    //                             lastId:  115795316,\n    //                          dealCount:  14078,\n    //                    numberPrecision:  4,\n    //                     pricePrecision:  8,\n    //                                cny: \"1959.05\",\n    //                                usd: \"287.10\",\n    //                                krw: \"318655.82\"   },\n    //            time:    1535970397,\n    //       microtime:   \"0.76341900 1535970397\",\n    //          source:   \"api\"                             }\n    //\n\n    const ticker = this.parseTicker(response['data'], market);\n    const timestamp = this.parseMicrotime(this.safeString(response, 'microtime'));\n    return this.extend(ticker, {\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp)\n    });\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbols !== undefined) {\n      const ids = this.marketIds(symbols);\n      request['symbols'] = ids.join(',');\n    }\n\n    const response = await this.marketGetTickerall(this.extend(request, params)); //\n    //     {    status:    200,\n    //             msg:   \"\",\n    //            data: {   ela_btc: {          symbol: \"ela_btc\",\n    //                                     quoteVolume: \"0.00\",\n    //                                          volume: \"3.28\",\n    //                                     priceChange: \"0.00\",\n    //                                  priceChange24h: \"0.00\",\n    //                                        askPrice: \"0.00147984\",\n    //                                          askQty: \"5.4580\",\n    //                                        bidPrice: \"0.00120230\",\n    //                                          bidQty: \"12.5384\",\n    //                                            open: \"0.00149078\",\n    //                                            high: \"0.00149078\",\n    //                                             low: \"0.00149078\",\n    //                                             now: \"0.00149078\",\n    //                                         firstId:  115581219,\n    //                                          lastId:  115581219,\n    //                                       dealCount:  1,\n    //                                 numberPrecision:  4,\n    //                                  pricePrecision:  8,\n    //                                             cny: \"73.66\",\n    //                                             usd: \"10.79\",\n    //                                             krw: \"11995.03\"    }     },\n    //            time:    1535971578,\n    //       microtime:   \"0.39854200 1535971578\",\n    //          source:   \"api\"                                                }\n    //\n\n    const tickers = this.safeValue(response, 'data');\n    const timestamp = this.parseMicrotime(this.safeString(response, 'microtime'));\n    const result = {};\n    const ids = Object.keys(tickers);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      let ticker = tickers[id];\n      let market = undefined;\n\n      if (id in this.markets_by_id) {\n        market = this.markets_by_id[id];\n      }\n\n      ticker = this.parseTicker(tickers[id], market);\n      let symbol = ticker['symbol'];\n\n      if (symbol === undefined) {\n        if (market !== undefined) {\n          symbol = market['symbol'];\n        } else {\n          const [baseId, quoteId] = id.split('_');\n          const base = this.safeCurrencyCode(baseId);\n          const quote = this.safeCurrencyCode(quoteId);\n          symbol = base + '/' + quote;\n        }\n      }\n\n      if (symbol !== undefined) {\n        result[symbol] = this.extend(ticker, {\n          'timestamp': timestamp,\n          'datetime': this.iso8601(timestamp)\n        });\n      }\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTime(params = {}) {\n    const response = await this.marketGetGetServerTime(params); //\n    //     {\n    //         \"status\":200,\n    //         \"msg\":\"\",\n    //         \"data\":[],\n    //         \"time\":1555490875,\n    //         \"microtime\":\"0.35994200 1555490875\",\n    //         \"source\":\"api\"\n    //     }\n    //\n\n    return this.safeTimestamp(response, 'time');\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'symbol': this.marketId(symbol)\n    };\n    const response = await this.marketGetDepth(this.extend(request, params)); //\n    //     {    status:    200,\n    //             msg:   \"\",\n    //            data: {     asks: [ [\"10.00000000\", \"0.4426\", \"4.4260\"],\n    //                                [\"1.00000000\", \"0.8339\", \"0.8339\"],\n    //                                [\"0.91700000\", \"0.0500\", \"0.0458\"],\n    //                                [\"0.20000000\", \"0.1000\", \"0.0200\"],\n    //                                [\"0.03987120\", \"16.1262\", \"0.6429\"],\n    //                                [\"0.03986120\", \"9.7523\", \"0.3887\"]   ],\n    //                        bids: [ [\"0.03976145\", \"0.0359\", \"0.0014\"],\n    //                                [\"0.03973401\", \"20.9493\", \"0.8323\"],\n    //                                [\"0.03967970\", \"0.0328\", \"0.0013\"],\n    //                                [\"0.00000002\", \"10000.0000\", \"0.0002\"],\n    //                                [\"0.00000001\", \"231840.7500\", \"0.0023\"] ],\n    //                    coinPair:   \"eth_btc\"                                  },\n    //            time:    1535974778,\n    //       microtime:   \"0.04017400 1535974778\",\n    //          source:   \"api\"                                                     }\n    //\n\n    const orderbook = this.safeValue(response, 'data');\n    const timestamp = this.parseMicrotime(this.safeString(response, 'microtime'));\n    return this.parseOrderBook(orderbook, symbol, timestamp);\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //    { id:  115807453,\n    //       t: \"19:36:24\",\n    //       T:  1535974584,\n    //       p: \"0.03983296\",\n    //       n: \"0.1000\",\n    //       s: \"buy\"         },\n    //\n    const id = this.safeString(trade, 'id');\n    const timestamp = this.safeTimestamp(trade, 'T');\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const priceString = this.safeString(trade, 'p');\n    const amountString = this.safeString(trade, 'n');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    const side = this.safeString(trade, 's');\n    return {\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'id': id,\n      'order': undefined,\n      'type': 'limit',\n      'side': side,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const response = await this.marketGetOrder(this.extend(request, params)); //\n    //     {    status:    200,\n    //             msg:   \"\",\n    //            data: [ { id:  115807453,\n    //                       t: \"19:36:24\",\n    //                       T:  1535974584,\n    //                       p: \"0.03983296\",\n    //                       n: \"0.1000\",\n    //                       s: \"buy\"         },\n    //                    { id:  115806811,\n    //                       t: \"19:33:19\",\n    //                       T:  1535974399,\n    //                       p: \"0.03981135\",\n    //                       n: \"9.4612\",\n    //                       s: \"sell\"        }  ],\n    //            time:    1535974583,\n    //       microtime:   \"0.57118100 1535974583\",\n    //          source:   \"api\"                     }\n    //\n\n    return this.parseTrades(response['data'], market, since, limit);\n  }\n\n  parseOHLCV(ohlcv, market = undefined) {\n    //\n    //     {\n    //         time: \"1535973420000\",\n    //         open: \"0.03975084\",\n    //         high: \"0.03975084\",\n    //         low: \"0.03967700\",\n    //         close: \"0.03967700\",\n    //         volume: \"12.4733\",\n    //         datetime: \"2018-09-03 19:17:00\"\n    //     }\n    //\n    return [this.safeInteger(ohlcv, 'time'), this.safeNumber(ohlcv, 'open'), this.safeNumber(ohlcv, 'high'), this.safeNumber(ohlcv, 'low'), this.safeNumber(ohlcv, 'close'), this.safeNumber(ohlcv, 'volume')];\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const duration = this.parseTimeframe(timeframe) * 1000;\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id'],\n      'resolution': this.timeframes[timeframe]\n    };\n\n    if (limit !== undefined) {\n      request['size'] = Math.min(limit, 300); // 1-300\n\n      if (since !== undefined) {\n        request['to'] = this.sum(since, limit * duration * 1000);\n      }\n    } else {\n      if (since !== undefined) {\n        throw new ArgumentsRequired(this.id + ' fetchOHLCV() requires a limit argument if the since argument is specified');\n      }\n    }\n\n    const response = await this.marketGetKline(this.extend(request, params)); //\n    //     {\n    //         status: 200,\n    //         msg: \"\",\n    //         data: {\n    //             bars: [\n    //                 { time: \"1535973420000\", open: \"0.03975084\", high: \"0.03975084\", low: \"0.03967700\", close: \"0.03967700\", volume: \"12.4733\", datetime: \"2018-09-03 19:17:00\" },\n    //                 { time: \"1535955480000\", open: \"0.04009900\", high: \"0.04016745\", low: \"0.04009900\", close: \"0.04012074\", volume: \"74.4803\", datetime: \"2018-09-03 14:18:00\" },\n    //             ],\n    //             resolution: \"1min\",\n    //             symbol: \"eth_btc\",\n    //             from: \"1535973420000\",\n    //             to: \"1535955480000\",\n    //             size: 300\n    //         },\n    //         time: 1535973435,\n    //         microtime: \"0.56462100 1535973435\",\n    //         source: \"api\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    const bars = this.safeValue(data, 'bars', []);\n    return this.parseOHLCVs(bars, market, timeframe, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    const statuses = {\n      '0': 'open',\n      '1': 'open',\n      // partially filled\n      '2': 'closed',\n      // filled\n      '3': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    // createOrder\n    //\n    //    {\n    //         \"id\": \"693248739\",   // order id\n    //         \"uId\": \"2074056\",    // uid\n    //         \"price\": \"100\",      // price\n    //         \"number\": \"10\",      // number\n    //         \"numberOver\": \"10\",  // undealed\n    //         \"flag\": \"sale\",      // flag\n    //         \"status\": \"0\",       // unfilled\n    //         \"coinFrom\": \"vtc\",\n    //         \"coinTo\": \"dkkt\",\n    //         \"numberDeal\": \"0\"    // dealed\n    //     }\n    //\n    const id = this.safeString(order, 'id');\n    let symbol = undefined;\n\n    if (market === undefined) {\n      const baseId = this.safeString(order, 'coinFrom');\n      const quoteId = this.safeString(order, 'coinTo');\n\n      if (baseId !== undefined && quoteId !== undefined) {\n        const marketId = baseId + '_' + quoteId;\n\n        if (marketId in this.markets_by_id) {\n          market = this.safeValue(this.markets_by_id, marketId);\n        } else {\n          const base = this.safeCurrencyCode(baseId);\n          const quote = this.safeCurrencyCode(quoteId);\n          symbol = base + '/' + quote;\n        }\n      }\n    }\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    let side = this.safeString(order, 'flag');\n\n    if (side !== undefined) {\n      side = side === 'sale' ? 'sell' : 'buy';\n    }\n\n    const price = this.safeNumber(order, 'price');\n    const amount = this.safeNumber(order, 'number');\n    const remaining = this.safeNumber(order, 'numberOver');\n    const filled = this.safeNumber(order, 'numberDeal');\n    let timestamp = this.safeInteger(order, 'timestamp');\n\n    if (timestamp === undefined) {\n      timestamp = this.safeTimestamp(order, 'created');\n    }\n\n    const cost = this.safeNumber(order, 'orderTotalPrice');\n    const status = this.parseOrderStatus(this.safeString(order, 'status'));\n    return this.safeOrder({\n      'id': id,\n      'clientOrderId': undefined,\n      'datetime': this.iso8601(timestamp),\n      'timestamp': timestamp,\n      'lastTradeTimestamp': undefined,\n      'status': status,\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': cost,\n      'amount': amount,\n      'filled': filled,\n      'remaining': remaining,\n      'trades': undefined,\n      'fee': undefined,\n      'info': order,\n      'average': undefined\n    });\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (type !== 'limit') {\n      throw new ExchangeError(this.id + ' createOrder allows limit orders only');\n    }\n\n    const market = this.market(symbol);\n    const orderType = side === 'buy' ? '1' : '2';\n\n    if (!this.password) {\n      throw new ExchangeError(this.id + ' createOrder() requires you to set exchange.password = \"YOUR_TRADING_PASSWORD\" (a trade password is NOT THE SAME as your login password)');\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'type': orderType,\n      'price': this.priceToPrecision(symbol, price),\n      'number': this.amountToPrecision(symbol, amount),\n      'tradePwd': this.password\n    };\n    const response = await this.tradePostAddEntrustSheet(this.extend(request, params)); //\n    //     {\n    //         \"status\": 200,\n    //         \"msg\": \"\",\n    //         \"data\": {\n    //             \"id\": \"693248739\",   // order id\n    //             \"uId\": \"2074056\",    // uid\n    //             \"price\": \"100\",      // price\n    //             \"number\": \"10\",      // number\n    //             \"numberOver\": \"10\",  // undealed\n    //             \"flag\": \"sale\",      // flag\n    //             \"status\": \"0\",       // unfilled\n    //             \"coinFrom\": \"vtc\",\n    //             \"coinTo\": \"dkkt\",\n    //             \"numberDeal\": \"0\"    // dealed\n    //         },\n    //         \"time\": \"1533035297\",\n    //         \"microtime\": \"0.41892000 1533035297\",\n    //         \"source\": \"api\",\n    //     }\n    //\n\n    const timestamp = this.parseMicrotime(this.safeString(response, 'microtime'));\n    const order = this.extend({\n      'timestamp': timestamp\n    }, response['data']);\n    return this.parseOrder(order, market);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'entrustSheetId': id\n    };\n    const response = await this.tradePostCancelEntrustSheet(this.extend(request, params)); //\n    //     {\n    //         \"status\":200,\n    //         \"msg\":\"\",\n    //         \"data\":{\n    //             \"updateAssetsData\":{\n    //                 \"coin\":\"bz\",\n    //                 \"over\":\"1000.00000000\",\n    //                 \"lock\":\"-1000.00000000\"\n    //             },\n    //             \"assetsInfo\":{\n    //                 \"coin\":\"bz\",\n    //                 \"over\":\"9999.99999999\",\n    //                 \"lock\":\"9999.99999999\"\n    //             }\n    //         },\n    //         \"time\":\"1535464383\",\n    //         \"microtime\":\"0.91558000 1535464383\",\n    //         \"source\":\"api\"\n    //     }\n    //\n\n    return response;\n  }\n\n  async cancelOrders(ids, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'ids': ids.join(',')\n    };\n    const response = await this.tradePostCancelEntrustSheet(this.extend(request, params)); //\n    //     {\n    //         \"status\":200,\n    //         \"msg\":\"\",\n    //         \"data\":{\n    //             \"744173808\":{\n    //                 \"updateAssetsData\":{\n    //                     \"coin\":\"bz\",\n    //                     \"over\":\"100.00000000\",\n    //                     \"lock\":\"-100.00000000\"\n    //                 },\n    //                 \"assetsInfo\":{\n    //                     \"coin\":\"bz\",\n    //                     \"over\":\"899.99999999\",\n    //                     \"lock\":\"19099.99999999\"\n    //                 }\n    //             },\n    //             \"744173809\":{\n    //                 \"updateAssetsData\":{\n    //                     \"coin\":\"bz\",\n    //                     \"over\":\"100.00000000\",\n    //                     \"lock\":\"-100.00000000\"\n    //                 },\n    //                 \"assetsInfo\":{\n    //                     \"coin\":\"bz\",\n    //                     \"over\":\"999.99999999\",\n    //                     \"lock\":\"18999.99999999\"\n    //                 }\n    //             }\n    //         },\n    //         \"time\":\"1535525649\",\n    //         \"microtime\":\"0.05009400 1535525649\",\n    //         \"source\":\"api\"\n    //     }\n    //\n\n    return response;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'entrustSheetId': id\n    };\n    const response = await this.tradePostGetEntrustSheetInfo(this.extend(request, params)); //\n    //     {\n    //         \"status\":200,\n    //         \"msg\":\"\",\n    //         \"data\":{\n    //             \"id\":\"708279852\",\n    //             \"uId\":\"2074056\",\n    //             \"price\":\"100.00000000\",\n    //             \"number\":\"10.0000\",\n    //             \"total\":\"0.00000000\",\n    //             \"numberOver\":\"10.0000\",\n    //             \"numberDeal\":\"0.0000\",\n    //             \"flag\":\"sale\",\n    //             \"status\":\"0\",  //0:unfilled, 1:partial deal, 2:all transactions, 3:already cancelled\n    //             \"coinFrom\":\"bz\",\n    //             \"coinTo\":\"usdt\",\n    //             \"orderTotalPrice\":\"0\",\n    //             \"created\":\"1533279876\"\n    //         },\n    //         \"time\":\"1533280294\",\n    //         \"microtime\":\"0.36859200 1533280294\",\n    //         \"source\":\"api\"\n    //     }\n    //\n\n    return this.parseOrder(response['data']);\n  }\n\n  async fetchOrdersWithMethod(method, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOpenOrders() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'coinFrom': market['baseId'],\n      'coinTo': market['quoteId'] // 'type': 1, // optional integer, 1 = buy, 2 = sell\n      // 'page': 1, // optional integer\n      // 'pageSize': 100, // optional integer, max 100\n      // 'startTime': 1510235730, // optional integer timestamp in seconds\n      // 'endTime': 1510235730, // optional integer timestamp in seconds\n\n    };\n\n    if (limit !== undefined) {\n      request['page'] = 1;\n      request['pageSize'] = limit;\n    }\n\n    if (since !== undefined) {\n      request['startTime'] = parseInt(since / 1000); // request['endTime'] = parseInt (since / 1000);\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     {\n    //         \"status\": 200,\n    //         \"msg\": \"\",\n    //         \"data\": {\n    //             \"data\": [\n    //                 {\n    //                     \"id\": \"693248739\",\n    //                     \"uid\": \"2074056\",\n    //                     \"price\": \"100.00000000\",\n    //                     \"number\": \"10.0000\",\n    //                     \"total\": \"0.00000000\",\n    //                     \"numberOver\": \"0.0000\",\n    //                     \"numberDeal\": \"0.0000\",\n    //                     \"flag\": \"sale\",\n    //                     \"status\": \"3\", // 0:unfilled, 1:partial deal, 2:all transactions, 3:already cancelled\n    //                     \"isNew\": \"N\",\n    //                     \"coinFrom\": \"vtc\",\n    //                     \"coinTo\": \"dkkt\",\n    //                     \"created\": \"1533035300\",\n    //                 },\n    //                 {\n    //                     \"id\": \"723086996\",\n    //                     \"uid\": \"2074056\",\n    //                     \"price\": \"100.00000000\",\n    //                     \"number\": \"10.0000\",\n    //                     \"total\": \"0.00000000\",\n    //                     \"numberOver\": \"0.0000\",\n    //                     \"numberDeal\": \"0.0000\",\n    //                     \"flag\": \"sale\",\n    //                     \"status\": \"3\",\n    //                     \"isNew\": \"N\",\n    //                     \"coinFrom\": \"bz\",\n    //                     \"coinTo\": \"usdt\",\n    //                     \"created\": \"1533523568\",\n    //                 },\n    //             ],\n    //             \"pageInfo\": {\n    //                 \"limit\": \"10\",\n    //                 \"offest\": \"0\",\n    //                 \"current_page\": \"1\",\n    //                 \"page_size\": \"10\",\n    //                 \"total_count\": \"17\",\n    //                 \"page_count\": \"2\",\n    //             }\n    //         },\n    //         \"time\": \"1533279329\",\n    //         \"microtime\": \"0.15305300 1533279329\",\n    //         \"source\": \"api\"\n    //     }\n    //\n\n    const orders = this.safeValue(response['data'], 'data', []);\n    return this.parseOrders(orders, undefined, since, limit);\n  }\n\n  async fetchOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersWithMethod('tradePostGetUserHistoryEntrustSheet', symbol, since, limit, params);\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersWithMethod('tradePostGetUserNowEntrustSheet', symbol, since, limit, params);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchOrdersWithMethod('tradePostGetUserHistoryEntrustSheet', symbol, since, limit, params);\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      '1': 'pending',\n      '2': 'pending',\n      '3': 'pending',\n      '4': 'ok',\n      '5': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    //     {\n    //         \"id\": '96275',\n    //         \"uid\": '2109073',\n    //         \"wallet\": '0xf4c4141c0127bc37b1d0c409a091920eba13ada7',\n    //         \"txid\": '0xb7adfa52aa566f9ac112e3c01f77bd91179b19eab12092a9a5a8b33d5086e31d',\n    //         \"confirm\": '12',\n    //         \"number\": '0.50000000',\n    //         \"status\": 4,\n    //         \"updated\": '1534944168605',\n    //         \"addressUrl\": 'https://etherscan.io/address/',\n    //         \"txidUrl\": 'https://etherscan.io/tx/',\n    //         \"description\": 'Ethereum',\n    //         \"coin\": 'eth',\n    //         \"memo\": ''\n    //     }\n    //\n    //     {\n    //         \"id\":\"397574\",\n    //         \"uid\":\"2033056\",\n    //         \"wallet\":\"1AG1gZvQAYu3WBvgg7p4BMMghQD2gE693k\",\n    //         \"txid\":\"\",\n    //         \"confirm\":\"0\",\n    //         \"number\":\"1000.00000000\",\n    //         \"status\":1,\n    //         \"updated\":\"0\",\n    //         \"addressUrl\":\"http://omniexplorer.info/lookupadd.aspx?address=\",\n    //         \"txidUrl\":\"http://omniexplorer.info/lookuptx.aspx?txid=\",\n    //         \"description\":\"Tether\",\n    //         \"coin\":\"usdt\",\n    //         \"memo\":\"\"\n    //     }\n    //\n    //     {\n    //         \"id\":\"153606\",\n    //         \"uid\":\"2033056\",\n    //         \"wallet\":\"1AG1gZvQAYu3WBvgg7p4BMMghQD2gE693k\",\n    //         \"txid\":\"aa2b179f84cd6dedafd41845e0fbf7f01e14c0d71ea3140d03d6f5a9ccd93199\",\n    //         \"confirm\":\"0\",\n    //         \"number\":\"761.11110000\",\n    //         \"status\":4,\n    //         \"updated\":\"1536726133579\",\n    //         \"addressUrl\":\"http://omniexplorer.info/lookupadd.aspx?address=\",\n    //         \"txidUrl\":\"http://omniexplorer.info/lookuptx.aspx?txid=\",\n    //         \"description\":\"Tether\",\n    //         \"coin\":\"usdt\",\n    //         \"memo\":\"\"\n    //     }\n    //\n    // withdraw\n    //\n    //     {\n    //         \"id\":397574,\n    //         \"email\":\"***@email.com\",\n    //         \"coin\":\"usdt\",\n    //         \"network_fee\":\"\",\n    //         \"eid\":23112\n    //     }\n    //\n    let timestamp = this.safeInteger(transaction, 'updated');\n\n    if (timestamp === 0) {\n      timestamp = undefined;\n    }\n\n    const currencyId = this.safeString(transaction, 'coin');\n    const code = this.safeCurrencyCode(currencyId, currency);\n    const type = this.safeStringLower(transaction, 'type');\n    const status = this.parseTransactionStatus(this.safeString(transaction, 'status'));\n    let fee = undefined;\n    const feeCost = this.safeNumber(transaction, 'network_fee');\n\n    if (feeCost !== undefined) {\n      fee = {\n        'cost': feeCost,\n        'code': code\n      };\n    }\n\n    return {\n      'id': this.safeString(transaction, 'id'),\n      'txid': this.safeString(transaction, 'txid'),\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'address': this.safeString(transaction, 'wallet'),\n      'tag': this.safeString(transaction, 'memo'),\n      'type': type,\n      'amount': this.safeNumber(transaction, 'number'),\n      'currency': code,\n      'status': status,\n      'updated': timestamp,\n      'fee': fee,\n      'info': transaction\n    };\n  }\n\n  parseTransactionsByType(type, transactions, code = undefined, since = undefined, limit = undefined) {\n    const result = [];\n\n    for (let i = 0; i < transactions.length; i++) {\n      const transaction = this.parseTransaction(this.extend({\n        'type': type\n      }, transactions[i]));\n      result.push(transaction);\n    }\n\n    return this.filterByCurrencySinceLimit(result, code, since, limit);\n  }\n\n  parseTransactionType(type) {\n    const types = {\n      'deposit': 1,\n      'withdrawal': 2\n    };\n    return this.safeInteger(types, type, type);\n  }\n\n  async fetchDeposits(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsForType('deposit', code, since, limit, params);\n  }\n\n  async fetchWithdrawals(code = undefined, since = undefined, limit = undefined, params = {}) {\n    return await this.fetchTransactionsForType('withdrawal', code, since, limit, params);\n  }\n\n  async fetchTransactionsForType(type, code = undefined, since = undefined, limit = undefined, params = {}) {\n    if (code === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchTransactions() requires a currency `code` argument');\n    }\n\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coin': currency['id'],\n      'type': this.parseTransactionType(type)\n    };\n\n    if (since !== undefined) {\n      request['startTime'] = parseInt(since / 1000).toString();\n    }\n\n    if (limit !== undefined) {\n      request['page'] = 1;\n      request['pageSize'] = limit;\n    }\n\n    const response = await this.tradePostDepositOrWithdraw(this.extend(request, params));\n    const transactions = this.safeValue(response['data'], 'data', []);\n    return this.parseTransactionsByType(type, transactions, code, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n    const request = {\n      'coin': currency['id'],\n      'number': this.currencyToPrecision(code, amount),\n      'address': address // 'type': 'erc20', // omni, trc20, optional\n\n    };\n\n    if (tag !== undefined) {\n      request['memo'] = tag;\n    }\n\n    const response = await this.tradePostCoinOut(this.extend(request, params)); //\n    //     {\n    //         \"status\":200,\n    //         \"msg\":\"\",\n    //         \"data\":{\n    //             \"id\":397574,\n    //             \"email\":\"***@email.com\",\n    //             \"coin\":\"usdt\",\n    //             \"network_fee\":\"\",\n    //             \"eid\":23112\n    //         },\n    //         \"time\":1552641646,\n    //         \"microtime\":\"0.70304500 1552641646\",\n    //         \"source\":\"api\"\n    //     }\n    //\n\n    const data = this.safeValue(response, 'data', {});\n    return this.parseTransaction(data, currency);\n  }\n\n  nonce() {\n    const currentTimestamp = this.seconds();\n\n    if (currentTimestamp > this.options['lastNonceTimestamp']) {\n      this.options['lastNonceTimestamp'] = currentTimestamp;\n      this.options['lastNonce'] = 100000;\n    }\n\n    this.options['lastNonce'] = this.sum(this.options['lastNonce'], 1);\n    return this.options['lastNonce'];\n  }\n\n  sign(path, api = 'market', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const baseUrl = this.implodeParams(this.urls['api'][api], {\n      'hostname': this.hostname\n    });\n    let url = baseUrl + '/' + this.capitalize(api) + '/' + path;\n    let query = undefined;\n\n    if (api === 'market') {\n      query = this.urlencode(params);\n\n      if (query.length) {\n        url += '?' + query;\n      }\n    } else {\n      this.checkRequiredCredentials();\n      body = this.rawencode(this.keysort(this.extend({\n        'apiKey': this.apiKey,\n        'timeStamp': this.seconds(),\n        'nonce': this.nonce()\n      }, params)));\n      body += '&sign=' + this.hash(this.encode(body + this.secret));\n      headers = {\n        'Content-type': 'application/x-www-form-urlencoded'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return; // fallback to default error handler\n    }\n\n    const status = this.safeString(response, 'status');\n\n    if (status !== undefined) {\n      const feedback = this.id + ' ' + body; //\n      //     {\"status\":-107,\"msg\":\"\",\"data\":\"\",\"time\":1535968848,\"microtime\":\"0.89092200 1535968848\",\"source\":\"api\"}\n      //\n\n      if (status === '200') {\n        //\n        //     {\"status\":200,\"msg\":\"\",\"data\":-200031,\"time\":1535999806,\"microtime\":\"0.85476800 1535999806\",\"source\":\"api\"}\n        //\n        const code = this.safeInteger(response, 'data');\n\n        if (code !== undefined) {\n          this.throwExactlyMatchedException(this.exceptions, code, feedback);\n          throw new ExchangeError(feedback);\n        } else {\n          return; // no error\n        }\n      }\n\n      this.throwExactlyMatchedException(this.exceptions, status, feedback);\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/bitz.js"],"names":["Exchange","require","ExchangeError","ArgumentsRequired","ExchangeNotAvailable","PermissionDenied","InvalidOrder","AuthenticationError","InsufficientFunds","OrderNotFound","DDoSProtection","OnMaintenance","RateLimitExceeded","Precise","module","exports","bitz","describe","deepExtend","userAgents","fetchMarkets","params","response","marketGetSymbolList","markets","safeValue","ids","Object","keys","result","i","length","id","market","numericId","safeString","baseId","quoteId","base","toUpperCase","quote","safeCurrencyCode","symbol","pricePrecisionString","minPrice","parsePrecision","precision","safeInteger","parseInt","minAmount","push","parseNumber","safeNumber","undefined","stringMul","fetchBalance","loadMarkets","assetsPostGetUserAssets","balances","timestamp","parseMicrotime","iso8601","balance","currencyId","code","account","parseBalance","parseTicker","ticker","marketId","safeSymbol","last","open","change","average","sum","microtime","parts","split","milliseconds","parseFloat","seconds","total","fetchTicker","request","marketGetTicker","extend","fetchTickers","symbols","marketIds","join","marketGetTickerall","tickers","markets_by_id","filterByArray","fetchTime","marketGetGetServerTime","safeTimestamp","fetchOrderBook","limit","marketGetDepth","orderbook","parseOrderBook","parseTrade","trade","priceString","amountString","price","amount","cost","side","fetchTrades","since","marketGetOrder","parseTrades","parseOHLCV","ohlcv","fetchOHLCV","timeframe","duration","parseTimeframe","timeframes","Math","min","marketGetKline","data","bars","parseOHLCVs","parseOrderStatus","status","statuses","parseOrder","order","remaining","filled","safeOrder","createOrder","type","orderType","password","priceToPrecision","amountToPrecision","tradePostAddEntrustSheet","cancelOrder","tradePostCancelEntrustSheet","cancelOrders","fetchOrder","tradePostGetEntrustSheetInfo","fetchOrdersWithMethod","method","orders","parseOrders","fetchOrders","fetchOpenOrders","fetchClosedOrders","parseTransactionStatus","parseTransaction","transaction","currency","safeStringLower","fee","feeCost","parseTransactionsByType","transactions","filterByCurrencySinceLimit","parseTransactionType","types","fetchDeposits","fetchTransactionsForType","fetchWithdrawals","toString","tradePostDepositOrWithdraw","withdraw","address","tag","checkAddress","currencyToPrecision","tradePostCoinOut","nonce","currentTimestamp","options","sign","path","api","headers","body","baseUrl","implodeParams","urls","hostname","url","capitalize","query","urlencode","checkRequiredCredentials","rawencode","keysort","apiKey","hash","encode","secret","handleErrors","httpCode","reason","requestHeaders","requestBody","feedback","throwExactlyMatchedException","exceptions"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, ArgumentsRequired, ExchangeNotAvailable, PermissionDenied, InvalidOrder, AuthenticationError, InsufficientFunds, OrderNotFound, DDoSProtection, OnMaintenance, RateLimitExceeded } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitz extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitz',\n            'name': 'Bit-Z',\n            'countries': [ 'HK' ],\n            'rateLimit': 2000,\n            'version': 'v2',\n            'userAgent': this.userAgents['chrome'],\n            'has': {\n                'cancelOrder': true,\n                'cancelOrders': true,\n                'createOrder': true,\n                'createMarketOrder': false,\n                'fetchBalance': true,\n                'fetchDeposits': true,\n                'fetchClosedOrders': true,\n                'fetchMarkets': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': true,\n                'fetchOrderBook': true,\n                'fetchOrders': true,\n                'fetchTicker': true,\n                'fetchTickers': true,\n                'fetchTime': true,\n                'fetchTrades': true,\n                'fetchTransactions': false,\n                'fetchWithdrawals': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '60min',\n                '4h': '4hour',\n                '1d': '1day',\n                '5d': '5day',\n                '1w': '1week',\n                '1M': '1mon',\n            },\n            'hostname': 'apiv2.bitz.com',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/51840849/87443304-fec5e000-c5fd-11ea-98f8-ba8e67f7eaff.jpg',\n                'api': {\n                    'market': 'https://{hostname}',\n                    'trade': 'https://{hostname}',\n                    'assets': 'https://{hostname}',\n                },\n                'www': 'https://www.bitz.com',\n                'doc': 'https://apidocv2.bitz.plus/en/',\n                'fees': 'https://www.bitz.com/fee?type=1',\n                'referral': 'https://u.bitz.com/register?invite_code=1429193',\n            },\n            'api': {\n                'market': {\n                    'get': [\n                        'ticker',\n                        'depth',\n                        'order', // trades\n                        'tickerall',\n                        'kline',\n                        'symbolList',\n                        'getServerTime',\n                        'currencyRate',\n                        'currencyCoinRate',\n                        'coinRate',\n                        'getContractCoin',\n                        'getContractKline',\n                        'getContractOrderBook',\n                        'getContractTradesHistory',\n                        'getContractTickers',\n                    ],\n                },\n                'trade': {\n                    'post': [\n                        'addEntrustSheet',\n                        'cancelEntrustSheet',\n                        'cancelAllEntrustSheet',\n                        'coinOut', // withdraw\n                        'getUserHistoryEntrustSheet', // closed orders\n                        'getUserNowEntrustSheet', // open orders\n                        'getEntrustSheetInfo', // order\n                        'depositOrWithdraw', // transactions\n                        'getCoinAddress',\n                        'getCoinAddressList',\n                        'marketTrade',\n                        'addEntrustSheetBatch',\n                    ],\n                },\n                'assets': {\n                    'post': [\n                        'getUserAssets',\n                    ],\n                },\n                'contract': {\n                    'post': [\n                        'addContractTrade',\n                        'cancelContractTrade',\n                        'getContractActivePositions',\n                        'getContractAccountInfo',\n                        'getContractMyPositions',\n                        'getContractOrderResult',\n                        'getContractTradeResult',\n                        'getContractOrder',\n                        'getContractMyHistoryTrade',\n                        'getContractMyTrades',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.002,\n                    'taker': 0.002,\n                },\n                'funding': {\n                    'withdraw': {\n                        'BTC': '0.5%',\n                        'DKKT': '0.5%',\n                        'ETH': 0.01,\n                        'USDT': '0.5%',\n                        'LTC': '0.5%',\n                        'FCT': '0.5%',\n                        'LSK': '0.5%',\n                        'HXI': '0.8%',\n                        'ZEC': '0.5%',\n                        'DOGE': '0.5%',\n                        'MZC': '0.5%',\n                        'ETC': '0.5%',\n                        'GXS': '0.5%',\n                        'XPM': '0.5%',\n                        'PPC': '0.5%',\n                        'BLK': '0.5%',\n                        'XAS': '0.5%',\n                        'HSR': '0.5%',\n                        'NULS': 5.0,\n                        'VOISE': 350.0,\n                        'PAY': 1.5,\n                        'EOS': 0.6,\n                        'YBCT': 35.0,\n                        'OMG': 0.3,\n                        'OTN': 0.4,\n                        'BTX': '0.5%',\n                        'QTUM': '0.5%',\n                        'DASH': '0.5%',\n                        'GAME': '0.5%',\n                        'BCH': '0.5%',\n                        'GNT': 9.0,\n                        'SSS': 1500.0,\n                        'ARK': '0.5%',\n                        'PART': '0.5%',\n                        'LEO': '0.5%',\n                        'DGB': '0.5%',\n                        'ZSC': 130.0,\n                        'VIU': 350.0,\n                        'BTG': '0.5%',\n                        'ARN': 10.0,\n                        'VTC': '0.5%',\n                        'BCD': '0.5%',\n                        'TRX': 200.0,\n                        'HWC': '0.5%',\n                        'UNIT': '0.5%',\n                        'OXY': '0.5%',\n                        'MCO': 0.3500,\n                        'SBTC': '0.5%',\n                        'BCX': '0.5%',\n                        'ETF': '0.5%',\n                        'PYLNT': 0.4000,\n                        'XRB': '0.5%',\n                        'ETP': '0.5%',\n                    },\n                },\n            },\n            'precision': {\n                'amount': 8,\n                'price': 8,\n            },\n            'options': {\n                'fetchOHLCVVolume': true,\n                'fetchOHLCVWarning': true,\n                'lastNonceTimestamp': 0,\n            },\n            'commonCurrencies': {\n                // https://github.com/ccxt/ccxt/issues/3881\n                // https://support.bit-z.pro/hc/en-us/articles/360007500654-BOX-BOX-Token-\n                'BOX': 'BOX Token',\n                'LEO': 'LeoCoin',\n                'XRB': 'NANO',\n                'PXC': 'Pixiecoin',\n                'VTC': 'VoteCoin',\n                'TTC': 'TimesChain',\n            },\n            'exceptions': {\n                // '200': Success\n                '-102': ExchangeError, // Invalid parameter\n                '-103': AuthenticationError, // Verification failed\n                '-104': ExchangeNotAvailable, // Network Error-1\n                '-105': AuthenticationError, // Invalid api signature\n                '-106': ExchangeNotAvailable, // Network Error-2\n                '-109': AuthenticationError, // Invalid scretKey\n                '-110': DDoSProtection, // The number of access requests exceeded\n                '-111': PermissionDenied, // Current IP is not in the range of trusted IP\n                '-112': OnMaintenance, // Service is under maintenance\n                '-114': RateLimitExceeded, // The number of daily requests has reached the limit\n                '-117': AuthenticationError, // The apikey expires\n                '-100015': AuthenticationError, // Trade password error\n                '-100044': ExchangeError, // Fail to request data\n                '-100101': ExchangeError, // Invalid symbol\n                '-100201': ExchangeError, // Invalid symbol\n                '-100301': ExchangeError, // Invalid symbol\n                '-100401': ExchangeError, // Invalid symbol\n                '-100302': ExchangeError, // Type of K-line error\n                '-100303': ExchangeError, // Size of K-line error\n                '-200003': AuthenticationError, // Please set trade password\n                '-200005': PermissionDenied, // This account can not trade\n                '-200025': ExchangeNotAvailable, // Temporary trading halt\n                '-200027': InvalidOrder, // Price Error\n                '-200028': InvalidOrder, // Amount must be greater than 0\n                '-200029': InvalidOrder, // Number must be between %s and %d\n                '-200030': InvalidOrder, // Over price range\n                '-200031': InsufficientFunds, // Insufficient assets\n                '-200032': ExchangeError, // System error. Please contact customer service\n                '-200033': ExchangeError, // Fail to trade\n                '-200034': OrderNotFound, // The order does not exist\n                '-200035': OrderNotFound, // Cancellation error, order filled\n                '-200037': InvalidOrder, // Trade direction error\n                '-200038': ExchangeError, // Trading Market Error\n                '-200055': OrderNotFound, // Order record does not exist\n                '-300069': AuthenticationError, // api_key is illegal\n                '-300101': ExchangeError, // Transaction type error\n                '-300102': InvalidOrder, // Price or number cannot be less than 0\n                '-300103': AuthenticationError, // Trade password error\n                '-301001': ExchangeNotAvailable, // Network Error-3\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const response = await this.marketGetSymbolList (params);\n        //\n        //     {    status:    200,\n        //             msg:   \"\",\n        //            data: {   ltc_btc: {          id: \"1\",\n        //                                        name: \"ltc_btc\",\n        //                                    coinFrom: \"ltc\",\n        //                                      coinTo: \"btc\",\n        //                                 numberFloat: \"4\",\n        //                                  priceFloat: \"8\",\n        //                                      status: \"1\",\n        //                                    minTrade: \"0.010\",\n        //                                    maxTrade: \"500000000.000\" },\n        //                    qtum_usdt: {          id: \"196\",\n        //                                        name: \"qtum_usdt\",\n        //                                    coinFrom: \"qtum\",\n        //                                      coinTo: \"usdt\",\n        //                                 numberFloat: \"4\",\n        //                                  priceFloat: \"2\",\n        //                                      status: \"1\",\n        //                                    minTrade: \"0.100\",\n        //                                    maxTrade: \"500000000.000\" },  },\n        //            time:    1535969146,\n        //       microtime:   \"0.66955600 1535969146\",\n        //          source:   \"api\"                                           }\n        //\n        const markets = this.safeValue (response, 'data');\n        const ids = Object.keys (markets);\n        const result = [];\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const market = markets[id];\n            const numericId = this.safeString (market, 'id');\n            const baseId = this.safeString (market, 'coinFrom');\n            const quoteId = this.safeString (market, 'coinTo');\n            let base = baseId.toUpperCase ();\n            let quote = quoteId.toUpperCase ();\n            base = this.safeCurrencyCode (base);\n            quote = this.safeCurrencyCode (quote);\n            const symbol = base + '/' + quote;\n            const pricePrecisionString = this.safeString (market, 'priceFloat');\n            const minPrice = this.parsePrecision (pricePrecisionString);\n            const precision = {\n                'amount': this.safeInteger (market, 'numberFloat'),\n                'price': parseInt (pricePrecisionString),\n            };\n            const minAmount = this.safeString (market, 'minTrade');\n            result.push ({\n                'info': market,\n                'id': id,\n                'numericId': numericId,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': this.parseNumber (minAmount),\n                        'max': this.safeNumber (market, 'maxTrade'),\n                    },\n                    'price': {\n                        'min': this.parseNumber (minPrice),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': this.parseNumber (Precise.stringMul (minPrice, minAmount)),\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.assetsPostGetUserAssets (params);\n        //\n        //     {\n        //         status: 200,\n        //         msg: \"\",\n        //         data: {\n        //             cny: 0,\n        //             usd: 0,\n        //             btc_total: 0,\n        //             info: [{\n        //                 \"name\": \"zpr\",\n        //                 \"num\": \"37.49067275\",\n        //                 \"over\": \"37.49067275\",\n        //                 \"lock\": \"0.00000000\",\n        //                 \"btc\": \"0.00000000\",\n        //                 \"usd\": \"0.00000000\",\n        //                 \"cny\": \"0.00000000\",\n        //             }],\n        //         },\n        //         time: 1535983966,\n        //         microtime: \"0.70400500 1535983966\",\n        //         source: \"api\",\n        //     }\n        //\n        const balances = this.safeValue (response['data'], 'info');\n        const timestamp = this.parseMicrotime (this.safeString (response, 'microtime'));\n        const result = {\n            'info': response,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n        };\n        for (let i = 0; i < balances.length; i++) {\n            const balance = balances[i];\n            const currencyId = this.safeString (balance, 'name');\n            const code = this.safeCurrencyCode (currencyId);\n            const account = this.account ();\n            account['used'] = this.safeString (balance, 'lock');\n            account['total'] = this.safeString (balance, 'num');\n            account['free'] = this.safeString (balance, 'over');\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        //\n        //      {          symbol: \"eth_btc\",\n        //            quoteVolume: \"3905.72\",\n        //                 volume: \"97058.21\",\n        //            priceChange: \"-1.72\",\n        //         priceChange24h: \"-1.65\",\n        //               askPrice: \"0.03971272\",\n        //                 askQty: \"0.0663\",\n        //               bidPrice: \"0.03961469\",\n        //                 bidQty: \"19.5451\",\n        //                   open: \"0.04036769\",\n        //                   high: \"0.04062988\",\n        //                    low: \"0.03956123\",\n        //                    now: \"0.03970100\",\n        //                firstId:  115567767,\n        //                 lastId:  115795316,\n        //              dealCount:  14078,\n        //        numberPrecision:  4,\n        //         pricePrecision:  8,\n        //                    cny: \"1959.05\",\n        //                    usd: \"287.10\",\n        //                    krw: \"318655.82\"   }\n        //\n        const timestamp = undefined;\n        const marketId = this.safeString (ticker, 'symbol');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const last = this.safeNumber (ticker, 'now');\n        const open = this.safeNumber (ticker, 'open');\n        let change = undefined;\n        let average = undefined;\n        if (last !== undefined && open !== undefined) {\n            change = last - open;\n            average = this.sum (last, open) / 2;\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bidPrice'),\n            'bidVolume': this.safeNumber (ticker, 'bidQty'),\n            'ask': this.safeNumber (ticker, 'askPrice'),\n            'askVolume': this.safeNumber (ticker, 'askQty'),\n            'vwap': undefined,\n            'open': open,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': change,\n            'percentage': this.safeNumber (ticker, 'priceChange24h'),\n            'average': average,\n            'baseVolume': this.safeNumber (ticker, 'volume'),\n            'quoteVolume': this.safeNumber (ticker, 'quoteVolume'),\n            'info': ticker,\n        };\n    }\n\n    parseMicrotime (microtime) {\n        if (microtime === undefined) {\n            return microtime;\n        }\n        const parts = microtime.split (' ');\n        const milliseconds = parseFloat (parts[0]);\n        const seconds = parseInt (parts[1]);\n        const total = this.sum (seconds, milliseconds);\n        return parseInt (total * 1000);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.marketGetTicker (this.extend (request, params));\n        //\n        //     {    status:    200,\n        //             msg:   \"\",\n        //            data: {          symbol: \"eth_btc\",\n        //                        quoteVolume: \"3905.72\",\n        //                             volume: \"97058.21\",\n        //                        priceChange: \"-1.72\",\n        //                     priceChange24h: \"-1.65\",\n        //                           askPrice: \"0.03971272\",\n        //                             askQty: \"0.0663\",\n        //                           bidPrice: \"0.03961469\",\n        //                             bidQty: \"19.5451\",\n        //                               open: \"0.04036769\",\n        //                               high: \"0.04062988\",\n        //                                low: \"0.03956123\",\n        //                                now: \"0.03970100\",\n        //                            firstId:  115567767,\n        //                             lastId:  115795316,\n        //                          dealCount:  14078,\n        //                    numberPrecision:  4,\n        //                     pricePrecision:  8,\n        //                                cny: \"1959.05\",\n        //                                usd: \"287.10\",\n        //                                krw: \"318655.82\"   },\n        //            time:    1535970397,\n        //       microtime:   \"0.76341900 1535970397\",\n        //          source:   \"api\"                             }\n        //\n        const ticker = this.parseTicker (response['data'], market);\n        const timestamp = this.parseMicrotime (this.safeString (response, 'microtime'));\n        return this.extend (ticker, {\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n        });\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbols !== undefined) {\n            const ids = this.marketIds (symbols);\n            request['symbols'] = ids.join (',');\n        }\n        const response = await this.marketGetTickerall (this.extend (request, params));\n        //\n        //     {    status:    200,\n        //             msg:   \"\",\n        //            data: {   ela_btc: {          symbol: \"ela_btc\",\n        //                                     quoteVolume: \"0.00\",\n        //                                          volume: \"3.28\",\n        //                                     priceChange: \"0.00\",\n        //                                  priceChange24h: \"0.00\",\n        //                                        askPrice: \"0.00147984\",\n        //                                          askQty: \"5.4580\",\n        //                                        bidPrice: \"0.00120230\",\n        //                                          bidQty: \"12.5384\",\n        //                                            open: \"0.00149078\",\n        //                                            high: \"0.00149078\",\n        //                                             low: \"0.00149078\",\n        //                                             now: \"0.00149078\",\n        //                                         firstId:  115581219,\n        //                                          lastId:  115581219,\n        //                                       dealCount:  1,\n        //                                 numberPrecision:  4,\n        //                                  pricePrecision:  8,\n        //                                             cny: \"73.66\",\n        //                                             usd: \"10.79\",\n        //                                             krw: \"11995.03\"    }     },\n        //            time:    1535971578,\n        //       microtime:   \"0.39854200 1535971578\",\n        //          source:   \"api\"                                                }\n        //\n        const tickers = this.safeValue (response, 'data');\n        const timestamp = this.parseMicrotime (this.safeString (response, 'microtime'));\n        const result = {};\n        const ids = Object.keys (tickers);\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            let ticker = tickers[id];\n            let market = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n            }\n            ticker = this.parseTicker (tickers[id], market);\n            let symbol = ticker['symbol'];\n            if (symbol === undefined) {\n                if (market !== undefined) {\n                    symbol = market['symbol'];\n                } else {\n                    const [ baseId, quoteId ] = id.split ('_');\n                    const base = this.safeCurrencyCode (baseId);\n                    const quote = this.safeCurrencyCode (quoteId);\n                    symbol = base + '/' + quote;\n                }\n            }\n            if (symbol !== undefined) {\n                result[symbol] = this.extend (ticker, {\n                    'timestamp': timestamp,\n                    'datetime': this.iso8601 (timestamp),\n                });\n            }\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTime (params = {}) {\n        const response = await this.marketGetGetServerTime (params);\n        //\n        //     {\n        //         \"status\":200,\n        //         \"msg\":\"\",\n        //         \"data\":[],\n        //         \"time\":1555490875,\n        //         \"microtime\":\"0.35994200 1555490875\",\n        //         \"source\":\"api\"\n        //     }\n        //\n        return this.safeTimestamp (response, 'time');\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'symbol': this.marketId (symbol),\n        };\n        const response = await this.marketGetDepth (this.extend (request, params));\n        //\n        //     {    status:    200,\n        //             msg:   \"\",\n        //            data: {     asks: [ [\"10.00000000\", \"0.4426\", \"4.4260\"],\n        //                                [\"1.00000000\", \"0.8339\", \"0.8339\"],\n        //                                [\"0.91700000\", \"0.0500\", \"0.0458\"],\n        //                                [\"0.20000000\", \"0.1000\", \"0.0200\"],\n        //                                [\"0.03987120\", \"16.1262\", \"0.6429\"],\n        //                                [\"0.03986120\", \"9.7523\", \"0.3887\"]   ],\n        //                        bids: [ [\"0.03976145\", \"0.0359\", \"0.0014\"],\n        //                                [\"0.03973401\", \"20.9493\", \"0.8323\"],\n        //                                [\"0.03967970\", \"0.0328\", \"0.0013\"],\n        //                                [\"0.00000002\", \"10000.0000\", \"0.0002\"],\n        //                                [\"0.00000001\", \"231840.7500\", \"0.0023\"] ],\n        //                    coinPair:   \"eth_btc\"                                  },\n        //            time:    1535974778,\n        //       microtime:   \"0.04017400 1535974778\",\n        //          source:   \"api\"                                                     }\n        //\n        const orderbook = this.safeValue (response, 'data');\n        const timestamp = this.parseMicrotime (this.safeString (response, 'microtime'));\n        return this.parseOrderBook (orderbook, symbol, timestamp);\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //    { id:  115807453,\n        //       t: \"19:36:24\",\n        //       T:  1535974584,\n        //       p: \"0.03983296\",\n        //       n: \"0.1000\",\n        //       s: \"buy\"         },\n        //\n        const id = this.safeString (trade, 'id');\n        const timestamp = this.safeTimestamp (trade, 'T');\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const priceString = this.safeString (trade, 'p');\n        const amountString = this.safeString (trade, 'n');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        const side = this.safeString (trade, 's');\n        return {\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': id,\n            'order': undefined,\n            'type': 'limit',\n            'side': side,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const response = await this.marketGetOrder (this.extend (request, params));\n        //\n        //     {    status:    200,\n        //             msg:   \"\",\n        //            data: [ { id:  115807453,\n        //                       t: \"19:36:24\",\n        //                       T:  1535974584,\n        //                       p: \"0.03983296\",\n        //                       n: \"0.1000\",\n        //                       s: \"buy\"         },\n        //                    { id:  115806811,\n        //                       t: \"19:33:19\",\n        //                       T:  1535974399,\n        //                       p: \"0.03981135\",\n        //                       n: \"9.4612\",\n        //                       s: \"sell\"        }  ],\n        //            time:    1535974583,\n        //       microtime:   \"0.57118100 1535974583\",\n        //          source:   \"api\"                     }\n        //\n        return this.parseTrades (response['data'], market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined) {\n        //\n        //     {\n        //         time: \"1535973420000\",\n        //         open: \"0.03975084\",\n        //         high: \"0.03975084\",\n        //         low: \"0.03967700\",\n        //         close: \"0.03967700\",\n        //         volume: \"12.4733\",\n        //         datetime: \"2018-09-03 19:17:00\"\n        //     }\n        //\n        return [\n            this.safeInteger (ohlcv, 'time'),\n            this.safeNumber (ohlcv, 'open'),\n            this.safeNumber (ohlcv, 'high'),\n            this.safeNumber (ohlcv, 'low'),\n            this.safeNumber (ohlcv, 'close'),\n            this.safeNumber (ohlcv, 'volume'),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const duration = this.parseTimeframe (timeframe) * 1000;\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n            'resolution': this.timeframes[timeframe],\n        };\n        if (limit !== undefined) {\n            request['size'] = Math.min (limit, 300); // 1-300\n            if (since !== undefined) {\n                request['to'] = this.sum (since, limit * duration * 1000);\n            }\n        } else {\n            if (since !== undefined) {\n                throw new ArgumentsRequired (this.id + ' fetchOHLCV() requires a limit argument if the since argument is specified');\n            }\n        }\n        const response = await this.marketGetKline (this.extend (request, params));\n        //\n        //     {\n        //         status: 200,\n        //         msg: \"\",\n        //         data: {\n        //             bars: [\n        //                 { time: \"1535973420000\", open: \"0.03975084\", high: \"0.03975084\", low: \"0.03967700\", close: \"0.03967700\", volume: \"12.4733\", datetime: \"2018-09-03 19:17:00\" },\n        //                 { time: \"1535955480000\", open: \"0.04009900\", high: \"0.04016745\", low: \"0.04009900\", close: \"0.04012074\", volume: \"74.4803\", datetime: \"2018-09-03 14:18:00\" },\n        //             ],\n        //             resolution: \"1min\",\n        //             symbol: \"eth_btc\",\n        //             from: \"1535973420000\",\n        //             to: \"1535955480000\",\n        //             size: 300\n        //         },\n        //         time: 1535973435,\n        //         microtime: \"0.56462100 1535973435\",\n        //         source: \"api\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        const bars = this.safeValue (data, 'bars', []);\n        return this.parseOHLCVs (bars, market, timeframe, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        const statuses = {\n            '0': 'open',\n            '1': 'open', // partially filled\n            '2': 'closed', // filled\n            '3': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        // createOrder\n        //\n        //    {\n        //         \"id\": \"693248739\",   // order id\n        //         \"uId\": \"2074056\",    // uid\n        //         \"price\": \"100\",      // price\n        //         \"number\": \"10\",      // number\n        //         \"numberOver\": \"10\",  // undealed\n        //         \"flag\": \"sale\",      // flag\n        //         \"status\": \"0\",       // unfilled\n        //         \"coinFrom\": \"vtc\",\n        //         \"coinTo\": \"dkkt\",\n        //         \"numberDeal\": \"0\"    // dealed\n        //     }\n        //\n        const id = this.safeString (order, 'id');\n        let symbol = undefined;\n        if (market === undefined) {\n            const baseId = this.safeString (order, 'coinFrom');\n            const quoteId = this.safeString (order, 'coinTo');\n            if ((baseId !== undefined) && (quoteId !== undefined)) {\n                const marketId = baseId + '_' + quoteId;\n                if (marketId in this.markets_by_id) {\n                    market = this.safeValue (this.markets_by_id, marketId);\n                } else {\n                    const base = this.safeCurrencyCode (baseId);\n                    const quote = this.safeCurrencyCode (quoteId);\n                    symbol = base + '/' + quote;\n                }\n            }\n        }\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        let side = this.safeString (order, 'flag');\n        if (side !== undefined) {\n            side = (side === 'sale') ? 'sell' : 'buy';\n        }\n        const price = this.safeNumber (order, 'price');\n        const amount = this.safeNumber (order, 'number');\n        const remaining = this.safeNumber (order, 'numberOver');\n        const filled = this.safeNumber (order, 'numberDeal');\n        let timestamp = this.safeInteger (order, 'timestamp');\n        if (timestamp === undefined) {\n            timestamp = this.safeTimestamp (order, 'created');\n        }\n        const cost = this.safeNumber (order, 'orderTotalPrice');\n        const status = this.parseOrderStatus (this.safeString (order, 'status'));\n        return this.safeOrder ({\n            'id': id,\n            'clientOrderId': undefined,\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'lastTradeTimestamp': undefined,\n            'status': status,\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n            'average': undefined,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type !== 'limit') {\n            throw new ExchangeError (this.id + ' createOrder allows limit orders only');\n        }\n        const market = this.market (symbol);\n        const orderType = (side === 'buy') ? '1' : '2';\n        if (!this.password) {\n            throw new ExchangeError (this.id + ' createOrder() requires you to set exchange.password = \"YOUR_TRADING_PASSWORD\" (a trade password is NOT THE SAME as your login password)');\n        }\n        const request = {\n            'symbol': market['id'],\n            'type': orderType,\n            'price': this.priceToPrecision (symbol, price),\n            'number': this.amountToPrecision (symbol, amount),\n            'tradePwd': this.password,\n        };\n        const response = await this.tradePostAddEntrustSheet (this.extend (request, params));\n        //\n        //     {\n        //         \"status\": 200,\n        //         \"msg\": \"\",\n        //         \"data\": {\n        //             \"id\": \"693248739\",   // order id\n        //             \"uId\": \"2074056\",    // uid\n        //             \"price\": \"100\",      // price\n        //             \"number\": \"10\",      // number\n        //             \"numberOver\": \"10\",  // undealed\n        //             \"flag\": \"sale\",      // flag\n        //             \"status\": \"0\",       // unfilled\n        //             \"coinFrom\": \"vtc\",\n        //             \"coinTo\": \"dkkt\",\n        //             \"numberDeal\": \"0\"    // dealed\n        //         },\n        //         \"time\": \"1533035297\",\n        //         \"microtime\": \"0.41892000 1533035297\",\n        //         \"source\": \"api\",\n        //     }\n        //\n        const timestamp = this.parseMicrotime (this.safeString (response, 'microtime'));\n        const order = this.extend ({\n            'timestamp': timestamp,\n        }, response['data']);\n        return this.parseOrder (order, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'entrustSheetId': id,\n        };\n        const response = await this.tradePostCancelEntrustSheet (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":200,\n        //         \"msg\":\"\",\n        //         \"data\":{\n        //             \"updateAssetsData\":{\n        //                 \"coin\":\"bz\",\n        //                 \"over\":\"1000.00000000\",\n        //                 \"lock\":\"-1000.00000000\"\n        //             },\n        //             \"assetsInfo\":{\n        //                 \"coin\":\"bz\",\n        //                 \"over\":\"9999.99999999\",\n        //                 \"lock\":\"9999.99999999\"\n        //             }\n        //         },\n        //         \"time\":\"1535464383\",\n        //         \"microtime\":\"0.91558000 1535464383\",\n        //         \"source\":\"api\"\n        //     }\n        //\n        return response;\n    }\n\n    async cancelOrders (ids, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'ids': ids.join (','),\n        };\n        const response = await this.tradePostCancelEntrustSheet (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":200,\n        //         \"msg\":\"\",\n        //         \"data\":{\n        //             \"744173808\":{\n        //                 \"updateAssetsData\":{\n        //                     \"coin\":\"bz\",\n        //                     \"over\":\"100.00000000\",\n        //                     \"lock\":\"-100.00000000\"\n        //                 },\n        //                 \"assetsInfo\":{\n        //                     \"coin\":\"bz\",\n        //                     \"over\":\"899.99999999\",\n        //                     \"lock\":\"19099.99999999\"\n        //                 }\n        //             },\n        //             \"744173809\":{\n        //                 \"updateAssetsData\":{\n        //                     \"coin\":\"bz\",\n        //                     \"over\":\"100.00000000\",\n        //                     \"lock\":\"-100.00000000\"\n        //                 },\n        //                 \"assetsInfo\":{\n        //                     \"coin\":\"bz\",\n        //                     \"over\":\"999.99999999\",\n        //                     \"lock\":\"18999.99999999\"\n        //                 }\n        //             }\n        //         },\n        //         \"time\":\"1535525649\",\n        //         \"microtime\":\"0.05009400 1535525649\",\n        //         \"source\":\"api\"\n        //     }\n        //\n        return response;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'entrustSheetId': id,\n        };\n        const response = await this.tradePostGetEntrustSheetInfo (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":200,\n        //         \"msg\":\"\",\n        //         \"data\":{\n        //             \"id\":\"708279852\",\n        //             \"uId\":\"2074056\",\n        //             \"price\":\"100.00000000\",\n        //             \"number\":\"10.0000\",\n        //             \"total\":\"0.00000000\",\n        //             \"numberOver\":\"10.0000\",\n        //             \"numberDeal\":\"0.0000\",\n        //             \"flag\":\"sale\",\n        //             \"status\":\"0\",  //0:unfilled, 1:partial deal, 2:all transactions, 3:already cancelled\n        //             \"coinFrom\":\"bz\",\n        //             \"coinTo\":\"usdt\",\n        //             \"orderTotalPrice\":\"0\",\n        //             \"created\":\"1533279876\"\n        //         },\n        //         \"time\":\"1533280294\",\n        //         \"microtime\":\"0.36859200 1533280294\",\n        //         \"source\":\"api\"\n        //     }\n        //\n        return this.parseOrder (response['data']);\n    }\n\n    async fetchOrdersWithMethod (method, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOpenOrders() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'coinFrom': market['baseId'],\n            'coinTo': market['quoteId'],\n            // 'type': 1, // optional integer, 1 = buy, 2 = sell\n            // 'page': 1, // optional integer\n            // 'pageSize': 100, // optional integer, max 100\n            // 'startTime': 1510235730, // optional integer timestamp in seconds\n            // 'endTime': 1510235730, // optional integer timestamp in seconds\n        };\n        if (limit !== undefined) {\n            request['page'] = 1;\n            request['pageSize'] = limit;\n        }\n        if (since !== undefined) {\n            request['startTime'] = parseInt (since / 1000);\n            // request['endTime'] = parseInt (since / 1000);\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     {\n        //         \"status\": 200,\n        //         \"msg\": \"\",\n        //         \"data\": {\n        //             \"data\": [\n        //                 {\n        //                     \"id\": \"693248739\",\n        //                     \"uid\": \"2074056\",\n        //                     \"price\": \"100.00000000\",\n        //                     \"number\": \"10.0000\",\n        //                     \"total\": \"0.00000000\",\n        //                     \"numberOver\": \"0.0000\",\n        //                     \"numberDeal\": \"0.0000\",\n        //                     \"flag\": \"sale\",\n        //                     \"status\": \"3\", // 0:unfilled, 1:partial deal, 2:all transactions, 3:already cancelled\n        //                     \"isNew\": \"N\",\n        //                     \"coinFrom\": \"vtc\",\n        //                     \"coinTo\": \"dkkt\",\n        //                     \"created\": \"1533035300\",\n        //                 },\n        //                 {\n        //                     \"id\": \"723086996\",\n        //                     \"uid\": \"2074056\",\n        //                     \"price\": \"100.00000000\",\n        //                     \"number\": \"10.0000\",\n        //                     \"total\": \"0.00000000\",\n        //                     \"numberOver\": \"0.0000\",\n        //                     \"numberDeal\": \"0.0000\",\n        //                     \"flag\": \"sale\",\n        //                     \"status\": \"3\",\n        //                     \"isNew\": \"N\",\n        //                     \"coinFrom\": \"bz\",\n        //                     \"coinTo\": \"usdt\",\n        //                     \"created\": \"1533523568\",\n        //                 },\n        //             ],\n        //             \"pageInfo\": {\n        //                 \"limit\": \"10\",\n        //                 \"offest\": \"0\",\n        //                 \"current_page\": \"1\",\n        //                 \"page_size\": \"10\",\n        //                 \"total_count\": \"17\",\n        //                 \"page_count\": \"2\",\n        //             }\n        //         },\n        //         \"time\": \"1533279329\",\n        //         \"microtime\": \"0.15305300 1533279329\",\n        //         \"source\": \"api\"\n        //     }\n        //\n        const orders = this.safeValue (response['data'], 'data', []);\n        return this.parseOrders (orders, undefined, since, limit);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersWithMethod ('tradePostGetUserHistoryEntrustSheet', symbol, since, limit, params);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersWithMethod ('tradePostGetUserNowEntrustSheet', symbol, since, limit, params);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchOrdersWithMethod ('tradePostGetUserHistoryEntrustSheet', symbol, since, limit, params);\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            '1': 'pending',\n            '2': 'pending',\n            '3': 'pending',\n            '4': 'ok',\n            '5': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        //     {\n        //         \"id\": '96275',\n        //         \"uid\": '2109073',\n        //         \"wallet\": '0xf4c4141c0127bc37b1d0c409a091920eba13ada7',\n        //         \"txid\": '0xb7adfa52aa566f9ac112e3c01f77bd91179b19eab12092a9a5a8b33d5086e31d',\n        //         \"confirm\": '12',\n        //         \"number\": '0.50000000',\n        //         \"status\": 4,\n        //         \"updated\": '1534944168605',\n        //         \"addressUrl\": 'https://etherscan.io/address/',\n        //         \"txidUrl\": 'https://etherscan.io/tx/',\n        //         \"description\": 'Ethereum',\n        //         \"coin\": 'eth',\n        //         \"memo\": ''\n        //     }\n        //\n        //     {\n        //         \"id\":\"397574\",\n        //         \"uid\":\"2033056\",\n        //         \"wallet\":\"1AG1gZvQAYu3WBvgg7p4BMMghQD2gE693k\",\n        //         \"txid\":\"\",\n        //         \"confirm\":\"0\",\n        //         \"number\":\"1000.00000000\",\n        //         \"status\":1,\n        //         \"updated\":\"0\",\n        //         \"addressUrl\":\"http://omniexplorer.info/lookupadd.aspx?address=\",\n        //         \"txidUrl\":\"http://omniexplorer.info/lookuptx.aspx?txid=\",\n        //         \"description\":\"Tether\",\n        //         \"coin\":\"usdt\",\n        //         \"memo\":\"\"\n        //     }\n        //\n        //     {\n        //         \"id\":\"153606\",\n        //         \"uid\":\"2033056\",\n        //         \"wallet\":\"1AG1gZvQAYu3WBvgg7p4BMMghQD2gE693k\",\n        //         \"txid\":\"aa2b179f84cd6dedafd41845e0fbf7f01e14c0d71ea3140d03d6f5a9ccd93199\",\n        //         \"confirm\":\"0\",\n        //         \"number\":\"761.11110000\",\n        //         \"status\":4,\n        //         \"updated\":\"1536726133579\",\n        //         \"addressUrl\":\"http://omniexplorer.info/lookupadd.aspx?address=\",\n        //         \"txidUrl\":\"http://omniexplorer.info/lookuptx.aspx?txid=\",\n        //         \"description\":\"Tether\",\n        //         \"coin\":\"usdt\",\n        //         \"memo\":\"\"\n        //     }\n        //\n        // withdraw\n        //\n        //     {\n        //         \"id\":397574,\n        //         \"email\":\"***@email.com\",\n        //         \"coin\":\"usdt\",\n        //         \"network_fee\":\"\",\n        //         \"eid\":23112\n        //     }\n        //\n        let timestamp = this.safeInteger (transaction, 'updated');\n        if (timestamp === 0) {\n            timestamp = undefined;\n        }\n        const currencyId = this.safeString (transaction, 'coin');\n        const code = this.safeCurrencyCode (currencyId, currency);\n        const type = this.safeStringLower (transaction, 'type');\n        const status = this.parseTransactionStatus (this.safeString (transaction, 'status'));\n        let fee = undefined;\n        const feeCost = this.safeNumber (transaction, 'network_fee');\n        if (feeCost !== undefined) {\n            fee = {\n                'cost': feeCost,\n                'code': code,\n            };\n        }\n        return {\n            'id': this.safeString (transaction, 'id'),\n            'txid': this.safeString (transaction, 'txid'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'address': this.safeString (transaction, 'wallet'),\n            'tag': this.safeString (transaction, 'memo'),\n            'type': type,\n            'amount': this.safeNumber (transaction, 'number'),\n            'currency': code,\n            'status': status,\n            'updated': timestamp,\n            'fee': fee,\n            'info': transaction,\n        };\n    }\n\n    parseTransactionsByType (type, transactions, code = undefined, since = undefined, limit = undefined) {\n        const result = [];\n        for (let i = 0; i < transactions.length; i++) {\n            const transaction = this.parseTransaction (this.extend ({\n                'type': type,\n            }, transactions[i]));\n            result.push (transaction);\n        }\n        return this.filterByCurrencySinceLimit (result, code, since, limit);\n    }\n\n    parseTransactionType (type) {\n        const types = {\n            'deposit': 1,\n            'withdrawal': 2,\n        };\n        return this.safeInteger (types, type, type);\n    }\n\n    async fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsForType ('deposit', code, since, limit, params);\n    }\n\n    async fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {}) {\n        return await this.fetchTransactionsForType ('withdrawal', code, since, limit, params);\n    }\n\n    async fetchTransactionsForType (type, code = undefined, since = undefined, limit = undefined, params = {}) {\n        if (code === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchTransactions() requires a currency `code` argument');\n        }\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coin': currency['id'],\n            'type': this.parseTransactionType (type),\n        };\n        if (since !== undefined) {\n            request['startTime'] = parseInt (since / 1000).toString ();\n        }\n        if (limit !== undefined) {\n            request['page'] = 1;\n            request['pageSize'] = limit;\n        }\n        const response = await this.tradePostDepositOrWithdraw (this.extend (request, params));\n        const transactions = this.safeValue (response['data'], 'data', []);\n        return this.parseTransactionsByType (type, transactions, code, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        const request = {\n            'coin': currency['id'],\n            'number': this.currencyToPrecision (code, amount),\n            'address': address,\n            // 'type': 'erc20', // omni, trc20, optional\n        };\n        if (tag !== undefined) {\n            request['memo'] = tag;\n        }\n        const response = await this.tradePostCoinOut (this.extend (request, params));\n        //\n        //     {\n        //         \"status\":200,\n        //         \"msg\":\"\",\n        //         \"data\":{\n        //             \"id\":397574,\n        //             \"email\":\"***@email.com\",\n        //             \"coin\":\"usdt\",\n        //             \"network_fee\":\"\",\n        //             \"eid\":23112\n        //         },\n        //         \"time\":1552641646,\n        //         \"microtime\":\"0.70304500 1552641646\",\n        //         \"source\":\"api\"\n        //     }\n        //\n        const data = this.safeValue (response, 'data', {});\n        return this.parseTransaction (data, currency);\n    }\n\n    nonce () {\n        const currentTimestamp = this.seconds ();\n        if (currentTimestamp > this.options['lastNonceTimestamp']) {\n            this.options['lastNonceTimestamp'] = currentTimestamp;\n            this.options['lastNonce'] = 100000;\n        }\n        this.options['lastNonce'] = this.sum (this.options['lastNonce'], 1);\n        return this.options['lastNonce'];\n    }\n\n    sign (path, api = 'market', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const baseUrl = this.implodeParams (this.urls['api'][api], { 'hostname': this.hostname });\n        let url = baseUrl + '/' + this.capitalize (api) + '/' + path;\n        let query = undefined;\n        if (api === 'market') {\n            query = this.urlencode (params);\n            if (query.length) {\n                url += '?' + query;\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            body = this.rawencode (this.keysort (this.extend ({\n                'apiKey': this.apiKey,\n                'timeStamp': this.seconds (),\n                'nonce': this.nonce (),\n            }, params)));\n            body += '&sign=' + this.hash (this.encode (body + this.secret));\n            headers = { 'Content-type': 'application/x-www-form-urlencoded' };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return; // fallback to default error handler\n        }\n        const status = this.safeString (response, 'status');\n        if (status !== undefined) {\n            const feedback = this.id + ' ' + body;\n            //\n            //     {\"status\":-107,\"msg\":\"\",\"data\":\"\",\"time\":1535968848,\"microtime\":\"0.89092200 1535968848\",\"source\":\"api\"}\n            //\n            if (status === '200') {\n                //\n                //     {\"status\":200,\"msg\":\"\",\"data\":-200031,\"time\":1535999806,\"microtime\":\"0.85476800 1535999806\",\"source\":\"api\"}\n                //\n                const code = this.safeInteger (response, 'data');\n                if (code !== undefined) {\n                    this.throwExactlyMatchedException (this.exceptions, code, feedback);\n                    throw new ExchangeError (feedback);\n                } else {\n                    return; // no error\n                }\n            }\n            this.throwExactlyMatchedException (this.exceptions, status, feedback);\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}