{"ast":null,"code":"'use strict'; // ---------------------------------------------------------------------------\n\nconst bitfinex = require('./bitfinex.js');\n\nconst {\n  ExchangeError,\n  InvalidAddress,\n  ArgumentsRequired,\n  InsufficientFunds,\n  AuthenticationError,\n  OrderNotFound,\n  InvalidOrder,\n  BadRequest,\n  InvalidNonce,\n  BadSymbol,\n  OnMaintenance,\n  NotSupported,\n  PermissionDenied\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); // ---------------------------------------------------------------------------\n\n\nmodule.exports = class bitfinex2 extends bitfinex {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'bitfinex2',\n      'name': 'Bitfinex',\n      'countries': ['VG'],\n      'version': 'v2',\n      'certified': false,\n      'pro': false,\n      // new metainfo interface\n      'has': {\n        'CORS': false,\n        'cancelAllOrders': true,\n        'cancelOrder': true,\n        'createDepositAddress': true,\n        'createLimitOrder': true,\n        'createMarketOrder': true,\n        'createOrder': true,\n        'deposit': false,\n        'editOrder': false,\n        'fetchBalance': true,\n        'fetchClosedOrder': true,\n        'fetchClosedOrders': false,\n        'fetchCurrencies': true,\n        'fetchDepositAddress': true,\n        'fetchFundingFees': false,\n        'fetchMyTrades': true,\n        'fetchOHLCV': true,\n        'fetchOpenOrder': true,\n        'fetchOpenOrders': true,\n        'fetchOrder': false,\n        'fetchOrderTrades': true,\n        'fetchStatus': true,\n        'fetchTickers': true,\n        'fetchTradingFee': false,\n        'fetchTradingFees': false,\n        'fetchTransactions': true,\n        'withdraw': true\n      },\n      'timeframes': {\n        '1m': '1m',\n        '5m': '5m',\n        '15m': '15m',\n        '30m': '30m',\n        '1h': '1h',\n        '3h': '3h',\n        '4h': '4h',\n        '6h': '6h',\n        '12h': '12h',\n        '1d': '1D',\n        '1w': '7D',\n        '2w': '14D',\n        '1M': '1M'\n      },\n      'rateLimit': 1500,\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',\n        'api': {\n          'v1': 'https://api.bitfinex.com',\n          'public': 'https://api-pub.bitfinex.com',\n          'private': 'https://api.bitfinex.com'\n        },\n        'www': 'https://www.bitfinex.com',\n        'doc': ['https://docs.bitfinex.com/v2/docs/', 'https://github.com/bitfinexcom/bitfinex-api-node'],\n        'fees': 'https://www.bitfinex.com/fees'\n      },\n      'api': {\n        'v1': {\n          'get': ['symbols', 'symbols_details']\n        },\n        'public': {\n          'get': ['conf/{config}', 'conf/pub:{action}:{object}', 'conf/pub:{action}:{object}:{detail}', 'conf/pub:map:{object}', 'conf/pub:map:{object}:{detail}', 'conf/pub:map:currency:{detail}', 'conf/pub:map:currency:sym', // maps symbols to their API symbols, BAB > BCH\n          'conf/pub:map:currency:label', // verbose friendly names, BNT > Bancor\n          'conf/pub:map:currency:unit', // maps symbols to unit of measure where applicable\n          'conf/pub:map:currency:undl', // maps derivatives symbols to their underlying currency\n          'conf/pub:map:currency:pool', // maps symbols to underlying network/protocol they operate on\n          'conf/pub:map:currency:explorer', // maps symbols to their recognised block explorer URLs\n          'conf/pub:map:currency:tx:fee', // maps currencies to their withdrawal fees https://github.com/ccxt/ccxt/issues/7745\n          'conf/pub:map:tx:method', 'conf/pub:list:{object}', 'conf/pub:list:{object}:{detail}', 'conf/pub:list:currency', 'conf/pub:list:pair:exchange', 'conf/pub:list:pair:margin', 'conf/pub:list:pair:futures', 'conf/pub:list:competitions', 'conf/pub:info:{object}', 'conf/pub:info:{object}:{detail}', 'conf/pub:info:pair', 'conf/pub:info:tx:status', // [ deposit, withdrawal ] statuses 1 = active, 0 = maintenance\n          'conf/pub:fees', 'platform/status', 'tickers', 'ticker/{symbol}', 'trades/{symbol}/hist', 'book/{symbol}/{precision}', 'book/{symbol}/P0', 'book/{symbol}/P1', 'book/{symbol}/P2', 'book/{symbol}/P3', 'book/{symbol}/R0', 'stats1/{key}:{size}:{symbol}:{side}/{section}', 'stats1/{key}:{size}:{symbol}:{side}/last', 'stats1/{key}:{size}:{symbol}:{side}/hist', 'stats1/{key}:{size}:{symbol}/{section}', 'stats1/{key}:{size}:{symbol}/last', 'stats1/{key}:{size}:{symbol}/hist', 'stats1/{key}:{size}:{symbol}:long/last', 'stats1/{key}:{size}:{symbol}:long/hist', 'stats1/{key}:{size}:{symbol}:short/last', 'stats1/{key}:{size}:{symbol}:short/hist', 'candles/trade:{timeframe}:{symbol}:{period}/{section}', 'candles/trade:{timeframe}:{symbol}/{section}', 'candles/trade:{timeframe}:{symbol}/last', 'candles/trade:{timeframe}:{symbol}/hist', 'status/{type}', 'status/deriv', 'liquidations/hist', 'rankings/{key}:{timeframe}:{symbol}/{section}', 'rankings/{key}:{timeframe}:{symbol}/hist'],\n          'post': ['calc/trade/avg', 'calc/fx']\n        },\n        'private': {\n          'post': [// 'auth/r/orders/{symbol}/new', // outdated\n          // 'auth/r/stats/perf:{timeframe}/hist', // outdated\n          'auth/r/wallets', 'auth/r/wallets/hist', 'auth/r/orders', 'auth/r/orders/{symbol}', 'auth/w/order/submit', 'auth/w/order/update', 'auth/w/order/cancel', 'auth/w/order/multi', 'auth/w/order/cancel/multi', 'auth/r/orders/{symbol}/hist', 'auth/r/orders/hist', 'auth/r/order/{symbol}:{id}/trades', 'auth/r/trades/{symbol}/hist', 'auth/r/trades/hist', 'auth/r/ledgers/{currency}/hist', 'auth/r/ledgers/hist', 'auth/r/info/margin/{key}', 'auth/r/info/margin/base', 'auth/r/info/margin/sym_all', 'auth/r/positions', 'auth/w/position/claim', 'auth/r/positions/hist', 'auth/r/positions/audit', 'auth/r/positions/snap', 'auth/w/deriv/collateral/set', 'auth/w/deriv/collateral/limits', 'auth/r/funding/offers', 'auth/r/funding/offers/{symbol}', 'auth/w/funding/offer/submit', 'auth/w/funding/offer/cancel', 'auth/w/funding/offer/cancel/all', 'auth/w/funding/close', 'auth/w/funding/auto', 'auth/w/funding/keep', 'auth/r/funding/offers/{symbol}/hist', 'auth/r/funding/offers/hist', 'auth/r/funding/loans', 'auth/r/funding/loans/hist', 'auth/r/funding/loans/{symbol}', 'auth/r/funding/loans/{symbol}/hist', 'auth/r/funding/credits', 'auth/r/funding/credits/hist', 'auth/r/funding/credits/{symbol}', 'auth/r/funding/credits/{symbol}/hist', 'auth/r/funding/trades/{symbol}/hist', 'auth/r/funding/trades/hist', 'auth/r/info/funding/{key}', 'auth/r/info/user', 'auth/r/logins/hist', 'auth/w/transfer', 'auth/w/deposit/address', 'auth/w/deposit/invoice', 'auth/w/withdraw', 'auth/r/movements/{currency}/hist', 'auth/r/movements/hist', 'auth/r/alerts', 'auth/w/alert/set', 'auth/w/alert/price:{symbol}:{price}/del', 'auth/w/alert/{type}:{symbol}:{price}/del', 'auth/calc/order/avail', 'auth/w/settings/set', 'auth/r/settings', 'auth/w/settings/del']\n        }\n      },\n      'fees': {\n        'trading': {\n          'maker': 0.1 / 100,\n          'taker': 0.2 / 100\n        },\n        'funding': {\n          'withdraw': {\n            'BTC': 0.0004,\n            'BCH': 0.0001,\n            'ETH': 0.00135,\n            'EOS': 0.0,\n            'LTC': 0.001,\n            'OMG': 0.15097,\n            'IOT': 0.0,\n            'NEO': 0.0,\n            'ETC': 0.01,\n            'XRP': 0.02,\n            'ETP': 0.01,\n            'ZEC': 0.001,\n            'BTG': 0.0,\n            'DASH': 0.01,\n            'XMR': 0.0001,\n            'QTM': 0.01,\n            'EDO': 0.23687,\n            'DAT': 9.8858,\n            'AVT': 1.1251,\n            'SAN': 0.35977,\n            'USDT': 5.0,\n            'SPK': 16.971,\n            'BAT': 1.1209,\n            'GNT': 2.8789,\n            'SNT': 9.0848,\n            'QASH': 1.726,\n            'YYW': 7.9464\n          }\n        }\n      },\n      'options': {\n        'precision': 'R0',\n        // P0, P1, P2, P3, P4, R0\n        // convert 'EXCHANGE MARKET' to lowercase 'market'\n        // convert 'EXCHANGE LIMIT' to lowercase 'limit'\n        // everything else remains uppercase\n        'exchangeTypes': {\n          // 'MARKET': undefined,\n          'EXCHANGE MARKET': 'market',\n          // 'LIMIT': undefined,\n          'EXCHANGE LIMIT': 'limit' // 'STOP': undefined,\n          // 'EXCHANGE STOP': undefined,\n          // 'TRAILING STOP': undefined,\n          // 'EXCHANGE TRAILING STOP': undefined,\n          // 'FOK': undefined,\n          // 'EXCHANGE FOK': undefined,\n          // 'STOP LIMIT': undefined,\n          // 'EXCHANGE STOP LIMIT': undefined,\n          // 'IOC': undefined,\n          // 'EXCHANGE IOC': undefined,\n\n        },\n        // convert 'market' to 'EXCHANGE MARKET'\n        // convert 'limit' 'EXCHANGE LIMIT'\n        // everything else remains as is\n        'orderTypes': {\n          'market': 'EXCHANGE MARKET',\n          'limit': 'EXCHANGE LIMIT'\n        },\n        'fiat': {\n          'USD': 'USD',\n          'EUR': 'EUR',\n          'JPY': 'JPY',\n          'GBP': 'GBP'\n        },\n        // actually the correct names unlike the v1\n        // we don't want to extend this with accountsByType in v1\n        'v2AccountsByType': {\n          'spot': 'exchange',\n          'exchange': 'exchange',\n          'funding': 'funding',\n          'margin': 'margin',\n          'derivatives': 'margin'\n        }\n      },\n      'exceptions': {\n        'exact': {\n          '10001': PermissionDenied,\n          // api_key: permission invalid (#10001)\n          '10020': BadRequest,\n          '10100': AuthenticationError,\n          '10114': InvalidNonce,\n          '20060': OnMaintenance\n        },\n        'broad': {\n          'address': InvalidAddress,\n          'available balance is only': InsufficientFunds,\n          'not enough exchange balance': InsufficientFunds,\n          'Order not found': OrderNotFound,\n          'symbol: invalid': BadSymbol,\n          'Invalid order': InvalidOrder\n        }\n      }\n    });\n  }\n\n  isFiat(code) {\n    return code in this.options['fiat'];\n  }\n\n  getCurrencyId(code) {\n    return 'f' + code;\n  }\n\n  async fetchStatus(params = {}) {\n    //\n    //    [1] // operative\n    //    [0] // maintenance\n    //\n    const response = await this.publicGetPlatformStatus(params);\n    const status = this.safeInteger(response, 0);\n    const formattedStatus = status === 1 ? 'ok' : 'maintenance';\n    this.status = this.extend(this.status, {\n      'status': formattedStatus,\n      'updated': this.milliseconds()\n    });\n    return this.status;\n  }\n\n  async fetchMarkets(params = {}) {\n    // todo drop v1 in favor of v2 configs\n    // pub:list:pair:exchange,pub:list:pair:margin,pub:list:pair:futures,pub:info:pair\n    const v2response = await this.publicGetConfPubListPairFutures(params);\n    const v1response = await this.v1GetSymbolsDetails(params);\n    const futuresMarketIds = this.safeValue(v2response, 0, []);\n    const result = [];\n\n    for (let i = 0; i < v1response.length; i++) {\n      const market = v1response[i];\n      let id = this.safeStringUpper(market, 'pair');\n      let spot = true;\n\n      if (this.inArray(id, futuresMarketIds)) {\n        spot = false;\n      }\n\n      const futures = !spot;\n      const type = spot ? 'spot' : 'futures';\n      let baseId = undefined;\n      let quoteId = undefined;\n\n      if (id.indexOf(':') >= 0) {\n        const parts = id.split(':');\n        baseId = parts[0];\n        quoteId = parts[1];\n      } else {\n        baseId = id.slice(0, 3);\n        quoteId = id.slice(3, 6);\n      }\n\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      id = 't' + id;\n      baseId = this.getCurrencyId(baseId);\n      quoteId = this.getCurrencyId(quoteId);\n      const precision = {\n        'price': this.safeInteger(market, 'price_precision'),\n        'amount': 8 // https://github.com/ccxt/ccxt/issues/7310\n\n      };\n      const minOrderSizeString = this.safeString(market, 'minimum_order_size');\n      const maxOrderSizeString = this.safeString(market, 'maximum_order_size');\n      const limits = {\n        'amount': {\n          'min': this.parseNumber(minOrderSizeString),\n          'max': this.parseNumber(maxOrderSizeString)\n        },\n        'price': {\n          'min': this.parseNumber('1e-8'),\n          'max': undefined\n        }\n      };\n      limits['cost'] = {\n        'min': undefined,\n        'max': undefined\n      };\n      const margin = this.safeValue(market, 'margin');\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        'precision': precision,\n        'limits': limits,\n        'info': market,\n        'type': type,\n        'swap': false,\n        'spot': spot,\n        'margin': margin,\n        'futures': futures\n      });\n    }\n\n    return result;\n  }\n\n  async fetchCurrencies(params = {}) {\n    const labels = ['pub:list:currency', 'pub:map:currency:sym', // maps symbols to their API symbols, BAB > BCH\n    'pub:map:currency:label', // verbose friendly names, BNT > Bancor\n    'pub:map:currency:unit', // maps symbols to unit of measure where applicable\n    'pub:map:currency:undl', // maps derivatives symbols to their underlying currency\n    'pub:map:currency:pool', // maps symbols to underlying network/protocol they operate on\n    'pub:map:currency:explorer', // maps symbols to their recognised block explorer URLs\n    'pub:map:currency:tx:fee' // maps currencies to their withdrawal fees https://github.com/ccxt/ccxt/issues/7745\n    ];\n    const config = labels.join(',');\n    const request = {\n      'config': config\n    };\n    const response = await this.publicGetConfConfig(this.extend(request, params)); //\n    //     [\n    //\n    //         a list of symbols\n    //         [\"AAA\",\"ABS\",\"ADA\"],\n    //\n    //         // sym\n    //         // maps symbols to their API symbols, BAB > BCH\n    //         [\n    //             [ 'BAB', 'BCH' ],\n    //             [ 'CNHT', 'CNHt' ],\n    //             [ 'DSH', 'DASH' ],\n    //             [ 'IOT', 'IOTA' ],\n    //             [ 'LES', 'LEO-EOS' ],\n    //             [ 'LET', 'LEO-ERC20' ],\n    //             [ 'STJ', 'STORJ' ],\n    //             [ 'TSD', 'TUSD' ],\n    //             [ 'UDC', 'USDC' ],\n    //             [ 'USK', 'USDK' ],\n    //             [ 'UST', 'USDt' ],\n    //             [ 'USTF0', 'USDt0' ],\n    //             [ 'XCH', 'XCHF' ],\n    //             [ 'YYW', 'YOYOW' ],\n    //             // ...\n    //         ],\n    //         // label\n    //         // verbose friendly names, BNT > Bancor\n    //         [\n    //             [ 'BAB', 'Bitcoin Cash' ],\n    //             [ 'BCH', 'Bitcoin Cash' ],\n    //             [ 'LEO', 'Unus Sed LEO' ],\n    //             [ 'LES', 'Unus Sed LEO (EOS)' ],\n    //             [ 'LET', 'Unus Sed LEO (ERC20)' ],\n    //             // ...\n    //         ],\n    //         // unit\n    //         // maps symbols to unit of measure where applicable\n    //         [\n    //             [ 'IOT', 'Mi|MegaIOTA' ],\n    //         ],\n    //         // undl\n    //         // maps derivatives symbols to their underlying currency\n    //         [\n    //             [ 'USTF0', 'UST' ],\n    //             [ 'BTCF0', 'BTC' ],\n    //             [ 'ETHF0', 'ETH' ],\n    //         ],\n    //         // pool\n    //         // maps symbols to underlying network/protocol they operate on\n    //         [\n    //             [ 'SAN', 'ETH' ], [ 'OMG', 'ETH' ], [ 'AVT', 'ETH' ], [ 'EDO', 'ETH' ],\n    //             [ 'ESS', 'ETH' ], [ 'ATD', 'EOS' ], [ 'ADD', 'EOS' ], [ 'MTO', 'EOS' ],\n    //             [ 'PNK', 'ETH' ], [ 'BAB', 'BCH' ], [ 'WLO', 'XLM' ], [ 'VLD', 'ETH' ],\n    //             [ 'BTT', 'TRX' ], [ 'IMP', 'ETH' ], [ 'SCR', 'ETH' ], [ 'GNO', 'ETH' ],\n    //             // ...\n    //         ],\n    //         // explorer\n    //         // maps symbols to their recognised block explorer URLs\n    //         [\n    //             [\n    //                 'AIO',\n    //                 [\n    //                     \"https://mainnet.aion.network\",\n    //                     \"https://mainnet.aion.network/#/account/VAL\",\n    //                     \"https://mainnet.aion.network/#/transaction/VAL\"\n    //                 ]\n    //             ],\n    //             // ...\n    //         ],\n    //         // fee\n    //         // maps currencies to their withdrawal fees\n    //         [\n    //             [\"AAA\",[0,0]],\n    //             [\"ABS\",[0,131.3]],\n    //             [\"ADA\",[0,0.3]],\n    //         ],\n    //     ]\n    //\n\n    const indexed = {\n      'sym': this.indexBy(this.safeValue(response, 1, []), 0),\n      'label': this.indexBy(this.safeValue(response, 2, []), 0),\n      'unit': this.indexBy(this.safeValue(response, 3, []), 0),\n      'undl': this.indexBy(this.safeValue(response, 4, []), 0),\n      'pool': this.indexBy(this.safeValue(response, 5, []), 0),\n      'explorer': this.indexBy(this.safeValue(response, 6, []), 0),\n      'fees': this.indexBy(this.safeValue(response, 7, []), 0)\n    };\n    const ids = this.safeValue(response, 0, []);\n    const result = {};\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const code = this.safeCurrencyCode(id);\n      const label = this.safeValue(indexed['label'], id, []);\n      const name = this.safeString(label, 1);\n      const pool = this.safeValue(indexed['pool'], id, []);\n      const type = this.safeString(pool, 1);\n      const feeValues = this.safeValue(indexed['fees'], id, []);\n      const fees = this.safeValue(feeValues, 1, []);\n      const fee = this.safeNumber(fees, 1);\n      const undl = this.safeValue(indexed['undl'], id, []);\n      const precision = 8; // default precision, todo: fix \"magic constants\"\n\n      const fid = 'f' + id;\n      result[code] = {\n        'id': fid,\n        'code': code,\n        'info': [id, label, pool, feeValues, undl],\n        'type': type,\n        'name': name,\n        'active': true,\n        'fee': fee,\n        'precision': precision,\n        'limits': {\n          'amount': {\n            'min': 1 / Math.pow(10, precision),\n            'max': undefined\n          },\n          'withdraw': {\n            'min': fee,\n            'max': undefined\n          }\n        }\n      };\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    // this api call does not return the 'used' amount - use the v1 version instead (which also returns zero balances)\n    // there is a difference between this and the v1 api, namely trading wallet is called margin in v2\n    await this.loadMarkets();\n    const accountsByType = this.safeValue(this.options, 'v2AccountsByType', {});\n    const requestedType = this.safeString(params, 'type', 'exchange');\n    const accountType = this.safeString(accountsByType, requestedType);\n\n    if (accountType === undefined) {\n      const keys = Object.keys(accountsByType);\n      throw new ExchangeError(this.id + ' fetchBalance type parameter must be one of ' + keys.join(', '));\n    }\n\n    const isDerivative = requestedType === 'derivatives';\n    const query = this.omit(params, 'type');\n    const response = await this.privatePostAuthRWallets(query);\n    const result = {\n      'info': response\n    };\n\n    for (let i = 0; i < response.length; i++) {\n      const balance = response[i];\n      const type = this.safeString(balance, 0);\n      const currencyId = this.safeStringLower(balance, 1, '');\n      const start = currencyId.length - 2;\n      const isDerivativeCode = currencyId.slice(start) === 'f0'; // this will only filter the derivative codes if the requestedType is 'derivatives'\n\n      const derivativeCondition = !isDerivative || isDerivativeCode;\n\n      if (accountType === type && derivativeCondition) {\n        const code = this.safeCurrencyCode(currencyId);\n        const account = this.account();\n        account['total'] = this.safeString(balance, 2);\n        account['free'] = this.safeString(balance, 4);\n        result[code] = account;\n      }\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async transfer(code, amount, fromAccount, toAccount, params = {}) {\n    // transferring between derivatives wallet and regular wallet is not documented in their API\n    // however we support it in CCXT (from just looking at web inspector)\n    await this.loadMarkets();\n    const accountsByType = this.safeValue(this.options, 'v2AccountsByType', {});\n    const fromId = this.safeString(accountsByType, fromAccount);\n\n    if (fromId === undefined) {\n      const keys = Object.keys(accountsByType);\n      throw new ExchangeError(this.id + ' transfer fromAccount must be one of ' + keys.join(', '));\n    }\n\n    const toId = this.safeString(accountsByType, toAccount);\n\n    if (toId === undefined) {\n      const keys = Object.keys(accountsByType);\n      throw new ExchangeError(this.id + ' transfer toAccount must be one of ' + keys.join(', '));\n    }\n\n    const currency = this.currency(code);\n    const fromCurrencyId = this.convertDerivativesId(currency, fromAccount);\n    const toCurrencyId = this.convertDerivativesId(currency, toAccount);\n    const requestedAmount = this.currencyToPrecision(code, amount); // this request is slightly different from v1 fromAccount -> from\n\n    const request = {\n      'amount': requestedAmount,\n      'currency': fromCurrencyId,\n      'currency_to': toCurrencyId,\n      'from': fromId,\n      'to': toId\n    };\n    const response = await this.privatePostAuthWTransfer(this.extend(request, params)); //  [1616451183763,\"acc_tf\",null,null,[1616451183763,\"exchange\",\"margin\",null,\"UST\",\"UST\",null,1],null,\"SUCCESS\",\"1.0 Tether USDt transfered from Exchange to Margin\"]\n\n    const timestamp = this.safeInteger(response, 0); //  [\"error\",10001,\"Momentary balance check. Please wait few seconds and try the transfer again.\"]\n\n    const error = this.safeString(response, 0);\n\n    if (error === 'error') {\n      const message = this.safeString(response, 2, ''); // same message as in v1\n\n      this.throwExactlyMatchedException(this.exceptions['exact'], message, this.id + ' ' + message);\n      throw new ExchangeError(this.id + ' ' + message);\n    }\n\n    const info = this.safeValue(response, 4);\n    const fromResponse = this.safeString(info, 1);\n    const toResponse = this.safeString(info, 2);\n    const toCode = this.safeCurrencyCode(this.safeString(info, 5));\n    const success = this.safeString(response, 6);\n    const status = success === 'SUCCESS' ? 'ok' : undefined;\n    return {\n      'info': response,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'status': status,\n      'amount': requestedAmount,\n      'code': toCode,\n      'fromAccount': fromResponse,\n      'toAccount': toResponse\n    };\n  }\n\n  convertDerivativesId(currency, type) {\n    // there is a difference between this and the v1 api, namely trading wallet is called margin in v2\n    // {\n    //   id: 'fUSTF0',\n    //   code: 'USTF0',\n    //   info: [ 'USTF0', [], [], [], [ 'USTF0', 'UST' ] ],\n    const info = this.safeValue(currency, 'info');\n    const transferId = this.safeString(info, 0);\n    const underlying = this.safeValue(info, 4, []);\n    let currencyId = undefined;\n\n    if (type === 'derivatives') {\n      currencyId = this.safeString(underlying, 0, transferId);\n      const start = currencyId.length - 2;\n      const isDerivativeCode = currencyId.slice(start) === 'F0';\n\n      if (!isDerivativeCode) {\n        currencyId = currencyId + 'F0';\n      }\n    } else if (type !== 'margin') {\n      currencyId = this.safeString(underlying, 1, transferId);\n    } else {\n      currencyId = transferId;\n    }\n\n    return currencyId;\n  }\n\n  async fetchOrder(id, symbol = undefined, params = {}) {\n    throw new NotSupported(this.id + ' fetchOrder is not implemented yet');\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const precision = this.safeValue(this.options, 'precision', 'R0');\n    const request = {\n      'symbol': this.marketId(symbol),\n      'precision': precision\n    };\n\n    if (limit !== undefined) {\n      request['len'] = limit; // 25 or 100\n    }\n\n    const fullRequest = this.extend(request, params);\n    const orderbook = await this.publicGetBookSymbolPrecision(fullRequest);\n    const timestamp = this.milliseconds();\n    const result = {\n      'symbol': symbol,\n      'bids': [],\n      'asks': [],\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'nonce': undefined\n    };\n    const priceIndex = fullRequest['precision'] === 'R0' ? 1 : 0;\n\n    for (let i = 0; i < orderbook.length; i++) {\n      const order = orderbook[i];\n      const price = this.safeNumber(order, priceIndex);\n      const signedAmount = this.safeNumber(order, 2);\n      const amount = Math.abs(signedAmount);\n      const side = signedAmount > 0 ? 'bids' : 'asks';\n      result[side].push([price, amount]);\n    }\n\n    result['bids'] = this.sortBy(result['bids'], 0, true);\n    result['asks'] = this.sortBy(result['asks'], 0);\n    return result;\n  }\n\n  parseTicker(ticker, market = undefined) {\n    const timestamp = this.milliseconds();\n    let symbol = undefined;\n\n    if (market !== undefined) {\n      symbol = market['symbol'];\n    }\n\n    const length = ticker.length;\n    const last = this.safeNumber(ticker, length - 4);\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, length - 2),\n      'low': this.safeNumber(ticker, length - 1),\n      'bid': this.safeNumber(ticker, length - 10),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, length - 8),\n      'askVolume': undefined,\n      'vwap': undefined,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': this.safeNumber(ticker, length - 6),\n      'percentage': this.safeNumber(ticker, length - 5) * 100,\n      'average': undefined,\n      'baseVolume': this.safeNumber(ticker, length - 3),\n      'quoteVolume': undefined,\n      'info': ticker\n    };\n  }\n\n  async fetchTickers(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n\n    if (symbols !== undefined) {\n      const ids = this.marketIds(symbols);\n      request['symbols'] = ids.join(',');\n    } else {\n      request['symbols'] = 'ALL';\n    }\n\n    const tickers = await this.publicGetTickers(this.extend(request, params));\n    const result = {};\n\n    for (let i = 0; i < tickers.length; i++) {\n      const ticker = tickers[i];\n      const id = ticker[0];\n\n      if (id in this.markets_by_id) {\n        const market = this.markets_by_id[id];\n        const symbol = market['symbol'];\n        result[symbol] = this.parseTicker(ticker, market);\n      }\n    }\n\n    return this.filterByArray(result, 'symbol', symbols);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'symbol': market['id']\n    };\n    const ticker = await this.publicGetTickerSymbol(this.extend(request, params));\n    return this.parseTicker(ticker, market);\n  }\n\n  parseSymbol(marketId) {\n    if (marketId === undefined) {\n      return marketId;\n    }\n\n    marketId = marketId.replace('t', '');\n    let baseId = undefined;\n    let quoteId = undefined;\n\n    if (marketId.indexOf(':') >= 0) {\n      const parts = marketId.split(':');\n      baseId = parts[0];\n      quoteId = parts[1];\n    } else {\n      baseId = marketId.slice(0, 3);\n      quoteId = marketId.slice(3, 6);\n    }\n\n    const base = this.safeCurrencyCode(baseId);\n    const quote = this.safeCurrencyCode(quoteId);\n    return base + '/' + quote;\n  }\n\n  parseTrade(trade, market = undefined) {\n    //\n    // fetchTrades (public)\n    //\n    //     [\n    //         ID,\n    //         MTS, // timestamp\n    //         AMOUNT,\n    //         PRICE\n    //     ]\n    //\n    // fetchMyTrades (private)\n    //\n    //     [\n    //         ID,\n    //         PAIR,\n    //         MTS_CREATE,\n    //         ORDER_ID,\n    //         EXEC_AMOUNT,\n    //         EXEC_PRICE,\n    //         ORDER_TYPE,\n    //         ORDER_PRICE,\n    //         MAKER,\n    //         FEE,\n    //         FEE_CURRENCY,\n    //         ...\n    //     ]\n    //\n    const tradeLength = trade.length;\n    const isPrivate = tradeLength > 5;\n    const id = this.safeString(trade, 0);\n    const amountIndex = isPrivate ? 4 : 2;\n    let side = undefined;\n    let amountString = this.safeString(trade, amountIndex);\n    const priceIndex = isPrivate ? 5 : 3;\n    const priceString = this.safeString(trade, priceIndex);\n\n    if (amountString[0] === '-') {\n      side = 'sell';\n      amountString = amountString.slice(1);\n    } else {\n      side = 'buy';\n    }\n\n    const amount = this.parseNumber(amountString);\n    const price = this.parseNumber(priceString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    let orderId = undefined;\n    let takerOrMaker = undefined;\n    let type = undefined;\n    let fee = undefined;\n    let symbol = undefined;\n    const timestampIndex = isPrivate ? 2 : 1;\n    const timestamp = this.safeInteger(trade, timestampIndex);\n\n    if (isPrivate) {\n      const marketId = trade[1];\n\n      if (marketId in this.markets_by_id) {\n        market = this.markets_by_id[marketId];\n        symbol = market['symbol'];\n      } else {\n        symbol = this.parseSymbol(marketId);\n      }\n\n      orderId = this.safeString(trade, 3);\n      const maker = this.safeInteger(trade, 8);\n      takerOrMaker = maker === 1 ? 'maker' : 'taker';\n      let feeCostString = this.safeString(trade, 9);\n      feeCostString = Precise.stringNeg(feeCostString);\n      const feeCost = this.parseNumber(feeCostString);\n      const feeCurrencyId = this.safeString(trade, 10);\n      const feeCurrency = this.safeCurrencyCode(feeCurrencyId);\n      fee = {\n        'cost': feeCost,\n        'currency': feeCurrency\n      };\n      const orderType = trade[6];\n      type = this.safeString(this.options['exchangeTypes'], orderType);\n    }\n\n    if (symbol === undefined) {\n      if (market !== undefined) {\n        symbol = market['symbol'];\n      }\n    }\n\n    return {\n      'id': id,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'order': orderId,\n      'side': side,\n      'type': type,\n      'takerOrMaker': takerOrMaker,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': fee,\n      'info': trade\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    let sort = '-1';\n    const request = {\n      'symbol': market['id']\n    };\n\n    if (since !== undefined) {\n      request['start'] = since;\n      sort = '1';\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 120, max 5000\n    }\n\n    request['sort'] = sort;\n    const response = await this.publicGetTradesSymbolHist(this.extend(request, params)); //\n    //     [\n    //         [\n    //             ID,\n    //             MTS, // timestamp\n    //             AMOUNT,\n    //             PRICE\n    //         ]\n    //     ]\n    //\n\n    const trades = this.sortBy(response, 1);\n    return this.parseTrades(trades, market, undefined, limit);\n  }\n\n  async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = 100, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n\n    if (limit === undefined) {\n      limit = 100; // default 100, max 5000\n    }\n\n    if (since === undefined) {\n      since = this.milliseconds() - this.parseTimeframe(timeframe) * limit * 1000;\n    }\n\n    const request = {\n      'symbol': market['id'],\n      'timeframe': this.timeframes[timeframe],\n      'sort': 1,\n      'start': since,\n      'limit': limit\n    };\n    const response = await this.publicGetCandlesTradeTimeframeSymbolHist(this.extend(request, params)); //\n    //     [\n    //         [1591503840000,0.025069,0.025068,0.025069,0.025068,1.97828998],\n    //         [1591504500000,0.025065,0.025065,0.025065,0.025065,1.0164],\n    //         [1591504620000,0.025062,0.025062,0.025062,0.025062,0.5],\n    //     ]\n    //\n\n    return this.parseOHLCVs(response, market, timeframe, since, limit);\n  }\n\n  parseOrderStatus(status) {\n    if (status === undefined) {\n      return status;\n    }\n\n    const parts = status.split(' ');\n    const state = this.safeString(parts, 0);\n    const statuses = {\n      'ACTIVE': 'open',\n      'PARTIALLY': 'open',\n      'EXECUTED': 'closed',\n      'CANCELED': 'canceled',\n      'INSUFFICIENT': 'canceled',\n      'RSN_DUST': 'rejected',\n      'RSN_PAUSE': 'rejected'\n    };\n    return this.safeString(statuses, state, status);\n  }\n\n  parseOrder(order, market = undefined) {\n    const id = this.safeString(order, 0);\n    let symbol = undefined;\n    const marketId = this.safeString(order, 3);\n\n    if (marketId in this.markets_by_id) {\n      market = this.markets_by_id[marketId];\n    } else {\n      symbol = this.parseSymbol(marketId);\n    }\n\n    if (symbol === undefined && market !== undefined) {\n      symbol = market['symbol'];\n    } // https://github.com/ccxt/ccxt/issues/6686\n    // const timestamp = this.safeTimestamp (order, 5);\n\n\n    const timestamp = this.safeInteger(order, 5);\n    const remaining = Math.abs(this.safeNumber(order, 6));\n    const signedAmount = this.safeNumber(order, 7);\n    const amount = Math.abs(signedAmount);\n    const side = signedAmount < 0 ? 'sell' : 'buy';\n    const orderType = this.safeString(order, 8);\n    const type = this.safeString(this.safeValue(this.options, 'exchangeTypes'), orderType);\n    let status = undefined;\n    const statusString = this.safeString(order, 13);\n\n    if (statusString !== undefined) {\n      const parts = statusString.split(' @ ');\n      status = this.parseOrderStatus(this.safeString(parts, 0));\n    }\n\n    const price = this.safeNumber(order, 16);\n    const average = this.safeNumber(order, 17);\n    const clientOrderId = this.safeString(order, 2);\n    return this.safeOrder({\n      'info': order,\n      'id': id,\n      'clientOrderId': clientOrderId,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'symbol': symbol,\n      'type': type,\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'amount': amount,\n      'cost': undefined,\n      'average': average,\n      'filled': undefined,\n      'remaining': remaining,\n      'status': status,\n      'fee': undefined,\n      'trades': undefined\n    });\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const orderTypes = this.safeValue(this.options, 'orderTypes', {});\n    const orderType = this.safeStringUpper(orderTypes, type, type);\n    amount = side === 'sell' ? -amount : amount;\n    const request = {\n      'symbol': market['id'],\n      'type': orderType,\n      'amount': this.numberToString(amount)\n    };\n\n    if (orderType === 'LIMIT' || orderType === 'EXCHANGE LIMIT') {\n      request['price'] = this.numberToString(price);\n    } else if (orderType === 'STOP' || orderType === 'EXCHANGE STOP') {\n      const stopPrice = this.safeNumber(params, 'stopPrice', price);\n      request['price'] = this.numberToString(stopPrice);\n    } else if (orderType === 'STOP LIMIT' || orderType === 'EXCHANGE STOP LIMIT') {\n      const priceAuxLimit = this.safeNumber(params, 'price_aux_limit');\n      let stopPrice = this.safeNumber(params, 'stopPrice');\n\n      if (priceAuxLimit === undefined) {\n        if (stopPrice === undefined) {\n          throw new ArgumentsRequired(this.id + ' createOrder() requires a stopPrice parameter or a price_aux_limit parameter for a ' + orderType + ' order');\n        } else {\n          request['price_aux_limit'] = this.numberToString(price);\n        }\n      } else {\n        request['price_aux_limit'] = this.numberToString(priceAuxLimit);\n\n        if (stopPrice === undefined) {\n          stopPrice = price;\n        }\n      }\n\n      request['price'] = this.numberToString(stopPrice);\n    } else if (orderType === 'TRAILING STOP' || orderType === 'EXCHANGE TRAILING STOP') {\n      const priceTrailing = this.safeNumber(params, 'price_trailing');\n      request['price_trailing'] = this.numberToString(priceTrailing);\n      const stopPrice = this.safeNumber(params, 'stopPrice', price);\n      request['price'] = this.numberToString(stopPrice);\n    } else if (orderType === 'FOK' || orderType === 'EXCHANGE FOK' || orderType === 'IOC' || orderType === 'EXCHANGE IOC') {\n      request['price'] = this.numberToString(price);\n    }\n\n    params = this.omit(params, ['stopPrice', 'price_aux_limit', 'price_trailing']);\n    const clientOrderId = this.safeValue2(params, 'cid', 'clientOrderId');\n\n    if (clientOrderId !== undefined) {\n      request['cid'] = clientOrderId;\n      params = this.omit(params, ['cid', 'clientOrderId']);\n    }\n\n    const response = await this.privatePostAuthWOrderSubmit(this.extend(request, params)); //\n    //     [\n    //         1578784364.748,    // Millisecond Time Stamp of the update\n    //         \"on-req\",          // Purpose of notification ('on-req', 'oc-req', 'uca', 'fon-req', 'foc-req')\n    //         null,              // Unique ID of the message\n    //         null,              // Ignore\n    //         [\n    //             [\n    //                 37271830598,           // Order ID\n    //                 null,                  // Group ID\n    //                 1578784364748,         // Client Order ID\n    //                 \"tBTCUST\",             // Pair\n    //                 1578784364748,         // Millisecond timestamp of creation\n    //                 1578784364748,         // Millisecond timestamp of update\n    //                 -0.005,                // Positive means buy, negative means sell\n    //                 -0.005,                // Original amount\n    //                 \"EXCHANGE LIMIT\",      // Order type (LIMIT, MARKET, STOP, TRAILING STOP, EXCHANGE MARKET, EXCHANGE LIMIT, EXCHANGE STOP, EXCHANGE TRAILING STOP, FOK, EXCHANGE FOK, IOC, EXCHANGE IOC)\n    //                 null,                  // Previous order type\n    //                 null,                  // Millisecond timestamp of Time-In-Force: automatic order cancellation\n    //                 null,                  // Ignore\n    //                 0,                     // Flags (see https://docs.bitfinex.com/docs/flag-values)\n    //                 \"ACTIVE\",              // Order Status\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 20000,                 // Price\n    //                 0,                     // Average price\n    //                 0,                     // The trailing price\n    //                 0,                     // Auxiliary Limit price (for STOP LIMIT)\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 0,                     // 1 - hidden order\n    //                 null,                  // If another order caused this order to be placed (OCO) this will be that other order's ID\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 \"API>BFX\",             // Origin of action: BFX, ETHFX, API>BFX, API>ETHFX\n    //                 null,                  // Ignore\n    //                 null,                  // Ignore\n    //                 null                   // Meta\n    //             ]\n    //         ],\n    //         null,                  // Error code\n    //         \"SUCCESS\",             // Status (SUCCESS, ERROR, FAILURE, ...)\n    //         \"Submitting 1 orders.\" // Text of the notification\n    //     ]\n    //\n\n    const status = this.safeString(response, 6);\n\n    if (status !== 'SUCCESS') {\n      const errorCode = response[5];\n      const errorText = response[7];\n      throw new ExchangeError(this.id + ' ' + response[6] + ': ' + errorText + ' (#' + errorCode + ')');\n    }\n\n    const orders = this.safeValue(response, 4, []);\n    const order = this.safeValue(orders, 0);\n    return this.parseOrder(order, market);\n  }\n\n  async cancelAllOrders(symbol = undefined, params = {}) {\n    const request = {\n      'all': 1\n    };\n    const response = await this.privatePostAuthWOrderCancelMulti(this.extend(request, params));\n    const orders = this.safeValue(response, 4, []);\n    return this.parseOrders(orders);\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const cid = this.safeValue2(params, 'cid', 'clientOrderId'); // client order id\n\n    let request = undefined;\n\n    if (cid !== undefined) {\n      const cidDate = this.safeValue(params, 'cidDate'); // client order id date\n\n      if (cidDate === undefined) {\n        throw new InvalidOrder(this.id + \" canceling an order by clientOrderId ('cid') requires both 'cid' and 'cid_date' ('YYYY-MM-DD')\");\n      }\n\n      request = {\n        'cid': cid,\n        'cid_date': cidDate\n      };\n      params = this.omit(params, ['cid', 'clientOrderId']);\n    } else {\n      request = {\n        'id': parseInt(id)\n      };\n    }\n\n    const response = await this.privatePostAuthWOrderCancel(this.extend(request, params));\n    const order = this.safeValue(response, 4);\n    return this.parseOrder(order);\n  }\n\n  async fetchOpenOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': [parseInt(id)]\n    };\n    const orders = await this.fetchOpenOrders(symbol, undefined, undefined, this.extend(request, params));\n    const order = this.safeValue(orders, 0);\n\n    if (order === undefined) {\n      throw new OrderNotFound(this.id + ' order ' + id + ' not found');\n    }\n\n    return order;\n  }\n\n  async fetchClosedOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'id': [parseInt(id)]\n    };\n    const orders = await this.fetchClosedOrders(symbol, undefined, undefined, this.extend(request, params));\n    const order = this.safeValue(orders, 0);\n\n    if (order === undefined) {\n      throw new OrderNotFound(this.id + ' order ' + id + ' not found');\n    }\n\n    return order;\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n    let response = undefined;\n\n    if (symbol === undefined) {\n      response = await this.privatePostAuthROrders(this.extend(request, params));\n    } else {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      response = await this.privatePostAuthROrdersSymbol(this.extend(request, params));\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    // returns the most recent closed or canceled orders up to circa two weeks ago\n    await this.loadMarkets();\n    const request = {};\n    let market = undefined;\n    let response = undefined;\n\n    if (symbol === undefined) {\n      response = await this.privatePostAuthROrdersHist(this.extend(request, params));\n    } else {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      response = await this.privatePostAuthROrdersSymbolHist(this.extend(request, params));\n    }\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 25, max 2500\n    }\n\n    return this.parseOrders(response, market, since, limit);\n  }\n\n  async fetchOrderTrades(id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    if (symbol === undefined) {\n      throw new ArgumentsRequired(this.id + ' fetchOrderTrades() requires a symbol argument');\n    }\n\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const orderId = parseInt(id);\n    const request = {\n      'id': orderId,\n      'symbol': market['id']\n    }; // valid for trades upto 10 days old\n\n    const response = await this.privatePostAuthROrderSymbolIdTrades(this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {\n      'end': this.milliseconds()\n    };\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // default 25, max 1000\n    }\n\n    let method = 'privatePostAuthRTradesHist';\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['symbol'] = market['id'];\n      method = 'privatePostAuthRTradesSymbolHist';\n    }\n\n    const response = await this[method](this.extend(request, params));\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createDepositAddress(code, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'op_renew': 1\n    };\n    const response = await this.fetchDepositAddress(code, this.extend(request, params));\n    return response;\n  }\n\n  async fetchDepositAddress(code, params = {}) {\n    await this.loadMarkets(); // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n\n    const name = this.getCurrencyName(code);\n    const request = {\n      'method': name,\n      'wallet': 'exchange',\n      // 'exchange', 'margin', 'funding' and also old labels 'exchange', 'trading', 'deposit', respectively\n      'op_renew': 0 // a value of 1 will generate a new address\n\n    };\n    const response = await this.privatePostAuthWDepositAddress(this.extend(request, params)); //\n    //     [\n    //         1582269616687, // MTS Millisecond Time Stamp of the update\n    //         'acc_dep', // TYPE Purpose of notification 'acc_dep' for account deposit\n    //         null, // MESSAGE_ID unique ID of the message\n    //         null, // not documented\n    //         [\n    //             null, // PLACEHOLDER\n    //             'BITCOIN', // METHOD Method of deposit\n    //             'BTC', // CURRENCY_CODE Currency code of new address\n    //             null, // PLACEHOLDER\n    //             '1BC9PZqpUmjyEB54uggn8TFKj49zSDYzqG', // ADDRESS\n    //             null, // POOL_ADDRESS\n    //         ],\n    //         null, // CODE null or integer work in progress\n    //         'SUCCESS', // STATUS Status of the notification, SUCCESS, ERROR, FAILURE\n    //         'success', // TEXT Text of the notification\n    //     ]\n    //\n\n    const result = this.safeValue(response, 4, []);\n    const poolAddress = this.safeString(result, 5);\n    const address = poolAddress === undefined ? this.safeString(result, 4) : poolAddress;\n    const tag = poolAddress === undefined ? undefined : this.safeString(result, 4);\n    this.checkAddress(address);\n    return {\n      'currency': code,\n      'address': address,\n      'tag': tag,\n      'info': response\n    };\n  }\n\n  parseTransactionStatus(status) {\n    const statuses = {\n      'SUCCESS': 'ok',\n      'ERROR': 'failed',\n      'FAILURE': 'failed',\n      'CANCELED': 'canceled'\n    };\n    return this.safeString(statuses, status, status);\n  }\n\n  parseTransaction(transaction, currency = undefined) {\n    //\n    // withdraw\n    //\n    //     [\n    //         1582271520931, // MTS Millisecond Time Stamp of the update\n    //         \"acc_wd-req\", // TYPE Purpose of notification 'acc_wd-req' account withdrawal request\n    //         null, // MESSAGE_ID unique ID of the message\n    //         null, // not documented\n    //         [\n    //             0, // WITHDRAWAL_ID Unique Withdrawal ID\n    //             null, // PLACEHOLDER\n    //             \"bitcoin\", // METHOD Method of withdrawal\n    //             null, // PAYMENT_ID Payment ID if relevant\n    //             \"exchange\", // WALLET Sending wallet\n    //             1, // AMOUNT Amount of Withdrawal less fee\n    //             null, // PLACEHOLDER\n    //             null, // PLACEHOLDER\n    //             0.0004, // WITHDRAWAL_FEE Fee on withdrawal\n    //         ],\n    //         null, // CODE null or integer Work in progress\n    //         \"SUCCESS\", // STATUS Status of the notification, it may vary over time SUCCESS, ERROR, FAILURE\n    //         \"Invalid bitcoin address (abcdef)\", // TEXT Text of the notification\n    //     ]\n    //\n    // fetchTransactions\n    //\n    //     [\n    //         13293039, // ID\n    //         'ETH', // CURRENCY\n    //         'ETHEREUM', // CURRENCY_NAME\n    //         null,\n    //         null,\n    //         1574175052000, // MTS_STARTED\n    //         1574181326000, // MTS_UPDATED\n    //         null,\n    //         null,\n    //         'CANCELED', // STATUS\n    //         null,\n    //         null,\n    //         -0.24, // AMOUNT, negative for withdrawals\n    //         -0.00135, // FEES\n    //         null,\n    //         null,\n    //         'DESTINATION_ADDRESS',\n    //         null,\n    //         null,\n    //         null,\n    //         'TRANSACTION_ID',\n    //         \"Purchase of 100 pizzas\", // WITHDRAW_TRANSACTION_NOTE\n    //     ]\n    //\n    const transactionLength = transaction.length;\n    let timestamp = undefined;\n    let updated = undefined;\n    let code = undefined;\n    let amount = undefined;\n    let id = undefined;\n    let status = undefined;\n    let tag = undefined;\n    let type = undefined;\n    let feeCost = undefined;\n    let txid = undefined;\n    let addressTo = undefined;\n\n    if (transactionLength < 9) {\n      const data = this.safeValue(transaction, 4, []);\n      timestamp = this.safeInteger(transaction, 0);\n\n      if (currency !== undefined) {\n        code = currency['code'];\n      }\n\n      feeCost = this.safeNumber(data, 8);\n\n      if (feeCost !== undefined) {\n        feeCost = -feeCost;\n      }\n\n      amount = this.safeNumber(data, 5);\n      id = this.safeValue(data, 0);\n      status = 'ok';\n\n      if (id === 0) {\n        id = undefined;\n        status = 'failed';\n      }\n\n      tag = this.safeString(data, 3);\n      type = 'withdrawal';\n    } else {\n      id = this.safeString(transaction, 0);\n      timestamp = this.safeInteger(transaction, 5);\n      updated = this.safeInteger(transaction, 6);\n      status = this.parseTransactionStatus(this.safeString(transaction, 9));\n      amount = this.safeNumber(transaction, 12);\n\n      if (amount !== undefined) {\n        if (amount < 0) {\n          type = 'withdrawal';\n        } else {\n          type = 'deposit';\n        }\n      }\n\n      feeCost = this.safeNumber(transaction, 13);\n\n      if (feeCost !== undefined) {\n        feeCost = -feeCost;\n      }\n\n      addressTo = this.safeString(transaction, 16);\n      txid = this.safeString(transaction, 20);\n    }\n\n    return {\n      'info': transaction,\n      'id': id,\n      'txid': txid,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'addressFrom': undefined,\n      'address': addressTo,\n      // this is actually the tag for XRP transfers (the address is missing)\n      'addressTo': addressTo,\n      'tagFrom': undefined,\n      'tag': tag,\n      // refix it properly for the tag from description\n      'tagTo': tag,\n      'type': type,\n      'amount': amount,\n      'currency': code,\n      'status': status,\n      'updated': updated,\n      'fee': {\n        'currency': code,\n        'cost': feeCost,\n        'rate': undefined\n      }\n    };\n  }\n\n  async fetchTransactions(code = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let currency = undefined;\n    const request = {};\n    let method = 'privatePostAuthRMovementsHist';\n\n    if (code !== undefined) {\n      currency = this.currency(code);\n      request['currency'] = currency['id'];\n      method = 'privatePostAuthRMovementsCurrencyHist';\n    }\n\n    if (since !== undefined) {\n      request['start'] = since;\n    }\n\n    if (limit !== undefined) {\n      request['limit'] = limit; // max 1000\n    }\n\n    const response = await this[method](this.extend(request, params)); //\n    //     [\n    //         [\n    //             13293039, // ID\n    //             'ETH', // CURRENCY\n    //             'ETHEREUM', // CURRENCY_NAME\n    //             null,\n    //             null,\n    //             1574175052000, // MTS_STARTED\n    //             1574181326000, // MTS_UPDATED\n    //             null,\n    //             null,\n    //             'CANCELED', // STATUS\n    //             null,\n    //             null,\n    //             -0.24, // AMOUNT, negative for withdrawals\n    //             -0.00135, // FEES\n    //             null,\n    //             null,\n    //             'DESTINATION_ADDRESS',\n    //             null,\n    //             null,\n    //             null,\n    //             'TRANSACTION_ID',\n    //             \"Purchase of 100 pizzas\", // WITHDRAW_TRANSACTION_NOTE\n    //         ]\n    //     ]\n    //\n\n    return this.parseTransactions(response, currency, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code); // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n\n    const name = this.getCurrencyName(code);\n    const request = {\n      'method': name,\n      'wallet': 'exchange',\n      // 'exchange', 'margin', 'funding' and also old labels 'exchange', 'trading', 'deposit', respectively\n      'amount': this.numberToString(amount),\n      'address': address\n    };\n\n    if (tag !== undefined) {\n      request['payment_id'] = tag;\n    }\n\n    const response = await this.privatePostAuthWWithdraw(this.extend(request, params)); //\n    //     [\n    //         1582271520931, // MTS Millisecond Time Stamp of the update\n    //         \"acc_wd-req\", // TYPE Purpose of notification 'acc_wd-req' account withdrawal request\n    //         null, // MESSAGE_ID unique ID of the message\n    //         null, // not documented\n    //         [\n    //             0, // WITHDRAWAL_ID Unique Withdrawal ID\n    //             null, // PLACEHOLDER\n    //             \"bitcoin\", // METHOD Method of withdrawal\n    //             null, // PAYMENT_ID Payment ID if relevant\n    //             \"exchange\", // WALLET Sending wallet\n    //             1, // AMOUNT Amount of Withdrawal less fee\n    //             null, // PLACEHOLDER\n    //             null, // PLACEHOLDER\n    //             0.0004, // WITHDRAWAL_FEE Fee on withdrawal\n    //         ],\n    //         null, // CODE null or integer Work in progress\n    //         \"SUCCESS\", // STATUS Status of the notification, it may vary over time SUCCESS, ERROR, FAILURE\n    //         \"Invalid bitcoin address (abcdef)\", // TEXT Text of the notification\n    //     ]\n    //\n\n    const text = this.safeString(response, 7);\n\n    if (text !== 'success') {\n      this.throwBroadlyMatchedException(this.exceptions['broad'], text, text);\n    }\n\n    const transaction = this.parseTransaction(response, currency);\n    return this.extend(transaction, {\n      'address': address\n    });\n  }\n\n  async fetchPositions(symbols = undefined, params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostPositions(params); //\n    //     [\n    //         [\n    //             \"tBTCUSD\", // SYMBOL\n    //             \"ACTIVE\", // STATUS\n    //             0.0195, // AMOUNT\n    //             8565.0267019, // BASE_PRICE\n    //             0, // MARGIN_FUNDING\n    //             0, // MARGIN_FUNDING_TYPE\n    //             -0.33455568705000516, // PL\n    //             -0.0003117550117425625, // PL_PERC\n    //             7045.876419249083, // PRICE_LIQ\n    //             3.0673001895895604, // LEVERAGE\n    //             null, // _PLACEHOLDER\n    //             142355652, // POSITION_ID\n    //             1574002216000, // MTS_CREATE\n    //             1574002216000, // MTS_UPDATE\n    //             null, // _PLACEHOLDER\n    //             0, // TYPE\n    //             null, // _PLACEHOLDER\n    //             0, // COLLATERAL\n    //             0, // COLLATERAL_MIN\n    //             // META\n    //             {\n    //                 \"reason\":\"TRADE\",\n    //                 \"order_id\":34271018124,\n    //                 \"liq_stage\":null,\n    //                 \"trade_price\":\"8565.0267019\",\n    //                 \"trade_amount\":\"0.0195\",\n    //                 \"order_id_oppo\":34277498022\n    //             }\n    //         ]\n    //     ]\n    //\n    // todo unify parsePosition/parsePositions\n\n    return response;\n  }\n\n  nonce() {\n    return this.milliseconds();\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let request = '/' + this.implodeParams(path, params);\n    const query = this.omit(params, this.extractParams(path));\n\n    if (api === 'v1') {\n      request = api + request;\n    } else {\n      request = this.version + request;\n    }\n\n    let url = this.urls['api'][api] + '/' + request;\n\n    if (api === 'public') {\n      if (Object.keys(query).length) {\n        url += '?' + this.urlencode(query);\n      }\n    }\n\n    if (api === 'private') {\n      this.checkRequiredCredentials();\n      const nonce = this.nonce().toString();\n      body = this.json(query);\n      const auth = '/api/' + request + nonce + body;\n      const signature = this.hmac(this.encode(auth), this.encode(this.secret), 'sha384');\n      headers = {\n        'bfx-nonce': nonce,\n        'bfx-apikey': this.apiKey,\n        'bfx-signature': signature,\n        'Content-Type': 'application/json'\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  async request(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    const response = await this.fetch2(path, api, method, params, headers, body);\n\n    if (response) {\n      if ('message' in response) {\n        if (response['message'].indexOf('not enough exchange balance') >= 0) {\n          throw new InsufficientFunds(this.id + ' ' + this.json(response));\n        }\n\n        throw new ExchangeError(this.id + ' ' + this.json(response));\n      }\n\n      return response;\n    } else if (response === '') {\n      throw new ExchangeError(this.id + ' returned empty response');\n    }\n\n    return response;\n  }\n\n  handleErrors(statusCode, statusText, url, method, responseHeaders, responseBody, response, requestHeaders, requestBody) {\n    if (statusCode === 500) {\n      // See https://docs.bitfinex.com/docs/abbreviations-glossary#section-errorinfo-codes\n      const errorCode = this.numberToString(response[1]);\n      const errorText = response[2];\n      const feedback = this.id + ' ' + errorText;\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, feedback);\n      this.throwExactlyMatchedException(this.exceptions['exact'], errorText, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], errorText, feedback);\n      throw new ExchangeError(this.id + ' ' + errorText + ' (#' + errorCode + ')');\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/bitfinex2.js"],"names":["bitfinex","require","ExchangeError","InvalidAddress","ArgumentsRequired","InsufficientFunds","AuthenticationError","OrderNotFound","InvalidOrder","BadRequest","InvalidNonce","BadSymbol","OnMaintenance","NotSupported","PermissionDenied","Precise","module","exports","bitfinex2","describe","deepExtend","isFiat","code","options","getCurrencyId","fetchStatus","params","response","publicGetPlatformStatus","status","safeInteger","formattedStatus","extend","milliseconds","fetchMarkets","v2response","publicGetConfPubListPairFutures","v1response","v1GetSymbolsDetails","futuresMarketIds","safeValue","result","i","length","market","id","safeStringUpper","spot","inArray","futures","type","baseId","undefined","quoteId","indexOf","parts","split","slice","base","safeCurrencyCode","quote","symbol","precision","minOrderSizeString","safeString","maxOrderSizeString","limits","parseNumber","margin","push","fetchCurrencies","labels","config","join","request","publicGetConfConfig","indexed","indexBy","ids","label","name","pool","feeValues","fees","fee","safeNumber","undl","fid","Math","pow","fetchBalance","loadMarkets","accountsByType","requestedType","accountType","keys","Object","isDerivative","query","omit","privatePostAuthRWallets","balance","currencyId","safeStringLower","start","isDerivativeCode","derivativeCondition","account","parseBalance","transfer","amount","fromAccount","toAccount","fromId","toId","currency","fromCurrencyId","convertDerivativesId","toCurrencyId","requestedAmount","currencyToPrecision","privatePostAuthWTransfer","timestamp","error","message","throwExactlyMatchedException","exceptions","info","fromResponse","toResponse","toCode","success","iso8601","transferId","underlying","fetchOrder","fetchOrderBook","limit","marketId","fullRequest","orderbook","publicGetBookSymbolPrecision","priceIndex","order","price","signedAmount","abs","side","sortBy","parseTicker","ticker","last","fetchTickers","symbols","marketIds","tickers","publicGetTickers","markets_by_id","filterByArray","fetchTicker","publicGetTickerSymbol","parseSymbol","replace","parseTrade","trade","tradeLength","isPrivate","amountIndex","amountString","priceString","cost","stringMul","orderId","takerOrMaker","timestampIndex","maker","feeCostString","stringNeg","feeCost","feeCurrencyId","feeCurrency","orderType","fetchTrades","since","sort","publicGetTradesSymbolHist","trades","parseTrades","fetchOHLCV","timeframe","parseTimeframe","timeframes","publicGetCandlesTradeTimeframeSymbolHist","parseOHLCVs","parseOrderStatus","state","statuses","parseOrder","remaining","statusString","average","clientOrderId","safeOrder","createOrder","orderTypes","numberToString","stopPrice","priceAuxLimit","priceTrailing","safeValue2","privatePostAuthWOrderSubmit","errorCode","errorText","orders","cancelAllOrders","privatePostAuthWOrderCancelMulti","parseOrders","cancelOrder","cid","cidDate","parseInt","privatePostAuthWOrderCancel","fetchOpenOrder","fetchOpenOrders","fetchClosedOrder","fetchClosedOrders","privatePostAuthROrders","privatePostAuthROrdersSymbol","privatePostAuthROrdersHist","privatePostAuthROrdersSymbolHist","fetchOrderTrades","privatePostAuthROrderSymbolIdTrades","fetchMyTrades","method","createDepositAddress","fetchDepositAddress","getCurrencyName","privatePostAuthWDepositAddress","poolAddress","address","tag","checkAddress","parseTransactionStatus","parseTransaction","transaction","transactionLength","updated","txid","addressTo","data","fetchTransactions","parseTransactions","withdraw","privatePostAuthWWithdraw","text","throwBroadlyMatchedException","fetchPositions","privatePostPositions","nonce","sign","path","api","headers","body","implodeParams","extractParams","version","url","urls","urlencode","checkRequiredCredentials","toString","json","auth","signature","hmac","encode","secret","apiKey","fetch2","handleErrors","statusCode","statusText","responseHeaders","responseBody","requestHeaders","requestBody","feedback"],"mappings":"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","sourcesContent":["'use strict';\n\n// ---------------------------------------------------------------------------\n\nconst bitfinex = require ('./bitfinex.js');\nconst { ExchangeError, InvalidAddress, ArgumentsRequired, InsufficientFunds, AuthenticationError, OrderNotFound, InvalidOrder, BadRequest, InvalidNonce, BadSymbol, OnMaintenance, NotSupported, PermissionDenied } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class bitfinex2 extends bitfinex {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitfinex2',\n            'name': 'Bitfinex',\n            'countries': [ 'VG' ],\n            'version': 'v2',\n            'certified': false,\n            'pro': false,\n            // new metainfo interface\n            'has': {\n                'CORS': false,\n                'cancelAllOrders': true,\n                'cancelOrder': true,\n                'createDepositAddress': true,\n                'createLimitOrder': true,\n                'createMarketOrder': true,\n                'createOrder': true,\n                'deposit': false,\n                'editOrder': false,\n                'fetchBalance': true,\n                'fetchClosedOrder': true,\n                'fetchClosedOrders': false,\n                'fetchCurrencies': true,\n                'fetchDepositAddress': true,\n                'fetchFundingFees': false,\n                'fetchMyTrades': true,\n                'fetchOHLCV': true,\n                'fetchOpenOrder': true,\n                'fetchOpenOrders': true,\n                'fetchOrder': false,\n                'fetchOrderTrades': true,\n                'fetchStatus': true,\n                'fetchTickers': true,\n                'fetchTradingFee': false,\n                'fetchTradingFees': false,\n                'fetchTransactions': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '3h': '3h',\n                '4h': '4h',\n                '6h': '6h',\n                '12h': '12h',\n                '1d': '1D',\n                '1w': '7D',\n                '2w': '14D',\n                '1M': '1M',\n            },\n            'rateLimit': 1500,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',\n                'api': {\n                    'v1': 'https://api.bitfinex.com',\n                    'public': 'https://api-pub.bitfinex.com',\n                    'private': 'https://api.bitfinex.com',\n                },\n                'www': 'https://www.bitfinex.com',\n                'doc': [\n                    'https://docs.bitfinex.com/v2/docs/',\n                    'https://github.com/bitfinexcom/bitfinex-api-node',\n                ],\n                'fees': 'https://www.bitfinex.com/fees',\n            },\n            'api': {\n                'v1': {\n                    'get': [\n                        'symbols',\n                        'symbols_details',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'conf/{config}',\n                        'conf/pub:{action}:{object}',\n                        'conf/pub:{action}:{object}:{detail}',\n                        'conf/pub:map:{object}',\n                        'conf/pub:map:{object}:{detail}',\n                        'conf/pub:map:currency:{detail}',\n                        'conf/pub:map:currency:sym', // maps symbols to their API symbols, BAB > BCH\n                        'conf/pub:map:currency:label', // verbose friendly names, BNT > Bancor\n                        'conf/pub:map:currency:unit', // maps symbols to unit of measure where applicable\n                        'conf/pub:map:currency:undl', // maps derivatives symbols to their underlying currency\n                        'conf/pub:map:currency:pool', // maps symbols to underlying network/protocol they operate on\n                        'conf/pub:map:currency:explorer', // maps symbols to their recognised block explorer URLs\n                        'conf/pub:map:currency:tx:fee', // maps currencies to their withdrawal fees https://github.com/ccxt/ccxt/issues/7745\n                        'conf/pub:map:tx:method',\n                        'conf/pub:list:{object}',\n                        'conf/pub:list:{object}:{detail}',\n                        'conf/pub:list:currency',\n                        'conf/pub:list:pair:exchange',\n                        'conf/pub:list:pair:margin',\n                        'conf/pub:list:pair:futures',\n                        'conf/pub:list:competitions',\n                        'conf/pub:info:{object}',\n                        'conf/pub:info:{object}:{detail}',\n                        'conf/pub:info:pair',\n                        'conf/pub:info:tx:status', // [ deposit, withdrawal ] statuses 1 = active, 0 = maintenance\n                        'conf/pub:fees',\n                        'platform/status',\n                        'tickers',\n                        'ticker/{symbol}',\n                        'trades/{symbol}/hist',\n                        'book/{symbol}/{precision}',\n                        'book/{symbol}/P0',\n                        'book/{symbol}/P1',\n                        'book/{symbol}/P2',\n                        'book/{symbol}/P3',\n                        'book/{symbol}/R0',\n                        'stats1/{key}:{size}:{symbol}:{side}/{section}',\n                        'stats1/{key}:{size}:{symbol}:{side}/last',\n                        'stats1/{key}:{size}:{symbol}:{side}/hist',\n                        'stats1/{key}:{size}:{symbol}/{section}',\n                        'stats1/{key}:{size}:{symbol}/last',\n                        'stats1/{key}:{size}:{symbol}/hist',\n                        'stats1/{key}:{size}:{symbol}:long/last',\n                        'stats1/{key}:{size}:{symbol}:long/hist',\n                        'stats1/{key}:{size}:{symbol}:short/last',\n                        'stats1/{key}:{size}:{symbol}:short/hist',\n                        'candles/trade:{timeframe}:{symbol}:{period}/{section}',\n                        'candles/trade:{timeframe}:{symbol}/{section}',\n                        'candles/trade:{timeframe}:{symbol}/last',\n                        'candles/trade:{timeframe}:{symbol}/hist',\n                        'status/{type}',\n                        'status/deriv',\n                        'liquidations/hist',\n                        'rankings/{key}:{timeframe}:{symbol}/{section}',\n                        'rankings/{key}:{timeframe}:{symbol}/hist',\n                    ],\n                    'post': [\n                        'calc/trade/avg',\n                        'calc/fx',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        // 'auth/r/orders/{symbol}/new', // outdated\n                        // 'auth/r/stats/perf:{timeframe}/hist', // outdated\n                        'auth/r/wallets',\n                        'auth/r/wallets/hist',\n                        'auth/r/orders',\n                        'auth/r/orders/{symbol}',\n                        'auth/w/order/submit',\n                        'auth/w/order/update',\n                        'auth/w/order/cancel',\n                        'auth/w/order/multi',\n                        'auth/w/order/cancel/multi',\n                        'auth/r/orders/{symbol}/hist',\n                        'auth/r/orders/hist',\n                        'auth/r/order/{symbol}:{id}/trades',\n                        'auth/r/trades/{symbol}/hist',\n                        'auth/r/trades/hist',\n                        'auth/r/ledgers/{currency}/hist',\n                        'auth/r/ledgers/hist',\n                        'auth/r/info/margin/{key}',\n                        'auth/r/info/margin/base',\n                        'auth/r/info/margin/sym_all',\n                        'auth/r/positions',\n                        'auth/w/position/claim',\n                        'auth/r/positions/hist',\n                        'auth/r/positions/audit',\n                        'auth/r/positions/snap',\n                        'auth/w/deriv/collateral/set',\n                        'auth/w/deriv/collateral/limits',\n                        'auth/r/funding/offers',\n                        'auth/r/funding/offers/{symbol}',\n                        'auth/w/funding/offer/submit',\n                        'auth/w/funding/offer/cancel',\n                        'auth/w/funding/offer/cancel/all',\n                        'auth/w/funding/close',\n                        'auth/w/funding/auto',\n                        'auth/w/funding/keep',\n                        'auth/r/funding/offers/{symbol}/hist',\n                        'auth/r/funding/offers/hist',\n                        'auth/r/funding/loans',\n                        'auth/r/funding/loans/hist',\n                        'auth/r/funding/loans/{symbol}',\n                        'auth/r/funding/loans/{symbol}/hist',\n                        'auth/r/funding/credits',\n                        'auth/r/funding/credits/hist',\n                        'auth/r/funding/credits/{symbol}',\n                        'auth/r/funding/credits/{symbol}/hist',\n                        'auth/r/funding/trades/{symbol}/hist',\n                        'auth/r/funding/trades/hist',\n                        'auth/r/info/funding/{key}',\n                        'auth/r/info/user',\n                        'auth/r/logins/hist',\n                        'auth/w/transfer',\n                        'auth/w/deposit/address',\n                        'auth/w/deposit/invoice',\n                        'auth/w/withdraw',\n                        'auth/r/movements/{currency}/hist',\n                        'auth/r/movements/hist',\n                        'auth/r/alerts',\n                        'auth/w/alert/set',\n                        'auth/w/alert/price:{symbol}:{price}/del',\n                        'auth/w/alert/{type}:{symbol}:{price}/del',\n                        'auth/calc/order/avail',\n                        'auth/w/settings/set',\n                        'auth/r/settings',\n                        'auth/w/settings/del',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.1 / 100,\n                    'taker': 0.2 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        'BTC': 0.0004,\n                        'BCH': 0.0001,\n                        'ETH': 0.00135,\n                        'EOS': 0.0,\n                        'LTC': 0.001,\n                        'OMG': 0.15097,\n                        'IOT': 0.0,\n                        'NEO': 0.0,\n                        'ETC': 0.01,\n                        'XRP': 0.02,\n                        'ETP': 0.01,\n                        'ZEC': 0.001,\n                        'BTG': 0.0,\n                        'DASH': 0.01,\n                        'XMR': 0.0001,\n                        'QTM': 0.01,\n                        'EDO': 0.23687,\n                        'DAT': 9.8858,\n                        'AVT': 1.1251,\n                        'SAN': 0.35977,\n                        'USDT': 5.0,\n                        'SPK': 16.971,\n                        'BAT': 1.1209,\n                        'GNT': 2.8789,\n                        'SNT': 9.0848,\n                        'QASH': 1.726,\n                        'YYW': 7.9464,\n                    },\n                },\n            },\n            'options': {\n                'precision': 'R0', // P0, P1, P2, P3, P4, R0\n                // convert 'EXCHANGE MARKET' to lowercase 'market'\n                // convert 'EXCHANGE LIMIT' to lowercase 'limit'\n                // everything else remains uppercase\n                'exchangeTypes': {\n                    // 'MARKET': undefined,\n                    'EXCHANGE MARKET': 'market',\n                    // 'LIMIT': undefined,\n                    'EXCHANGE LIMIT': 'limit',\n                    // 'STOP': undefined,\n                    // 'EXCHANGE STOP': undefined,\n                    // 'TRAILING STOP': undefined,\n                    // 'EXCHANGE TRAILING STOP': undefined,\n                    // 'FOK': undefined,\n                    // 'EXCHANGE FOK': undefined,\n                    // 'STOP LIMIT': undefined,\n                    // 'EXCHANGE STOP LIMIT': undefined,\n                    // 'IOC': undefined,\n                    // 'EXCHANGE IOC': undefined,\n                },\n                // convert 'market' to 'EXCHANGE MARKET'\n                // convert 'limit' 'EXCHANGE LIMIT'\n                // everything else remains as is\n                'orderTypes': {\n                    'market': 'EXCHANGE MARKET',\n                    'limit': 'EXCHANGE LIMIT',\n                },\n                'fiat': {\n                    'USD': 'USD',\n                    'EUR': 'EUR',\n                    'JPY': 'JPY',\n                    'GBP': 'GBP',\n                },\n                // actually the correct names unlike the v1\n                // we don't want to extend this with accountsByType in v1\n                'v2AccountsByType': {\n                    'spot': 'exchange',\n                    'exchange': 'exchange',\n                    'funding': 'funding',\n                    'margin': 'margin',\n                    'derivatives': 'margin',\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    '10001': PermissionDenied, // api_key: permission invalid (#10001)\n                    '10020': BadRequest,\n                    '10100': AuthenticationError,\n                    '10114': InvalidNonce,\n                    '20060': OnMaintenance,\n                },\n                'broad': {\n                    'address': InvalidAddress,\n                    'available balance is only': InsufficientFunds,\n                    'not enough exchange balance': InsufficientFunds,\n                    'Order not found': OrderNotFound,\n                    'symbol: invalid': BadSymbol,\n                    'Invalid order': InvalidOrder,\n                },\n            },\n        });\n    }\n\n    isFiat (code) {\n        return (code in this.options['fiat']);\n    }\n\n    getCurrencyId (code) {\n        return 'f' + code;\n    }\n\n    async fetchStatus (params = {}) {\n        //\n        //    [1] // operative\n        //    [0] // maintenance\n        //\n        const response = await this.publicGetPlatformStatus (params);\n        const status = this.safeInteger (response, 0);\n        const formattedStatus = (status === 1) ? 'ok' : 'maintenance';\n        this.status = this.extend (this.status, {\n            'status': formattedStatus,\n            'updated': this.milliseconds (),\n        });\n        return this.status;\n    }\n\n    async fetchMarkets (params = {}) {\n        // todo drop v1 in favor of v2 configs\n        // pub:list:pair:exchange,pub:list:pair:margin,pub:list:pair:futures,pub:info:pair\n        const v2response = await this.publicGetConfPubListPairFutures (params);\n        const v1response = await this.v1GetSymbolsDetails (params);\n        const futuresMarketIds = this.safeValue (v2response, 0, []);\n        const result = [];\n        for (let i = 0; i < v1response.length; i++) {\n            const market = v1response[i];\n            let id = this.safeStringUpper (market, 'pair');\n            let spot = true;\n            if (this.inArray (id, futuresMarketIds)) {\n                spot = false;\n            }\n            const futures = !spot;\n            const type = spot ? 'spot' : 'futures';\n            let baseId = undefined;\n            let quoteId = undefined;\n            if (id.indexOf (':') >= 0) {\n                const parts = id.split (':');\n                baseId = parts[0];\n                quoteId = parts[1];\n            } else {\n                baseId = id.slice (0, 3);\n                quoteId = id.slice (3, 6);\n            }\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            id = 't' + id;\n            baseId = this.getCurrencyId (baseId);\n            quoteId = this.getCurrencyId (quoteId);\n            const precision = {\n                'price': this.safeInteger (market, 'price_precision'),\n                'amount': 8, // https://github.com/ccxt/ccxt/issues/7310\n            };\n            const minOrderSizeString = this.safeString (market, 'minimum_order_size');\n            const maxOrderSizeString = this.safeString (market, 'maximum_order_size');\n            const limits = {\n                'amount': {\n                    'min': this.parseNumber (minOrderSizeString),\n                    'max': this.parseNumber (maxOrderSizeString),\n                },\n                'price': {\n                    'min': this.parseNumber ('1e-8'),\n                    'max': undefined,\n                },\n            };\n            limits['cost'] = {\n                'min': undefined,\n                'max': undefined,\n            };\n            const margin = this.safeValue (market, 'margin');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n                'type': type,\n                'swap': false,\n                'spot': spot,\n                'margin': margin,\n                'futures': futures,\n            });\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        const labels = [\n            'pub:list:currency',\n            'pub:map:currency:sym', // maps symbols to their API symbols, BAB > BCH\n            'pub:map:currency:label', // verbose friendly names, BNT > Bancor\n            'pub:map:currency:unit', // maps symbols to unit of measure where applicable\n            'pub:map:currency:undl', // maps derivatives symbols to their underlying currency\n            'pub:map:currency:pool', // maps symbols to underlying network/protocol they operate on\n            'pub:map:currency:explorer', // maps symbols to their recognised block explorer URLs\n            'pub:map:currency:tx:fee', // maps currencies to their withdrawal fees https://github.com/ccxt/ccxt/issues/7745\n        ];\n        const config = labels.join (',');\n        const request = {\n            'config': config,\n        };\n        const response = await this.publicGetConfConfig (this.extend (request, params));\n        //\n        //     [\n        //\n        //         a list of symbols\n        //         [\"AAA\",\"ABS\",\"ADA\"],\n        //\n        //         // sym\n        //         // maps symbols to their API symbols, BAB > BCH\n        //         [\n        //             [ 'BAB', 'BCH' ],\n        //             [ 'CNHT', 'CNHt' ],\n        //             [ 'DSH', 'DASH' ],\n        //             [ 'IOT', 'IOTA' ],\n        //             [ 'LES', 'LEO-EOS' ],\n        //             [ 'LET', 'LEO-ERC20' ],\n        //             [ 'STJ', 'STORJ' ],\n        //             [ 'TSD', 'TUSD' ],\n        //             [ 'UDC', 'USDC' ],\n        //             [ 'USK', 'USDK' ],\n        //             [ 'UST', 'USDt' ],\n        //             [ 'USTF0', 'USDt0' ],\n        //             [ 'XCH', 'XCHF' ],\n        //             [ 'YYW', 'YOYOW' ],\n        //             // ...\n        //         ],\n        //         // label\n        //         // verbose friendly names, BNT > Bancor\n        //         [\n        //             [ 'BAB', 'Bitcoin Cash' ],\n        //             [ 'BCH', 'Bitcoin Cash' ],\n        //             [ 'LEO', 'Unus Sed LEO' ],\n        //             [ 'LES', 'Unus Sed LEO (EOS)' ],\n        //             [ 'LET', 'Unus Sed LEO (ERC20)' ],\n        //             // ...\n        //         ],\n        //         // unit\n        //         // maps symbols to unit of measure where applicable\n        //         [\n        //             [ 'IOT', 'Mi|MegaIOTA' ],\n        //         ],\n        //         // undl\n        //         // maps derivatives symbols to their underlying currency\n        //         [\n        //             [ 'USTF0', 'UST' ],\n        //             [ 'BTCF0', 'BTC' ],\n        //             [ 'ETHF0', 'ETH' ],\n        //         ],\n        //         // pool\n        //         // maps symbols to underlying network/protocol they operate on\n        //         [\n        //             [ 'SAN', 'ETH' ], [ 'OMG', 'ETH' ], [ 'AVT', 'ETH' ], [ 'EDO', 'ETH' ],\n        //             [ 'ESS', 'ETH' ], [ 'ATD', 'EOS' ], [ 'ADD', 'EOS' ], [ 'MTO', 'EOS' ],\n        //             [ 'PNK', 'ETH' ], [ 'BAB', 'BCH' ], [ 'WLO', 'XLM' ], [ 'VLD', 'ETH' ],\n        //             [ 'BTT', 'TRX' ], [ 'IMP', 'ETH' ], [ 'SCR', 'ETH' ], [ 'GNO', 'ETH' ],\n        //             // ...\n        //         ],\n        //         // explorer\n        //         // maps symbols to their recognised block explorer URLs\n        //         [\n        //             [\n        //                 'AIO',\n        //                 [\n        //                     \"https://mainnet.aion.network\",\n        //                     \"https://mainnet.aion.network/#/account/VAL\",\n        //                     \"https://mainnet.aion.network/#/transaction/VAL\"\n        //                 ]\n        //             ],\n        //             // ...\n        //         ],\n        //         // fee\n        //         // maps currencies to their withdrawal fees\n        //         [\n        //             [\"AAA\",[0,0]],\n        //             [\"ABS\",[0,131.3]],\n        //             [\"ADA\",[0,0.3]],\n        //         ],\n        //     ]\n        //\n        const indexed = {\n            'sym': this.indexBy (this.safeValue (response, 1, []), 0),\n            'label': this.indexBy (this.safeValue (response, 2, []), 0),\n            'unit': this.indexBy (this.safeValue (response, 3, []), 0),\n            'undl': this.indexBy (this.safeValue (response, 4, []), 0),\n            'pool': this.indexBy (this.safeValue (response, 5, []), 0),\n            'explorer': this.indexBy (this.safeValue (response, 6, []), 0),\n            'fees': this.indexBy (this.safeValue (response, 7, []), 0),\n        };\n        const ids = this.safeValue (response, 0, []);\n        const result = {};\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const code = this.safeCurrencyCode (id);\n            const label = this.safeValue (indexed['label'], id, []);\n            const name = this.safeString (label, 1);\n            const pool = this.safeValue (indexed['pool'], id, []);\n            const type = this.safeString (pool, 1);\n            const feeValues = this.safeValue (indexed['fees'], id, []);\n            const fees = this.safeValue (feeValues, 1, []);\n            const fee = this.safeNumber (fees, 1);\n            const undl = this.safeValue (indexed['undl'], id, []);\n            const precision = 8; // default precision, todo: fix \"magic constants\"\n            const fid = 'f' + id;\n            result[code] = {\n                'id': fid,\n                'code': code,\n                'info': [ id, label, pool, feeValues, undl ],\n                'type': type,\n                'name': name,\n                'active': true,\n                'fee': fee,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': 1 / Math.pow (10, precision),\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': fee,\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        // this api call does not return the 'used' amount - use the v1 version instead (which also returns zero balances)\n        // there is a difference between this and the v1 api, namely trading wallet is called margin in v2\n        await this.loadMarkets ();\n        const accountsByType = this.safeValue (this.options, 'v2AccountsByType', {});\n        const requestedType = this.safeString (params, 'type', 'exchange');\n        const accountType = this.safeString (accountsByType, requestedType);\n        if (accountType === undefined) {\n            const keys = Object.keys (accountsByType);\n            throw new ExchangeError (this.id + ' fetchBalance type parameter must be one of ' + keys.join (', '));\n        }\n        const isDerivative = requestedType === 'derivatives';\n        const query = this.omit (params, 'type');\n        const response = await this.privatePostAuthRWallets (query);\n        const result = { 'info': response };\n        for (let i = 0; i < response.length; i++) {\n            const balance = response[i];\n            const type = this.safeString (balance, 0);\n            const currencyId = this.safeStringLower (balance, 1, '');\n            const start = currencyId.length - 2;\n            const isDerivativeCode = currencyId.slice (start) === 'f0';\n            // this will only filter the derivative codes if the requestedType is 'derivatives'\n            const derivativeCondition = (!isDerivative || isDerivativeCode);\n            if ((accountType === type) && derivativeCondition) {\n                const code = this.safeCurrencyCode (currencyId);\n                const account = this.account ();\n                account['total'] = this.safeString (balance, 2);\n                account['free'] = this.safeString (balance, 4);\n                result[code] = account;\n            }\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async transfer (code, amount, fromAccount, toAccount, params = {}) {\n        // transferring between derivatives wallet and regular wallet is not documented in their API\n        // however we support it in CCXT (from just looking at web inspector)\n        await this.loadMarkets ();\n        const accountsByType = this.safeValue (this.options, 'v2AccountsByType', {});\n        const fromId = this.safeString (accountsByType, fromAccount);\n        if (fromId === undefined) {\n            const keys = Object.keys (accountsByType);\n            throw new ExchangeError (this.id + ' transfer fromAccount must be one of ' + keys.join (', '));\n        }\n        const toId = this.safeString (accountsByType, toAccount);\n        if (toId === undefined) {\n            const keys = Object.keys (accountsByType);\n            throw new ExchangeError (this.id + ' transfer toAccount must be one of ' + keys.join (', '));\n        }\n        const currency = this.currency (code);\n        const fromCurrencyId = this.convertDerivativesId (currency, fromAccount);\n        const toCurrencyId = this.convertDerivativesId (currency, toAccount);\n        const requestedAmount = this.currencyToPrecision (code, amount);\n        // this request is slightly different from v1 fromAccount -> from\n        const request = {\n            'amount': requestedAmount,\n            'currency': fromCurrencyId,\n            'currency_to': toCurrencyId,\n            'from': fromId,\n            'to': toId,\n        };\n        const response = await this.privatePostAuthWTransfer (this.extend (request, params));\n        //  [1616451183763,\"acc_tf\",null,null,[1616451183763,\"exchange\",\"margin\",null,\"UST\",\"UST\",null,1],null,\"SUCCESS\",\"1.0 Tether USDt transfered from Exchange to Margin\"]\n        const timestamp = this.safeInteger (response, 0);\n        //  [\"error\",10001,\"Momentary balance check. Please wait few seconds and try the transfer again.\"]\n        const error = this.safeString (response, 0);\n        if (error === 'error') {\n            const message = this.safeString (response, 2, '');\n            // same message as in v1\n            this.throwExactlyMatchedException (this.exceptions['exact'], message, this.id + ' ' + message);\n            throw new ExchangeError (this.id + ' ' + message);\n        }\n        const info = this.safeValue (response, 4);\n        const fromResponse = this.safeString (info, 1);\n        const toResponse = this.safeString (info, 2);\n        const toCode = this.safeCurrencyCode (this.safeString (info, 5));\n        const success = this.safeString (response, 6);\n        const status = (success === 'SUCCESS') ? 'ok' : undefined;\n        return {\n            'info': response,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': status,\n            'amount': requestedAmount,\n            'code': toCode,\n            'fromAccount': fromResponse,\n            'toAccount': toResponse,\n        };\n    }\n\n    convertDerivativesId (currency, type) {\n        // there is a difference between this and the v1 api, namely trading wallet is called margin in v2\n        // {\n        //   id: 'fUSTF0',\n        //   code: 'USTF0',\n        //   info: [ 'USTF0', [], [], [], [ 'USTF0', 'UST' ] ],\n        const info = this.safeValue (currency, 'info');\n        const transferId = this.safeString (info, 0);\n        const underlying = this.safeValue (info, 4, []);\n        let currencyId = undefined;\n        if (type === 'derivatives') {\n            currencyId = this.safeString (underlying, 0, transferId);\n            const start = currencyId.length - 2;\n            const isDerivativeCode = currencyId.slice (start) === 'F0';\n            if (!isDerivativeCode) {\n                currencyId = currencyId + 'F0';\n            }\n        } else if (type !== 'margin') {\n            currencyId = this.safeString (underlying, 1, transferId);\n        } else {\n            currencyId = transferId;\n        }\n        return currencyId;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchOrder is not implemented yet');\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const precision = this.safeValue (this.options, 'precision', 'R0');\n        const request = {\n            'symbol': this.marketId (symbol),\n            'precision': precision,\n        };\n        if (limit !== undefined) {\n            request['len'] = limit; // 25 or 100\n        }\n        const fullRequest = this.extend (request, params);\n        const orderbook = await this.publicGetBookSymbolPrecision (fullRequest);\n        const timestamp = this.milliseconds ();\n        const result = {\n            'symbol': symbol,\n            'bids': [],\n            'asks': [],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'nonce': undefined,\n        };\n        const priceIndex = (fullRequest['precision'] === 'R0') ? 1 : 0;\n        for (let i = 0; i < orderbook.length; i++) {\n            const order = orderbook[i];\n            const price = this.safeNumber (order, priceIndex);\n            const signedAmount = this.safeNumber (order, 2);\n            const amount = Math.abs (signedAmount);\n            const side = (signedAmount > 0) ? 'bids' : 'asks';\n            result[side].push ([ price, amount ]);\n        }\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        const timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market !== undefined) {\n            symbol = market['symbol'];\n        }\n        const length = ticker.length;\n        const last = this.safeNumber (ticker, length - 4);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, length - 2),\n            'low': this.safeNumber (ticker, length - 1),\n            'bid': this.safeNumber (ticker, length - 10),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, length - 8),\n            'askVolume': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': this.safeNumber (ticker, length - 6),\n            'percentage': this.safeNumber (ticker, length - 5) * 100,\n            'average': undefined,\n            'baseVolume': this.safeNumber (ticker, length - 3),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        if (symbols !== undefined) {\n            const ids = this.marketIds (symbols);\n            request['symbols'] = ids.join (',');\n        } else {\n            request['symbols'] = 'ALL';\n        }\n        const tickers = await this.publicGetTickers (this.extend (request, params));\n        const result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            const ticker = tickers[i];\n            const id = ticker[0];\n            if (id in this.markets_by_id) {\n                const market = this.markets_by_id[id];\n                const symbol = market['symbol'];\n                result[symbol] = this.parseTicker (ticker, market);\n            }\n        }\n        return this.filterByArray (result, 'symbol', symbols);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'symbol': market['id'],\n        };\n        const ticker = await this.publicGetTickerSymbol (this.extend (request, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseSymbol (marketId) {\n        if (marketId === undefined) {\n            return marketId;\n        }\n        marketId = marketId.replace ('t', '');\n        let baseId = undefined;\n        let quoteId = undefined;\n        if (marketId.indexOf (':') >= 0) {\n            const parts = marketId.split (':');\n            baseId = parts[0];\n            quoteId = parts[1];\n        } else {\n            baseId = marketId.slice (0, 3);\n            quoteId = marketId.slice (3, 6);\n        }\n        const base = this.safeCurrencyCode (baseId);\n        const quote = this.safeCurrencyCode (quoteId);\n        return base + '/' + quote;\n    }\n\n    parseTrade (trade, market = undefined) {\n        //\n        // fetchTrades (public)\n        //\n        //     [\n        //         ID,\n        //         MTS, // timestamp\n        //         AMOUNT,\n        //         PRICE\n        //     ]\n        //\n        // fetchMyTrades (private)\n        //\n        //     [\n        //         ID,\n        //         PAIR,\n        //         MTS_CREATE,\n        //         ORDER_ID,\n        //         EXEC_AMOUNT,\n        //         EXEC_PRICE,\n        //         ORDER_TYPE,\n        //         ORDER_PRICE,\n        //         MAKER,\n        //         FEE,\n        //         FEE_CURRENCY,\n        //         ...\n        //     ]\n        //\n        const tradeLength = trade.length;\n        const isPrivate = (tradeLength > 5);\n        const id = this.safeString (trade, 0);\n        const amountIndex = isPrivate ? 4 : 2;\n        let side = undefined;\n        let amountString = this.safeString (trade, amountIndex);\n        const priceIndex = isPrivate ? 5 : 3;\n        const priceString = this.safeString (trade, priceIndex);\n        if (amountString[0] === '-') {\n            side = 'sell';\n            amountString = amountString.slice (1);\n        } else {\n            side = 'buy';\n        }\n        const amount = this.parseNumber (amountString);\n        const price = this.parseNumber (priceString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        let orderId = undefined;\n        let takerOrMaker = undefined;\n        let type = undefined;\n        let fee = undefined;\n        let symbol = undefined;\n        const timestampIndex = isPrivate ? 2 : 1;\n        const timestamp = this.safeInteger (trade, timestampIndex);\n        if (isPrivate) {\n            const marketId = trade[1];\n            if (marketId in this.markets_by_id) {\n                market = this.markets_by_id[marketId];\n                symbol = market['symbol'];\n            } else {\n                symbol = this.parseSymbol (marketId);\n            }\n            orderId = this.safeString (trade, 3);\n            const maker = this.safeInteger (trade, 8);\n            takerOrMaker = (maker === 1) ? 'maker' : 'taker';\n            let feeCostString = this.safeString (trade, 9);\n            feeCostString = Precise.stringNeg (feeCostString);\n            const feeCost = this.parseNumber (feeCostString);\n            const feeCurrencyId = this.safeString (trade, 10);\n            const feeCurrency = this.safeCurrencyCode (feeCurrencyId);\n            fee = {\n                'cost': feeCost,\n                'currency': feeCurrency,\n            };\n            const orderType = trade[6];\n            type = this.safeString (this.options['exchangeTypes'], orderType);\n        }\n        if (symbol === undefined) {\n            if (market !== undefined) {\n                symbol = market['symbol'];\n            }\n        }\n        return {\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': orderId,\n            'side': side,\n            'type': type,\n            'takerOrMaker': takerOrMaker,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        let sort = '-1';\n        const request = {\n            'symbol': market['id'],\n        };\n        if (since !== undefined) {\n            request['start'] = since;\n            sort = '1';\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 120, max 5000\n        }\n        request['sort'] = sort;\n        const response = await this.publicGetTradesSymbolHist (this.extend (request, params));\n        //\n        //     [\n        //         [\n        //             ID,\n        //             MTS, // timestamp\n        //             AMOUNT,\n        //             PRICE\n        //         ]\n        //     ]\n        //\n        const trades = this.sortBy (response, 1);\n        return this.parseTrades (trades, market, undefined, limit);\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = 100, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        if (limit === undefined) {\n            limit = 100; // default 100, max 5000\n        }\n        if (since === undefined) {\n            since = this.milliseconds () - this.parseTimeframe (timeframe) * limit * 1000;\n        }\n        const request = {\n            'symbol': market['id'],\n            'timeframe': this.timeframes[timeframe],\n            'sort': 1,\n            'start': since,\n            'limit': limit,\n        };\n        const response = await this.publicGetCandlesTradeTimeframeSymbolHist (this.extend (request, params));\n        //\n        //     [\n        //         [1591503840000,0.025069,0.025068,0.025069,0.025068,1.97828998],\n        //         [1591504500000,0.025065,0.025065,0.025065,0.025065,1.0164],\n        //         [1591504620000,0.025062,0.025062,0.025062,0.025062,0.5],\n        //     ]\n        //\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        if (status === undefined) {\n            return status;\n        }\n        const parts = status.split (' ');\n        const state = this.safeString (parts, 0);\n        const statuses = {\n            'ACTIVE': 'open',\n            'PARTIALLY': 'open',\n            'EXECUTED': 'closed',\n            'CANCELED': 'canceled',\n            'INSUFFICIENT': 'canceled',\n            'RSN_DUST': 'rejected',\n            'RSN_PAUSE': 'rejected',\n        };\n        return this.safeString (statuses, state, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        const id = this.safeString (order, 0);\n        let symbol = undefined;\n        const marketId = this.safeString (order, 3);\n        if (marketId in this.markets_by_id) {\n            market = this.markets_by_id[marketId];\n        } else {\n            symbol = this.parseSymbol (marketId);\n        }\n        if ((symbol === undefined) && (market !== undefined)) {\n            symbol = market['symbol'];\n        }\n        // https://github.com/ccxt/ccxt/issues/6686\n        // const timestamp = this.safeTimestamp (order, 5);\n        const timestamp = this.safeInteger (order, 5);\n        const remaining = Math.abs (this.safeNumber (order, 6));\n        const signedAmount = this.safeNumber (order, 7);\n        const amount = Math.abs (signedAmount);\n        const side = (signedAmount < 0) ? 'sell' : 'buy';\n        const orderType = this.safeString (order, 8);\n        const type = this.safeString (this.safeValue (this.options, 'exchangeTypes'), orderType);\n        let status = undefined;\n        const statusString = this.safeString (order, 13);\n        if (statusString !== undefined) {\n            const parts = statusString.split (' @ ');\n            status = this.parseOrderStatus (this.safeString (parts, 0));\n        }\n        const price = this.safeNumber (order, 16);\n        const average = this.safeNumber (order, 17);\n        const clientOrderId = this.safeString (order, 2);\n        return this.safeOrder ({\n            'info': order,\n            'id': id,\n            'clientOrderId': clientOrderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'symbol': symbol,\n            'type': type,\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'amount': amount,\n            'cost': undefined,\n            'average': average,\n            'filled': undefined,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n            'trades': undefined,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const orderTypes = this.safeValue (this.options, 'orderTypes', {});\n        const orderType = this.safeStringUpper (orderTypes, type, type);\n        amount = (side === 'sell') ? -amount : amount;\n        const request = {\n            'symbol': market['id'],\n            'type': orderType,\n            'amount': this.numberToString (amount),\n        };\n        if ((orderType === 'LIMIT') || (orderType === 'EXCHANGE LIMIT')) {\n            request['price'] = this.numberToString (price);\n        } else if ((orderType === 'STOP') || (orderType === 'EXCHANGE STOP')) {\n            const stopPrice = this.safeNumber (params, 'stopPrice', price);\n            request['price'] = this.numberToString (stopPrice);\n        } else if ((orderType === 'STOP LIMIT') || (orderType === 'EXCHANGE STOP LIMIT')) {\n            const priceAuxLimit = this.safeNumber (params, 'price_aux_limit');\n            let stopPrice = this.safeNumber (params, 'stopPrice');\n            if (priceAuxLimit === undefined) {\n                if (stopPrice === undefined) {\n                    throw new ArgumentsRequired (this.id + ' createOrder() requires a stopPrice parameter or a price_aux_limit parameter for a ' + orderType + ' order');\n                } else {\n                    request['price_aux_limit'] = this.numberToString (price);\n                }\n            } else {\n                request['price_aux_limit'] = this.numberToString (priceAuxLimit);\n                if (stopPrice === undefined) {\n                    stopPrice = price;\n                }\n            }\n            request['price'] = this.numberToString (stopPrice);\n        } else if ((orderType === 'TRAILING STOP') || (orderType === 'EXCHANGE TRAILING STOP')) {\n            const priceTrailing = this.safeNumber (params, 'price_trailing');\n            request['price_trailing'] = this.numberToString (priceTrailing);\n            const stopPrice = this.safeNumber (params, 'stopPrice', price);\n            request['price'] = this.numberToString (stopPrice);\n        } else if ((orderType === 'FOK') || (orderType === 'EXCHANGE FOK') || (orderType === 'IOC') || (orderType === 'EXCHANGE IOC')) {\n            request['price'] = this.numberToString (price);\n        }\n        params = this.omit (params, [ 'stopPrice', 'price_aux_limit', 'price_trailing' ]);\n        const clientOrderId = this.safeValue2 (params, 'cid', 'clientOrderId');\n        if (clientOrderId !== undefined) {\n            request['cid'] = clientOrderId;\n            params = this.omit (params, [ 'cid', 'clientOrderId' ]);\n        }\n        const response = await this.privatePostAuthWOrderSubmit (this.extend (request, params));\n        //\n        //     [\n        //         1578784364.748,    // Millisecond Time Stamp of the update\n        //         \"on-req\",          // Purpose of notification ('on-req', 'oc-req', 'uca', 'fon-req', 'foc-req')\n        //         null,              // Unique ID of the message\n        //         null,              // Ignore\n        //         [\n        //             [\n        //                 37271830598,           // Order ID\n        //                 null,                  // Group ID\n        //                 1578784364748,         // Client Order ID\n        //                 \"tBTCUST\",             // Pair\n        //                 1578784364748,         // Millisecond timestamp of creation\n        //                 1578784364748,         // Millisecond timestamp of update\n        //                 -0.005,                // Positive means buy, negative means sell\n        //                 -0.005,                // Original amount\n        //                 \"EXCHANGE LIMIT\",      // Order type (LIMIT, MARKET, STOP, TRAILING STOP, EXCHANGE MARKET, EXCHANGE LIMIT, EXCHANGE STOP, EXCHANGE TRAILING STOP, FOK, EXCHANGE FOK, IOC, EXCHANGE IOC)\n        //                 null,                  // Previous order type\n        //                 null,                  // Millisecond timestamp of Time-In-Force: automatic order cancellation\n        //                 null,                  // Ignore\n        //                 0,                     // Flags (see https://docs.bitfinex.com/docs/flag-values)\n        //                 \"ACTIVE\",              // Order Status\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 20000,                 // Price\n        //                 0,                     // Average price\n        //                 0,                     // The trailing price\n        //                 0,                     // Auxiliary Limit price (for STOP LIMIT)\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 0,                     // 1 - hidden order\n        //                 null,                  // If another order caused this order to be placed (OCO) this will be that other order's ID\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 \"API>BFX\",             // Origin of action: BFX, ETHFX, API>BFX, API>ETHFX\n        //                 null,                  // Ignore\n        //                 null,                  // Ignore\n        //                 null                   // Meta\n        //             ]\n        //         ],\n        //         null,                  // Error code\n        //         \"SUCCESS\",             // Status (SUCCESS, ERROR, FAILURE, ...)\n        //         \"Submitting 1 orders.\" // Text of the notification\n        //     ]\n        //\n        const status = this.safeString (response, 6);\n        if (status !== 'SUCCESS') {\n            const errorCode = response[5];\n            const errorText = response[7];\n            throw new ExchangeError (this.id + ' ' + response[6] + ': ' + errorText + ' (#' + errorCode + ')');\n        }\n        const orders = this.safeValue (response, 4, []);\n        const order = this.safeValue (orders, 0);\n        return this.parseOrder (order, market);\n    }\n\n    async cancelAllOrders (symbol = undefined, params = {}) {\n        const request = {\n            'all': 1,\n        };\n        const response = await this.privatePostAuthWOrderCancelMulti (this.extend (request, params));\n        const orders = this.safeValue (response, 4, []);\n        return this.parseOrders (orders);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const cid = this.safeValue2 (params, 'cid', 'clientOrderId'); // client order id\n        let request = undefined;\n        if (cid !== undefined) {\n            const cidDate = this.safeValue (params, 'cidDate'); // client order id date\n            if (cidDate === undefined) {\n                throw new InvalidOrder (this.id + \" canceling an order by clientOrderId ('cid') requires both 'cid' and 'cid_date' ('YYYY-MM-DD')\");\n            }\n            request = {\n                'cid': cid,\n                'cid_date': cidDate,\n            };\n            params = this.omit (params, [ 'cid', 'clientOrderId' ]);\n        } else {\n            request = {\n                'id': parseInt (id),\n            };\n        }\n        const response = await this.privatePostAuthWOrderCancel (this.extend (request, params));\n        const order = this.safeValue (response, 4);\n        return this.parseOrder (order);\n    }\n\n    async fetchOpenOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': [ parseInt (id) ],\n        };\n        const orders = await this.fetchOpenOrders (symbol, undefined, undefined, this.extend (request, params));\n        const order = this.safeValue (orders, 0);\n        if (order === undefined) {\n            throw new OrderNotFound (this.id + ' order ' + id + ' not found');\n        }\n        return order;\n    }\n\n    async fetchClosedOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'id': [ parseInt (id) ],\n        };\n        const orders = await this.fetchClosedOrders (symbol, undefined, undefined, this.extend (request, params));\n        const order = this.safeValue (orders, 0);\n        if (order === undefined) {\n            throw new OrderNotFound (this.id + ' order ' + id + ' not found');\n        }\n        return order;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        let response = undefined;\n        if (symbol === undefined) {\n            response = await this.privatePostAuthROrders (this.extend (request, params));\n        } else {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            response = await this.privatePostAuthROrdersSymbol (this.extend (request, params));\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        // returns the most recent closed or canceled orders up to circa two weeks ago\n        await this.loadMarkets ();\n        const request = {};\n        let market = undefined;\n        let response = undefined;\n        if (symbol === undefined) {\n            response = await this.privatePostAuthROrdersHist (this.extend (request, params));\n        } else {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            response = await this.privatePostAuthROrdersSymbolHist (this.extend (request, params));\n        }\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 25, max 2500\n        }\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (symbol === undefined) {\n            throw new ArgumentsRequired (this.id + ' fetchOrderTrades() requires a symbol argument');\n        }\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const orderId = parseInt (id);\n        const request = {\n            'id': orderId,\n            'symbol': market['id'],\n        };\n        // valid for trades upto 10 days old\n        const response = await this.privatePostAuthROrderSymbolIdTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            'end': this.milliseconds (),\n        };\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // default 25, max 1000\n        }\n        let method = 'privatePostAuthRTradesHist';\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n            method = 'privatePostAuthRTradesSymbolHist';\n        }\n        const response = await this[method] (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'op_renew': 1,\n        };\n        const response = await this.fetchDepositAddress (code, this.extend (request, params));\n        return response;\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        await this.loadMarkets ();\n        // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n        const name = this.getCurrencyName (code);\n        const request = {\n            'method': name,\n            'wallet': 'exchange', // 'exchange', 'margin', 'funding' and also old labels 'exchange', 'trading', 'deposit', respectively\n            'op_renew': 0, // a value of 1 will generate a new address\n        };\n        const response = await this.privatePostAuthWDepositAddress (this.extend (request, params));\n        //\n        //     [\n        //         1582269616687, // MTS Millisecond Time Stamp of the update\n        //         'acc_dep', // TYPE Purpose of notification 'acc_dep' for account deposit\n        //         null, // MESSAGE_ID unique ID of the message\n        //         null, // not documented\n        //         [\n        //             null, // PLACEHOLDER\n        //             'BITCOIN', // METHOD Method of deposit\n        //             'BTC', // CURRENCY_CODE Currency code of new address\n        //             null, // PLACEHOLDER\n        //             '1BC9PZqpUmjyEB54uggn8TFKj49zSDYzqG', // ADDRESS\n        //             null, // POOL_ADDRESS\n        //         ],\n        //         null, // CODE null or integer work in progress\n        //         'SUCCESS', // STATUS Status of the notification, SUCCESS, ERROR, FAILURE\n        //         'success', // TEXT Text of the notification\n        //     ]\n        //\n        const result = this.safeValue (response, 4, []);\n        const poolAddress = this.safeString (result, 5);\n        const address = (poolAddress === undefined) ? this.safeString (result, 4) : poolAddress;\n        const tag = (poolAddress === undefined) ? undefined : this.safeString (result, 4);\n        this.checkAddress (address);\n        return {\n            'currency': code,\n            'address': address,\n            'tag': tag,\n            'info': response,\n        };\n    }\n\n    parseTransactionStatus (status) {\n        const statuses = {\n            'SUCCESS': 'ok',\n            'ERROR': 'failed',\n            'FAILURE': 'failed',\n            'CANCELED': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseTransaction (transaction, currency = undefined) {\n        //\n        // withdraw\n        //\n        //     [\n        //         1582271520931, // MTS Millisecond Time Stamp of the update\n        //         \"acc_wd-req\", // TYPE Purpose of notification 'acc_wd-req' account withdrawal request\n        //         null, // MESSAGE_ID unique ID of the message\n        //         null, // not documented\n        //         [\n        //             0, // WITHDRAWAL_ID Unique Withdrawal ID\n        //             null, // PLACEHOLDER\n        //             \"bitcoin\", // METHOD Method of withdrawal\n        //             null, // PAYMENT_ID Payment ID if relevant\n        //             \"exchange\", // WALLET Sending wallet\n        //             1, // AMOUNT Amount of Withdrawal less fee\n        //             null, // PLACEHOLDER\n        //             null, // PLACEHOLDER\n        //             0.0004, // WITHDRAWAL_FEE Fee on withdrawal\n        //         ],\n        //         null, // CODE null or integer Work in progress\n        //         \"SUCCESS\", // STATUS Status of the notification, it may vary over time SUCCESS, ERROR, FAILURE\n        //         \"Invalid bitcoin address (abcdef)\", // TEXT Text of the notification\n        //     ]\n        //\n        // fetchTransactions\n        //\n        //     [\n        //         13293039, // ID\n        //         'ETH', // CURRENCY\n        //         'ETHEREUM', // CURRENCY_NAME\n        //         null,\n        //         null,\n        //         1574175052000, // MTS_STARTED\n        //         1574181326000, // MTS_UPDATED\n        //         null,\n        //         null,\n        //         'CANCELED', // STATUS\n        //         null,\n        //         null,\n        //         -0.24, // AMOUNT, negative for withdrawals\n        //         -0.00135, // FEES\n        //         null,\n        //         null,\n        //         'DESTINATION_ADDRESS',\n        //         null,\n        //         null,\n        //         null,\n        //         'TRANSACTION_ID',\n        //         \"Purchase of 100 pizzas\", // WITHDRAW_TRANSACTION_NOTE\n        //     ]\n        //\n        const transactionLength = transaction.length;\n        let timestamp = undefined;\n        let updated = undefined;\n        let code = undefined;\n        let amount = undefined;\n        let id = undefined;\n        let status = undefined;\n        let tag = undefined;\n        let type = undefined;\n        let feeCost = undefined;\n        let txid = undefined;\n        let addressTo = undefined;\n        if (transactionLength < 9) {\n            const data = this.safeValue (transaction, 4, []);\n            timestamp = this.safeInteger (transaction, 0);\n            if (currency !== undefined) {\n                code = currency['code'];\n            }\n            feeCost = this.safeNumber (data, 8);\n            if (feeCost !== undefined) {\n                feeCost = -feeCost;\n            }\n            amount = this.safeNumber (data, 5);\n            id = this.safeValue (data, 0);\n            status = 'ok';\n            if (id === 0) {\n                id = undefined;\n                status = 'failed';\n            }\n            tag = this.safeString (data, 3);\n            type = 'withdrawal';\n        } else {\n            id = this.safeString (transaction, 0);\n            timestamp = this.safeInteger (transaction, 5);\n            updated = this.safeInteger (transaction, 6);\n            status = this.parseTransactionStatus (this.safeString (transaction, 9));\n            amount = this.safeNumber (transaction, 12);\n            if (amount !== undefined) {\n                if (amount < 0) {\n                    type = 'withdrawal';\n                } else {\n                    type = 'deposit';\n                }\n            }\n            feeCost = this.safeNumber (transaction, 13);\n            if (feeCost !== undefined) {\n                feeCost = -feeCost;\n            }\n            addressTo = this.safeString (transaction, 16);\n            txid = this.safeString (transaction, 20);\n        }\n        return {\n            'info': transaction,\n            'id': id,\n            'txid': txid,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'addressFrom': undefined,\n            'address': addressTo, // this is actually the tag for XRP transfers (the address is missing)\n            'addressTo': addressTo,\n            'tagFrom': undefined,\n            'tag': tag, // refix it properly for the tag from description\n            'tagTo': tag,\n            'type': type,\n            'amount': amount,\n            'currency': code,\n            'status': status,\n            'updated': updated,\n            'fee': {\n                'currency': code,\n                'cost': feeCost,\n                'rate': undefined,\n            },\n        };\n    }\n\n    async fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currency = undefined;\n        const request = {};\n        let method = 'privatePostAuthRMovementsHist';\n        if (code !== undefined) {\n            currency = this.currency (code);\n            request['currency'] = currency['id'];\n            method = 'privatePostAuthRMovementsCurrencyHist';\n        }\n        if (since !== undefined) {\n            request['start'] = since;\n        }\n        if (limit !== undefined) {\n            request['limit'] = limit; // max 1000\n        }\n        const response = await this[method] (this.extend (request, params));\n        //\n        //     [\n        //         [\n        //             13293039, // ID\n        //             'ETH', // CURRENCY\n        //             'ETHEREUM', // CURRENCY_NAME\n        //             null,\n        //             null,\n        //             1574175052000, // MTS_STARTED\n        //             1574181326000, // MTS_UPDATED\n        //             null,\n        //             null,\n        //             'CANCELED', // STATUS\n        //             null,\n        //             null,\n        //             -0.24, // AMOUNT, negative for withdrawals\n        //             -0.00135, // FEES\n        //             null,\n        //             null,\n        //             'DESTINATION_ADDRESS',\n        //             null,\n        //             null,\n        //             null,\n        //             'TRANSACTION_ID',\n        //             \"Purchase of 100 pizzas\", // WITHDRAW_TRANSACTION_NOTE\n        //         ]\n        //     ]\n        //\n        return this.parseTransactions (response, currency, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        // todo rewrite for https://api-pub.bitfinex.com//v2/conf/pub:map:tx:method\n        const name = this.getCurrencyName (code);\n        const request = {\n            'method': name,\n            'wallet': 'exchange', // 'exchange', 'margin', 'funding' and also old labels 'exchange', 'trading', 'deposit', respectively\n            'amount': this.numberToString (amount),\n            'address': address,\n        };\n        if (tag !== undefined) {\n            request['payment_id'] = tag;\n        }\n        const response = await this.privatePostAuthWWithdraw (this.extend (request, params));\n        //\n        //     [\n        //         1582271520931, // MTS Millisecond Time Stamp of the update\n        //         \"acc_wd-req\", // TYPE Purpose of notification 'acc_wd-req' account withdrawal request\n        //         null, // MESSAGE_ID unique ID of the message\n        //         null, // not documented\n        //         [\n        //             0, // WITHDRAWAL_ID Unique Withdrawal ID\n        //             null, // PLACEHOLDER\n        //             \"bitcoin\", // METHOD Method of withdrawal\n        //             null, // PAYMENT_ID Payment ID if relevant\n        //             \"exchange\", // WALLET Sending wallet\n        //             1, // AMOUNT Amount of Withdrawal less fee\n        //             null, // PLACEHOLDER\n        //             null, // PLACEHOLDER\n        //             0.0004, // WITHDRAWAL_FEE Fee on withdrawal\n        //         ],\n        //         null, // CODE null or integer Work in progress\n        //         \"SUCCESS\", // STATUS Status of the notification, it may vary over time SUCCESS, ERROR, FAILURE\n        //         \"Invalid bitcoin address (abcdef)\", // TEXT Text of the notification\n        //     ]\n        //\n        const text = this.safeString (response, 7);\n        if (text !== 'success') {\n            this.throwBroadlyMatchedException (this.exceptions['broad'], text, text);\n        }\n        const transaction = this.parseTransaction (response, currency);\n        return this.extend (transaction, {\n            'address': address,\n        });\n    }\n\n    async fetchPositions (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostPositions (params);\n        //\n        //     [\n        //         [\n        //             \"tBTCUSD\", // SYMBOL\n        //             \"ACTIVE\", // STATUS\n        //             0.0195, // AMOUNT\n        //             8565.0267019, // BASE_PRICE\n        //             0, // MARGIN_FUNDING\n        //             0, // MARGIN_FUNDING_TYPE\n        //             -0.33455568705000516, // PL\n        //             -0.0003117550117425625, // PL_PERC\n        //             7045.876419249083, // PRICE_LIQ\n        //             3.0673001895895604, // LEVERAGE\n        //             null, // _PLACEHOLDER\n        //             142355652, // POSITION_ID\n        //             1574002216000, // MTS_CREATE\n        //             1574002216000, // MTS_UPDATE\n        //             null, // _PLACEHOLDER\n        //             0, // TYPE\n        //             null, // _PLACEHOLDER\n        //             0, // COLLATERAL\n        //             0, // COLLATERAL_MIN\n        //             // META\n        //             {\n        //                 \"reason\":\"TRADE\",\n        //                 \"order_id\":34271018124,\n        //                 \"liq_stage\":null,\n        //                 \"trade_price\":\"8565.0267019\",\n        //                 \"trade_amount\":\"0.0195\",\n        //                 \"order_id_oppo\":34277498022\n        //             }\n        //         ]\n        //     ]\n        //\n        // todo unify parsePosition/parsePositions\n        return response;\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/' + this.implodeParams (path, params);\n        const query = this.omit (params, this.extractParams (path));\n        if (api === 'v1') {\n            request = api + request;\n        } else {\n            request = this.version + request;\n        }\n        let url = this.urls['api'][api] + '/' + request;\n        if (api === 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        }\n        if (api === 'private') {\n            this.checkRequiredCredentials ();\n            const nonce = this.nonce ().toString ();\n            body = this.json (query);\n            const auth = '/api/' + request + nonce + body;\n            const signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha384');\n            headers = {\n                'bfx-nonce': nonce,\n                'bfx-apikey': this.apiKey,\n                'bfx-signature': signature,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        const response = await this.fetch2 (path, api, method, params, headers, body);\n        if (response) {\n            if ('message' in response) {\n                if (response['message'].indexOf ('not enough exchange balance') >= 0) {\n                    throw new InsufficientFunds (this.id + ' ' + this.json (response));\n                }\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n            return response;\n        } else if (response === '') {\n            throw new ExchangeError (this.id + ' returned empty response');\n        }\n        return response;\n    }\n\n    handleErrors (statusCode, statusText, url, method, responseHeaders, responseBody, response, requestHeaders, requestBody) {\n        if (statusCode === 500) {\n            // See https://docs.bitfinex.com/docs/abbreviations-glossary#section-errorinfo-codes\n            const errorCode = this.numberToString (response[1]);\n            const errorText = response[2];\n            const feedback = this.id + ' ' + errorText;\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorCode, feedback);\n            this.throwExactlyMatchedException (this.exceptions['exact'], errorText, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], errorText, feedback);\n            throw new ExchangeError (this.id + ' ' + errorText + ' (#' + errorCode + ')');\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}