{"ast":null,"code":"'use strict'; //  ---------------------------------------------------------------------------\n\nconst Exchange = require('./base/Exchange');\n\nconst {\n  ExchangeError,\n  BadRequest\n} = require('./base/errors');\n\nconst Precise = require('./base/Precise'); //  ---------------------------------------------------------------------------\n\n\nmodule.exports = class zaif extends Exchange {\n  describe() {\n    return this.deepExtend(super.describe(), {\n      'id': 'zaif',\n      'name': 'Zaif',\n      'countries': ['JP'],\n      'rateLimit': 2000,\n      'version': '1',\n      'has': {\n        'cancelOrder': true,\n        'CORS': false,\n        'createMarketOrder': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchClosedOrders': true,\n        'fetchMarkets': true,\n        'fetchOrderBook': true,\n        'fetchOpenOrders': true,\n        'fetchTicker': true,\n        'fetchTrades': true,\n        'withdraw': true\n      },\n      'urls': {\n        'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',\n        'api': 'https://api.zaif.jp',\n        'www': 'https://zaif.jp',\n        'doc': ['https://techbureau-api-document.readthedocs.io/ja/latest/index.html', 'https://corp.zaif.jp/api-docs', 'https://corp.zaif.jp/api-docs/api_links', 'https://www.npmjs.com/package/zaif.jp', 'https://github.com/you21979/node-zaif'],\n        'fees': 'https://zaif.jp/fee?lang=en'\n      },\n      'fees': {\n        'trading': {\n          'percentage': true,\n          'taker': 0.1 / 100,\n          'maker': 0\n        }\n      },\n      'api': {\n        'public': {\n          'get': ['depth/{pair}', 'currencies/{pair}', 'currencies/all', 'currency_pairs/{pair}', 'currency_pairs/all', 'last_price/{pair}', 'ticker/{pair}', 'trades/{pair}']\n        },\n        'private': {\n          'post': ['active_orders', 'cancel_order', 'deposit_history', 'get_id_info', 'get_info', 'get_info2', 'get_personal_info', 'trade', 'trade_history', 'withdraw', 'withdraw_history']\n        },\n        'ecapi': {\n          'post': ['createInvoice', 'getInvoice', 'getInvoiceIdsByOrderNumber', 'cancelInvoice']\n        },\n        'tlapi': {\n          'post': ['get_positions', 'position_history', 'active_positions', 'create_position', 'change_position', 'cancel_position']\n        },\n        'fapi': {\n          'get': ['groups/{group_id}', 'last_price/{group_id}/{pair}', 'ticker/{group_id}/{pair}', 'trades/{group_id}/{pair}', 'depth/{group_id}/{pair}']\n        }\n      },\n      'options': {\n        // zaif schedule defines several market-specific fees\n        'fees': {\n          'BTC/JPY': {\n            'maker': 0,\n            'taker': 0\n          },\n          'BCH/JPY': {\n            'maker': 0,\n            'taker': 0.3 / 100\n          },\n          'BCH/BTC': {\n            'maker': 0,\n            'taker': 0.3 / 100\n          },\n          'PEPECASH/JPY': {\n            'maker': 0,\n            'taker': 0.01 / 100\n          },\n          'PEPECASH/BT': {\n            'maker': 0,\n            'taker': 0.01 / 100\n          }\n        }\n      },\n      'exceptions': {\n        'exact': {\n          'unsupported currency_pair': BadRequest // {\"error\": \"unsupported currency_pair\"}\n\n        },\n        'broad': {}\n      }\n    });\n  }\n\n  async fetchMarkets(params = {}) {\n    const markets = await this.publicGetCurrencyPairsAll(params); //\n    //     [\n    //         {\n    //             \"aux_unit_point\": 0,\n    //             \"item_japanese\": \"\\u30d3\\u30c3\\u30c8\\u30b3\\u30a4\\u30f3\",\n    //             \"aux_unit_step\": 5.0,\n    //             \"description\": \"\\u30d3\\u30c3\\u30c8\\u30b3\\u30a4\\u30f3\\u30fb\\u65e5\\u672c\\u5186\\u306e\\u53d6\\u5f15\\u3092\\u884c\\u3046\\u3053\\u3068\\u304c\\u3067\\u304d\\u307e\\u3059\",\n    //             \"item_unit_min\": 0.001,\n    //             \"event_number\": 0,\n    //             \"currency_pair\": \"btc_jpy\",\n    //             \"is_token\": false,\n    //             \"aux_unit_min\": 5.0,\n    //             \"aux_japanese\": \"\\u65e5\\u672c\\u5186\",\n    //             \"id\": 1,\n    //             \"item_unit_step\": 0.0001,\n    //             \"name\": \"BTC/JPY\",\n    //             \"seq\": 0,\n    //             \"title\": \"BTC/JPY\"\n    //         }\n    //     ]\n    //\n\n    const result = [];\n\n    for (let i = 0; i < markets.length; i++) {\n      const market = markets[i];\n      const id = this.safeString(market, 'currency_pair');\n      const name = this.safeString(market, 'name');\n      const [baseId, quoteId] = name.split('/');\n      const base = this.safeCurrencyCode(baseId);\n      const quote = this.safeCurrencyCode(quoteId);\n      const symbol = base + '/' + quote;\n      const precision = {\n        'amount': -Math.log10(this.safeNumber(market, 'item_unit_step')),\n        'price': this.safeInteger(market, 'aux_unit_point')\n      };\n      const fees = this.safeValue(this.options['fees'], symbol, this.fees['trading']);\n      const taker = fees['taker'];\n      const maker = fees['maker'];\n      result.push({\n        'id': id,\n        'symbol': symbol,\n        'base': base,\n        'quote': quote,\n        'baseId': baseId,\n        'quoteId': quoteId,\n        'active': true,\n        // can trade or not\n        'precision': precision,\n        'taker': taker,\n        'maker': maker,\n        'limits': {\n          'amount': {\n            'min': this.safeNumber(market, 'item_unit_min'),\n            'max': undefined\n          },\n          'price': {\n            'min': this.safeNumber(market, 'aux_unit_min'),\n            'max': undefined\n          },\n          'cost': {\n            'min': undefined,\n            'max': undefined\n          }\n        },\n        'info': market\n      });\n    }\n\n    return result;\n  }\n\n  async fetchBalance(params = {}) {\n    await this.loadMarkets();\n    const response = await this.privatePostGetInfo(params);\n    const balances = this.safeValue(response, 'return', {});\n    const deposit = this.safeValue(balances, 'deposit');\n    const result = {\n      'info': response,\n      'timestamp': undefined,\n      'datetime': undefined\n    };\n    const funds = this.safeValue(balances, 'funds', {});\n    const currencyIds = Object.keys(funds);\n\n    for (let i = 0; i < currencyIds.length; i++) {\n      const currencyId = currencyIds[i];\n      const code = this.safeCurrencyCode(currencyId);\n      const balance = this.safeString(funds, currencyId);\n      const account = this.account();\n      account['free'] = balance;\n      account['total'] = balance;\n\n      if (deposit !== undefined) {\n        if (currencyId in deposit) {\n          account['total'] = this.safeString(deposit, currencyId);\n        }\n      }\n\n      result[code] = account;\n    }\n\n    return this.parseBalance(result, false);\n  }\n\n  async fetchOrderBook(symbol, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const response = await this.publicGetDepthPair(this.extend(request, params));\n    return this.parseOrderBook(response, symbol);\n  }\n\n  async fetchTicker(symbol, params = {}) {\n    await this.loadMarkets();\n    const request = {\n      'pair': this.marketId(symbol)\n    };\n    const ticker = await this.publicGetTickerPair(this.extend(request, params));\n    const timestamp = this.milliseconds();\n    const vwap = this.safeNumber(ticker, 'vwap');\n    const baseVolume = this.safeNumber(ticker, 'volume');\n    let quoteVolume = undefined;\n\n    if (baseVolume !== undefined && vwap !== undefined) {\n      quoteVolume = baseVolume * vwap;\n    }\n\n    const last = this.safeNumber(ticker, 'last');\n    return {\n      'symbol': symbol,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'high': this.safeNumber(ticker, 'high'),\n      'low': this.safeNumber(ticker, 'low'),\n      'bid': this.safeNumber(ticker, 'bid'),\n      'bidVolume': undefined,\n      'ask': this.safeNumber(ticker, 'ask'),\n      'askVolume': undefined,\n      'vwap': vwap,\n      'open': undefined,\n      'close': last,\n      'last': last,\n      'previousClose': undefined,\n      'change': undefined,\n      'percentage': undefined,\n      'average': undefined,\n      'baseVolume': baseVolume,\n      'quoteVolume': quoteVolume,\n      'info': ticker\n    };\n  }\n\n  parseTrade(trade, market = undefined) {\n    let side = this.safeString(trade, 'trade_type');\n    side = side === 'bid' ? 'buy' : 'sell';\n    const timestamp = this.safeTimestamp(trade, 'date');\n    const id = this.safeString2(trade, 'id', 'tid');\n    const priceString = this.safeString(trade, 'price');\n    const amountString = this.safeString(trade, 'amount');\n    const price = this.parseNumber(priceString);\n    const amount = this.parseNumber(amountString);\n    const cost = this.parseNumber(Precise.stringMul(priceString, amountString));\n    const marketId = this.safeString(trade, 'currency_pair');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    return {\n      'id': id,\n      'info': trade,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'symbol': symbol,\n      'type': undefined,\n      'side': side,\n      'order': undefined,\n      'takerOrMaker': undefined,\n      'price': price,\n      'amount': amount,\n      'cost': cost,\n      'fee': undefined\n    };\n  }\n\n  async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    const market = this.market(symbol);\n    const request = {\n      'pair': market['id']\n    };\n    let response = await this.publicGetTradesPair(this.extend(request, params));\n    const numTrades = response.length;\n\n    if (numTrades === 1) {\n      const firstTrade = response[0];\n\n      if (!Object.keys(firstTrade).length) {\n        response = [];\n      }\n    }\n\n    return this.parseTrades(response, market, since, limit);\n  }\n\n  async createOrder(symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets();\n\n    if (type !== 'limit') {\n      throw new ExchangeError(this.id + ' allows limit orders only');\n    }\n\n    const request = {\n      'currency_pair': this.marketId(symbol),\n      'action': side === 'buy' ? 'bid' : 'ask',\n      'amount': amount,\n      'price': price\n    };\n    const response = await this.privatePostTrade(this.extend(request, params));\n    return {\n      'info': response,\n      'id': response['return']['order_id'].toString()\n    };\n  }\n\n  async cancelOrder(id, symbol = undefined, params = {}) {\n    const request = {\n      'order_id': id\n    };\n    return await this.privatePostCancelOrder(this.extend(request, params));\n  }\n\n  parseOrder(order, market = undefined) {\n    //\n    //     {\n    //         \"currency_pair\": \"btc_jpy\",\n    //         \"action\": \"ask\",\n    //         \"amount\": 0.03,\n    //         \"price\": 56000,\n    //         \"timestamp\": 1402021125,\n    //         \"comment\" : \"demo\"\n    //     }\n    //\n    let side = this.safeString(order, 'action');\n    side = side === 'bid' ? 'buy' : 'sell';\n    const timestamp = this.safeTimestamp(order, 'timestamp');\n    const marketId = this.safeString(order, 'currency_pair');\n    const symbol = this.safeSymbol(marketId, market, '_');\n    const price = this.safeNumber(order, 'price');\n    const amount = this.safeNumber(order, 'amount');\n    const id = this.safeString(order, 'id');\n    return this.safeOrder({\n      'id': id,\n      'clientOrderId': undefined,\n      'timestamp': timestamp,\n      'datetime': this.iso8601(timestamp),\n      'lastTradeTimestamp': undefined,\n      'status': 'open',\n      'symbol': symbol,\n      'type': 'limit',\n      'timeInForce': undefined,\n      'postOnly': undefined,\n      'side': side,\n      'price': price,\n      'stopPrice': undefined,\n      'cost': undefined,\n      'amount': amount,\n      'filled': undefined,\n      'remaining': undefined,\n      'trades': undefined,\n      'fee': undefined,\n      'info': order,\n      'average': undefined\n    });\n  }\n\n  async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {// 'is_token': false,\n      // 'is_token_both': false,\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['currency_pair'] = market['id'];\n    }\n\n    const response = await this.privatePostActiveOrders(this.extend(request, params));\n    return this.parseOrders(response['return'], market, since, limit);\n  }\n\n  async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {\n    await this.loadMarkets();\n    let market = undefined;\n    const request = {// 'from': 0,\n      // 'count': 1000,\n      // 'from_id': 0,\n      // 'end_id': 1000,\n      // 'order': 'DESC',\n      // 'since': 1503821051,\n      // 'end': 1503821051,\n      // 'is_token': false,\n    };\n\n    if (symbol !== undefined) {\n      market = this.market(symbol);\n      request['currency_pair'] = market['id'];\n    }\n\n    const response = await this.privatePostTradeHistory(this.extend(request, params));\n    return this.parseOrders(response['return'], market, since, limit);\n  }\n\n  async withdraw(code, amount, address, tag = undefined, params = {}) {\n    this.checkAddress(address);\n    await this.loadMarkets();\n    const currency = this.currency(code);\n\n    if (code === 'JPY') {\n      throw new ExchangeError(this.id + ' withdraw() does not allow ' + code + ' withdrawals');\n    }\n\n    const request = {\n      'currency': currency['id'],\n      'amount': amount,\n      'address': address // 'message': 'Hi!', // XEM and others\n      // 'opt_fee': 0.003, // BTC and MONA only\n\n    };\n\n    if (tag !== undefined) {\n      request['message'] = tag;\n    }\n\n    const result = await this.privatePostWithdraw(this.extend(request, params));\n    return {\n      'info': result,\n      'id': result['return']['txid'],\n      'fee': result['return']['fee']\n    };\n  }\n\n  nonce() {\n    const nonce = parseFloat(this.milliseconds() / 1000);\n    return nonce.toFixed(8);\n  }\n\n  sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'] + '/';\n\n    if (api === 'public') {\n      url += 'api/' + this.version + '/' + this.implodeParams(path, params);\n    } else if (api === 'fapi') {\n      url += 'fapi/' + this.version + '/' + this.implodeParams(path, params);\n    } else {\n      this.checkRequiredCredentials();\n\n      if (api === 'ecapi') {\n        url += 'ecapi';\n      } else if (api === 'tlapi') {\n        url += 'tlapi';\n      } else {\n        url += 'tapi';\n      }\n\n      const nonce = this.nonce();\n      body = this.urlencode(this.extend({\n        'method': path,\n        'nonce': nonce\n      }, params));\n      headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Key': this.apiKey,\n        'Sign': this.hmac(this.encode(body), this.encode(this.secret), 'sha512')\n      };\n    }\n\n    return {\n      'url': url,\n      'method': method,\n      'body': body,\n      'headers': headers\n    };\n  }\n\n  handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n    if (response === undefined) {\n      return;\n    } //\n    //     {\"error\": \"unsupported currency_pair\"}\n    //\n\n\n    const feedback = this.id + ' ' + body;\n    const error = this.safeString(response, 'error');\n\n    if (error !== undefined) {\n      this.throwExactlyMatchedException(this.exceptions['exact'], error, feedback);\n      this.throwBroadlyMatchedException(this.exceptions['broad'], error, feedback);\n      throw new ExchangeError(feedback); // unknown message\n    }\n\n    const success = this.safeValue(response, 'success', true);\n\n    if (!success) {\n      throw new ExchangeError(feedback);\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/James Price/Documents/VS Code/bixpro/node_modules/ccxt/js/zaif.js"],"names":["Exchange","require","ExchangeError","BadRequest","Precise","module","exports","zaif","describe","deepExtend","fetchMarkets","params","markets","publicGetCurrencyPairsAll","result","i","length","market","id","safeString","name","baseId","quoteId","split","base","safeCurrencyCode","quote","symbol","precision","Math","log10","safeNumber","safeInteger","fees","safeValue","options","taker","maker","push","undefined","fetchBalance","loadMarkets","response","privatePostGetInfo","balances","deposit","funds","currencyIds","Object","keys","currencyId","code","balance","account","parseBalance","fetchOrderBook","limit","request","marketId","publicGetDepthPair","extend","parseOrderBook","fetchTicker","ticker","publicGetTickerPair","timestamp","milliseconds","vwap","baseVolume","quoteVolume","last","iso8601","parseTrade","trade","side","safeTimestamp","safeString2","priceString","amountString","price","parseNumber","amount","cost","stringMul","safeSymbol","fetchTrades","since","publicGetTradesPair","numTrades","firstTrade","parseTrades","createOrder","type","privatePostTrade","toString","cancelOrder","privatePostCancelOrder","parseOrder","order","safeOrder","fetchOpenOrders","privatePostActiveOrders","parseOrders","fetchClosedOrders","privatePostTradeHistory","withdraw","address","tag","checkAddress","currency","privatePostWithdraw","nonce","parseFloat","toFixed","sign","path","api","method","headers","body","url","urls","version","implodeParams","checkRequiredCredentials","urlencode","apiKey","hmac","encode","secret","handleErrors","httpCode","reason","requestHeaders","requestBody","feedback","error","throwExactlyMatchedException","exceptions","throwBroadlyMatchedException","success"],"mappings":"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","sourcesContent":["'use strict';\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange');\nconst { ExchangeError, BadRequest } = require ('./base/errors');\nconst Precise = require ('./base/Precise');\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class zaif extends Exchange {\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'zaif',\n            'name': 'Zaif',\n            'countries': [ 'JP' ],\n            'rateLimit': 2000,\n            'version': '1',\n            'has': {\n                'cancelOrder': true,\n                'CORS': false,\n                'createMarketOrder': false,\n                'createOrder': true,\n                'fetchBalance': true,\n                'fetchClosedOrders': true,\n                'fetchMarkets': true,\n                'fetchOrderBook': true,\n                'fetchOpenOrders': true,\n                'fetchTicker': true,\n                'fetchTrades': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',\n                'api': 'https://api.zaif.jp',\n                'www': 'https://zaif.jp',\n                'doc': [\n                    'https://techbureau-api-document.readthedocs.io/ja/latest/index.html',\n                    'https://corp.zaif.jp/api-docs',\n                    'https://corp.zaif.jp/api-docs/api_links',\n                    'https://www.npmjs.com/package/zaif.jp',\n                    'https://github.com/you21979/node-zaif',\n                ],\n                'fees': 'https://zaif.jp/fee?lang=en',\n            },\n            'fees': {\n                'trading': {\n                    'percentage': true,\n                    'taker': 0.1 / 100,\n                    'maker': 0,\n                },\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'depth/{pair}',\n                        'currencies/{pair}',\n                        'currencies/all',\n                        'currency_pairs/{pair}',\n                        'currency_pairs/all',\n                        'last_price/{pair}',\n                        'ticker/{pair}',\n                        'trades/{pair}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'active_orders',\n                        'cancel_order',\n                        'deposit_history',\n                        'get_id_info',\n                        'get_info',\n                        'get_info2',\n                        'get_personal_info',\n                        'trade',\n                        'trade_history',\n                        'withdraw',\n                        'withdraw_history',\n                    ],\n                },\n                'ecapi': {\n                    'post': [\n                        'createInvoice',\n                        'getInvoice',\n                        'getInvoiceIdsByOrderNumber',\n                        'cancelInvoice',\n                    ],\n                },\n                'tlapi': {\n                    'post': [\n                        'get_positions',\n                        'position_history',\n                        'active_positions',\n                        'create_position',\n                        'change_position',\n                        'cancel_position',\n                    ],\n                },\n                'fapi': {\n                    'get': [\n                        'groups/{group_id}',\n                        'last_price/{group_id}/{pair}',\n                        'ticker/{group_id}/{pair}',\n                        'trades/{group_id}/{pair}',\n                        'depth/{group_id}/{pair}',\n                    ],\n                },\n            },\n            'options': {\n                // zaif schedule defines several market-specific fees\n                'fees': {\n                    'BTC/JPY': { 'maker': 0, 'taker': 0 },\n                    'BCH/JPY': { 'maker': 0, 'taker': 0.3 / 100 },\n                    'BCH/BTC': { 'maker': 0, 'taker': 0.3 / 100 },\n                    'PEPECASH/JPY': { 'maker': 0, 'taker': 0.01 / 100 },\n                    'PEPECASH/BT': { 'maker': 0, 'taker': 0.01 / 100 },\n                },\n            },\n            'exceptions': {\n                'exact': {\n                    'unsupported currency_pair': BadRequest, // {\"error\": \"unsupported currency_pair\"}\n                },\n                'broad': {\n                },\n            },\n        });\n    }\n\n    async fetchMarkets (params = {}) {\n        const markets = await this.publicGetCurrencyPairsAll (params);\n        //\n        //     [\n        //         {\n        //             \"aux_unit_point\": 0,\n        //             \"item_japanese\": \"\\u30d3\\u30c3\\u30c8\\u30b3\\u30a4\\u30f3\",\n        //             \"aux_unit_step\": 5.0,\n        //             \"description\": \"\\u30d3\\u30c3\\u30c8\\u30b3\\u30a4\\u30f3\\u30fb\\u65e5\\u672c\\u5186\\u306e\\u53d6\\u5f15\\u3092\\u884c\\u3046\\u3053\\u3068\\u304c\\u3067\\u304d\\u307e\\u3059\",\n        //             \"item_unit_min\": 0.001,\n        //             \"event_number\": 0,\n        //             \"currency_pair\": \"btc_jpy\",\n        //             \"is_token\": false,\n        //             \"aux_unit_min\": 5.0,\n        //             \"aux_japanese\": \"\\u65e5\\u672c\\u5186\",\n        //             \"id\": 1,\n        //             \"item_unit_step\": 0.0001,\n        //             \"name\": \"BTC/JPY\",\n        //             \"seq\": 0,\n        //             \"title\": \"BTC/JPY\"\n        //         }\n        //     ]\n        //\n        const result = [];\n        for (let i = 0; i < markets.length; i++) {\n            const market = markets[i];\n            const id = this.safeString (market, 'currency_pair');\n            const name = this.safeString (market, 'name');\n            const [ baseId, quoteId ] = name.split ('/');\n            const base = this.safeCurrencyCode (baseId);\n            const quote = this.safeCurrencyCode (quoteId);\n            const symbol = base + '/' + quote;\n            const precision = {\n                'amount': -Math.log10 (this.safeNumber (market, 'item_unit_step')),\n                'price': this.safeInteger (market, 'aux_unit_point'),\n            };\n            const fees = this.safeValue (this.options['fees'], symbol, this.fees['trading']);\n            const taker = fees['taker'];\n            const maker = fees['maker'];\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true, // can trade or not\n                'precision': precision,\n                'taker': taker,\n                'maker': maker,\n                'limits': {\n                    'amount': {\n                        'min': this.safeNumber (market, 'item_unit_min'),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': this.safeNumber (market, 'aux_unit_min'),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        const response = await this.privatePostGetInfo (params);\n        const balances = this.safeValue (response, 'return', {});\n        const deposit = this.safeValue (balances, 'deposit');\n        const result = {\n            'info': response,\n            'timestamp': undefined,\n            'datetime': undefined,\n        };\n        const funds = this.safeValue (balances, 'funds', {});\n        const currencyIds = Object.keys (funds);\n        for (let i = 0; i < currencyIds.length; i++) {\n            const currencyId = currencyIds[i];\n            const code = this.safeCurrencyCode (currencyId);\n            const balance = this.safeString (funds, currencyId);\n            const account = this.account ();\n            account['free'] = balance;\n            account['total'] = balance;\n            if (deposit !== undefined) {\n                if (currencyId in deposit) {\n                    account['total'] = this.safeString (deposit, currencyId);\n                }\n            }\n            result[code] = account;\n        }\n        return this.parseBalance (result, false);\n    }\n\n    async fetchOrderBook (symbol, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const response = await this.publicGetDepthPair (this.extend (request, params));\n        return this.parseOrderBook (response, symbol);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        const request = {\n            'pair': this.marketId (symbol),\n        };\n        const ticker = await this.publicGetTickerPair (this.extend (request, params));\n        const timestamp = this.milliseconds ();\n        const vwap = this.safeNumber (ticker, 'vwap');\n        const baseVolume = this.safeNumber (ticker, 'volume');\n        let quoteVolume = undefined;\n        if (baseVolume !== undefined && vwap !== undefined) {\n            quoteVolume = baseVolume * vwap;\n        }\n        const last = this.safeNumber (ticker, 'last');\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeNumber (ticker, 'high'),\n            'low': this.safeNumber (ticker, 'low'),\n            'bid': this.safeNumber (ticker, 'bid'),\n            'bidVolume': undefined,\n            'ask': this.safeNumber (ticker, 'ask'),\n            'askVolume': undefined,\n            'vwap': vwap,\n            'open': undefined,\n            'close': last,\n            'last': last,\n            'previousClose': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let side = this.safeString (trade, 'trade_type');\n        side = (side === 'bid') ? 'buy' : 'sell';\n        const timestamp = this.safeTimestamp (trade, 'date');\n        const id = this.safeString2 (trade, 'id', 'tid');\n        const priceString = this.safeString (trade, 'price');\n        const amountString = this.safeString (trade, 'amount');\n        const price = this.parseNumber (priceString);\n        const amount = this.parseNumber (amountString);\n        const cost = this.parseNumber (Precise.stringMul (priceString, amountString));\n        const marketId = this.safeString (trade, 'currency_pair');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'order': undefined,\n            'takerOrMaker': undefined,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        const market = this.market (symbol);\n        const request = {\n            'pair': market['id'],\n        };\n        let response = await this.publicGetTradesPair (this.extend (request, params));\n        const numTrades = response.length;\n        if (numTrades === 1) {\n            const firstTrade = response[0];\n            if (!Object.keys (firstTrade).length) {\n                response = [];\n            }\n        }\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type !== 'limit') {\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        }\n        const request = {\n            'currency_pair': this.marketId (symbol),\n            'action': (side === 'buy') ? 'bid' : 'ask',\n            'amount': amount,\n            'price': price,\n        };\n        const response = await this.privatePostTrade (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['return']['order_id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        const request = {\n            'order_id': id,\n        };\n        return await this.privatePostCancelOrder (this.extend (request, params));\n    }\n\n    parseOrder (order, market = undefined) {\n        //\n        //     {\n        //         \"currency_pair\": \"btc_jpy\",\n        //         \"action\": \"ask\",\n        //         \"amount\": 0.03,\n        //         \"price\": 56000,\n        //         \"timestamp\": 1402021125,\n        //         \"comment\" : \"demo\"\n        //     }\n        //\n        let side = this.safeString (order, 'action');\n        side = (side === 'bid') ? 'buy' : 'sell';\n        const timestamp = this.safeTimestamp (order, 'timestamp');\n        const marketId = this.safeString (order, 'currency_pair');\n        const symbol = this.safeSymbol (marketId, market, '_');\n        const price = this.safeNumber (order, 'price');\n        const amount = this.safeNumber (order, 'amount');\n        const id = this.safeString (order, 'id');\n        return this.safeOrder ({\n            'id': id,\n            'clientOrderId': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'lastTradeTimestamp': undefined,\n            'status': 'open',\n            'symbol': symbol,\n            'type': 'limit',\n            'timeInForce': undefined,\n            'postOnly': undefined,\n            'side': side,\n            'price': price,\n            'stopPrice': undefined,\n            'cost': undefined,\n            'amount': amount,\n            'filled': undefined,\n            'remaining': undefined,\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n            'average': undefined,\n        });\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            // 'is_token': false,\n            // 'is_token_both': false,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['currency_pair'] = market['id'];\n        }\n        const response = await this.privatePostActiveOrders (this.extend (request, params));\n        return this.parseOrders (response['return'], market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        const request = {\n            // 'from': 0,\n            // 'count': 1000,\n            // 'from_id': 0,\n            // 'end_id': 1000,\n            // 'order': 'DESC',\n            // 'since': 1503821051,\n            // 'end': 1503821051,\n            // 'is_token': false,\n        };\n        if (symbol !== undefined) {\n            market = this.market (symbol);\n            request['currency_pair'] = market['id'];\n        }\n        const response = await this.privatePostTradeHistory (this.extend (request, params));\n        return this.parseOrders (response['return'], market, since, limit);\n    }\n\n    async withdraw (code, amount, address, tag = undefined, params = {}) {\n        this.checkAddress (address);\n        await this.loadMarkets ();\n        const currency = this.currency (code);\n        if (code === 'JPY') {\n            throw new ExchangeError (this.id + ' withdraw() does not allow ' + code + ' withdrawals');\n        }\n        const request = {\n            'currency': currency['id'],\n            'amount': amount,\n            'address': address,\n            // 'message': 'Hi!', // XEM and others\n            // 'opt_fee': 0.003, // BTC and MONA only\n        };\n        if (tag !== undefined) {\n            request['message'] = tag;\n        }\n        const result = await this.privatePostWithdraw (this.extend (request, params));\n        return {\n            'info': result,\n            'id': result['return']['txid'],\n            'fee': result['return']['fee'],\n        };\n    }\n\n    nonce () {\n        const nonce = parseFloat (this.milliseconds () / 1000);\n        return nonce.toFixed (8);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/';\n        if (api === 'public') {\n            url += 'api/' + this.version + '/' + this.implodeParams (path, params);\n        } else if (api === 'fapi') {\n            url += 'fapi/' + this.version + '/' + this.implodeParams (path, params);\n        } else {\n            this.checkRequiredCredentials ();\n            if (api === 'ecapi') {\n                url += 'ecapi';\n            } else if (api === 'tlapi') {\n                url += 'tlapi';\n            } else {\n                url += 'tapi';\n            }\n            const nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'method': path,\n                'nonce': nonce,\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {\n        if (response === undefined) {\n            return;\n        }\n        //\n        //     {\"error\": \"unsupported currency_pair\"}\n        //\n        const feedback = this.id + ' ' + body;\n        const error = this.safeString (response, 'error');\n        if (error !== undefined) {\n            this.throwExactlyMatchedException (this.exceptions['exact'], error, feedback);\n            this.throwBroadlyMatchedException (this.exceptions['broad'], error, feedback);\n            throw new ExchangeError (feedback); // unknown message\n        }\n        const success = this.safeValue (response, 'success', true);\n        if (!success) {\n            throw new ExchangeError (feedback);\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}